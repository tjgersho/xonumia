var app =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	//var Global = require('./Global');


	//if ( /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ) {
	//  Global.mobile = true;
	//}


	//var $ = require('jquery');
	__webpack_require__(1);
	__webpack_require__(5);
	__webpack_require__(6);
	__webpack_require__(7);

	/////Angular App -- XonumiaJSApp///////////


	/// Custom Modules...

	angular.module('Controllers', []);

	angular.module('Services', []);

	angular.module('Directives', []);

	angular.module('Filters', []);

	////Services////
	__webpack_require__(9).service();
	__webpack_require__(10).service();
	__webpack_require__(11).service();
	__webpack_require__(12).service();
	__webpack_require__(13).service();
	__webpack_require__(14).service();
	__webpack_require__(15).service();
	__webpack_require__(16).service();
	__webpack_require__(17).service();
	__webpack_require__(18).service();

	///Controllers///
	__webpack_require__(19).controller();
	__webpack_require__(20).controller();
	__webpack_require__(81).controller();
	__webpack_require__(82).controller();
	__webpack_require__(83).controller();
	__webpack_require__(85).controller();
	__webpack_require__(86).controller();
	__webpack_require__(87).controller();
	__webpack_require__(88).controller();
	__webpack_require__(89).controller();
	__webpack_require__(90).controller();
	__webpack_require__(91).controller();
	__webpack_require__(92).controller();
	__webpack_require__(93).controller();
	__webpack_require__(94).controller();
	__webpack_require__(95).controller();
	__webpack_require__(96).controller();
	__webpack_require__(97).controller();
	__webpack_require__(98).controller();
	__webpack_require__(99).controller();

	///Directives///

	__webpack_require__(100).directive();
	__webpack_require__(101).directive();
	__webpack_require__(102).directive();
	__webpack_require__(103).directive();
	__webpack_require__(104).directive();
	__webpack_require__(105).directive();
	__webpack_require__(106).directive();
	__webpack_require__(107).directive();
	__webpack_require__(108).directive();
	__webpack_require__(109).directive();
	__webpack_require__(110).directive();
	__webpack_require__(111).directive();
	__webpack_require__(116).directive();
	__webpack_require__(117).directive();
	__webpack_require__(118).directive();
	__webpack_require__(119).directive();
	__webpack_require__(121).directive();
	__webpack_require__(122).directive();
	__webpack_require__(123).directive();
	__webpack_require__(124).directive();
	__webpack_require__(125).directive();
	__webpack_require__(126).directive();
	__webpack_require__(127).directive();
	__webpack_require__(128).directive();
	__webpack_require__(129).directive();
	__webpack_require__(130).directive();

	/// FILTERS ///

	__webpack_require__(131).filter();

	/////////////

	var XonumiaJSApp = angular.module('XonumiaJSApp', ['ui.router', 'ngStorage', 'ngSanitize', 'Services', 'Controllers', 'Directives', 'Filters']);

	__webpack_require__(132).frontroutes(XonumiaJSApp);

	/////////////////////////////

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(2);
	module.exports = angular;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery) {'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/**
	 * @license AngularJS v1.6.0
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */(function(window){'use strict';/**
	 * @description
	 *
	 * This object provides a utility for producing rich Error messages within
	 * Angular. It can be called as follows:
	 *
	 * var exampleMinErr = minErr('example');
	 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
	 *
	 * The above creates an instance of minErr in the example namespace. The
	 * resulting error will have a namespaced error code of example.one.  The
	 * resulting error will replace {0} with the value of foo, and {1} with the
	 * value of bar. The object is not restricted in the number of arguments it can
	 * take.
	 *
	 * If fewer arguments are specified than necessary for interpolation, the extra
	 * interpolation markers will be preserved in the final string.
	 *
	 * Since data will be parsed statically during a build step, some restrictions
	 * are applied with respect to how minErr instances are created and called.
	 * Instances should have names of the form namespaceMinErr for a minErr created
	 * using minErr('namespace') . Error codes, namespaces and template strings
	 * should all be static strings, not variables or general expressions.
	 *
	 * @param {string} module The namespace to use for the new minErr instance.
	 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
	 *   error from returned function, for cases when a particular type of error is useful.
	 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
	 */function minErr(module,ErrorConstructor){ErrorConstructor=ErrorConstructor||Error;return function(){var SKIP_INDEXES=2;var templateArgs=arguments,code=templateArgs[0],message='['+(module?module+':':'')+code+'] ',template=templateArgs[1],paramPrefix,i;message+=template.replace(/\{\d+\}/g,function(match){var index=+match.slice(1,-1),shiftedIndex=index+SKIP_INDEXES;if(shiftedIndex<templateArgs.length){return toDebugString(templateArgs[shiftedIndex]);}return match;});message+='\nhttp://errors.angularjs.org/1.6.0/'+(module?module+'/':'')+code;for(i=SKIP_INDEXES,paramPrefix='?';i<templateArgs.length;i++,paramPrefix='&'){message+=paramPrefix+'p'+(i-SKIP_INDEXES)+'='+encodeURIComponent(toDebugString(templateArgs[i]));}return new ErrorConstructor(message);};}/* We need to tell ESLint what variables are being exported *//* exported
	  angular,
	  msie,
	  jqLite,
	  jQuery,
	  slice,
	  splice,
	  push,
	  toString,
	  ngMinErr,
	  angularModule,
	  uid,
	  REGEX_STRING_REGEXP,
	  VALIDITY_STATE_PROPERTY,

	  lowercase,
	  uppercase,
	  manualLowercase,
	  manualUppercase,
	  nodeName_,
	  isArrayLike,
	  forEach,
	  forEachSorted,
	  reverseParams,
	  nextUid,
	  setHashKey,
	  extend,
	  toInt,
	  inherit,
	  merge,
	  noop,
	  identity,
	  valueFn,
	  isUndefined,
	  isDefined,
	  isObject,
	  isBlankObject,
	  isString,
	  isNumber,
	  isNumberNaN,
	  isDate,
	  isArray,
	  isFunction,
	  isRegExp,
	  isWindow,
	  isScope,
	  isFile,
	  isFormData,
	  isBlob,
	  isBoolean,
	  isPromiseLike,
	  trim,
	  escapeForRegexp,
	  isElement,
	  makeMap,
	  includes,
	  arrayRemove,
	  copy,
	  equals,
	  csp,
	  jq,
	  concat,
	  sliceArgs,
	  bind,
	  toJsonReplacer,
	  toJson,
	  fromJson,
	  convertTimezoneToLocal,
	  timezoneToOffset,
	  startingTag,
	  tryDecodeURIComponent,
	  parseKeyValue,
	  toKeyValue,
	  encodeUriSegment,
	  encodeUriQuery,
	  angularInit,
	  bootstrap,
	  getTestability,
	  snake_case,
	  bindJQuery,
	  assertArg,
	  assertArgFn,
	  assertNotHasOwnProperty,
	  getter,
	  getBlockNodes,
	  hasOwnProperty,
	  createMap,
	  stringify,

	  NODE_TYPE_ELEMENT,
	  NODE_TYPE_ATTRIBUTE,
	  NODE_TYPE_TEXT,
	  NODE_TYPE_COMMENT,
	  NODE_TYPE_DOCUMENT,
	  NODE_TYPE_DOCUMENT_FRAGMENT
	*/////////////////////////////////////
	/**
	 * @ngdoc module
	 * @name ng
	 * @module ng
	 * @installation
	 * @description
	 *
	 * # ng (core module)
	 * The ng module is loaded by default when an AngularJS application is started. The module itself
	 * contains the essential components for an AngularJS application to function. The table below
	 * lists a high level breakdown of each of the services/factories, filters, directives and testing
	 * components available within this core module.
	 *
	 * <div doc-module-components="ng"></div>
	 */var REGEX_STRING_REGEXP=/^\/(.+)\/([a-z]*)$/;// The name of a form control's ValidityState property.
	// This is used so that it's possible for internal tests to create mock ValidityStates.
	var VALIDITY_STATE_PROPERTY='validity';var hasOwnProperty=Object.prototype.hasOwnProperty;/**
	 * @ngdoc function
	 * @name angular.lowercase
	 * @module ng
	 * @kind function
	 *
	 * @deprecated
	 * sinceVersion="1.5.0"
	 * removeVersion="1.7.0"
	 * Use [String.prototype.toLowerCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) instead.
	 *
	 * @description Converts the specified string to lowercase.
	 * @param {string} string String to be converted to lowercase.
	 * @returns {string} Lowercased string.
	 */var lowercase=function lowercase(string){return isString(string)?string.toLowerCase():string;};/**
	 * @ngdoc function
	 * @name angular.uppercase
	 * @module ng
	 * @kind function
	 *
	 * @deprecated
	 * sinceVersion="1.5.0"
	 * removeVersion="1.7.0"
	 * Use [String.prototype.toUpperCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) instead.
	 *
	 * @description Converts the specified string to uppercase.
	 * @param {string} string String to be converted to uppercase.
	 * @returns {string} Uppercased string.
	 */var uppercase=function uppercase(string){return isString(string)?string.toUpperCase():string;};var manualLowercase=function manualLowercase(s){/* eslint-disable no-bitwise */return isString(s)?s.replace(/[A-Z]/g,function(ch){return String.fromCharCode(ch.charCodeAt(0)|32);}):s;/* eslint-enable */};var manualUppercase=function manualUppercase(s){/* eslint-disable no-bitwise */return isString(s)?s.replace(/[a-z]/g,function(ch){return String.fromCharCode(ch.charCodeAt(0)&~32);}):s;/* eslint-enable */};// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
	// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
	// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
	if('i'!=='I'.toLowerCase()){lowercase=manualLowercase;uppercase=manualUppercase;}var msie,// holds major version number for IE, or NaN if UA is not IE.
	jqLite,// delay binding since jQuery could be loaded after us.
	jQuery,// delay binding
	slice=[].slice,splice=[].splice,push=[].push,toString=Object.prototype.toString,getPrototypeOf=Object.getPrototypeOf,ngMinErr=minErr('ng'),/** @name angular */angular=window.angular||(window.angular={}),angularModule,uid=0;// Support: IE 9-11 only
	/**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */msie=window.document.documentMode;/**
	 * @private
	 * @param {*} obj
	 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
	 *                   String ...)
	 */function isArrayLike(obj){// `null`, `undefined` and `window` are not array-like
	if(obj==null||isWindow(obj))return false;// arrays, strings and jQuery/jqLite objects are array like
	// * jqLite is either the jQuery or jqLite constructor function
	// * we have to check the existence of jqLite first as this method is called
	//   via the forEach method when constructing the jqLite object in the first place
	if(isArray(obj)||isString(obj)||jqLite&&obj instanceof jqLite)return true;// Support: iOS 8.2 (not reproducible in simulator)
	// "length" in obj used to prevent JIT error (gh-11508)
	var length='length'in Object(obj)&&obj.length;// NodeList objects (with `item` method) and
	// other objects with suitable length characteristics are array-like
	return isNumber(length)&&(length>=0&&(length-1 in obj||obj instanceof Array)||typeof obj.item==='function');}/**
	 * @ngdoc function
	 * @name angular.forEach
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
	 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
	 * is the value of an object property or an array element, `key` is the object property key or
	 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
	 *
	 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
	 * using the `hasOwnProperty` method.
	 *
	 * Unlike ES262's
	 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
	 * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
	 * return the value provided.
	 *
	   ```js
	     var values = {name: 'misko', gender: 'male'};
	     var log = [];
	     angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
	     expect(log).toEqual(['name: misko', 'gender: male']);
	   ```
	 *
	 * @param {Object|Array} obj Object to iterate over.
	 * @param {Function} iterator Iterator function.
	 * @param {Object=} context Object to become context (`this`) for the iterator function.
	 * @returns {Object|Array} Reference to `obj`.
	 */function forEach(obj,iterator,context){var key,length;if(obj){if(isFunction(obj)){for(key in obj){if(key!=='prototype'&&key!=='length'&&key!=='name'&&obj.hasOwnProperty(key)){iterator.call(context,obj[key],key,obj);}}}else if(isArray(obj)||isArrayLike(obj)){var isPrimitive=(typeof obj==='undefined'?'undefined':_typeof(obj))!=='object';for(key=0,length=obj.length;key<length;key++){if(isPrimitive||key in obj){iterator.call(context,obj[key],key,obj);}}}else if(obj.forEach&&obj.forEach!==forEach){obj.forEach(iterator,context,obj);}else if(isBlankObject(obj)){// createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	for(key in obj){iterator.call(context,obj[key],key,obj);}}else if(typeof obj.hasOwnProperty==='function'){// Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
	for(key in obj){if(obj.hasOwnProperty(key)){iterator.call(context,obj[key],key,obj);}}}else{// Slow path for objects which do not have a method `hasOwnProperty`
	for(key in obj){if(hasOwnProperty.call(obj,key)){iterator.call(context,obj[key],key,obj);}}}}return obj;}function forEachSorted(obj,iterator,context){var keys=Object.keys(obj).sort();for(var i=0;i<keys.length;i++){iterator.call(context,obj[keys[i]],keys[i]);}return keys;}/**
	 * when using forEach the params are value, key, but it is often useful to have key, value.
	 * @param {function(string, *)} iteratorFn
	 * @returns {function(*, string)}
	 */function reverseParams(iteratorFn){return function(value,key){iteratorFn(key,value);};}/**
	 * A consistent way of creating unique IDs in angular.
	 *
	 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
	 * we hit number precision issues in JavaScript.
	 *
	 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
	 *
	 * @returns {number} an unique alpha-numeric string
	 */function nextUid(){return++uid;}/**
	 * Set or clear the hashkey for an object.
	 * @param obj object
	 * @param h the hashkey (!truthy to delete the hashkey)
	 */function setHashKey(obj,h){if(h){obj.$$hashKey=h;}else{delete obj.$$hashKey;}}function baseExtend(dst,objs,deep){var h=dst.$$hashKey;for(var i=0,ii=objs.length;i<ii;++i){var obj=objs[i];if(!isObject(obj)&&!isFunction(obj))continue;var keys=Object.keys(obj);for(var j=0,jj=keys.length;j<jj;j++){var key=keys[j];var src=obj[key];if(deep&&isObject(src)){if(isDate(src)){dst[key]=new Date(src.valueOf());}else if(isRegExp(src)){dst[key]=new RegExp(src);}else if(src.nodeName){dst[key]=src.cloneNode(true);}else if(isElement(src)){dst[key]=src.clone();}else{if(!isObject(dst[key]))dst[key]=isArray(src)?[]:{};baseExtend(dst[key],[src],true);}}else{dst[key]=src;}}}setHashKey(dst,h);return dst;}/**
	 * @ngdoc function
	 * @name angular.extend
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
	 *
	 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
	 * {@link angular.merge} for this.
	 *
	 * @param {Object} dst Destination object.
	 * @param {...Object} src Source object(s).
	 * @returns {Object} Reference to `dst`.
	 */function extend(dst){return baseExtend(dst,slice.call(arguments,1),false);}/**
	* @ngdoc function
	* @name angular.merge
	* @module ng
	* @kind function
	*
	* @description
	* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
	*
	* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
	* objects, performing a deep copy.
	*
	* @param {Object} dst Destination object.
	* @param {...Object} src Source object(s).
	* @returns {Object} Reference to `dst`.
	*/function merge(dst){return baseExtend(dst,slice.call(arguments,1),true);}function toInt(str){return parseInt(str,10);}var isNumberNaN=Number.isNaN||function isNumberNaN(num){// eslint-disable-next-line no-self-compare
	return num!==num;};function inherit(parent,extra){return extend(Object.create(parent),extra);}/**
	 * @ngdoc function
	 * @name angular.noop
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that performs no operations. This function can be useful when writing code in the
	 * functional style.
	   ```js
	     function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
	   ```
	 */function noop(){}noop.$inject=[];/**
	 * @ngdoc function
	 * @name angular.identity
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that returns its first argument. This function is useful when writing code in the
	 * functional style.
	 *
	   ```js
	   function transformer(transformationFn, value) {
	     return (transformationFn || angular.identity)(value);
	   };

	   // E.g.
	   function getResult(fn, input) {
	     return (fn || angular.identity)(input);
	   };

	   getResult(function(n) { return n * 2; }, 21);   // returns 42
	   getResult(null, 21);                            // returns 21
	   getResult(undefined, 21);                       // returns 21
	   ```
	 *
	 * @param {*} value to be returned.
	 * @returns {*} the value passed in.
	 */function identity($){return $;}identity.$inject=[];function valueFn(value){return function valueRef(){return value;};}function hasCustomToString(obj){return isFunction(obj.toString)&&obj.toString!==toString;}/**
	 * @ngdoc function
	 * @name angular.isUndefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is undefined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is undefined.
	 */function isUndefined(value){return typeof value==='undefined';}/**
	 * @ngdoc function
	 * @name angular.isDefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is defined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is defined.
	 */function isDefined(value){return typeof value!=='undefined';}/**
	 * @ngdoc function
	 * @name angular.isObject
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
	 * considered to be objects. Note that JavaScript arrays are objects.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Object` but not `null`.
	 */function isObject(value){// http://jsperf.com/isobject4
	return value!==null&&(typeof value==='undefined'?'undefined':_typeof(value))==='object';}/**
	 * Determine if a value is an object with a null prototype
	 *
	 * @returns {boolean} True if `value` is an `Object` with a null prototype
	 */function isBlankObject(value){return value!==null&&(typeof value==='undefined'?'undefined':_typeof(value))==='object'&&!getPrototypeOf(value);}/**
	 * @ngdoc function
	 * @name angular.isString
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `String`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `String`.
	 */function isString(value){return typeof value==='string';}/**
	 * @ngdoc function
	 * @name angular.isNumber
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Number`.
	 *
	 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
	 *
	 * If you wish to exclude these then you can use the native
	 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
	 * method.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Number`.
	 */function isNumber(value){return typeof value==='number';}/**
	 * @ngdoc function
	 * @name angular.isDate
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a value is a date.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Date`.
	 */function isDate(value){return toString.call(value)==='[object Date]';}/**
	 * @ngdoc function
	 * @name angular.isArray
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Array`. Alias of Array.isArray.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Array`.
	 */var isArray=Array.isArray;/**
	 * @ngdoc function
	 * @name angular.isFunction
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Function`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Function`.
	 */function isFunction(value){return typeof value==='function';}/**
	 * Determines if a value is a regular expression object.
	 *
	 * @private
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `RegExp`.
	 */function isRegExp(value){return toString.call(value)==='[object RegExp]';}/**
	 * Checks if `obj` is a window object.
	 *
	 * @private
	 * @param {*} obj Object to check
	 * @returns {boolean} True if `obj` is a window obj.
	 */function isWindow(obj){return obj&&obj.window===obj;}function isScope(obj){return obj&&obj.$evalAsync&&obj.$watch;}function isFile(obj){return toString.call(obj)==='[object File]';}function isFormData(obj){return toString.call(obj)==='[object FormData]';}function isBlob(obj){return toString.call(obj)==='[object Blob]';}function isBoolean(value){return typeof value==='boolean';}function isPromiseLike(obj){return obj&&isFunction(obj.then);}var TYPED_ARRAY_REGEXP=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/;function isTypedArray(value){return value&&isNumber(value.length)&&TYPED_ARRAY_REGEXP.test(toString.call(value));}function isArrayBuffer(obj){return toString.call(obj)==='[object ArrayBuffer]';}var trim=function trim(value){return isString(value)?value.trim():value;};// Copied from:
	// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
	// Prereq: s is a string.
	var escapeForRegexp=function escapeForRegexp(s){return s.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,'\\$1')// eslint-disable-next-line no-control-regex
	.replace(/\x08/g,'\\x08');};/**
	 * @ngdoc function
	 * @name angular.isElement
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a DOM element (or wrapped jQuery element).
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
	 */function isElement(node){return!!(node&&(node.nodeName// We are a direct element.
	||node.prop&&node.attr&&node.find));// We have an on and find method part of jQuery API.
	}/**
	 * @param str 'key1,key2,...'
	 * @returns {object} in the form of {key1:true, key2:true, ...}
	 */function makeMap(str){var obj={},items=str.split(','),i;for(i=0;i<items.length;i++){obj[items[i]]=true;}return obj;}function nodeName_(element){return lowercase(element.nodeName||element[0]&&element[0].nodeName);}function includes(array,obj){return Array.prototype.indexOf.call(array,obj)!==-1;}function arrayRemove(array,value){var index=array.indexOf(value);if(index>=0){array.splice(index,1);}return index;}/**
	 * @ngdoc function
	 * @name angular.copy
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Creates a deep copy of `source`, which should be an object or an array.
	 *
	 * * If no destination is supplied, a copy of the object or array is created.
	 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
	 *   are deleted and then all elements/properties from the source are copied to it.
	 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
	 * * If `source` is identical to `destination` an exception will be thrown.
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`
	 *   and on `destination`) will be ignored.
	 * </div>
	 *
	 * @param {*} source The source that will be used to make a copy.
	 *                   Can be any type, including primitives, `null`, and `undefined`.
	 * @param {(Object|Array)=} destination Destination into which the source is copied. If
	 *     provided, must be of the same type as `source`.
	 * @returns {*} The copy or updated `destination`, if `destination` was specified.
	 *
	 * @example
	  <example module="copyExample" name="angular-copy">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate class="simple-form">
	          <label>Name: <input type="text" ng-model="user.name" /></label><br />
	          <label>Age:  <input type="number" ng-model="user.age" /></label><br />
	          Gender: <label><input type="radio" ng-model="user.gender" value="male" />male</label>
	                  <label><input type="radio" ng-model="user.gender" value="female" />female</label><br />
	          <button ng-click="reset()">RESET</button>
	          <button ng-click="update(user)">SAVE</button>
	        </form>
	        <pre>form = {{user | json}}</pre>
	        <pre>master = {{master | json}}</pre>
	      </div>
	    </file>
	    <file name="script.js">
	      // Module: copyExample
	      angular.
	        module('copyExample', []).
	        controller('ExampleController', ['$scope', function($scope) {
	          $scope.master = {};

	          $scope.reset = function() {
	            // Example with 1 argument
	            $scope.user = angular.copy($scope.master);
	          };

	          $scope.update = function(user) {
	            // Example with 2 arguments
	            angular.copy(user, $scope.master);
	          };

	          $scope.reset();
	        }]);
	    </file>
	  </example>
	 */function copy(source,destination){var stackSource=[];var stackDest=[];if(destination){if(isTypedArray(destination)||isArrayBuffer(destination)){throw ngMinErr('cpta','Can\'t copy! TypedArray destination cannot be mutated.');}if(source===destination){throw ngMinErr('cpi','Can\'t copy! Source and destination are identical.');}// Empty the destination object
	if(isArray(destination)){destination.length=0;}else{forEach(destination,function(value,key){if(key!=='$$hashKey'){delete destination[key];}});}stackSource.push(source);stackDest.push(destination);return copyRecurse(source,destination);}return copyElement(source);function copyRecurse(source,destination){var h=destination.$$hashKey;var key;if(isArray(source)){for(var i=0,ii=source.length;i<ii;i++){destination.push(copyElement(source[i]));}}else if(isBlankObject(source)){// createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	for(key in source){destination[key]=copyElement(source[key]);}}else if(source&&typeof source.hasOwnProperty==='function'){// Slow path, which must rely on hasOwnProperty
	for(key in source){if(source.hasOwnProperty(key)){destination[key]=copyElement(source[key]);}}}else{// Slowest path --- hasOwnProperty can't be called as a method
	for(key in source){if(hasOwnProperty.call(source,key)){destination[key]=copyElement(source[key]);}}}setHashKey(destination,h);return destination;}function copyElement(source){// Simple values
	if(!isObject(source)){return source;}// Already copied values
	var index=stackSource.indexOf(source);if(index!==-1){return stackDest[index];}if(isWindow(source)||isScope(source)){throw ngMinErr('cpws','Can\'t copy! Making copies of Window or Scope instances is not supported.');}var needsRecurse=false;var destination=copyType(source);if(destination===undefined){destination=isArray(source)?[]:Object.create(getPrototypeOf(source));needsRecurse=true;}stackSource.push(source);stackDest.push(destination);return needsRecurse?copyRecurse(source,destination):destination;}function copyType(source){switch(toString.call(source)){case'[object Int8Array]':case'[object Int16Array]':case'[object Int32Array]':case'[object Float32Array]':case'[object Float64Array]':case'[object Uint8Array]':case'[object Uint8ClampedArray]':case'[object Uint16Array]':case'[object Uint32Array]':return new source.constructor(copyElement(source.buffer),source.byteOffset,source.length);case'[object ArrayBuffer]':// Support: IE10
	if(!source.slice){// If we're in this case we know the environment supports ArrayBuffer
	/* eslint-disable no-undef */var copied=new ArrayBuffer(source.byteLength);new Uint8Array(copied).set(new Uint8Array(source));/* eslint-enable */return copied;}return source.slice(0);case'[object Boolean]':case'[object Number]':case'[object String]':case'[object Date]':return new source.constructor(source.valueOf());case'[object RegExp]':var re=new RegExp(source.source,source.toString().match(/[^/]*$/)[0]);re.lastIndex=source.lastIndex;return re;case'[object Blob]':return new source.constructor([source],{type:source.type});}if(isFunction(source.cloneNode)){return source.cloneNode(true);}}}/**
	 * @ngdoc function
	 * @name angular.equals
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if two objects or two values are equivalent. Supports value types, regular
	 * expressions, arrays and objects.
	 *
	 * Two objects or values are considered equivalent if at least one of the following is true:
	 *
	 * * Both objects or values pass `===` comparison.
	 * * Both objects or values are of the same type and all of their properties are equal by
	 *   comparing them with `angular.equals`.
	 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
	 * * Both values represent the same regular expression (In JavaScript,
	 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
	 *   representation matches).
	 *
	 * During a property comparison, properties of `function` type and properties with names
	 * that begin with `$` are ignored.
	 *
	 * Scope and DOMWindow objects are being compared only by identify (`===`).
	 *
	 * @param {*} o1 Object or value to compare.
	 * @param {*} o2 Object or value to compare.
	 * @returns {boolean} True if arguments are equal.
	 *
	 * @example
	   <example module="equalsExample" name="equalsExample">
	     <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate>
	          <h3>User 1</h3>
	          Name: <input type="text" ng-model="user1.name">
	          Age: <input type="number" ng-model="user1.age">

	          <h3>User 2</h3>
	          Name: <input type="text" ng-model="user2.name">
	          Age: <input type="number" ng-model="user2.age">

	          <div>
	            <br/>
	            <input type="button" value="Compare" ng-click="compare()">
	          </div>
	          User 1: <pre>{{user1 | json}}</pre>
	          User 2: <pre>{{user2 | json}}</pre>
	          Equal: <pre>{{result}}</pre>
	        </form>
	      </div>
	    </file>
	    <file name="script.js">
	        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
	          $scope.user1 = {};
	          $scope.user2 = {};
	          $scope.compare = function() {
	            $scope.result = angular.equals($scope.user1, $scope.user2);
	          };
	        }]);
	    </file>
	  </example>
	 */function equals(o1,o2){if(o1===o2)return true;if(o1===null||o2===null)return false;// eslint-disable-next-line no-self-compare
	if(o1!==o1&&o2!==o2)return true;// NaN === NaN
	var t1=typeof o1==='undefined'?'undefined':_typeof(o1),t2=typeof o2==='undefined'?'undefined':_typeof(o2),length,key,keySet;if(t1===t2&&t1==='object'){if(isArray(o1)){if(!isArray(o2))return false;if((length=o1.length)===o2.length){for(key=0;key<length;key++){if(!equals(o1[key],o2[key]))return false;}return true;}}else if(isDate(o1)){if(!isDate(o2))return false;return equals(o1.getTime(),o2.getTime());}else if(isRegExp(o1)){if(!isRegExp(o2))return false;return o1.toString()===o2.toString();}else{if(isScope(o1)||isScope(o2)||isWindow(o1)||isWindow(o2)||isArray(o2)||isDate(o2)||isRegExp(o2))return false;keySet=createMap();for(key in o1){if(key.charAt(0)==='$'||isFunction(o1[key]))continue;if(!equals(o1[key],o2[key]))return false;keySet[key]=true;}for(key in o2){if(!(key in keySet)&&key.charAt(0)!=='$'&&isDefined(o2[key])&&!isFunction(o2[key]))return false;}return true;}}return false;}var csp=function csp(){if(!isDefined(csp.rules)){var ngCspElement=window.document.querySelector('[ng-csp]')||window.document.querySelector('[data-ng-csp]');if(ngCspElement){var ngCspAttribute=ngCspElement.getAttribute('ng-csp')||ngCspElement.getAttribute('data-ng-csp');csp.rules={noUnsafeEval:!ngCspAttribute||ngCspAttribute.indexOf('no-unsafe-eval')!==-1,noInlineStyle:!ngCspAttribute||ngCspAttribute.indexOf('no-inline-style')!==-1};}else{csp.rules={noUnsafeEval:noUnsafeEval(),noInlineStyle:false};}}return csp.rules;function noUnsafeEval(){try{// eslint-disable-next-line no-new, no-new-func
	new Function('');return false;}catch(e){return true;}}};/**
	 * @ngdoc directive
	 * @module ng
	 * @name ngJq
	 *
	 * @element ANY
	 * @param {string=} ngJq the name of the library available under `window`
	 * to be used for angular.element
	 * @description
	 * Use this directive to force the angular.element library.  This should be
	 * used to force either jqLite by leaving ng-jq blank or setting the name of
	 * the jquery variable under window (eg. jQuery).
	 *
	 * Since angular looks for this directive when it is loaded (doesn't wait for the
	 * DOMContentLoaded event), it must be placed on an element that comes before the script
	 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
	 * others ignored.
	 *
	 * @example
	 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq>
	 ...
	 ...
	 </html>
	 ```
	 * @example
	 * This example shows how to use a jQuery based library of a different name.
	 * The library name must be available at the top most 'window'.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq="jQueryLib">
	 ...
	 ...
	 </html>
	 ```
	 */var jq=function jq(){if(isDefined(jq.name_))return jq.name_;var el;var i,ii=ngAttrPrefixes.length,prefix,name;for(i=0;i<ii;++i){prefix=ngAttrPrefixes[i];el=window.document.querySelector('['+prefix.replace(':','\\:')+'jq]');if(el){name=el.getAttribute(prefix+'jq');break;}}return jq.name_=name;};function concat(array1,array2,index){return array1.concat(slice.call(array2,index));}function sliceArgs(args,startIndex){return slice.call(args,startIndex||0);}/**
	 * @ngdoc function
	 * @name angular.bind
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
	 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
	 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
	 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
	 *
	 * @param {Object} self Context which `fn` should be evaluated in.
	 * @param {function()} fn Function to be bound.
	 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
	 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
	 */function bind(self,fn){var curryArgs=arguments.length>2?sliceArgs(arguments,2):[];if(isFunction(fn)&&!(fn instanceof RegExp)){return curryArgs.length?function(){return arguments.length?fn.apply(self,concat(curryArgs,arguments,0)):fn.apply(self,curryArgs);}:function(){return arguments.length?fn.apply(self,arguments):fn.call(self);};}else{// In IE, native methods are not functions so they cannot be bound (note: they don't need to be).
	return fn;}}function toJsonReplacer(key,value){var val=value;if(typeof key==='string'&&key.charAt(0)==='$'&&key.charAt(1)==='$'){val=undefined;}else if(isWindow(value)){val='$WINDOW';}else if(value&&window.document===value){val='$DOCUMENT';}else if(isScope(value)){val='$SCOPE';}return val;}/**
	 * @ngdoc function
	 * @name angular.toJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
	 * stripped since angular uses this notation internally.
	 *
	 * @param {Object|Array|Date|string|number|boolean} obj Input to be serialized into JSON.
	 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
	 *    If set to an integer, the JSON output will contain that many spaces per indentation.
	 * @returns {string|undefined} JSON-ified string representing `obj`.
	 * @knownIssue
	 *
	 * The Safari browser throws a `RangeError` instead of returning `null` when it tries to stringify a `Date`
	 * object with an invalid date value. The only reliable way to prevent this is to monkeypatch the
	 * `Date.prototype.toJSON` method as follows:
	 *
	 * ```
	 * var _DatetoJSON = Date.prototype.toJSON;
	 * Date.prototype.toJSON = function() {
	 *   try {
	 *     return _DatetoJSON.call(this);
	 *   } catch(e) {
	 *     if (e instanceof RangeError) {
	 *       return null;
	 *     }
	 *     throw e;
	 *   }
	 * };
	 * ```
	 *
	 * See https://github.com/angular/angular.js/pull/14221 for more information.
	 */function toJson(obj,pretty){if(isUndefined(obj))return undefined;if(!isNumber(pretty)){pretty=pretty?2:null;}return JSON.stringify(obj,toJsonReplacer,pretty);}/**
	 * @ngdoc function
	 * @name angular.fromJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Deserializes a JSON string.
	 *
	 * @param {string} json JSON string to deserialize.
	 * @returns {Object|Array|string|number} Deserialized JSON string.
	 */function fromJson(json){return isString(json)?JSON.parse(json):json;}var ALL_COLONS=/:/g;function timezoneToOffset(timezone,fallback){// Support: IE 9-11 only, Edge 13-14+
	// IE/Edge do not "understand" colon (`:`) in timezone
	timezone=timezone.replace(ALL_COLONS,'');var requestedTimezoneOffset=Date.parse('Jan 01, 1970 00:00:00 '+timezone)/60000;return isNumberNaN(requestedTimezoneOffset)?fallback:requestedTimezoneOffset;}function addDateMinutes(date,minutes){date=new Date(date.getTime());date.setMinutes(date.getMinutes()+minutes);return date;}function convertTimezoneToLocal(date,timezone,reverse){reverse=reverse?-1:1;var dateTimezoneOffset=date.getTimezoneOffset();var timezoneOffset=timezoneToOffset(timezone,dateTimezoneOffset);return addDateMinutes(date,reverse*(timezoneOffset-dateTimezoneOffset));}/**
	 * @returns {string} Returns the string representation of the element.
	 */function startingTag(element){element=jqLite(element).clone();try{// turns out IE does not let you set .html() on elements which
	// are not allowed to have children. So we just ignore it.
	element.empty();}catch(e){/* empty */}var elemHtml=jqLite('<div>').append(element).html();try{return element[0].nodeType===NODE_TYPE_TEXT?lowercase(elemHtml):elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(match,nodeName){return'<'+lowercase(nodeName);});}catch(e){return lowercase(elemHtml);}}/////////////////////////////////////////////////
	/**
	 * Tries to decode the URI component without throwing an exception.
	 *
	 * @private
	 * @param str value potential URI component to check.
	 * @returns {boolean} True if `value` can be decoded
	 * with the decodeURIComponent function.
	 */function tryDecodeURIComponent(value){try{return decodeURIComponent(value);}catch(e){// Ignore any invalid uri component.
	}}/**
	 * Parses an escaped url query string into key-value pairs.
	 * @returns {Object.<string,boolean|Array>}
	 */function parseKeyValue(/**string*/keyValue){var obj={};forEach((keyValue||'').split('&'),function(keyValue){var splitPoint,key,val;if(keyValue){key=keyValue=keyValue.replace(/\+/g,'%20');splitPoint=keyValue.indexOf('=');if(splitPoint!==-1){key=keyValue.substring(0,splitPoint);val=keyValue.substring(splitPoint+1);}key=tryDecodeURIComponent(key);if(isDefined(key)){val=isDefined(val)?tryDecodeURIComponent(val):true;if(!hasOwnProperty.call(obj,key)){obj[key]=val;}else if(isArray(obj[key])){obj[key].push(val);}else{obj[key]=[obj[key],val];}}}});return obj;}function toKeyValue(obj){var parts=[];forEach(obj,function(value,key){if(isArray(value)){forEach(value,function(arrayValue){parts.push(encodeUriQuery(key,true)+(arrayValue===true?'':'='+encodeUriQuery(arrayValue,true)));});}else{parts.push(encodeUriQuery(key,true)+(value===true?'':'='+encodeUriQuery(value,true)));}});return parts.length?parts.join('&'):'';}/**
	 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
	 * segments:
	 *    segment       = *pchar
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */function encodeUriSegment(val){return encodeUriQuery(val,true).replace(/%26/gi,'&').replace(/%3D/gi,'=').replace(/%2B/gi,'+');}/**
	 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
	 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
	 * encoded per http://tools.ietf.org/html/rfc3986:
	 *    query         = *( pchar / "/" / "?" )
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */function encodeUriQuery(val,pctEncodeSpaces){return encodeURIComponent(val).replace(/%40/gi,'@').replace(/%3A/gi,':').replace(/%24/g,'$').replace(/%2C/gi,',').replace(/%3B/gi,';').replace(/%20/g,pctEncodeSpaces?'%20':'+');}var ngAttrPrefixes=['ng-','data-ng-','ng:','x-ng-'];function getNgAttribute(element,ngAttr){var attr,i,ii=ngAttrPrefixes.length;for(i=0;i<ii;++i){attr=ngAttrPrefixes[i]+ngAttr;if(isString(attr=element.getAttribute(attr))){return attr;}}return null;}function allowAutoBootstrap(document){if(!document.currentScript){return true;}var src=document.currentScript.getAttribute('src');var link=document.createElement('a');link.href=src;if(document.location.origin===link.origin){// Same-origin resources are always allowed, even for non-whitelisted schemes.
	return true;}// Disabled bootstrapping unless angular.js was loaded from a known scheme used on the web.
	// This is to prevent angular.js bundled with browser extensions from being used to bypass the
	// content security policy in web pages and other browser extensions.
	switch(link.protocol){case'http:':case'https:':case'ftp:':case'blob:':case'file:':case'data:':return true;default:return false;}}// Cached as it has to run during loading so that document.currentScript is available.
	var isAutoBootstrapAllowed=allowAutoBootstrap(window.document);/**
	 * @ngdoc directive
	 * @name ngApp
	 * @module ng
	 *
	 * @element ANY
	 * @param {angular.Module} ngApp an optional application
	 *   {@link angular.module module} name to load.
	 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
	 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
	 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
	 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
	 *   tracking down the root of these bugs.
	 *
	 * @description
	 *
	 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
	 * designates the **root element** of the application and is typically placed near the root element
	 * of the page - e.g. on the `<body>` or `<html>` tags.
	 *
	 * There are a few things to keep in mind when using `ngApp`:
	 * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
	 *   found in the document will be used to define the root element to auto-bootstrap as an
	 *   application. To run multiple applications in an HTML document you must manually bootstrap them using
	 *   {@link angular.bootstrap} instead.
	 * - AngularJS applications cannot be nested within each other.
	 * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
	 *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
	 *   {@link ngRoute.ngView `ngView`}.
	 *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 *   causing animations to stop working and making the injector inaccessible from outside the app.
	 *
	 * You can specify an **AngularJS module** to be used as the root module for the application.  This
	 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
	 * should contain the application code needed or have dependencies on other modules that will
	 * contain the code. See {@link angular.module} for more information.
	 *
	 * In the example below if the `ngApp` directive were not placed on the `html` element then the
	 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
	 * would not be resolved to `3`.
	 *
	 * `ngApp` is the easiest, and most common way to bootstrap an application.
	 *
	 <example module="ngAppDemo" name="ng-app">
	   <file name="index.html">
	   <div ng-controller="ngAppDemoController">
	     I can add: {{a}} + {{b}} =  {{ a+b }}
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
	   </file>
	 </example>
	 *
	 * Using `ngStrictDi`, you would see something like this:
	 *
	 <example ng-app-included="true" name="strict-di">
	   <file name="index.html">
	   <div ng-app="ngAppStrictDemo" ng-strict-di>
	       <div ng-controller="GoodController1">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style (see
	              script.js for details)
	           </p>
	       </div>

	       <div ng-controller="GoodController2">
	           Name: <input ng-model="name"><br />
	           Hello, {{name}}!

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style
	              (see script.js for details)
	           </p>
	       </div>

	       <div ng-controller="BadController">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>The controller could not be instantiated, due to relying
	              on automatic function annotations (which are disabled in
	              strict mode). As such, the content of this section is not
	              interpolated, and there should be an error in your web console.
	           </p>
	       </div>
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppStrictDemo', [])
	     // BadController will fail to instantiate, due to relying on automatic function annotation,
	     // rather than an explicit annotation
	     .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
	     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
	     // due to using explicit annotations using the array style and $inject property, respectively.
	     .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
	     .controller('GoodController2', GoodController2);
	     function GoodController2($scope) {
	       $scope.name = 'World';
	     }
	     GoodController2.$inject = ['$scope'];
	   </file>
	   <file name="style.css">
	   div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
	   div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
	   div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
	   </file>
	 </example>
	 */function angularInit(element,bootstrap){var appElement,module,config={};// The element `element` has priority over any other element.
	forEach(ngAttrPrefixes,function(prefix){var name=prefix+'app';if(!appElement&&element.hasAttribute&&element.hasAttribute(name)){appElement=element;module=element.getAttribute(name);}});forEach(ngAttrPrefixes,function(prefix){var name=prefix+'app';var candidate;if(!appElement&&(candidate=element.querySelector('['+name.replace(':','\\:')+']'))){appElement=candidate;module=candidate.getAttribute(name);}});if(appElement){if(!isAutoBootstrapAllowed){window.console.error('Angular: disabling automatic bootstrap. <script> protocol indicates '+'an extension, document.location.href does not match.');return;}config.strictDi=getNgAttribute(appElement,'strict-di')!==null;bootstrap(appElement,module?[module]:[],config);}}/**
	 * @ngdoc function
	 * @name angular.bootstrap
	 * @module ng
	 * @description
	 * Use this function to manually start up angular application.
	 *
	 * For more information, see the {@link guide/bootstrap Bootstrap guide}.
	 *
	 * Angular will detect if it has been loaded into the browser more than once and only allow the
	 * first loaded script to be bootstrapped and will report a warning to the browser console for
	 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
	 * multiple instances of Angular try to work on the DOM.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
	 * They must use {@link ng.directive:ngApp ngApp}.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
	 * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
	 * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 * causing animations to stop working and making the injector inaccessible from outside the app.
	 * </div>
	 *
	 * ```html
	 * <!doctype html>
	 * <html>
	 * <body>
	 * <div ng-controller="WelcomeController">
	 *   {{greeting}}
	 * </div>
	 *
	 * <script src="angular.js"></script>
	 * <script>
	 *   var app = angular.module('demo', [])
	 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
	 *   angular.bootstrap(document, ['demo']);
	 * </script>
	 * </body>
	 * </html>
	 * ```
	 *
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
	 *     Each item in the array should be the name of a predefined module or a (DI annotated)
	 *     function that will be invoked by the injector as a `config` block.
	 *     See: {@link angular.module modules}
	 * @param {Object=} config an object for defining configuration options for the application. The
	 *     following keys are supported:
	 *
	 * * `strictDi` - disable automatic function annotation for the application. This is meant to
	 *   assist in finding bugs which break minified code. Defaults to `false`.
	 *
	 * @returns {auto.$injector} Returns the newly created injector for this app.
	 */function bootstrap(element,modules,config){if(!isObject(config))config={};var defaultConfig={strictDi:false};config=extend(defaultConfig,config);var doBootstrap=function doBootstrap(){element=jqLite(element);if(element.injector()){var tag=element[0]===window.document?'document':startingTag(element);// Encode angle brackets to prevent input from being sanitized to empty string #8683.
	throw ngMinErr('btstrpd','App already bootstrapped with this element \'{0}\'',tag.replace(/</,'&lt;').replace(/>/,'&gt;'));}modules=modules||[];modules.unshift(['$provide',function($provide){$provide.value('$rootElement',element);}]);if(config.debugInfoEnabled){// Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
	modules.push(['$compileProvider',function($compileProvider){$compileProvider.debugInfoEnabled(true);}]);}modules.unshift('ng');var injector=createInjector(modules,config.strictDi);injector.invoke(['$rootScope','$rootElement','$compile','$injector',function bootstrapApply(scope,element,compile,injector){scope.$apply(function(){element.data('$injector',injector);compile(element)(scope);});}]);return injector;};var NG_ENABLE_DEBUG_INFO=/^NG_ENABLE_DEBUG_INFO!/;var NG_DEFER_BOOTSTRAP=/^NG_DEFER_BOOTSTRAP!/;if(window&&NG_ENABLE_DEBUG_INFO.test(window.name)){config.debugInfoEnabled=true;window.name=window.name.replace(NG_ENABLE_DEBUG_INFO,'');}if(window&&!NG_DEFER_BOOTSTRAP.test(window.name)){return doBootstrap();}window.name=window.name.replace(NG_DEFER_BOOTSTRAP,'');angular.resumeBootstrap=function(extraModules){forEach(extraModules,function(module){modules.push(module);});return doBootstrap();};if(isFunction(angular.resumeDeferredBootstrap)){angular.resumeDeferredBootstrap();}}/**
	 * @ngdoc function
	 * @name angular.reloadWithDebugInfo
	 * @module ng
	 * @description
	 * Use this function to reload the current application with debug information turned on.
	 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
	 *
	 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
	 */function reloadWithDebugInfo(){window.name='NG_ENABLE_DEBUG_INFO!'+window.name;window.location.reload();}/**
	 * @name angular.getTestability
	 * @module ng
	 * @description
	 * Get the testability service for the instance of Angular on the given
	 * element.
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 */function getTestability(rootElement){var injector=angular.element(rootElement).injector();if(!injector){throw ngMinErr('test','no injector found for element argument to getTestability');}return injector.get('$$testability');}var SNAKE_CASE_REGEXP=/[A-Z]/g;function snake_case(name,separator){separator=separator||'_';return name.replace(SNAKE_CASE_REGEXP,function(letter,pos){return(pos?separator:'')+letter.toLowerCase();});}var bindJQueryFired=false;function bindJQuery(){var originalCleanData;if(bindJQueryFired){return;}// bind to jQuery if present;
	var jqName=jq();jQuery=isUndefined(jqName)?__webpack_provided_window_dot_jQuery:// use jQuery (if present)
	!jqName?undefined:// use jqLite
	window[jqName];// use jQuery specified by `ngJq`
	// Use jQuery if it exists with proper functionality, otherwise default to us.
	// Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
	// Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
	// versions. It will not work for sure with jQuery <1.7, though.
	if(jQuery&&jQuery.fn.on){jqLite=jQuery;extend(jQuery.fn,{scope:JQLitePrototype.scope,isolateScope:JQLitePrototype.isolateScope,controller:JQLitePrototype.controller,injector:JQLitePrototype.injector,inheritedData:JQLitePrototype.inheritedData});// All nodes removed from the DOM via various jQuery APIs like .remove()
	// are passed through jQuery.cleanData. Monkey-patch this method to fire
	// the $destroy event on all removed nodes.
	originalCleanData=jQuery.cleanData;jQuery.cleanData=function(elems){var events;for(var i=0,elem;(elem=elems[i])!=null;i++){events=jQuery._data(elem,'events');if(events&&events.$destroy){jQuery(elem).triggerHandler('$destroy');}}originalCleanData(elems);};}else{jqLite=JQLite;}angular.element=jqLite;// Prevent double-proxying.
	bindJQueryFired=true;}/**
	 * throw error if the argument is falsy.
	 */function assertArg(arg,name,reason){if(!arg){throw ngMinErr('areq','Argument \'{0}\' is {1}',name||'?',reason||'required');}return arg;}function assertArgFn(arg,name,acceptArrayAnnotation){if(acceptArrayAnnotation&&isArray(arg)){arg=arg[arg.length-1];}assertArg(isFunction(arg),name,'not a function, got '+(arg&&(typeof arg==='undefined'?'undefined':_typeof(arg))==='object'?arg.constructor.name||'Object':typeof arg==='undefined'?'undefined':_typeof(arg)));return arg;}/**
	 * throw error if the name given is hasOwnProperty
	 * @param  {String} name    the name to test
	 * @param  {String} context the context in which the name is used, such as module or directive
	 */function assertNotHasOwnProperty(name,context){if(name==='hasOwnProperty'){throw ngMinErr('badname','hasOwnProperty is not a valid {0} name',context);}}/**
	 * Return the value accessible from the object by path. Any undefined traversals are ignored
	 * @param {Object} obj starting object
	 * @param {String} path path to traverse
	 * @param {boolean} [bindFnToScope=true]
	 * @returns {Object} value as accessible by path
	 *///TODO(misko): this function needs to be removed
	function getter(obj,path,bindFnToScope){if(!path)return obj;var keys=path.split('.');var key;var lastInstance=obj;var len=keys.length;for(var i=0;i<len;i++){key=keys[i];if(obj){obj=(lastInstance=obj)[key];}}if(!bindFnToScope&&isFunction(obj)){return bind(lastInstance,obj);}return obj;}/**
	 * Return the DOM siblings between the first and last node in the given array.
	 * @param {Array} array like object
	 * @returns {Array} the inputted object or a jqLite collection containing the nodes
	 */function getBlockNodes(nodes){// TODO(perf): update `nodes` instead of creating a new object?
	var node=nodes[0];var endNode=nodes[nodes.length-1];var blockNodes;for(var i=1;node!==endNode&&(node=node.nextSibling);i++){if(blockNodes||nodes[i]!==node){if(!blockNodes){blockNodes=jqLite(slice.call(nodes,0,i));}blockNodes.push(node);}}return blockNodes||nodes;}/**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * Related micro-benchmarks:
	 * - http://jsperf.com/object-create2
	 * - http://jsperf.com/proto-map-lookup/2
	 * - http://jsperf.com/for-in-vs-object-keys2
	 *
	 * @returns {Object}
	 */function createMap(){return Object.create(null);}function stringify(value){if(value==null){// null || undefined
	return'';}switch(typeof value==='undefined'?'undefined':_typeof(value)){case'string':break;case'number':value=''+value;break;default:if(hasCustomToString(value)&&!isArray(value)&&!isDate(value)){value=value.toString();}else{value=toJson(value);}}return value;}var NODE_TYPE_ELEMENT=1;var NODE_TYPE_ATTRIBUTE=2;var NODE_TYPE_TEXT=3;var NODE_TYPE_COMMENT=8;var NODE_TYPE_DOCUMENT=9;var NODE_TYPE_DOCUMENT_FRAGMENT=11;/**
	 * @ngdoc type
	 * @name angular.Module
	 * @module ng
	 * @description
	 *
	 * Interface for configuring angular {@link angular.module modules}.
	 */function setupModuleLoader(window){var $injectorMinErr=minErr('$injector');var ngMinErr=minErr('ng');function ensure(obj,name,factory){return obj[name]||(obj[name]=factory());}var angular=ensure(window,'angular',Object);// We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
	angular.$$minErr=angular.$$minErr||minErr;return ensure(angular,'module',function(){/** @type {Object.<string, angular.Module>} */var modules={};/**
	     * @ngdoc function
	     * @name angular.module
	     * @module ng
	     * @description
	     *
	     * The `angular.module` is a global place for creating, registering and retrieving Angular
	     * modules.
	     * All modules (angular core or 3rd party) that should be available to an application must be
	     * registered using this mechanism.
	     *
	     * Passing one argument retrieves an existing {@link angular.Module},
	     * whereas passing more than one argument creates a new {@link angular.Module}
	     *
	     *
	     * # Module
	     *
	     * A module is a collection of services, directives, controllers, filters, and configuration information.
	     * `angular.module` is used to configure the {@link auto.$injector $injector}.
	     *
	     * ```js
	     * // Create a new module
	     * var myModule = angular.module('myModule', []);
	     *
	     * // register a new service
	     * myModule.value('appName', 'MyCoolApp');
	     *
	     * // configure existing services inside initialization blocks.
	     * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
	     * ```
	     *
	     * Then you can create an injector and load your modules like this:
	     *
	     * ```js
	     * var injector = angular.injector(['ng', 'myModule'])
	     * ```
	     *
	     * However it's more likely that you'll just use
	     * {@link ng.directive:ngApp ngApp} or
	     * {@link angular.bootstrap} to simplify this process for you.
	     *
	     * @param {!string} name The name of the module to create or retrieve.
	     * @param {!Array.<string>=} requires If specified then new module is being created. If
	     *        unspecified then the module is being retrieved for further configuration.
	     * @param {Function=} configFn Optional configuration function for the module. Same as
	     *        {@link angular.Module#config Module#config()}.
	     * @returns {angular.Module} new module with the {@link angular.Module} api.
	     */return function module(name,requires,configFn){var assertNotHasOwnProperty=function assertNotHasOwnProperty(name,context){if(name==='hasOwnProperty'){throw ngMinErr('badname','hasOwnProperty is not a valid {0} name',context);}};assertNotHasOwnProperty(name,'module');if(requires&&modules.hasOwnProperty(name)){modules[name]=null;}return ensure(modules,name,function(){if(!requires){throw $injectorMinErr('nomod','Module \'{0}\' is not available! You either misspelled '+'the module name or forgot to load it. If registering a module ensure that you '+'specify the dependencies as the second argument.',name);}/** @type {!Array.<Array.<*>>} */var invokeQueue=[];/** @type {!Array.<Function>} */var configBlocks=[];/** @type {!Array.<Function>} */var runBlocks=[];var config=invokeLater('$injector','invoke','push',configBlocks);/** @type {angular.Module} */var moduleInstance={// Private state
	_invokeQueue:invokeQueue,_configBlocks:configBlocks,_runBlocks:runBlocks,/**
	           * @ngdoc property
	           * @name angular.Module#requires
	           * @module ng
	           *
	           * @description
	           * Holds the list of modules which the injector will load before the current module is
	           * loaded.
	           */requires:requires,/**
	           * @ngdoc property
	           * @name angular.Module#name
	           * @module ng
	           *
	           * @description
	           * Name of the module.
	           */name:name,/**
	           * @ngdoc method
	           * @name angular.Module#provider
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerType Construction function for creating new instance of the
	           *                                service.
	           * @description
	           * See {@link auto.$provide#provider $provide.provider()}.
	           */provider:invokeLaterAndSetModuleName('$provide','provider'),/**
	           * @ngdoc method
	           * @name angular.Module#factory
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerFunction Function for creating new instance of the service.
	           * @description
	           * See {@link auto.$provide#factory $provide.factory()}.
	           */factory:invokeLaterAndSetModuleName('$provide','factory'),/**
	           * @ngdoc method
	           * @name angular.Module#service
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} constructor A constructor function that will be instantiated.
	           * @description
	           * See {@link auto.$provide#service $provide.service()}.
	           */service:invokeLaterAndSetModuleName('$provide','service'),/**
	           * @ngdoc method
	           * @name angular.Module#value
	           * @module ng
	           * @param {string} name service name
	           * @param {*} object Service instance object.
	           * @description
	           * See {@link auto.$provide#value $provide.value()}.
	           */value:invokeLater('$provide','value'),/**
	           * @ngdoc method
	           * @name angular.Module#constant
	           * @module ng
	           * @param {string} name constant name
	           * @param {*} object Constant value.
	           * @description
	           * Because the constants are fixed, they get applied before other provide methods.
	           * See {@link auto.$provide#constant $provide.constant()}.
	           */constant:invokeLater('$provide','constant','unshift'),/**
	           * @ngdoc method
	           * @name angular.Module#decorator
	           * @module ng
	           * @param {string} name The name of the service to decorate.
	           * @param {Function} decorFn This function will be invoked when the service needs to be
	           *                           instantiated and should return the decorated service instance.
	           * @description
	           * See {@link auto.$provide#decorator $provide.decorator()}.
	           */decorator:invokeLaterAndSetModuleName('$provide','decorator',configBlocks),/**
	           * @ngdoc method
	           * @name angular.Module#animation
	           * @module ng
	           * @param {string} name animation name
	           * @param {Function} animationFactory Factory function for creating new instance of an
	           *                                    animation.
	           * @description
	           *
	           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
	           *
	           *
	           * Defines an animation hook that can be later used with
	           * {@link $animate $animate} service and directives that use this service.
	           *
	           * ```js
	           * module.animation('.animation-name', function($inject1, $inject2) {
	           *   return {
	           *     eventName : function(element, done) {
	           *       //code to run the animation
	           *       //once complete, then run done()
	           *       return function cancellationFunction(element) {
	           *         //code to cancel the animation
	           *       }
	           *     }
	           *   }
	           * })
	           * ```
	           *
	           * See {@link ng.$animateProvider#register $animateProvider.register()} and
	           * {@link ngAnimate ngAnimate module} for more information.
	           */animation:invokeLaterAndSetModuleName('$animateProvider','register'),/**
	           * @ngdoc method
	           * @name angular.Module#filter
	           * @module ng
	           * @param {string} name Filter name - this must be a valid angular expression identifier
	           * @param {Function} filterFactory Factory function for creating new instance of filter.
	           * @description
	           * See {@link ng.$filterProvider#register $filterProvider.register()}.
	           *
	           * <div class="alert alert-warning">
	           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	           * (`myapp_subsection_filterx`).
	           * </div>
	           */filter:invokeLaterAndSetModuleName('$filterProvider','register'),/**
	           * @ngdoc method
	           * @name angular.Module#controller
	           * @module ng
	           * @param {string|Object} name Controller name, or an object map of controllers where the
	           *    keys are the names and the values are the constructors.
	           * @param {Function} constructor Controller constructor function.
	           * @description
	           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
	           */controller:invokeLaterAndSetModuleName('$controllerProvider','register'),/**
	           * @ngdoc method
	           * @name angular.Module#directive
	           * @module ng
	           * @param {string|Object} name Directive name, or an object map of directives where the
	           *    keys are the names and the values are the factories.
	           * @param {Function} directiveFactory Factory function for creating new instance of
	           * directives.
	           * @description
	           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
	           */directive:invokeLaterAndSetModuleName('$compileProvider','directive'),/**
	           * @ngdoc method
	           * @name angular.Module#component
	           * @module ng
	           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
	           * @param {Object} options Component definition object (a simplified
	           *    {@link ng.$compile#directive-definition-object directive definition object})
	           *
	           * @description
	           * See {@link ng.$compileProvider#component $compileProvider.component()}.
	           */component:invokeLaterAndSetModuleName('$compileProvider','component'),/**
	           * @ngdoc method
	           * @name angular.Module#config
	           * @module ng
	           * @param {Function} configFn Execute this function on module load. Useful for service
	           *    configuration.
	           * @description
	           * Use this method to register work which needs to be performed on module loading.
	           * For more about how to configure services, see
	           * {@link providers#provider-recipe Provider Recipe}.
	           */config:config,/**
	           * @ngdoc method
	           * @name angular.Module#run
	           * @module ng
	           * @param {Function} initializationFn Execute this function after injector creation.
	           *    Useful for application initialization.
	           * @description
	           * Use this method to register work which should be performed when the injector is done
	           * loading all modules.
	           */run:function run(block){runBlocks.push(block);return this;}};if(configFn){config(configFn);}return moduleInstance;/**
	         * @param {string} provider
	         * @param {string} method
	         * @param {String=} insertMethod
	         * @returns {angular.Module}
	         */function invokeLater(provider,method,insertMethod,queue){if(!queue)queue=invokeQueue;return function(){queue[insertMethod||'push']([provider,method,arguments]);return moduleInstance;};}/**
	         * @param {string} provider
	         * @param {string} method
	         * @returns {angular.Module}
	         */function invokeLaterAndSetModuleName(provider,method,queue){if(!queue)queue=invokeQueue;return function(recipeName,factoryFunction){if(factoryFunction&&isFunction(factoryFunction))factoryFunction.$$moduleName=name;queue.push([provider,method,arguments]);return moduleInstance;};}});};});}/* global shallowCopy: true *//**
	 * Creates a shallow copy of an object, an array or a primitive.
	 *
	 * Assumes that there are no proto properties for objects.
	 */function shallowCopy(src,dst){if(isArray(src)){dst=dst||[];for(var i=0,ii=src.length;i<ii;i++){dst[i]=src[i];}}else if(isObject(src)){dst=dst||{};for(var key in src){if(!(key.charAt(0)==='$'&&key.charAt(1)==='$')){dst[key]=src[key];}}}return dst||src;}/* global toDebugString: true */function serializeObject(obj){var seen=[];return JSON.stringify(obj,function(key,val){val=toJsonReplacer(key,val);if(isObject(val)){if(seen.indexOf(val)>=0)return'...';seen.push(val);}return val;});}function toDebugString(obj){if(typeof obj==='function'){return obj.toString().replace(/ \{[\s\S]*$/,'');}else if(isUndefined(obj)){return'undefined';}else if(typeof obj!=='string'){return serializeObject(obj);}return obj;}/* global angularModule: true,
	  version: true,

	  $CompileProvider,

	  htmlAnchorDirective,
	  inputDirective,
	  inputDirective,
	  formDirective,
	  scriptDirective,
	  selectDirective,
	  optionDirective,
	  ngBindDirective,
	  ngBindHtmlDirective,
	  ngBindTemplateDirective,
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective,
	  ngCloakDirective,
	  ngControllerDirective,
	  ngFormDirective,
	  ngHideDirective,
	  ngIfDirective,
	  ngIncludeDirective,
	  ngIncludeFillContentDirective,
	  ngInitDirective,
	  ngNonBindableDirective,
	  ngPluralizeDirective,
	  ngRepeatDirective,
	  ngShowDirective,
	  ngStyleDirective,
	  ngSwitchDirective,
	  ngSwitchWhenDirective,
	  ngSwitchDefaultDirective,
	  ngOptionsDirective,
	  ngTranscludeDirective,
	  ngModelDirective,
	  ngListDirective,
	  ngChangeDirective,
	  patternDirective,
	  patternDirective,
	  requiredDirective,
	  requiredDirective,
	  minlengthDirective,
	  minlengthDirective,
	  maxlengthDirective,
	  maxlengthDirective,
	  ngValueDirective,
	  ngModelOptionsDirective,
	  ngAttributeAliasDirectives,
	  ngEventDirectives,

	  $AnchorScrollProvider,
	  $AnimateProvider,
	  $CoreAnimateCssProvider,
	  $$CoreAnimateJsProvider,
	  $$CoreAnimateQueueProvider,
	  $$AnimateRunnerFactoryProvider,
	  $$AnimateAsyncRunFactoryProvider,
	  $BrowserProvider,
	  $CacheFactoryProvider,
	  $ControllerProvider,
	  $DateProvider,
	  $DocumentProvider,
	  $$IsDocumentHiddenProvider,
	  $ExceptionHandlerProvider,
	  $FilterProvider,
	  $$ForceReflowProvider,
	  $InterpolateProvider,
	  $IntervalProvider,
	  $$HashMapProvider,
	  $HttpProvider,
	  $HttpParamSerializerProvider,
	  $HttpParamSerializerJQLikeProvider,
	  $HttpBackendProvider,
	  $xhrFactoryProvider,
	  $jsonpCallbacksProvider,
	  $LocationProvider,
	  $LogProvider,
	  $ParseProvider,
	  $RootScopeProvider,
	  $QProvider,
	  $$QProvider,
	  $$SanitizeUriProvider,
	  $SceProvider,
	  $SceDelegateProvider,
	  $SnifferProvider,
	  $TemplateCacheProvider,
	  $TemplateRequestProvider,
	  $$TestabilityProvider,
	  $TimeoutProvider,
	  $$RAFProvider,
	  $WindowProvider,
	  $$jqLiteProvider,
	  $$CookieReaderProvider
	*//**
	 * @ngdoc object
	 * @name angular.version
	 * @module ng
	 * @description
	 * An object that contains information about the current AngularJS version.
	 *
	 * This object has the following properties:
	 *
	 * - `full` – `{string}` – Full version string, such as "0.9.18".
	 * - `major` – `{number}` – Major version number, such as "0".
	 * - `minor` – `{number}` – Minor version number, such as "9".
	 * - `dot` – `{number}` – Dot version number, such as "18".
	 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
	 */var version={// These placeholder strings will be replaced by grunt's `build` task.
	// They need to be double- or single-quoted.
	full:'1.6.0',major:1,minor:6,dot:0,codeName:'rainbow-tsunami'};function publishExternalAPI(angular){extend(angular,{'bootstrap':bootstrap,'copy':copy,'extend':extend,'merge':merge,'equals':equals,'element':jqLite,'forEach':forEach,'injector':createInjector,'noop':noop,'bind':bind,'toJson':toJson,'fromJson':fromJson,'identity':identity,'isUndefined':isUndefined,'isDefined':isDefined,'isString':isString,'isFunction':isFunction,'isObject':isObject,'isNumber':isNumber,'isElement':isElement,'isArray':isArray,'version':version,'isDate':isDate,'lowercase':lowercase,'uppercase':uppercase,'callbacks':{$$counter:0},'getTestability':getTestability,'reloadWithDebugInfo':reloadWithDebugInfo,'$$minErr':minErr,'$$csp':csp,'$$encodeUriSegment':encodeUriSegment,'$$encodeUriQuery':encodeUriQuery,'$$stringify':stringify});angularModule=setupModuleLoader(window);angularModule('ng',['ngLocale'],['$provide',function ngModule($provide){// $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
	$provide.provider({$$sanitizeUri:$$SanitizeUriProvider});$provide.provider('$compile',$CompileProvider).directive({a:htmlAnchorDirective,input:inputDirective,textarea:inputDirective,form:formDirective,script:scriptDirective,select:selectDirective,option:optionDirective,ngBind:ngBindDirective,ngBindHtml:ngBindHtmlDirective,ngBindTemplate:ngBindTemplateDirective,ngClass:ngClassDirective,ngClassEven:ngClassEvenDirective,ngClassOdd:ngClassOddDirective,ngCloak:ngCloakDirective,ngController:ngControllerDirective,ngForm:ngFormDirective,ngHide:ngHideDirective,ngIf:ngIfDirective,ngInclude:ngIncludeDirective,ngInit:ngInitDirective,ngNonBindable:ngNonBindableDirective,ngPluralize:ngPluralizeDirective,ngRepeat:ngRepeatDirective,ngShow:ngShowDirective,ngStyle:ngStyleDirective,ngSwitch:ngSwitchDirective,ngSwitchWhen:ngSwitchWhenDirective,ngSwitchDefault:ngSwitchDefaultDirective,ngOptions:ngOptionsDirective,ngTransclude:ngTranscludeDirective,ngModel:ngModelDirective,ngList:ngListDirective,ngChange:ngChangeDirective,pattern:patternDirective,ngPattern:patternDirective,required:requiredDirective,ngRequired:requiredDirective,minlength:minlengthDirective,ngMinlength:minlengthDirective,maxlength:maxlengthDirective,ngMaxlength:maxlengthDirective,ngValue:ngValueDirective,ngModelOptions:ngModelOptionsDirective}).directive({ngInclude:ngIncludeFillContentDirective}).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);$provide.provider({$anchorScroll:$AnchorScrollProvider,$animate:$AnimateProvider,$animateCss:$CoreAnimateCssProvider,$$animateJs:$$CoreAnimateJsProvider,$$animateQueue:$$CoreAnimateQueueProvider,$$AnimateRunner:$$AnimateRunnerFactoryProvider,$$animateAsyncRun:$$AnimateAsyncRunFactoryProvider,$browser:$BrowserProvider,$cacheFactory:$CacheFactoryProvider,$controller:$ControllerProvider,$document:$DocumentProvider,$$isDocumentHidden:$$IsDocumentHiddenProvider,$exceptionHandler:$ExceptionHandlerProvider,$filter:$FilterProvider,$$forceReflow:$$ForceReflowProvider,$interpolate:$InterpolateProvider,$interval:$IntervalProvider,$http:$HttpProvider,$httpParamSerializer:$HttpParamSerializerProvider,$httpParamSerializerJQLike:$HttpParamSerializerJQLikeProvider,$httpBackend:$HttpBackendProvider,$xhrFactory:$xhrFactoryProvider,$jsonpCallbacks:$jsonpCallbacksProvider,$location:$LocationProvider,$log:$LogProvider,$parse:$ParseProvider,$rootScope:$RootScopeProvider,$q:$QProvider,$$q:$$QProvider,$sce:$SceProvider,$sceDelegate:$SceDelegateProvider,$sniffer:$SnifferProvider,$templateCache:$TemplateCacheProvider,$templateRequest:$TemplateRequestProvider,$$testability:$$TestabilityProvider,$timeout:$TimeoutProvider,$window:$WindowProvider,$$rAF:$$RAFProvider,$$jqLite:$$jqLiteProvider,$$HashMap:$$HashMapProvider,$$cookieReader:$$CookieReaderProvider});}]);}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* global
	  JQLitePrototype: true,
	  BOOLEAN_ATTR: true,
	  ALIASED_ATTR: true
	*///////////////////////////////////
	//JQLite
	//////////////////////////////////
	/**
	 * @ngdoc function
	 * @name angular.element
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
	 *
	 * If jQuery is available, `angular.element` is an alias for the
	 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
	 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
	 *
	 * jqLite is a tiny, API-compatible subset of jQuery that allows
	 * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
	 * commonly needed functionality with the goal of having a very small footprint.
	 *
	 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
	 * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
	 * specific version of jQuery if multiple versions exist on the page.
	 *
	 * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
	 * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
	 *
	 * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
	 * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
	 * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
	 *
	 * ## Angular's jqLite
	 * jqLite provides only the following jQuery methods:
	 *
	 * - [`addClass()`](http://api.jquery.com/addClass/) - Does not support a function as first argument
	 * - [`after()`](http://api.jquery.com/after/)
	 * - [`append()`](http://api.jquery.com/append/)
	 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
	 * - [`bind()`](http://api.jquery.com/bind/) (_deprecated_, use [`on()`](http://api.jquery.com/on/)) - Does not support namespaces, selectors or eventData
	 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
	 * - [`clone()`](http://api.jquery.com/clone/)
	 * - [`contents()`](http://api.jquery.com/contents/)
	 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
	 *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
	 * - [`data()`](http://api.jquery.com/data/)
	 * - [`detach()`](http://api.jquery.com/detach/)
	 * - [`empty()`](http://api.jquery.com/empty/)
	 * - [`eq()`](http://api.jquery.com/eq/)
	 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
	 * - [`hasClass()`](http://api.jquery.com/hasClass/)
	 * - [`html()`](http://api.jquery.com/html/)
	 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
	 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
	 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
	 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
	 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
	 * - [`prepend()`](http://api.jquery.com/prepend/)
	 * - [`prop()`](http://api.jquery.com/prop/)
	 * - [`ready()`](http://api.jquery.com/ready/) (_deprecated_, use `angular.element(callback)` instead of `angular.element(document).ready(callback)`)
	 * - [`remove()`](http://api.jquery.com/remove/)
	 * - [`removeAttr()`](http://api.jquery.com/removeAttr/) - Does not support multiple attributes
	 * - [`removeClass()`](http://api.jquery.com/removeClass/) - Does not support a function as first argument
	 * - [`removeData()`](http://api.jquery.com/removeData/)
	 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
	 * - [`text()`](http://api.jquery.com/text/)
	 * - [`toggleClass()`](http://api.jquery.com/toggleClass/) - Does not support a function as first argument
	 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers
	 * - [`unbind()`](http://api.jquery.com/unbind/) (_deprecated_, use [`off()`](http://api.jquery.com/off/)) - Does not support namespaces or event object as parameter
	 * - [`val()`](http://api.jquery.com/val/)
	 * - [`wrap()`](http://api.jquery.com/wrap/)
	 *
	 * ## jQuery/jqLite Extras
	 * Angular also provides the following additional methods and events to both jQuery and jqLite:
	 *
	 * ### Events
	 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
	 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
	 *    element before it is removed.
	 *
	 * ### Methods
	 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
	 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
	 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
	 *   `'ngModel'`).
	 * - `injector()` - retrieves the injector of the current element or its parent.
	 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
	 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
	 *   be enabled.
	 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
	 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
	 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
	 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
	 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
	 *   parent element is reached.
	 *
	 * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
	 * https://github.com/angular/angular.js/issues/14251 for more information.
	 *
	 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
	 * @returns {Object} jQuery object.
	 */JQLite.expando='ng339';var jqCache=JQLite.cache={},jqId=1;/*
	 * !!! This is an undocumented "private" function !!!
	 */JQLite._data=function(node){//jQuery always returns an object on cache miss
	return this.cache[node[this.expando]]||{};};function jqNextId(){return++jqId;}var DASH_LOWERCASE_REGEXP=/-([a-z])/g;var MS_HACK_REGEXP=/^-ms-/;var MOUSE_EVENT_MAP={mouseleave:'mouseout',mouseenter:'mouseover'};var jqLiteMinErr=minErr('jqLite');/**
	 * Converts kebab-case to camelCase.
	 * There is also a special case for the ms prefix starting with a lowercase letter.
	 * @param name Name to normalize
	 */function cssKebabToCamel(name){return kebabToCamel(name.replace(MS_HACK_REGEXP,'ms-'));}function fnCamelCaseReplace(all,letter){return letter.toUpperCase();}/**
	 * Converts kebab-case to camelCase.
	 * @param name Name to normalize
	 */function kebabToCamel(name){return name.replace(DASH_LOWERCASE_REGEXP,fnCamelCaseReplace);}var SINGLE_TAG_REGEXP=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;var HTML_REGEXP=/<|&#?\w+;/;var TAG_NAME_REGEXP=/<([\w:-]+)/;var XHTML_TAG_REGEXP=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;var wrapMap={'option':[1,'<select multiple="multiple">','</select>'],'thead':[1,'<table>','</table>'],'col':[2,'<table><colgroup>','</colgroup></table>'],'tr':[2,'<table><tbody>','</tbody></table>'],'td':[3,'<table><tbody><tr>','</tr></tbody></table>'],'_default':[0,'','']};wrapMap.optgroup=wrapMap.option;wrapMap.tbody=wrapMap.tfoot=wrapMap.colgroup=wrapMap.caption=wrapMap.thead;wrapMap.th=wrapMap.td;function jqLiteIsTextNode(html){return!HTML_REGEXP.test(html);}function jqLiteAcceptsData(node){// The window object can accept data but has no nodeType
	// Otherwise we are only interested in elements (1) and documents (9)
	var nodeType=node.nodeType;return nodeType===NODE_TYPE_ELEMENT||!nodeType||nodeType===NODE_TYPE_DOCUMENT;}function jqLiteHasData(node){for(var key in jqCache[node.ng339]){return true;}return false;}function jqLiteCleanData(nodes){for(var i=0,ii=nodes.length;i<ii;i++){jqLiteRemoveData(nodes[i]);}}function jqLiteBuildFragment(html,context){var tmp,tag,wrap,fragment=context.createDocumentFragment(),nodes=[],i;if(jqLiteIsTextNode(html)){// Convert non-html into a text node
	nodes.push(context.createTextNode(html));}else{// Convert html into DOM nodes
	tmp=fragment.appendChild(context.createElement('div'));tag=(TAG_NAME_REGEXP.exec(html)||['',''])[1].toLowerCase();wrap=wrapMap[tag]||wrapMap._default;tmp.innerHTML=wrap[1]+html.replace(XHTML_TAG_REGEXP,'<$1></$2>')+wrap[2];// Descend through wrappers to the right content
	i=wrap[0];while(i--){tmp=tmp.lastChild;}nodes=concat(nodes,tmp.childNodes);tmp=fragment.firstChild;tmp.textContent='';}// Remove wrapper from fragment
	fragment.textContent='';fragment.innerHTML='';// Clear inner HTML
	forEach(nodes,function(node){fragment.appendChild(node);});return fragment;}function jqLiteParseHTML(html,context){context=context||window.document;var parsed;if(parsed=SINGLE_TAG_REGEXP.exec(html)){return[context.createElement(parsed[1])];}if(parsed=jqLiteBuildFragment(html,context)){return parsed.childNodes;}return[];}function jqLiteWrapNode(node,wrapper){var parent=node.parentNode;if(parent){parent.replaceChild(wrapper,node);}wrapper.appendChild(node);}// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
	var jqLiteContains=window.Node.prototype.contains||/** @this */function(arg){// eslint-disable-next-line no-bitwise
	return!!(this.compareDocumentPosition(arg)&16);};/////////////////////////////////////////////
	function JQLite(element){if(element instanceof JQLite){return element;}var argIsString;if(isString(element)){element=trim(element);argIsString=true;}if(!(this instanceof JQLite)){if(argIsString&&element.charAt(0)!=='<'){throw jqLiteMinErr('nosel','Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');}return new JQLite(element);}if(argIsString){jqLiteAddNodes(this,jqLiteParseHTML(element));}else if(isFunction(element)){jqLiteReady(element);}else{jqLiteAddNodes(this,element);}}function jqLiteClone(element){return element.cloneNode(true);}function jqLiteDealoc(element,onlyDescendants){if(!onlyDescendants)jqLiteRemoveData(element);if(element.querySelectorAll){var descendants=element.querySelectorAll('*');for(var i=0,l=descendants.length;i<l;i++){jqLiteRemoveData(descendants[i]);}}}function jqLiteOff(element,type,fn,unsupported){if(isDefined(unsupported))throw jqLiteMinErr('offargs','jqLite#off() does not support the `selector` argument');var expandoStore=jqLiteExpandoStore(element);var events=expandoStore&&expandoStore.events;var handle=expandoStore&&expandoStore.handle;if(!handle)return;//no listeners registered
	if(!type){for(type in events){if(type!=='$destroy'){element.removeEventListener(type,handle);}delete events[type];}}else{var removeHandler=function removeHandler(type){var listenerFns=events[type];if(isDefined(fn)){arrayRemove(listenerFns||[],fn);}if(!(isDefined(fn)&&listenerFns&&listenerFns.length>0)){element.removeEventListener(type,handle);delete events[type];}};forEach(type.split(' '),function(type){removeHandler(type);if(MOUSE_EVENT_MAP[type]){removeHandler(MOUSE_EVENT_MAP[type]);}});}}function jqLiteRemoveData(element,name){var expandoId=element.ng339;var expandoStore=expandoId&&jqCache[expandoId];if(expandoStore){if(name){delete expandoStore.data[name];return;}if(expandoStore.handle){if(expandoStore.events.$destroy){expandoStore.handle({},'$destroy');}jqLiteOff(element);}delete jqCache[expandoId];element.ng339=undefined;// don't delete DOM expandos. IE and Chrome don't like it
	}}function jqLiteExpandoStore(element,createIfNecessary){var expandoId=element.ng339,expandoStore=expandoId&&jqCache[expandoId];if(createIfNecessary&&!expandoStore){element.ng339=expandoId=jqNextId();expandoStore=jqCache[expandoId]={events:{},data:{},handle:undefined};}return expandoStore;}function jqLiteData(element,key,value){if(jqLiteAcceptsData(element)){var prop;var isSimpleSetter=isDefined(value);var isSimpleGetter=!isSimpleSetter&&key&&!isObject(key);var massGetter=!key;var expandoStore=jqLiteExpandoStore(element,!isSimpleGetter);var data=expandoStore&&expandoStore.data;if(isSimpleSetter){// data('key', value)
	data[kebabToCamel(key)]=value;}else{if(massGetter){// data()
	return data;}else{if(isSimpleGetter){// data('key')
	// don't force creation of expandoStore if it doesn't exist yet
	return data&&data[kebabToCamel(key)];}else{// mass-setter: data({key1: val1, key2: val2})
	for(prop in key){data[kebabToCamel(prop)]=key[prop];}}}}}}function jqLiteHasClass(element,selector){if(!element.getAttribute)return false;return(' '+(element.getAttribute('class')||'')+' ').replace(/[\n\t]/g,' ').indexOf(' '+selector+' ')>-1;}function jqLiteRemoveClass(element,cssClasses){if(cssClasses&&element.setAttribute){forEach(cssClasses.split(' '),function(cssClass){element.setAttribute('class',trim((' '+(element.getAttribute('class')||'')+' ').replace(/[\n\t]/g,' ').replace(' '+trim(cssClass)+' ',' ')));});}}function jqLiteAddClass(element,cssClasses){if(cssClasses&&element.setAttribute){var existingClasses=(' '+(element.getAttribute('class')||'')+' ').replace(/[\n\t]/g,' ');forEach(cssClasses.split(' '),function(cssClass){cssClass=trim(cssClass);if(existingClasses.indexOf(' '+cssClass+' ')===-1){existingClasses+=cssClass+' ';}});element.setAttribute('class',trim(existingClasses));}}function jqLiteAddNodes(root,elements){// THIS CODE IS VERY HOT. Don't make changes without benchmarking.
	if(elements){// if a Node (the most common case)
	if(elements.nodeType){root[root.length++]=elements;}else{var length=elements.length;// if an Array or NodeList and not a Window
	if(typeof length==='number'&&elements.window!==elements){if(length){for(var i=0;i<length;i++){root[root.length++]=elements[i];}}}else{root[root.length++]=elements;}}}}function jqLiteController(element,name){return jqLiteInheritedData(element,'$'+(name||'ngController')+'Controller');}function jqLiteInheritedData(element,name,value){// if element is the document object work with the html element instead
	// this makes $(document).scope() possible
	if(element.nodeType===NODE_TYPE_DOCUMENT){element=element.documentElement;}var names=isArray(name)?name:[name];while(element){for(var i=0,ii=names.length;i<ii;i++){if(isDefined(value=jqLite.data(element,names[i])))return value;}// If dealing with a document fragment node with a host element, and no parent, use the host
	// element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
	// to lookup parent controllers.
	element=element.parentNode||element.nodeType===NODE_TYPE_DOCUMENT_FRAGMENT&&element.host;}}function jqLiteEmpty(element){jqLiteDealoc(element,true);while(element.firstChild){element.removeChild(element.firstChild);}}function jqLiteRemove(element,keepData){if(!keepData)jqLiteDealoc(element);var parent=element.parentNode;if(parent)parent.removeChild(element);}function jqLiteDocumentLoaded(action,win){win=win||window;if(win.document.readyState==='complete'){// Force the action to be run async for consistent behavior
	// from the action's point of view
	// i.e. it will definitely not be in a $apply
	win.setTimeout(action);}else{// No need to unbind this handler as load is only ever called once
	jqLite(win).on('load',action);}}function jqLiteReady(fn){function trigger(){window.document.removeEventListener('DOMContentLoaded',trigger);window.removeEventListener('load',trigger);fn();}// check if document is already loaded
	if(window.document.readyState==='complete'){window.setTimeout(fn);}else{// We can not use jqLite since we are not done loading and jQuery could be loaded later.
	// Works for modern browsers and IE9
	window.document.addEventListener('DOMContentLoaded',trigger);// Fallback to window.onload for others
	window.addEventListener('load',trigger);}}//////////////////////////////////////////
	// Functions which are declared directly.
	//////////////////////////////////////////
	var JQLitePrototype=JQLite.prototype={ready:jqLiteReady,toString:function toString(){var value=[];forEach(this,function(e){value.push(''+e);});return'['+value.join(', ')+']';},eq:function eq(index){return index>=0?jqLite(this[index]):jqLite(this[this.length+index]);},length:0,push:push,sort:[].sort,splice:[].splice};//////////////////////////////////////////
	// Functions iterating getter/setters.
	// these functions return self on setter and
	// value on get.
	//////////////////////////////////////////
	var BOOLEAN_ATTR={};forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','),function(value){BOOLEAN_ATTR[lowercase(value)]=value;});var BOOLEAN_ELEMENTS={};forEach('input,select,option,textarea,button,form,details'.split(','),function(value){BOOLEAN_ELEMENTS[value]=true;});var ALIASED_ATTR={'ngMinlength':'minlength','ngMaxlength':'maxlength','ngMin':'min','ngMax':'max','ngPattern':'pattern','ngStep':'step'};function getBooleanAttrName(element,name){// check dom last since we will most likely fail on name
	var booleanAttr=BOOLEAN_ATTR[name.toLowerCase()];// booleanAttr is here twice to minimize DOM access
	return booleanAttr&&BOOLEAN_ELEMENTS[nodeName_(element)]&&booleanAttr;}function getAliasedAttrName(name){return ALIASED_ATTR[name];}forEach({data:jqLiteData,removeData:jqLiteRemoveData,hasData:jqLiteHasData,cleanData:jqLiteCleanData},function(fn,name){JQLite[name]=fn;});forEach({data:jqLiteData,inheritedData:jqLiteInheritedData,scope:function scope(element){// Can't use jqLiteData here directly so we stay compatible with jQuery!
	return jqLite.data(element,'$scope')||jqLiteInheritedData(element.parentNode||element,['$isolateScope','$scope']);},isolateScope:function isolateScope(element){// Can't use jqLiteData here directly so we stay compatible with jQuery!
	return jqLite.data(element,'$isolateScope')||jqLite.data(element,'$isolateScopeNoTemplate');},controller:jqLiteController,injector:function injector(element){return jqLiteInheritedData(element,'$injector');},removeAttr:function removeAttr(element,name){element.removeAttribute(name);},hasClass:jqLiteHasClass,css:function css(element,name,value){name=cssKebabToCamel(name);if(isDefined(value)){element.style[name]=value;}else{return element.style[name];}},attr:function attr(element,name,value){var ret;var nodeType=element.nodeType;if(nodeType===NODE_TYPE_TEXT||nodeType===NODE_TYPE_ATTRIBUTE||nodeType===NODE_TYPE_COMMENT||!element.getAttribute){return;}var lowercasedName=lowercase(name);var isBooleanAttr=BOOLEAN_ATTR[lowercasedName];if(isDefined(value)){// setter
	if(value===null||value===false&&isBooleanAttr){element.removeAttribute(name);}else{element.setAttribute(name,isBooleanAttr?lowercasedName:value);}}else{// getter
	ret=element.getAttribute(name);if(isBooleanAttr&&ret!==null){ret=lowercasedName;}// Normalize non-existing attributes to undefined (as jQuery).
	return ret===null?undefined:ret;}},prop:function prop(element,name,value){if(isDefined(value)){element[name]=value;}else{return element[name];}},text:function(){getText.$dv='';return getText;function getText(element,value){if(isUndefined(value)){var nodeType=element.nodeType;return nodeType===NODE_TYPE_ELEMENT||nodeType===NODE_TYPE_TEXT?element.textContent:'';}element.textContent=value;}}(),val:function val(element,value){if(isUndefined(value)){if(element.multiple&&nodeName_(element)==='select'){var result=[];forEach(element.options,function(option){if(option.selected){result.push(option.value||option.text);}});return result;}return element.value;}element.value=value;},html:function html(element,value){if(isUndefined(value)){return element.innerHTML;}jqLiteDealoc(element,true);element.innerHTML=value;},empty:jqLiteEmpty},function(fn,name){/**
	   * Properties: writes return selection, reads return first value
	   */JQLite.prototype[name]=function(arg1,arg2){var i,key;var nodeCount=this.length;// jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
	// in a way that survives minification.
	// jqLiteEmpty takes no arguments but is a setter.
	if(fn!==jqLiteEmpty&&isUndefined(fn.length===2&&fn!==jqLiteHasClass&&fn!==jqLiteController?arg1:arg2)){if(isObject(arg1)){// we are a write, but the object properties are the key/values
	for(i=0;i<nodeCount;i++){if(fn===jqLiteData){// data() takes the whole object in jQuery
	fn(this[i],arg1);}else{for(key in arg1){fn(this[i],key,arg1[key]);}}}// return self for chaining
	return this;}else{// we are a read, so read the first child.
	// TODO: do we still need this?
	var value=fn.$dv;// Only if we have $dv do we iterate over all, otherwise it is just the first element.
	var jj=isUndefined(value)?Math.min(nodeCount,1):nodeCount;for(var j=0;j<jj;j++){var nodeValue=fn(this[j],arg1,arg2);value=value?value+nodeValue:nodeValue;}return value;}}else{// we are a write, so apply to all children
	for(i=0;i<nodeCount;i++){fn(this[i],arg1,arg2);}// return self for chaining
	return this;}};});function createEventHandler(element,events){var eventHandler=function eventHandler(event,type){// jQuery specific api
	event.isDefaultPrevented=function(){return event.defaultPrevented;};var eventFns=events[type||event.type];var eventFnsLength=eventFns?eventFns.length:0;if(!eventFnsLength)return;if(isUndefined(event.immediatePropagationStopped)){var originalStopImmediatePropagation=event.stopImmediatePropagation;event.stopImmediatePropagation=function(){event.immediatePropagationStopped=true;if(event.stopPropagation){event.stopPropagation();}if(originalStopImmediatePropagation){originalStopImmediatePropagation.call(event);}};}event.isImmediatePropagationStopped=function(){return event.immediatePropagationStopped===true;};// Some events have special handlers that wrap the real handler
	var handlerWrapper=eventFns.specialHandlerWrapper||defaultHandlerWrapper;// Copy event handlers in case event handlers array is modified during execution.
	if(eventFnsLength>1){eventFns=shallowCopy(eventFns);}for(var i=0;i<eventFnsLength;i++){if(!event.isImmediatePropagationStopped()){handlerWrapper(element,event,eventFns[i]);}}};// TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
	//       events on `element`
	eventHandler.elem=element;return eventHandler;}function defaultHandlerWrapper(element,event,handler){handler.call(element,event);}function specialMouseHandlerWrapper(target,event,handler){// Refer to jQuery's implementation of mouseenter & mouseleave
	// Read about mouseenter and mouseleave:
	// http://www.quirksmode.org/js/events_mouse.html#link8
	var related=event.relatedTarget;// For mousenter/leave call the handler if related is outside the target.
	// NB: No relatedTarget if the mouse left/entered the browser window
	if(!related||related!==target&&!jqLiteContains.call(target,related)){handler.call(target,event);}}//////////////////////////////////////////
	// Functions iterating traversal.
	// These functions chain results into a single
	// selector.
	//////////////////////////////////////////
	forEach({removeData:jqLiteRemoveData,on:function jqLiteOn(element,type,fn,unsupported){if(isDefined(unsupported))throw jqLiteMinErr('onargs','jqLite#on() does not support the `selector` or `eventData` parameters');// Do not add event handlers to non-elements because they will not be cleaned up.
	if(!jqLiteAcceptsData(element)){return;}var expandoStore=jqLiteExpandoStore(element,true);var events=expandoStore.events;var handle=expandoStore.handle;if(!handle){handle=expandoStore.handle=createEventHandler(element,events);}// http://jsperf.com/string-indexof-vs-split
	var types=type.indexOf(' ')>=0?type.split(' '):[type];var i=types.length;var addHandler=function addHandler(type,specialHandlerWrapper,noEventListener){var eventFns=events[type];if(!eventFns){eventFns=events[type]=[];eventFns.specialHandlerWrapper=specialHandlerWrapper;if(type!=='$destroy'&&!noEventListener){element.addEventListener(type,handle);}}eventFns.push(fn);};while(i--){type=types[i];if(MOUSE_EVENT_MAP[type]){addHandler(MOUSE_EVENT_MAP[type],specialMouseHandlerWrapper);addHandler(type,undefined,true);}else{addHandler(type);}}},off:jqLiteOff,one:function one(element,type,fn){element=jqLite(element);//add the listener twice so that when it is called
	//you can remove the original function and still be
	//able to call element.off(ev, fn) normally
	element.on(type,function onFn(){element.off(type,fn);element.off(type,onFn);});element.on(type,fn);},replaceWith:function replaceWith(element,replaceNode){var index,parent=element.parentNode;jqLiteDealoc(element);forEach(new JQLite(replaceNode),function(node){if(index){parent.insertBefore(node,index.nextSibling);}else{parent.replaceChild(node,element);}index=node;});},children:function children(element){var children=[];forEach(element.childNodes,function(element){if(element.nodeType===NODE_TYPE_ELEMENT){children.push(element);}});return children;},contents:function contents(element){return element.contentDocument||element.childNodes||[];},append:function append(element,node){var nodeType=element.nodeType;if(nodeType!==NODE_TYPE_ELEMENT&&nodeType!==NODE_TYPE_DOCUMENT_FRAGMENT)return;node=new JQLite(node);for(var i=0,ii=node.length;i<ii;i++){var child=node[i];element.appendChild(child);}},prepend:function prepend(element,node){if(element.nodeType===NODE_TYPE_ELEMENT){var index=element.firstChild;forEach(new JQLite(node),function(child){element.insertBefore(child,index);});}},wrap:function wrap(element,wrapNode){jqLiteWrapNode(element,jqLite(wrapNode).eq(0).clone()[0]);},remove:jqLiteRemove,detach:function detach(element){jqLiteRemove(element,true);},after:function after(element,newElement){var index=element,parent=element.parentNode;newElement=new JQLite(newElement);for(var i=0,ii=newElement.length;i<ii;i++){var node=newElement[i];parent.insertBefore(node,index.nextSibling);index=node;}},addClass:jqLiteAddClass,removeClass:jqLiteRemoveClass,toggleClass:function toggleClass(element,selector,condition){if(selector){forEach(selector.split(' '),function(className){var classCondition=condition;if(isUndefined(classCondition)){classCondition=!jqLiteHasClass(element,className);}(classCondition?jqLiteAddClass:jqLiteRemoveClass)(element,className);});}},parent:function parent(element){var parent=element.parentNode;return parent&&parent.nodeType!==NODE_TYPE_DOCUMENT_FRAGMENT?parent:null;},next:function next(element){return element.nextElementSibling;},find:function find(element,selector){if(element.getElementsByTagName){return element.getElementsByTagName(selector);}else{return[];}},clone:jqLiteClone,triggerHandler:function triggerHandler(element,event,extraParameters){var dummyEvent,eventFnsCopy,handlerArgs;var eventName=event.type||event;var expandoStore=jqLiteExpandoStore(element);var events=expandoStore&&expandoStore.events;var eventFns=events&&events[eventName];if(eventFns){// Create a dummy event to pass to the handlers
	dummyEvent={preventDefault:function preventDefault(){this.defaultPrevented=true;},isDefaultPrevented:function isDefaultPrevented(){return this.defaultPrevented===true;},stopImmediatePropagation:function stopImmediatePropagation(){this.immediatePropagationStopped=true;},isImmediatePropagationStopped:function isImmediatePropagationStopped(){return this.immediatePropagationStopped===true;},stopPropagation:noop,type:eventName,target:element};// If a custom event was provided then extend our dummy event with it
	if(event.type){dummyEvent=extend(dummyEvent,event);}// Copy event handlers in case event handlers array is modified during execution.
	eventFnsCopy=shallowCopy(eventFns);handlerArgs=extraParameters?[dummyEvent].concat(extraParameters):[dummyEvent];forEach(eventFnsCopy,function(fn){if(!dummyEvent.isImmediatePropagationStopped()){fn.apply(element,handlerArgs);}});}}},function(fn,name){/**
	   * chaining functions
	   */JQLite.prototype[name]=function(arg1,arg2,arg3){var value;for(var i=0,ii=this.length;i<ii;i++){if(isUndefined(value)){value=fn(this[i],arg1,arg2,arg3);if(isDefined(value)){// any function which returns a value needs to be wrapped
	value=jqLite(value);}}else{jqLiteAddNodes(value,fn(this[i],arg1,arg2,arg3));}}return isDefined(value)?value:this;};});// bind legacy bind/unbind to on/off
	JQLite.prototype.bind=JQLite.prototype.on;JQLite.prototype.unbind=JQLite.prototype.off;// Provider for private $$jqLite service
	/** @this */function $$jqLiteProvider(){this.$get=function $$jqLite(){return extend(JQLite,{hasClass:function hasClass(node,classes){if(node.attr)node=node[0];return jqLiteHasClass(node,classes);},addClass:function addClass(node,classes){if(node.attr)node=node[0];return jqLiteAddClass(node,classes);},removeClass:function removeClass(node,classes){if(node.attr)node=node[0];return jqLiteRemoveClass(node,classes);}});};}/**
	 * Computes a hash of an 'obj'.
	 * Hash of a:
	 *  string is string
	 *  number is number as string
	 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
	 *         that is also assigned to the $$hashKey property of the object.
	 *
	 * @param obj
	 * @returns {string} hash string such that the same input will have the same hash string.
	 *         The resulting string key is in 'type:hashKey' format.
	 */function hashKey(obj,nextUidFn){var key=obj&&obj.$$hashKey;if(key){if(typeof key==='function'){key=obj.$$hashKey();}return key;}var objType=typeof obj==='undefined'?'undefined':_typeof(obj);if(objType==='function'||objType==='object'&&obj!==null){key=obj.$$hashKey=objType+':'+(nextUidFn||nextUid)();}else{key=objType+':'+obj;}return key;}/**
	 * HashMap which can use objects as keys
	 */function HashMap(array,isolatedUid){if(isolatedUid){var uid=0;this.nextUid=function(){return++uid;};}forEach(array,this.put,this);}HashMap.prototype={/**
	   * Store key value pair
	   * @param key key to store can be any type
	   * @param value value to store can be any type
	   */put:function put(key,value){this[hashKey(key,this.nextUid)]=value;},/**
	   * @param key
	   * @returns {Object} the value for the key
	   */get:function get(key){return this[hashKey(key,this.nextUid)];},/**
	   * Remove the key/value pair
	   * @param key
	   */remove:function remove(key){var value=this[key=hashKey(key,this.nextUid)];delete this[key];return value;}};var $$HashMapProvider=[/** @this */function(){this.$get=[function(){return HashMap;}];}];/**
	 * @ngdoc function
	 * @module ng
	 * @name angular.injector
	 * @kind function
	 *
	 * @description
	 * Creates an injector object that can be used for retrieving services as well as for
	 * dependency injection (see {@link guide/di dependency injection}).
	 *
	 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
	 *     {@link angular.module}. The `ng` module must be explicitly added.
	 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
	 *     disallows argument name annotation inference.
	 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
	 *
	 * @example
	 * Typical usage
	 * ```js
	 *   // create an injector
	 *   var $injector = angular.injector(['ng']);
	 *
	 *   // use the injector to kick off your application
	 *   // use the type inference to auto inject arguments, or use implicit injection
	 *   $injector.invoke(function($rootScope, $compile, $document) {
	 *     $compile($document)($rootScope);
	 *     $rootScope.$digest();
	 *   });
	 * ```
	 *
	 * Sometimes you want to get access to the injector of a currently running Angular app
	 * from outside Angular. Perhaps, you want to inject and compile some markup after the
	 * application has been bootstrapped. You can do this using the extra `injector()` added
	 * to JQuery/jqLite elements. See {@link angular.element}.
	 *
	 * *This is fairly rare but could be the case if a third party library is injecting the
	 * markup.*
	 *
	 * In the following example a new block of HTML containing a `ng-controller`
	 * directive is added to the end of the document body by JQuery. We then compile and link
	 * it into the current AngularJS scope.
	 *
	 * ```js
	 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
	 * $(document.body).append($div);
	 *
	 * angular.element(document).injector().invoke(function($compile) {
	 *   var scope = angular.element($div).scope();
	 *   $compile($div)(scope);
	 * });
	 * ```
	 *//**
	 * @ngdoc module
	 * @name auto
	 * @installation
	 * @description
	 *
	 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
	 */var ARROW_ARG=/^([^(]+?)=>/;var FN_ARGS=/^[^(]*\(\s*([^)]*)\)/m;var FN_ARG_SPLIT=/,/;var FN_ARG=/^\s*(_?)(\S+?)\1\s*$/;var STRIP_COMMENTS=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;var $injectorMinErr=minErr('$injector');function stringifyFn(fn){// Support: Chrome 50-51 only
	// Creating a new string by adding `' '` at the end, to hack around some bug in Chrome v50/51
	// (See https://github.com/angular/angular.js/issues/14487.)
	// TODO (gkalpak): Remove workaround when Chrome v52 is released
	return Function.prototype.toString.call(fn)+' ';}function extractArgs(fn){var fnText=stringifyFn(fn).replace(STRIP_COMMENTS,''),args=fnText.match(ARROW_ARG)||fnText.match(FN_ARGS);return args;}function anonFn(fn){// For anonymous functions, showing at the very least the function signature can help in
	// debugging.
	var args=extractArgs(fn);if(args){return'function('+(args[1]||'').replace(/[\s\r\n]+/,' ')+')';}return'fn';}function annotate(fn,strictDi,name){var $inject,argDecl,last;if(typeof fn==='function'){if(!($inject=fn.$inject)){$inject=[];if(fn.length){if(strictDi){if(!isString(name)||!name){name=fn.name||anonFn(fn);}throw $injectorMinErr('strictdi','{0} is not using explicit annotation and cannot be invoked in strict mode',name);}argDecl=extractArgs(fn);forEach(argDecl[1].split(FN_ARG_SPLIT),function(arg){arg.replace(FN_ARG,function(all,underscore,name){$inject.push(name);});});}fn.$inject=$inject;}}else if(isArray(fn)){last=fn.length-1;assertArgFn(fn[last],'fn');$inject=fn.slice(0,last);}else{assertArgFn(fn,'fn',true);}return $inject;}///////////////////////////////////////
	/**
	 * @ngdoc service
	 * @name $injector
	 *
	 * @description
	 *
	 * `$injector` is used to retrieve object instances as defined by
	 * {@link auto.$provide provider}, instantiate types, invoke methods,
	 * and load modules.
	 *
	 * The following always holds true:
	 *
	 * ```js
	 *   var $injector = angular.injector();
	 *   expect($injector.get('$injector')).toBe($injector);
	 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
	 * ```
	 *
	 * # Injection Function Annotation
	 *
	 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
	 * following are all valid ways of annotating function with injection arguments and are equivalent.
	 *
	 * ```js
	 *   // inferred (only works if code not minified/obfuscated)
	 *   $injector.invoke(function(serviceA){});
	 *
	 *   // annotated
	 *   function explicit(serviceA) {};
	 *   explicit.$inject = ['serviceA'];
	 *   $injector.invoke(explicit);
	 *
	 *   // inline
	 *   $injector.invoke(['serviceA', function(serviceA){}]);
	 * ```
	 *
	 * ## Inference
	 *
	 * In JavaScript calling `toString()` on a function returns the function definition. The definition
	 * can then be parsed and the function arguments can be extracted. This method of discovering
	 * annotations is disallowed when the injector is in strict mode.
	 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
	 * argument names.
	 *
	 * ## `$inject` Annotation
	 * By adding an `$inject` property onto a function the injection parameters can be specified.
	 *
	 * ## Inline
	 * As an array of injection names, where the last item in the array is the function to call.
	 *//**
	 * @ngdoc method
	 * @name $injector#get
	 *
	 * @description
	 * Return an instance of the service.
	 *
	 * @param {string} name The name of the instance to retrieve.
	 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
	 * @return {*} The instance.
	 *//**
	 * @ngdoc method
	 * @name $injector#invoke
	 *
	 * @description
	 * Invoke the method and supply the method arguments from the `$injector`.
	 *
	 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
	 *   injected according to the {@link guide/di $inject Annotation} rules.
	 * @param {Object=} self The `this` for the invoked method.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 *                         object first, before the `$injector` is consulted.
	 * @returns {*} the value returned by the invoked `fn` function.
	 *//**
	 * @ngdoc method
	 * @name $injector#has
	 *
	 * @description
	 * Allows the user to query if the particular service exists.
	 *
	 * @param {string} name Name of the service to query.
	 * @returns {boolean} `true` if injector has given service.
	 *//**
	 * @ngdoc method
	 * @name $injector#instantiate
	 * @description
	 * Create a new instance of JS type. The method takes a constructor function, invokes the new
	 * operator, and supplies all of the arguments to the constructor function as specified by the
	 * constructor annotation.
	 *
	 * @param {Function} Type Annotated constructor function.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 * object first, before the `$injector` is consulted.
	 * @returns {Object} new instance of `Type`.
	 *//**
	 * @ngdoc method
	 * @name $injector#annotate
	 *
	 * @description
	 * Returns an array of service names which the function is requesting for injection. This API is
	 * used by the injector to determine which services need to be injected into the function when the
	 * function is invoked. There are three ways in which the function can be annotated with the needed
	 * dependencies.
	 *
	 * # Argument names
	 *
	 * The simplest form is to extract the dependencies from the arguments of the function. This is done
	 * by converting the function into a string using `toString()` method and extracting the argument
	 * names.
	 * ```js
	 *   // Given
	 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * You can disallow this method by using strict injection mode.
	 *
	 * This method does not work with code minification / obfuscation. For this reason the following
	 * annotation strategies are supported.
	 *
	 * # The `$inject` property
	 *
	 * If a function has an `$inject` property and its value is an array of strings, then the strings
	 * represent names of services to be injected into the function.
	 * ```js
	 *   // Given
	 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
	 *   // Define function dependencies
	 *   MyController['$inject'] = ['$scope', '$route'];
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * # The array notation
	 *
	 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
	 * is very inconvenient. In these situations using the array notation to specify the dependencies in
	 * a way that survives minification is a better choice:
	 *
	 * ```js
	 *   // We wish to write this (not minification / obfuscation safe)
	 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
	 *
	 *   // We are forced to write break inlining
	 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
	 *   tmpFn.$inject = ['$compile', '$rootScope'];
	 *   injector.invoke(tmpFn);
	 *
	 *   // To better support inline function the inline annotation is supported
	 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
	 *
	 *   // Therefore
	 *   expect(injector.annotate(
	 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
	 *    ).toEqual(['$compile', '$rootScope']);
	 * ```
	 *
	 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
	 * be retrieved as described above.
	 *
	 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
	 *
	 * @returns {Array.<string>} The names of the services which the function requires.
	 *//**
	 * @ngdoc service
	 * @name $provide
	 *
	 * @description
	 *
	 * The {@link auto.$provide $provide} service has a number of methods for registering components
	 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
	 * {@link angular.Module}.
	 *
	 * An Angular **service** is a singleton object created by a **service factory**.  These **service
	 * factories** are functions which, in turn, are created by a **service provider**.
	 * The **service providers** are constructor functions. When instantiated they must contain a
	 * property called `$get`, which holds the **service factory** function.
	 *
	 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
	 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
	 * function to get the instance of the **service**.
	 *
	 * Often services have no configuration options and there is no need to add methods to the service
	 * provider.  The provider will be no more than a constructor function with a `$get` property. For
	 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
	 * services without specifying a provider.
	 *
	 * * {@link auto.$provide#provider provider(name, provider)} - registers a **service provider** with the
	 *     {@link auto.$injector $injector}
	 * * {@link auto.$provide#constant constant(name, obj)} - registers a value/object that can be accessed by
	 *     providers and services.
	 * * {@link auto.$provide#value value(name, obj)} - registers a value/object that can only be accessed by
	 *     services, not providers.
	 * * {@link auto.$provide#factory factory(name, fn)} - registers a service **factory function**
	 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
	 *     given factory function.
	 * * {@link auto.$provide#service service(name, Fn)} - registers a **constructor function**
	 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
	 *      a new object using the given constructor function.
	 * * {@link auto.$provide#decorator decorator(name, decorFn)} - registers a **decorator function** that
	 *      will be able to modify or replace the implementation of another service.
	 *
	 * See the individual methods for more information and examples.
	 *//**
	 * @ngdoc method
	 * @name $provide#provider
	 * @description
	 *
	 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
	 * are constructor functions, whose instances are responsible for "providing" a factory for a
	 * service.
	 *
	 * Service provider names start with the name of the service they provide followed by `Provider`.
	 * For example, the {@link ng.$log $log} service has a provider called
	 * {@link ng.$logProvider $logProvider}.
	 *
	 * Service provider objects can have additional methods which allow configuration of the provider
	 * and its service. Importantly, you can configure what kind of service is created by the `$get`
	 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
	 * method {@link ng.$logProvider#debugEnabled debugEnabled}
	 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
	 * console or not.
	 *
	 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
	                        'Provider'` key.
	 * @param {(Object|function())} provider If the provider is:
	 *
	 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
	 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
	 *   - `Constructor`: a new instance of the provider will be created using
	 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
	 *
	 * @returns {Object} registered provider instance

	 * @example
	 *
	 * The following example shows how to create a simple event tracking service and register it using
	 * {@link auto.$provide#provider $provide.provider()}.
	 *
	 * ```js
	 *  // Define the eventTracker provider
	 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
	 *
	 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
	 * ```
	 *//**
	 * @ngdoc method
	 * @name $provide#factory
	 * @description
	 *
	 * Register a **service factory**, which will be called to return the service instance.
	 * This is short for registering a service where its provider consists of only a `$get` property,
	 * which is the given service factory function.
	 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
	 * configure your service in a provider.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
	 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service
	 * ```js
	 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
	 * ```
	 *//**
	 * @ngdoc method
	 * @name $provide#service
	 * @description
	 *
	 * Register a **service constructor**, which will be invoked with `new` to create the service
	 * instance.
	 * This is short for registering a service where its provider's `$get` property is a factory
	 * function that returns an instance instantiated by the injector from the service constructor
	 * function.
	 *
	 * Internally it looks a bit like this:
	 *
	 * ```
	 * {
	 *   $get: function() {
	 *     return $injector.instantiate(constructor);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
	 * as a type/class.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
	 *     that will be instantiated.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service using
	 * {@link auto.$provide#service $provide.service(class)}.
	 * ```js
	 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
	 *
	 *   Ping.$inject = ['$http'];
	 *
	 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
	 *   $provide.service('ping', Ping);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
	 * ```
	 *//**
	 * @ngdoc method
	 * @name $provide#value
	 * @description
	 *
	 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
	 * number, an array, an object or a function. This is short for registering a service where its
	 * provider's `$get` property is a factory function that takes no arguments and returns the **value
	 * service**. That also means it is not possible to inject other services into a value service.
	 *
	 * Value services are similar to constant services, except that they cannot be injected into a
	 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
	 * an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the instance.
	 * @param {*} value The value.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here are some examples of creating value services.
	 * ```js
	 *   $provide.value('ADMIN_USER', 'admin');
	 *
	 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
	 *
	 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
	 * ```
	 *//**
	 * @ngdoc method
	 * @name $provide#constant
	 * @description
	 *
	 * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
	 * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
	 * possible to inject other services into a constant.
	 *
	 * But unlike {@link auto.$provide#value value}, a constant can be
	 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
	 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the constant.
	 * @param {*} value The constant value.
	 * @returns {Object} registered instance
	 *
	 * @example
	 * Here a some examples of creating constants:
	 * ```js
	 *   $provide.constant('SHARD_HEIGHT', 306);
	 *
	 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
	 *
	 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
	 * ```
	 *//**
	 * @ngdoc method
	 * @name $provide#decorator
	 * @description
	 *
	 * Register a **decorator function** with the {@link auto.$injector $injector}. A decorator function
	 * intercepts the creation of a service, allowing it to override or modify the behavior of the
	 * service. The return value of the decorator function may be the original service, or a new service
	 * that replaces (or wraps and delegates to) the original service.
	 *
	 * You can find out more about using decorators in the {@link guide/decorators} guide.
	 *
	 * @param {string} name The name of the service to decorate.
	 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
	 *    provided and should return the decorated service instance. The function is called using
	 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
	 *    Local injection arguments:
	 *
	 *    * `$delegate` - The original service instance, which can be replaced, monkey patched, configured,
	 *      decorated or delegated to.
	 *
	 * @example
	 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
	 * calls to {@link ng.$log#error $log.warn()}.
	 * ```js
	 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
	 * ```
	 */function createInjector(modulesToLoad,strictDi){strictDi=strictDi===true;var INSTANTIATING={},providerSuffix='Provider',path=[],loadedModules=new HashMap([],true),providerCache={$provide:{provider:supportObject(provider),factory:supportObject(factory),service:supportObject(service),value:supportObject(value),constant:supportObject(constant),decorator:decorator}},providerInjector=providerCache.$injector=createInternalInjector(providerCache,function(serviceName,caller){if(angular.isString(caller)){path.push(caller);}throw $injectorMinErr('unpr','Unknown provider: {0}',path.join(' <- '));}),instanceCache={},protoInstanceInjector=createInternalInjector(instanceCache,function(serviceName,caller){var provider=providerInjector.get(serviceName+providerSuffix,caller);return instanceInjector.invoke(provider.$get,provider,undefined,serviceName);}),instanceInjector=protoInstanceInjector;providerCache['$injector'+providerSuffix]={$get:valueFn(protoInstanceInjector)};var runBlocks=loadModules(modulesToLoad);instanceInjector=protoInstanceInjector.get('$injector');instanceInjector.strictDi=strictDi;forEach(runBlocks,function(fn){if(fn)instanceInjector.invoke(fn);});return instanceInjector;////////////////////////////////////
	// $provider
	////////////////////////////////////
	function supportObject(delegate){return function(key,value){if(isObject(key)){forEach(key,reverseParams(delegate));}else{return delegate(key,value);}};}function provider(name,provider_){assertNotHasOwnProperty(name,'service');if(isFunction(provider_)||isArray(provider_)){provider_=providerInjector.instantiate(provider_);}if(!provider_.$get){throw $injectorMinErr('pget','Provider \'{0}\' must define $get factory method.',name);}return providerCache[name+providerSuffix]=provider_;}function enforceReturnValue(name,factory){return(/** @this */function enforcedReturnValue(){var result=instanceInjector.invoke(factory,this);if(isUndefined(result)){throw $injectorMinErr('undef','Provider \'{0}\' must return a value from $get factory method.',name);}return result;});}function factory(name,factoryFn,enforce){return provider(name,{$get:enforce!==false?enforceReturnValue(name,factoryFn):factoryFn});}function service(name,constructor){return factory(name,['$injector',function($injector){return $injector.instantiate(constructor);}]);}function value(name,val){return factory(name,valueFn(val),false);}function constant(name,value){assertNotHasOwnProperty(name,'constant');providerCache[name]=value;instanceCache[name]=value;}function decorator(serviceName,decorFn){var origProvider=providerInjector.get(serviceName+providerSuffix),orig$get=origProvider.$get;origProvider.$get=function(){var origInstance=instanceInjector.invoke(orig$get,origProvider);return instanceInjector.invoke(decorFn,null,{$delegate:origInstance});};}////////////////////////////////////
	// Module Loading
	////////////////////////////////////
	function loadModules(modulesToLoad){assertArg(isUndefined(modulesToLoad)||isArray(modulesToLoad),'modulesToLoad','not an array');var runBlocks=[],moduleFn;forEach(modulesToLoad,function(module){if(loadedModules.get(module))return;loadedModules.put(module,true);function runInvokeQueue(queue){var i,ii;for(i=0,ii=queue.length;i<ii;i++){var invokeArgs=queue[i],provider=providerInjector.get(invokeArgs[0]);provider[invokeArgs[1]].apply(provider,invokeArgs[2]);}}try{if(isString(module)){moduleFn=angularModule(module);runBlocks=runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);runInvokeQueue(moduleFn._invokeQueue);runInvokeQueue(moduleFn._configBlocks);}else if(isFunction(module)){runBlocks.push(providerInjector.invoke(module));}else if(isArray(module)){runBlocks.push(providerInjector.invoke(module));}else{assertArgFn(module,'module');}}catch(e){if(isArray(module)){module=module[module.length-1];}if(e.message&&e.stack&&e.stack.indexOf(e.message)===-1){// Safari & FF's stack traces don't contain error.message content
	// unlike those of Chrome and IE
	// So if stack doesn't contain message, we create a new string that contains both.
	// Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
	// eslint-disable-next-line no-ex-assign
	e=e.message+'\n'+e.stack;}throw $injectorMinErr('modulerr','Failed to instantiate module {0} due to:\n{1}',module,e.stack||e.message||e);}});return runBlocks;}////////////////////////////////////
	// internal Injector
	////////////////////////////////////
	function createInternalInjector(cache,factory){function getService(serviceName,caller){if(cache.hasOwnProperty(serviceName)){if(cache[serviceName]===INSTANTIATING){throw $injectorMinErr('cdep','Circular dependency found: {0}',serviceName+' <- '+path.join(' <- '));}return cache[serviceName];}else{try{path.unshift(serviceName);cache[serviceName]=INSTANTIATING;cache[serviceName]=factory(serviceName,caller);return cache[serviceName];}catch(err){if(cache[serviceName]===INSTANTIATING){delete cache[serviceName];}throw err;}finally{path.shift();}}}function injectionArgs(fn,locals,serviceName){var args=[],$inject=createInjector.$$annotate(fn,strictDi,serviceName);for(var i=0,length=$inject.length;i<length;i++){var key=$inject[i];if(typeof key!=='string'){throw $injectorMinErr('itkn','Incorrect injection token! Expected service name as string, got {0}',key);}args.push(locals&&locals.hasOwnProperty(key)?locals[key]:getService(key,serviceName));}return args;}function isClass(func){// Support: IE 9-11 only
	// IE 9-11 do not support classes and IE9 leaks with the code below.
	if(msie||typeof func!=='function'){return false;}var result=func.$$ngIsClass;if(!isBoolean(result)){// Support: Edge 12-13 only
	// See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/6156135/
	result=func.$$ngIsClass=/^(?:class\b|constructor\()/.test(stringifyFn(func));}return result;}function invoke(fn,self,locals,serviceName){if(typeof locals==='string'){serviceName=locals;locals=null;}var args=injectionArgs(fn,locals,serviceName);if(isArray(fn)){fn=fn[fn.length-1];}if(!isClass(fn)){// http://jsperf.com/angularjs-invoke-apply-vs-switch
	// #5388
	return fn.apply(self,args);}else{args.unshift(null);return new(Function.prototype.bind.apply(fn,args))();}}function instantiate(Type,locals,serviceName){// Check if Type is annotated and use just the given function at n-1 as parameter
	// e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
	var ctor=isArray(Type)?Type[Type.length-1]:Type;var args=injectionArgs(Type,locals,serviceName);// Empty object at position 0 is ignored for invocation with `new`, but required.
	args.unshift(null);return new(Function.prototype.bind.apply(ctor,args))();}return{invoke:invoke,instantiate:instantiate,get:getService,annotate:createInjector.$$annotate,has:function has(name){return providerCache.hasOwnProperty(name+providerSuffix)||cache.hasOwnProperty(name);}};}}createInjector.$$annotate=annotate;/**
	 * @ngdoc provider
	 * @name $anchorScrollProvider
	 * @this
	 *
	 * @description
	 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
	 * {@link ng.$location#hash $location.hash()} changes.
	 */function $AnchorScrollProvider(){var autoScrollingEnabled=true;/**
	   * @ngdoc method
	   * @name $anchorScrollProvider#disableAutoScrolling
	   *
	   * @description
	   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
	   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
	   * Use this method to disable automatic scrolling.
	   *
	   * If automatic scrolling is disabled, one must explicitly call
	   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
	   * current hash.
	   */this.disableAutoScrolling=function(){autoScrollingEnabled=false;};/**
	   * @ngdoc service
	   * @name $anchorScroll
	   * @kind function
	   * @requires $window
	   * @requires $location
	   * @requires $rootScope
	   *
	   * @description
	   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
	   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
	   * in the
	   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document).
	   *
	   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
	   * match any anchor whenever it changes. This can be disabled by calling
	   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
	   *
	   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
	   * vertical scroll-offset (either fixed or dynamic).
	   *
	   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
	   *                       {@link ng.$location#hash $location.hash()} will be used.
	   *
	   * @property {(number|function|jqLite)} yOffset
	   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
	   * positioned elements at the top of the page, such as navbars, headers etc.
	   *
	   * `yOffset` can be specified in various ways:
	   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
	   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
	   *   a number representing the offset (in pixels).<br /><br />
	   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
	   *   the top of the page to the element's bottom will be used as offset.<br />
	   *   **Note**: The element will be taken into account only as long as its `position` is set to
	   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
	   *   their height and/or positioning according to the viewport's size.
	   *
	   * <br />
	   * <div class="alert alert-warning">
	   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
	   * not some child element.
	   * </div>
	   *
	   * @example
	     <example module="anchorScrollExample" name="anchor-scroll">
	       <file name="index.html">
	         <div id="scrollArea" ng-controller="ScrollController">
	           <a ng-click="gotoBottom()">Go to bottom</a>
	           <a id="bottom"></a> You're at the bottom!
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollExample', [])
	           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
	             function($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');

	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
	       </file>
	       <file name="style.css">
	         #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }

	         #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
	       </file>
	     </example>
	   *
	   * <hr />
	   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
	   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
	   *
	   * @example
	     <example module="anchorScrollOffsetExample" name="anchor-scroll-offset">
	       <file name="index.html">
	         <div class="fixed-header" ng-controller="headerCtrl">
	           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
	             Go to anchor {{x}}
	           </a>
	         </div>
	         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
	           Anchor {{x}} of 5
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollOffsetExample', [])
	           .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
	           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
	             function($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
	           ]);
	       </file>
	       <file name="style.css">
	         body {
	           padding-top: 50px;
	         }

	         .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }

	         .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }

	         .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
	       </file>
	     </example>
	   */this.$get=['$window','$location','$rootScope',function($window,$location,$rootScope){var document=$window.document;// Helper function to get first anchor from a NodeList
	// (using `Array#some()` instead of `angular#forEach()` since it's more performant
	//  and working in all supported browsers.)
	function getFirstAnchor(list){var result=null;Array.prototype.some.call(list,function(element){if(nodeName_(element)==='a'){result=element;return true;}});return result;}function getYOffset(){var offset=scroll.yOffset;if(isFunction(offset)){offset=offset();}else if(isElement(offset)){var elem=offset[0];var style=$window.getComputedStyle(elem);if(style.position!=='fixed'){offset=0;}else{offset=elem.getBoundingClientRect().bottom;}}else if(!isNumber(offset)){offset=0;}return offset;}function scrollTo(elem){if(elem){elem.scrollIntoView();var offset=getYOffset();if(offset){// `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
	// This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
	// top of the viewport.
	//
	// IF the number of pixels from the top of `elem` to the end of the page's content is less
	// than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
	// way down the page.
	//
	// This is often the case for elements near the bottom of the page.
	//
	// In such cases we do not need to scroll the whole `offset` up, just the difference between
	// the top of the element and the offset, which is enough to align the top of `elem` at the
	// desired position.
	var elemTop=elem.getBoundingClientRect().top;$window.scrollBy(0,elemTop-offset);}}else{$window.scrollTo(0,0);}}function scroll(hash){// Allow numeric hashes
	hash=isString(hash)?hash:isNumber(hash)?hash.toString():$location.hash();var elm;// empty hash, scroll to the top of the page
	if(!hash)scrollTo(null);// element with given id
	else if(elm=document.getElementById(hash))scrollTo(elm);// first anchor with given name :-D
	else if(elm=getFirstAnchor(document.getElementsByName(hash)))scrollTo(elm);// no element and hash === 'top', scroll to the top of the page
	else if(hash==='top')scrollTo(null);}// does not scroll when user clicks on anchor link that is currently on
	// (no url change, no $location.hash() change), browser native does scroll
	if(autoScrollingEnabled){$rootScope.$watch(function autoScrollWatch(){return $location.hash();},function autoScrollWatchAction(newVal,oldVal){// skip the initial scroll if $location.hash is empty
	if(newVal===oldVal&&newVal==='')return;jqLiteDocumentLoaded(function(){$rootScope.$evalAsync(scroll);});});}return scroll;}];}var $animateMinErr=minErr('$animate');var ELEMENT_NODE=1;var NG_ANIMATE_CLASSNAME='ng-animate';function mergeClasses(a,b){if(!a&&!b)return'';if(!a)return b;if(!b)return a;if(isArray(a))a=a.join(' ');if(isArray(b))b=b.join(' ');return a+' '+b;}function extractElementNode(element){for(var i=0;i<element.length;i++){var elm=element[i];if(elm.nodeType===ELEMENT_NODE){return elm;}}}function splitClasses(classes){if(isString(classes)){classes=classes.split(' ');}// Use createMap() to prevent class assumptions involving property names in
	// Object.prototype
	var obj=createMap();forEach(classes,function(klass){// sometimes the split leaves empty string values
	// incase extra spaces were applied to the options
	if(klass.length){obj[klass]=true;}});return obj;}// if any other type of options value besides an Object value is
	// passed into the $animate.method() animation then this helper code
	// will be run which will ignore it. While this patch is not the
	// greatest solution to this, a lot of existing plugins depend on
	// $animate to either call the callback (< 1.2) or return a promise
	// that can be changed. This helper function ensures that the options
	// are wiped clean incase a callback function is provided.
	function prepareAnimateOptions(options){return isObject(options)?options:{};}var $$CoreAnimateJsProvider=/** @this */function $$CoreAnimateJsProvider(){this.$get=noop;};// this is prefixed with Core since it conflicts with
	// the animateQueueProvider defined in ngAnimate/animateQueue.js
	var $$CoreAnimateQueueProvider=/** @this */function $$CoreAnimateQueueProvider(){var postDigestQueue=new HashMap();var postDigestElements=[];this.$get=['$$AnimateRunner','$rootScope',function($$AnimateRunner,$rootScope){return{enabled:noop,on:noop,off:noop,pin:noop,push:function push(element,event,options,domOperation){if(domOperation){domOperation();}options=options||{};if(options.from){element.css(options.from);}if(options.to){element.css(options.to);}if(options.addClass||options.removeClass){addRemoveClassesPostDigest(element,options.addClass,options.removeClass);}var runner=new $$AnimateRunner();// since there are no animations to run the runner needs to be
	// notified that the animation call is complete.
	runner.complete();return runner;}};function updateData(data,classes,value){var changed=false;if(classes){classes=isString(classes)?classes.split(' '):isArray(classes)?classes:[];forEach(classes,function(className){if(className){changed=true;data[className]=value;}});}return changed;}function handleCSSClassChanges(){forEach(postDigestElements,function(element){var data=postDigestQueue.get(element);if(data){var existing=splitClasses(element.attr('class'));var toAdd='';var toRemove='';forEach(data,function(status,className){var hasClass=!!existing[className];if(status!==hasClass){if(status){toAdd+=(toAdd.length?' ':'')+className;}else{toRemove+=(toRemove.length?' ':'')+className;}}});forEach(element,function(elm){if(toAdd){jqLiteAddClass(elm,toAdd);}if(toRemove){jqLiteRemoveClass(elm,toRemove);}});postDigestQueue.remove(element);}});postDigestElements.length=0;}function addRemoveClassesPostDigest(element,add,remove){var data=postDigestQueue.get(element)||{};var classesAdded=updateData(data,add,true);var classesRemoved=updateData(data,remove,false);if(classesAdded||classesRemoved){postDigestQueue.put(element,data);postDigestElements.push(element);if(postDigestElements.length===1){$rootScope.$$postDigest(handleCSSClassChanges);}}}}];};/**
	 * @ngdoc provider
	 * @name $animateProvider
	 *
	 * @description
	 * Default implementation of $animate that doesn't perform any animations, instead just
	 * synchronously performs DOM updates and resolves the returned runner promise.
	 *
	 * In order to enable animations the `ngAnimate` module has to be loaded.
	 *
	 * To see the functional implementation check out `src/ngAnimate/animate.js`.
	 */var $AnimateProvider=['$provide',/** @this */function($provide){var provider=this;this.$$registeredAnimations=Object.create(null);/**
	   * @ngdoc method
	   * @name $animateProvider#register
	   *
	   * @description
	   * Registers a new injectable animation factory function. The factory function produces the
	   * animation object which contains callback functions for each event that is expected to be
	   * animated.
	   *
	   *   * `eventFn`: `function(element, ... , doneFunction, options)`
	   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
	   *   on the type of animation additional arguments will be injected into the animation function. The
	   *   list below explains the function signatures for the different animation methods:
	   *
	   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
	   *   - addClass: function(element, addedClasses, doneFunction, options)
	   *   - removeClass: function(element, removedClasses, doneFunction, options)
	   *   - enter, leave, move: function(element, doneFunction, options)
	   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
	   *
	   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
	   *
	   * ```js
	   *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
	   * ```
	   *
	   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
	   * @param {Function} factory The factory function that will be executed to return the animation
	   *                           object.
	   */this.register=function(name,factory){if(name&&name.charAt(0)!=='.'){throw $animateMinErr('notcsel','Expecting class selector starting with \'.\' got \'{0}\'.',name);}var key=name+'-animation';provider.$$registeredAnimations[name.substr(1)]=key;$provide.factory(key,factory);};/**
	   * @ngdoc method
	   * @name $animateProvider#classNameFilter
	   *
	   * @description
	   * Sets and/or returns the CSS class regular expression that is checked when performing
	   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
	   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
	   * When setting the `classNameFilter` value, animations will only be performed on elements
	   * that successfully match the filter expression. This in turn can boost performance
	   * for low-powered devices as well as applications containing a lot of structural operations.
	   * @param {RegExp=} expression The className expression which will be checked against all animations
	   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
	   */this.classNameFilter=function(expression){if(arguments.length===1){this.$$classNameFilter=expression instanceof RegExp?expression:null;if(this.$$classNameFilter){var reservedRegex=new RegExp('(\\s+|\\/)'+NG_ANIMATE_CLASSNAME+'(\\s+|\\/)');if(reservedRegex.test(this.$$classNameFilter.toString())){throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',NG_ANIMATE_CLASSNAME);}}}return this.$$classNameFilter;};this.$get=['$$animateQueue',function($$animateQueue){function domInsert(element,parentElement,afterElement){// if for some reason the previous element was removed
	// from the dom sometime before this code runs then let's
	// just stick to using the parent element as the anchor
	if(afterElement){var afterNode=extractElementNode(afterElement);if(afterNode&&!afterNode.parentNode&&!afterNode.previousElementSibling){afterElement=null;}}if(afterElement){afterElement.after(element);}else{parentElement.prepend(element);}}/**
	     * @ngdoc service
	     * @name $animate
	     * @description The $animate service exposes a series of DOM utility methods that provide support
	     * for animation hooks. The default behavior is the application of DOM operations, however,
	     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
	     * to ensure that animation runs with the triggered DOM operation.
	     *
	     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
	     * included and only when it is active then the animation hooks that `$animate` triggers will be
	     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
	     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
	     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
	     *
	     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
	     *
	     * To learn more about enabling animation support, click here to visit the
	     * {@link ngAnimate ngAnimate module page}.
	     */return{// we don't call it directly since non-existant arguments may
	// be interpreted as null within the sub enabled function
	/**
	       *
	       * @ngdoc method
	       * @name $animate#on
	       * @kind function
	       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
	       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
	       *    is fired with the following params:
	       *
	       * ```js
	       * $animate.on('enter', container,
	       *    function callback(element, phase) {
	       *      // cool we detected an enter animation within the container
	       *    }
	       * );
	       * ```
	       *
	       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
	       *     as well as among its children
	       * @param {Function} callback the callback function that will be fired when the listener is triggered
	       *
	       * The arguments present in the callback function are:
	       * * `element` - The captured DOM element that the animation was fired on.
	       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
	       */on:$$animateQueue.on,/**
	       *
	       * @ngdoc method
	       * @name $animate#off
	       * @kind function
	       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
	       * can be used in three different ways depending on the arguments:
	       *
	       * ```js
	       * // remove all the animation event listeners listening for `enter`
	       * $animate.off('enter');
	       *
	       * // remove listeners for all animation events from the container element
	       * $animate.off(container);
	       *
	       * // remove all the animation event listeners listening for `enter` on the given element and its children
	       * $animate.off('enter', container);
	       *
	       * // remove the event listener function provided by `callback` that is set
	       * // to listen for `enter` on the given `container` as well as its children
	       * $animate.off('enter', container, callback);
	       * ```
	       *
	       * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
	       * addClass, removeClass, etc...), or the container element. If it is the element, all other
	       * arguments are ignored.
	       * @param {DOMElement=} container the container element the event listener was placed on
	       * @param {Function=} callback the callback function that was registered as the listener
	       */off:$$animateQueue.off,/**
	       * @ngdoc method
	       * @name $animate#pin
	       * @kind function
	       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
	       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
	       *    element despite being outside the realm of the application or within another application. Say for example if the application
	       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
	       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
	       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
	       *
	       *    Note that this feature is only active when the `ngAnimate` module is used.
	       *
	       * @param {DOMElement} element the external element that will be pinned
	       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
	       */pin:$$animateQueue.pin,/**
	       *
	       * @ngdoc method
	       * @name $animate#enabled
	       * @kind function
	       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
	       * function can be called in four ways:
	       *
	       * ```js
	       * // returns true or false
	       * $animate.enabled();
	       *
	       * // changes the enabled state for all animations
	       * $animate.enabled(false);
	       * $animate.enabled(true);
	       *
	       * // returns true or false if animations are enabled for an element
	       * $animate.enabled(element);
	       *
	       * // changes the enabled state for an element and its children
	       * $animate.enabled(element, true);
	       * $animate.enabled(element, false);
	       * ```
	       *
	       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
	       * @param {boolean=} enabled whether or not the animations will be enabled for the element
	       *
	       * @return {boolean} whether or not animations are enabled
	       */enabled:$$animateQueue.enabled,/**
	       * @ngdoc method
	       * @name $animate#cancel
	       * @kind function
	       * @description Cancels the provided animation.
	       *
	       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
	       */cancel:function cancel(runner){if(runner.end){runner.end();}},/**
	       *
	       * @ngdoc method
	       * @name $animate#enter
	       * @kind function
	       * @description Inserts the element into the DOM either after the `after` element (if provided) or
	       *   as the first child within the `parent` element and then triggers an animation.
	       *   A promise is returned that will be resolved during the next digest once the animation
	       *   has completed.
	       *
	       * @param {DOMElement} element the element which will be inserted into the DOM
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */enter:function enter(element,parent,after,options){parent=parent&&jqLite(parent);after=after&&jqLite(after);parent=parent||after.parent();domInsert(element,parent,after);return $$animateQueue.push(element,'enter',prepareAnimateOptions(options));},/**
	       *
	       * @ngdoc method
	       * @name $animate#move
	       * @kind function
	       * @description Inserts (moves) the element into its new position in the DOM either after
	       *   the `after` element (if provided) or as the first child within the `parent` element
	       *   and then triggers an animation. A promise is returned that will be resolved
	       *   during the next digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be moved into the new DOM position
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */move:function move(element,parent,after,options){parent=parent&&jqLite(parent);after=after&&jqLite(after);parent=parent||after.parent();domInsert(element,parent,after);return $$animateQueue.push(element,'move',prepareAnimateOptions(options));},/**
	       * @ngdoc method
	       * @name $animate#leave
	       * @kind function
	       * @description Triggers an animation and then removes the element from the DOM.
	       * When the function is called a promise is returned that will be resolved during the next
	       * digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be removed from the DOM
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */leave:function leave(element,options){return $$animateQueue.push(element,'leave',prepareAnimateOptions(options),function(){element.remove();});},/**
	       * @ngdoc method
	       * @name $animate#addClass
	       * @kind function
	       *
	       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
	       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element already contains the CSS class or if the class is removed at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */addClass:function addClass(element,className,options){options=prepareAnimateOptions(options);options.addClass=mergeClasses(options.addclass,className);return $$animateQueue.push(element,'addClass',options);},/**
	       * @ngdoc method
	       * @name $animate#removeClass
	       * @kind function
	       *
	       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
	       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element does not contain the CSS class or if the class is added at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */removeClass:function removeClass(element,className,options){options=prepareAnimateOptions(options);options.removeClass=mergeClasses(options.removeClass,className);return $$animateQueue.push(element,'removeClass',options);},/**
	       * @ngdoc method
	       * @name $animate#setClass
	       * @kind function
	       *
	       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
	       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
	       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
	       *    passed. Note that class-based animations are treated differently compared to structural animations
	       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *    depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */setClass:function setClass(element,add,remove,options){options=prepareAnimateOptions(options);options.addClass=mergeClasses(options.addClass,add);options.removeClass=mergeClasses(options.removeClass,remove);return $$animateQueue.push(element,'setClass',options);},/**
	       * @ngdoc method
	       * @name $animate#animate
	       * @kind function
	       *
	       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
	       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
	       * on the provided styles. For example, if a transition animation is set for the given className, then the provided `from` and
	       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
	       * style in `to`, the style in `from` is applied immediately, and no animation is run.
	       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
	       * method (or as part of the `options` parameter):
	       *
	       * ```js
	       * ngModule.animation('.my-inline-animation', function() {
	       *   return {
	       *     animate : function(element, from, to, done, options) {
	       *       //animation
	       *       done();
	       *     }
	       *   }
	       * });
	       * ```
	       *
	       * @param {DOMElement} element the element which the CSS styles will be applied to
	       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
	       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
	       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
	       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
	       *    (Note that if no animation is detected then this value will not be applied to the element.)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */animate:function animate(element,from,to,className,options){options=prepareAnimateOptions(options);options.from=options.from?extend(options.from,from):from;options.to=options.to?extend(options.to,to):to;className=className||'ng-inline-animate';options.tempClasses=mergeClasses(options.tempClasses,className);return $$animateQueue.push(element,'animate',options);}};}];}];var $$AnimateAsyncRunFactoryProvider=/** @this */function $$AnimateAsyncRunFactoryProvider(){this.$get=['$$rAF',function($$rAF){var waitQueue=[];function waitForTick(fn){waitQueue.push(fn);if(waitQueue.length>1)return;$$rAF(function(){for(var i=0;i<waitQueue.length;i++){waitQueue[i]();}waitQueue=[];});}return function(){var passed=false;waitForTick(function(){passed=true;});return function(callback){if(passed){callback();}else{waitForTick(callback);}};};}];};var $$AnimateRunnerFactoryProvider=/** @this */function $$AnimateRunnerFactoryProvider(){this.$get=['$q','$sniffer','$$animateAsyncRun','$$isDocumentHidden','$timeout',function($q,$sniffer,$$animateAsyncRun,$$isDocumentHidden,$timeout){var INITIAL_STATE=0;var DONE_PENDING_STATE=1;var DONE_COMPLETE_STATE=2;AnimateRunner.chain=function(chain,callback){var index=0;next();function next(){if(index===chain.length){callback(true);return;}chain[index](function(response){if(response===false){callback(false);return;}index++;next();});}};AnimateRunner.all=function(runners,callback){var count=0;var status=true;forEach(runners,function(runner){runner.done(onProgress);});function onProgress(response){status=status&&response;if(++count===runners.length){callback(status);}}};function AnimateRunner(host){this.setHost(host);var rafTick=$$animateAsyncRun();var timeoutTick=function timeoutTick(fn){$timeout(fn,0,false);};this._doneCallbacks=[];this._tick=function(fn){if($$isDocumentHidden()){timeoutTick(fn);}else{rafTick(fn);}};this._state=0;}AnimateRunner.prototype={setHost:function setHost(host){this.host=host||{};},done:function done(fn){if(this._state===DONE_COMPLETE_STATE){fn();}else{this._doneCallbacks.push(fn);}},progress:noop,getPromise:function getPromise(){if(!this.promise){var self=this;this.promise=$q(function(resolve,reject){self.done(function(status){if(status===false){reject();}else{resolve();}});});}return this.promise;},then:function then(resolveHandler,rejectHandler){return this.getPromise().then(resolveHandler,rejectHandler);},'catch':function _catch(handler){return this.getPromise()['catch'](handler);},'finally':function _finally(handler){return this.getPromise()['finally'](handler);},pause:function pause(){if(this.host.pause){this.host.pause();}},resume:function resume(){if(this.host.resume){this.host.resume();}},end:function end(){if(this.host.end){this.host.end();}this._resolve(true);},cancel:function cancel(){if(this.host.cancel){this.host.cancel();}this._resolve(false);},complete:function complete(response){var self=this;if(self._state===INITIAL_STATE){self._state=DONE_PENDING_STATE;self._tick(function(){self._resolve(response);});}},_resolve:function _resolve(response){if(this._state!==DONE_COMPLETE_STATE){forEach(this._doneCallbacks,function(fn){fn(response);});this._doneCallbacks.length=0;this._state=DONE_COMPLETE_STATE;}}};return AnimateRunner;}];};/* exported $CoreAnimateCssProvider *//**
	 * @ngdoc service
	 * @name $animateCss
	 * @kind object
	 * @this
	 *
	 * @description
	 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
	 * then the `$animateCss` service will actually perform animations.
	 *
	 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
	 */var $CoreAnimateCssProvider=function $CoreAnimateCssProvider(){this.$get=['$$rAF','$q','$$AnimateRunner',function($$rAF,$q,$$AnimateRunner){return function(element,initialOptions){// all of the animation functions should create
	// a copy of the options data, however, if a
	// parent service has already created a copy then
	// we should stick to using that
	var options=initialOptions||{};if(!options.$$prepared){options=copy(options);}// there is no point in applying the styles since
	// there is no animation that goes on at all in
	// this version of $animateCss.
	if(options.cleanupStyles){options.from=options.to=null;}if(options.from){element.css(options.from);options.from=null;}var closed,runner=new $$AnimateRunner();return{start:run,end:run};function run(){$$rAF(function(){applyAnimationContents();if(!closed){runner.complete();}closed=true;});return runner;}function applyAnimationContents(){if(options.addClass){element.addClass(options.addClass);options.addClass=null;}if(options.removeClass){element.removeClass(options.removeClass);options.removeClass=null;}if(options.to){element.css(options.to);options.to=null;}}};}];};/* global stripHash: true *//**
	 * ! This is a private undocumented service !
	 *
	 * @name $browser
	 * @requires $log
	 * @description
	 * This object has two goals:
	 *
	 * - hide all the global state in the browser caused by the window object
	 * - abstract away all the browser specific features and inconsistencies
	 *
	 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
	 * service, which can be used for convenient testing of the application without the interaction with
	 * the real browser apis.
	 *//**
	 * @param {object} window The global window object.
	 * @param {object} document jQuery wrapped document.
	 * @param {object} $log window.console or an object with the same interface.
	 * @param {object} $sniffer $sniffer service
	 */function Browser(window,document,$log,$sniffer){var self=this,location=window.location,history=window.history,setTimeout=window.setTimeout,clearTimeout=window.clearTimeout,pendingDeferIds={};self.isMock=false;var outstandingRequestCount=0;var outstandingRequestCallbacks=[];// TODO(vojta): remove this temporary api
	self.$$completeOutstandingRequest=completeOutstandingRequest;self.$$incOutstandingRequestCount=function(){outstandingRequestCount++;};/**
	   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
	   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
	   */function completeOutstandingRequest(fn){try{fn.apply(null,sliceArgs(arguments,1));}finally{outstandingRequestCount--;if(outstandingRequestCount===0){while(outstandingRequestCallbacks.length){try{outstandingRequestCallbacks.pop()();}catch(e){$log.error(e);}}}}}function getHash(url){var index=url.indexOf('#');return index===-1?'':url.substr(index);}/**
	   * @private
	   * Note: this method is used only by scenario runner
	   * TODO(vojta): prefix this method with $$ ?
	   * @param {function()} callback Function that will be called when no outstanding request
	   */self.notifyWhenNoOutstandingRequests=function(callback){if(outstandingRequestCount===0){callback();}else{outstandingRequestCallbacks.push(callback);}};//////////////////////////////////////////////////////////////
	// URL API
	//////////////////////////////////////////////////////////////
	var cachedState,lastHistoryState,lastBrowserUrl=location.href,baseElement=document.find('base'),pendingLocation=null,getCurrentState=!$sniffer.history?noop:function getCurrentState(){try{return history.state;}catch(e){// MSIE can reportedly throw when there is no state (UNCONFIRMED).
	}};cacheState();lastHistoryState=cachedState;/**
	   * @name $browser#url
	   *
	   * @description
	   * GETTER:
	   * Without any argument, this method just returns current value of location.href.
	   *
	   * SETTER:
	   * With at least one argument, this method sets url to new value.
	   * If html5 history api supported, pushState/replaceState is used, otherwise
	   * location.href/location.replace is used.
	   * Returns its own instance to allow chaining
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to change url.
	   *
	   * @param {string} url New url (when used as setter)
	   * @param {boolean=} replace Should new url replace current history record?
	   * @param {object=} state object to use with pushState/replaceState
	   */self.url=function(url,replace,state){// In modern browsers `history.state` is `null` by default; treating it separately
	// from `undefined` would cause `$browser.url('/foo')` to change `history.state`
	// to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
	if(isUndefined(state)){state=null;}// Android Browser BFCache causes location, history reference to become stale.
	if(location!==window.location)location=window.location;if(history!==window.history)history=window.history;// setter
	if(url){var sameState=lastHistoryState===state;// Don't change anything if previous and current URLs and states match. This also prevents
	// IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
	// See https://github.com/angular/angular.js/commit/ffb2701
	if(lastBrowserUrl===url&&(!$sniffer.history||sameState)){return self;}var sameBase=lastBrowserUrl&&stripHash(lastBrowserUrl)===stripHash(url);lastBrowserUrl=url;lastHistoryState=state;// Don't use history API if only the hash changed
	// due to a bug in IE10/IE11 which leads
	// to not firing a `hashchange` nor `popstate` event
	// in some cases (see #9143).
	if($sniffer.history&&(!sameBase||!sameState)){history[replace?'replaceState':'pushState'](state,'',url);cacheState();// Do the assignment again so that those two variables are referentially identical.
	lastHistoryState=cachedState;}else{if(!sameBase){pendingLocation=url;}if(replace){location.replace(url);}else if(!sameBase){location.href=url;}else{location.hash=getHash(url);}if(location.href!==url){pendingLocation=url;}}if(pendingLocation){pendingLocation=url;}return self;// getter
	}else{// - pendingLocation is needed as browsers don't allow to read out
	//   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
	//   https://openradar.appspot.com/22186109).
	// - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
	return pendingLocation||location.href.replace(/%27/g,'\'');}};/**
	   * @name $browser#state
	   *
	   * @description
	   * This method is a getter.
	   *
	   * Return history.state or null if history.state is undefined.
	   *
	   * @returns {object} state
	   */self.state=function(){return cachedState;};var urlChangeListeners=[],urlChangeInit=false;function cacheStateAndFireUrlChange(){pendingLocation=null;cacheState();fireUrlChange();}// This variable should be used *only* inside the cacheState function.
	var lastCachedState=null;function cacheState(){// This should be the only place in $browser where `history.state` is read.
	cachedState=getCurrentState();cachedState=isUndefined(cachedState)?null:cachedState;// Prevent callbacks fo fire twice if both hashchange & popstate were fired.
	if(equals(cachedState,lastCachedState)){cachedState=lastCachedState;}lastCachedState=cachedState;}function fireUrlChange(){if(lastBrowserUrl===self.url()&&lastHistoryState===cachedState){return;}lastBrowserUrl=self.url();lastHistoryState=cachedState;forEach(urlChangeListeners,function(listener){listener(self.url(),cachedState);});}/**
	   * @name $browser#onUrlChange
	   *
	   * @description
	   * Register callback function that will be called, when url changes.
	   *
	   * It's only called when the url is changed from outside of angular:
	   * - user types different url into address bar
	   * - user clicks on history (forward/back) button
	   * - user clicks on a link
	   *
	   * It's not called when url is changed by $browser.url() method
	   *
	   * The listener gets called with new url as parameter.
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to monitor url changes in angular apps.
	   *
	   * @param {function(string)} listener Listener function to be called when url changes.
	   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
	   */self.onUrlChange=function(callback){// TODO(vojta): refactor to use node's syntax for events
	if(!urlChangeInit){// We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
	// don't fire popstate when user change the address bar and don't fire hashchange when url
	// changed by push/replaceState
	// html5 history api - popstate event
	if($sniffer.history)jqLite(window).on('popstate',cacheStateAndFireUrlChange);// hashchange event
	jqLite(window).on('hashchange',cacheStateAndFireUrlChange);urlChangeInit=true;}urlChangeListeners.push(callback);return callback;};/**
	   * @private
	   * Remove popstate and hashchange handler from window.
	   *
	   * NOTE: this api is intended for use only by $rootScope.
	   */self.$$applicationDestroyed=function(){jqLite(window).off('hashchange popstate',cacheStateAndFireUrlChange);};/**
	   * Checks whether the url has changed outside of Angular.
	   * Needs to be exported to be able to check for changes that have been done in sync,
	   * as hashchange/popstate events fire in async.
	   */self.$$checkUrlChange=fireUrlChange;//////////////////////////////////////////////////////////////
	// Misc API
	//////////////////////////////////////////////////////////////
	/**
	   * @name $browser#baseHref
	   *
	   * @description
	   * Returns current <base href>
	   * (always relative - without domain)
	   *
	   * @returns {string} The current base href
	   */self.baseHref=function(){var href=baseElement.attr('href');return href?href.replace(/^(https?:)?\/\/[^/]*/,''):'';};/**
	   * @name $browser#defer
	   * @param {function()} fn A function, who's execution should be deferred.
	   * @param {number=} [delay=0] of milliseconds to defer the function execution.
	   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
	   *
	   * @description
	   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
	   *
	   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
	   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
	   * via `$browser.defer.flush()`.
	   *
	   */self.defer=function(fn,delay){var timeoutId;outstandingRequestCount++;timeoutId=setTimeout(function(){delete pendingDeferIds[timeoutId];completeOutstandingRequest(fn);},delay||0);pendingDeferIds[timeoutId]=true;return timeoutId;};/**
	   * @name $browser#defer.cancel
	   *
	   * @description
	   * Cancels a deferred task identified with `deferId`.
	   *
	   * @param {*} deferId Token returned by the `$browser.defer` function.
	   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	   *                    canceled.
	   */self.defer.cancel=function(deferId){if(pendingDeferIds[deferId]){delete pendingDeferIds[deferId];clearTimeout(deferId);completeOutstandingRequest(noop);return true;}return false;};}/** @this */function $BrowserProvider(){this.$get=['$window','$log','$sniffer','$document',function($window,$log,$sniffer,$document){return new Browser($window,$document,$log,$sniffer);}];}/**
	 * @ngdoc service
	 * @name $cacheFactory
	 * @this
	 *
	 * @description
	 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
	 * them.
	 *
	 * ```js
	 *
	 *  var cache = $cacheFactory('cacheId');
	 *  expect($cacheFactory.get('cacheId')).toBe(cache);
	 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
	 *
	 *  cache.put("key", "value");
	 *  cache.put("another key", "another value");
	 *
	 *  // We've specified no options on creation
	 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
	 *
	 * ```
	 *
	 *
	 * @param {string} cacheId Name or id of the newly created cache.
	 * @param {object=} options Options object that specifies the cache behavior. Properties:
	 *
	 *   - `{number=}` `capacity` — turns the cache into LRU cache.
	 *
	 * @returns {object} Newly created cache object with the following set of methods:
	 *
	 * - `{object}` `info()` — Returns id, size, and options of cache.
	 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
	 *   it.
	 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
	 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
	 * - `{void}` `removeAll()` — Removes all cached values.
	 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
	 *
	 * @example
	   <example module="cacheExampleApp" name="cache-factory">
	     <file name="index.html">
	       <div ng-controller="CacheController">
	         <input ng-model="newCacheKey" placeholder="Key">
	         <input ng-model="newCacheValue" placeholder="Value">
	         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

	         <p ng-if="keys.length">Cached Values</p>
	         <div ng-repeat="key in keys">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="cache.get(key)"></b>
	         </div>

	         <p>Cache Info</p>
	         <div ng-repeat="(key, value) in cache.info()">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="value"></b>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('cacheExampleApp', []).
	         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if (angular.isUndefined($scope.cache.get(key))) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       p {
	         margin: 10px 0 3px;
	       }
	     </file>
	   </example>
	 */function $CacheFactoryProvider(){this.$get=function(){var caches={};function cacheFactory(cacheId,options){if(cacheId in caches){throw minErr('$cacheFactory')('iid','CacheId \'{0}\' is already taken!',cacheId);}var size=0,stats=extend({},options,{id:cacheId}),data=createMap(),capacity=options&&options.capacity||Number.MAX_VALUE,lruHash=createMap(),freshEnd=null,staleEnd=null;/**
	       * @ngdoc type
	       * @name $cacheFactory.Cache
	       *
	       * @description
	       * A cache object used to store and retrieve data, primarily used by
	       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
	       * templates and other data.
	       *
	       * ```js
	       *  angular.module('superCache')
	       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
	       * ```
	       *
	       * Example test:
	       *
	       * ```js
	       *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
	       * ```
	       */return caches[cacheId]={/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#put
	         * @kind function
	         *
	         * @description
	         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
	         * retrieved later, and incrementing the size of the cache if the key was not already
	         * present in the cache. If behaving like an LRU cache, it will also remove stale
	         * entries from the set.
	         *
	         * It will not insert undefined values into the cache.
	         *
	         * @param {string} key the key under which the cached data is stored.
	         * @param {*} value the value to store alongside the key. If it is undefined, the key
	         *    will not be stored.
	         * @returns {*} the value stored.
	         */put:function put(key,value){if(isUndefined(value))return;if(capacity<Number.MAX_VALUE){var lruEntry=lruHash[key]||(lruHash[key]={key:key});refresh(lruEntry);}if(!(key in data))size++;data[key]=value;if(size>capacity){this.remove(staleEnd.key);}return value;},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#get
	         * @kind function
	         *
	         * @description
	         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the data to be retrieved
	         * @returns {*} the value stored.
	         */get:function get(key){if(capacity<Number.MAX_VALUE){var lruEntry=lruHash[key];if(!lruEntry)return;refresh(lruEntry);}return data[key];},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#remove
	         * @kind function
	         *
	         * @description
	         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the entry to be removed
	         */remove:function remove(key){if(capacity<Number.MAX_VALUE){var lruEntry=lruHash[key];if(!lruEntry)return;if(lruEntry===freshEnd)freshEnd=lruEntry.p;if(lruEntry===staleEnd)staleEnd=lruEntry.n;link(lruEntry.n,lruEntry.p);delete lruHash[key];}if(!(key in data))return;delete data[key];size--;},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#removeAll
	         * @kind function
	         *
	         * @description
	         * Clears the cache object of any entries.
	         */removeAll:function removeAll(){data=createMap();size=0;lruHash=createMap();freshEnd=staleEnd=null;},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#destroy
	         * @kind function
	         *
	         * @description
	         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
	         * removing it from the {@link $cacheFactory $cacheFactory} set.
	         */destroy:function destroy(){data=null;stats=null;lruHash=null;delete caches[cacheId];},/**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#info
	         * @kind function
	         *
	         * @description
	         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
	         *
	         * @returns {object} an object with the following properties:
	         *   <ul>
	         *     <li>**id**: the id of the cache instance</li>
	         *     <li>**size**: the number of entries kept in the cache instance</li>
	         *     <li>**...**: any additional properties from the options object when creating the
	         *       cache.</li>
	         *   </ul>
	         */info:function info(){return extend({},stats,{size:size});}};/**
	       * makes the `entry` the freshEnd of the LRU linked list
	       */function refresh(entry){if(entry!==freshEnd){if(!staleEnd){staleEnd=entry;}else if(staleEnd===entry){staleEnd=entry.n;}link(entry.n,entry.p);link(entry,freshEnd);freshEnd=entry;freshEnd.n=null;}}/**
	       * bidirectionally links two entries of the LRU linked list
	       */function link(nextEntry,prevEntry){if(nextEntry!==prevEntry){if(nextEntry)nextEntry.p=prevEntry;//p stands for previous, 'prev' didn't minify
	if(prevEntry)prevEntry.n=nextEntry;//n stands for next, 'next' didn't minify
	}}}/**
	   * @ngdoc method
	   * @name $cacheFactory#info
	   *
	   * @description
	   * Get information about all the caches that have been created
	   *
	   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
	   */cacheFactory.info=function(){var info={};forEach(caches,function(cache,cacheId){info[cacheId]=cache.info();});return info;};/**
	   * @ngdoc method
	   * @name $cacheFactory#get
	   *
	   * @description
	   * Get access to a cache object by the `cacheId` used when it was created.
	   *
	   * @param {string} cacheId Name or id of a cache to access.
	   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
	   */cacheFactory.get=function(cacheId){return caches[cacheId];};return cacheFactory;};}/**
	 * @ngdoc service
	 * @name $templateCache
	 * @this
	 *
	 * @description
	 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
	 * can load templates directly into the cache in a `script` tag, or by consuming the
	 * `$templateCache` service directly.
	 *
	 * Adding via the `script` tag:
	 *
	 * ```html
	 *   <script type="text/ng-template" id="templateId.html">
	 *     <p>This is the content of the template</p>
	 *   </script>
	 * ```
	 *
	 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
	 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
	 * element with ng-app attribute), otherwise the template will be ignored.
	 *
	 * Adding via the `$templateCache` service:
	 *
	 * ```js
	 * var myApp = angular.module('myApp', []);
	 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
	 * ```
	 *
	 * To retrieve the template later, simply use it in your component:
	 * ```js
	 * myApp.component('myComponent', {
	 *    templateUrl: 'templateId.html'
	 * });
	 * ```
	 *
	 * or get it via the `$templateCache` service:
	 * ```js
	 * $templateCache.get('templateId.html')
	 * ```
	 *
	 * See {@link ng.$cacheFactory $cacheFactory}.
	 *
	 */function $TemplateCacheProvider(){this.$get=['$cacheFactory',function($cacheFactory){return $cacheFactory('templates');}];}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables like document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
	 *
	 * DOM-related variables:
	 *
	 * - "node" - DOM Node
	 * - "element" - DOM Element or Node
	 * - "$node" or "$element" - jqLite-wrapped node or element
	 *
	 *
	 * Compiler related stuff:
	 *
	 * - "linkFn" - linking fn of a single directive
	 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
	 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
	 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
	 *//**
	 * @ngdoc service
	 * @name $compile
	 * @kind function
	 *
	 * @description
	 * Compiles an HTML string or DOM into a template and produces a template function, which
	 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
	 *
	 * The compilation is a process of walking the DOM tree and matching DOM elements to
	 * {@link ng.$compileProvider#directive directives}.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** This document is an in-depth reference of all directive options.
	 * For a gentle introduction to directives with examples of common use cases,
	 * see the {@link guide/directive directive guide}.
	 * </div>
	 *
	 * ## Comprehensive Directive API
	 *
	 * There are many different options for a directive.
	 *
	 * The difference resides in the return value of the factory function.
	 * You can either return a {@link $compile#directive-definition-object Directive Definition Object (see below)}
	 * that defines the directive properties, or just the `postLink` function (all other properties will have
	 * the default values).
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's recommended to use the "directive definition object" form.
	 * </div>
	 *
	 * Here's an example directive declared with a Directive Definition Object:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       {@link $compile#-priority- priority}: 0,
	 *       {@link $compile#-template- template}: '<div></div>', // or // function(tElement, tAttrs) { ... },
	 *       // or
	 *       // {@link $compile#-templateurl- templateUrl}: 'directive.html', // or // function(tElement, tAttrs) { ... },
	 *       {@link $compile#-transclude- transclude}: false,
	 *       {@link $compile#-restrict- restrict}: 'A',
	 *       {@link $compile#-templatenamespace- templateNamespace}: 'html',
	 *       {@link $compile#-scope- scope}: false,
	 *       {@link $compile#-controller- controller}: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
	 *       {@link $compile#-controlleras- controllerAs}: 'stringIdentifier',
	 *       {@link $compile#-bindtocontroller- bindToController}: false,
	 *       {@link $compile#-require- require}: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
	 *       {@link $compile#-multielement- multiElement}: false,
	 *       {@link $compile#-compile- compile}: function compile(tElement, tAttrs, transclude) {
	 *         return {
	 *            {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *            {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *         }
	 *         // or
	 *         // return function postLink( ... ) { ... }
	 *       },
	 *       // or
	 *       // {@link $compile#-link- link}: {
	 *       //  {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *       //  {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *       // }
	 *       // or
	 *       // {@link $compile#-link- link}: function postLink( ... ) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *   });
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Any unspecified options will use the default value. You can see the default values below.
	 * </div>
	 *
	 * Therefore the above can be simplified as:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       link: function postLink(scope, iElement, iAttrs) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *     // or
	 *     // return function postLink(scope, iElement, iAttrs) { ... }
	 *   });
	 * ```
	 *
	 * ### Life-cycle hooks
	 * Directive controllers can provide the following methods that are called by Angular at points in the life-cycle of the
	 * directive:
	 * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and
	 *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
	 *   this element). This is a good place to put initialization code for your controller.
	 * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The
	 *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an
	 *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a
	 *   component such as cloning the bound value to prevent accidental mutation of the outer value.
	 * * `$doCheck()` - Called on each turn of the digest cycle. Provides an opportunity to detect and act on
	 *   changes. Any actions that you wish to take in response to the changes that you detect must be
	 *   invoked from this hook; implementing this has no effect on when `$onChanges` is called. For example, this hook
	 *   could be useful if you wish to perform a deep equality check, or to check a Date object, changes to which would not
	 *   be detected by Angular's change detector and thus not trigger `$onChanges`. This hook is invoked with no arguments;
	 *   if detecting changes, you must store the previous value(s) for comparison to the current values.
	 * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
	 *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in
	 *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent
	 *   components will have their `$onDestroy()` hook called before child components.
	 * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link
	 *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
	 *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
	 *   they are waiting for their template to load asynchronously and their own compilation and linking has been
	 *   suspended until that occurs.
	 *
	 * #### Comparison with Angular 2 life-cycle hooks
	 * Angular 2 also uses life-cycle hooks for its components. While the Angular 1 life-cycle hooks are similar there are
	 * some differences that you should be aware of, especially when it comes to moving your code from Angular 1 to Angular 2:
	 *
	 * * Angular 1 hooks are prefixed with `$`, such as `$onInit`. Angular 2 hooks are prefixed with `ng`, such as `ngOnInit`.
	 * * Angular 1 hooks can be defined on the controller prototype or added to the controller inside its constructor.
	 *   In Angular 2 you can only define hooks on the prototype of the Component class.
	 * * Due to the differences in change-detection, you may get many more calls to `$doCheck` in Angular 1 than you would to
	 *   `ngDoCheck` in Angular 2
	 * * Changes to the model inside `$doCheck` will trigger new turns of the digest loop, which will cause the changes to be
	 *   propagated throughout the application.
	 *   Angular 2 does not allow the `ngDoCheck` hook to trigger a change outside of the component. It will either throw an
	 *   error or do nothing depending upon the state of `enableProdMode()`.
	 *
	 * #### Life-cycle hook examples
	 *
	 * This example shows how you can check for mutations to a Date object even though the identity of the object
	 * has not changed.
	 *
	 * <example name="doCheckDateExample" module="do-check-module">
	 *   <file name="app.js">
	 *     angular.module('do-check-module', [])
	 *       .component('app', {
	 *         template:
	 *           'Month: <input ng-model="$ctrl.month" ng-change="$ctrl.updateDate()">' +
	 *           'Date: {{ $ctrl.date }}' +
	 *           '<test date="$ctrl.date"></test>',
	 *         controller: function() {
	 *           this.date = new Date();
	 *           this.month = this.date.getMonth();
	 *           this.updateDate = function() {
	 *             this.date.setMonth(this.month);
	 *           };
	 *         }
	 *       })
	 *       .component('test', {
	 *         bindings: { date: '<' },
	 *         template:
	 *           '<pre>{{ $ctrl.log | json }}</pre>',
	 *         controller: function() {
	 *           var previousValue;
	 *           this.log = [];
	 *           this.$doCheck = function() {
	 *             var currentValue = this.date && this.date.valueOf();
	 *             if (previousValue !== currentValue) {
	 *               this.log.push('doCheck: date mutated: ' + this.date);
	 *               previousValue = currentValue;
	 *             }
	 *           };
	 *         }
	 *       });
	 *   </file>
	 *   <file name="index.html">
	 *     <app></app>
	 *   </file>
	 * </example>
	 *
	 * This example show how you might use `$doCheck` to trigger changes in your component's inputs even if the
	 * actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large
	 * arrays or objects can have a negative impact on your application performance)
	 *
	 * <example name="doCheckArrayExample" module="do-check-module">
	 *   <file name="index.html">
	 *     <div ng-init="items = []">
	 *       <button ng-click="items.push(items.length)">Add Item</button>
	 *       <button ng-click="items = []">Reset Items</button>
	 *       <pre>{{ items }}</pre>
	 *       <test items="items"></test>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *      angular.module('do-check-module', [])
	 *        .component('test', {
	 *          bindings: { items: '<' },
	 *          template:
	 *            '<pre>{{ $ctrl.log | json }}</pre>',
	 *          controller: function() {
	 *            this.log = [];
	 *
	 *            this.$doCheck = function() {
	 *              if (this.items_ref !== this.items) {
	 *                this.log.push('doCheck: items changed');
	 *                this.items_ref = this.items;
	 *              }
	 *              if (!angular.equals(this.items_clone, this.items)) {
	 *                this.log.push('doCheck: items mutated');
	 *                this.items_clone = angular.copy(this.items);
	 *              }
	 *            };
	 *          }
	 *        });
	 *   </file>
	 * </example>
	 *
	 *
	 * ### Directive Definition Object
	 *
	 * The directive definition object provides instructions to the {@link ng.$compile
	 * compiler}. The attributes are:
	 *
	 * #### `multiElement`
	 * When this property is set to true (default is `false`), the HTML compiler will collect DOM nodes between
	 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
	 * together as the directive elements. It is recommended that this feature be used on directives
	 * which are not strictly behavioral (such as {@link ngClick}), and which
	 * do not manipulate or replace child nodes (such as {@link ngInclude}).
	 *
	 * #### `priority`
	 * When there are multiple directives defined on a single DOM element, sometimes it
	 * is necessary to specify the order in which the directives are applied. The `priority` is used
	 * to sort the directives before their `compile` functions get called. Priority is defined as a
	 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
	 * are also run in priority order, but post-link functions are run in reverse order. The order
	 * of directives with the same priority is undefined. The default priority is `0`.
	 *
	 * #### `terminal`
	 * If set to true then the current `priority` will be the last set of directives
	 * which will execute (any directives at the current priority will still execute
	 * as the order of execution on same `priority` is undefined). Note that expressions
	 * and other directives used in the directive's template will also be excluded from execution.
	 *
	 * #### `scope`
	 * The scope property can be `false`, `true`, or an object:
	 *
	 * * **`false` (default):** No scope will be created for the directive. The directive will use its
	 * parent's scope.
	 *
	 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
	 * the directive's element. If multiple directives on the same element request a new scope,
	 * only one new scope is created.
	 *
	 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
	 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
	 * scope. This is useful when creating reusable components, which should not accidentally read or modify
	 * data in the parent scope.
	 *
	 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
	 * directive's element. These local properties are useful for aliasing values for templates. The keys in
	 * the object hash map to the name of the property on the isolate scope; the values define how the property
	 * is bound to the parent scope, via matching attributes on the directive's element:
	 *
	 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
	 *   always a string since DOM attributes are strings. If no `attr` name is specified then the
	 *   attribute name is assumed to be the same as the local name. Given `<my-component
	 *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
	 *   the directive's scope property `localName` will reflect the interpolated value of `hello
	 *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
	 *   scope. The `name` is read from the parent scope (not the directive's scope).
	 *
	 * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
	 *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
	 *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
	 *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
	 *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
	 *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
	 *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:
	 *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't
	 *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})
	 *   will be thrown upon discovering changes to the local value, since it will be impossible to sync
	 *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
	 *   method is used for tracking changes, and the equality check is based on object identity.
	 *   However, if an object literal or an array literal is passed as the binding expression, the
	 *   equality check is done by value (using the {@link angular.equals} function). It's also possible
	 *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
	 *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).
	 *
	  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
	 *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
	 *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
	 *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.
	 *
	 *   For example, given `<my-component my-attr="parentModel">` and directive definition of
	 *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
	 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
	 *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
	 *   two caveats:
	 *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
	 *     sets the same value. That means if your bound value is an object, changes to its properties
	 *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
	 *     2. one-way binding watches changes to the **identity** of the parent value. That means the
	 *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
	 *     to the value has changed. In most cases, this should not be of concern, but can be important
	 *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
	 *     If you now change a property of the object in your parent scope, the change will not be
	 *     propagated to the isolated scope, because the identity of the object on the parent scope
	 *     has not changed. Instead you must assign a new object.
	 *
	 *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
	 *   back to the parent. However, it does not make this completely impossible.
	 *
	 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
	 *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
	 *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
	 *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
	 *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
	 *   via an expression to the parent scope. This can be done by passing a map of local variable names
	 *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
	 *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
	 *
	 * In general it's possible to apply more than one directive to one element, but there might be limitations
	 * depending on the type of scope required by the directives. The following points will help explain these limitations.
	 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
	 *
	 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
	 * * **child scope** + **no scope** =>  Both directives will share one single child scope
	 * * **child scope** + **child scope** =>  Both directives will share one single child scope
	 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
	 * its parent's scope
	 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
	 * be applied to the same element.
	 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
	 * cannot be applied to the same element.
	 *
	 *
	 * #### `bindToController`
	 * This property is used to bind scope properties directly to the controller. It can be either
	 * `true` or an object hash with the same format as the `scope` property.
	 *
	 * When an isolate scope is used for a directive (see above), `bindToController: true` will
	 * allow a component to have its properties bound to the controller, rather than to scope.
	 *
	 * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
	 * properties. You can access these bindings once they have been initialized by providing a controller method called
	 * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
	 * initialized.
	 *
	 * <div class="alert alert-warning">
	 * **Deprecation warning:** although bindings for non-ES6 class controllers are currently
	 * bound to `this` before the controller constructor is called, this use is now deprecated. Please place initialization
	 * code that relies upon bindings inside a `$onInit` method on the controller, instead.
	 * </div>
	 *
	 * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
	 * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
	 * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
	 * scope (useful for component directives).
	 *
	 * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
	 *
	 *
	 * #### `controller`
	 * Controller constructor function. The controller is instantiated before the
	 * pre-linking phase and can be accessed by other directives (see
	 * `require` attribute). This allows the directives to communicate with each other and augment
	 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
	 *
	 * * `$scope` - Current scope associated with the element
	 * * `$element` - Current element
	 * * `$attrs` - Current attributes object for the element
	 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
	 *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
	 *    * `scope`: (optional) override the scope.
	 *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
	 *    * `futureParentElement` (optional):
	 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
	 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
	 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
	 *          and when the `cloneLinkingFn` is passed,
	 *          as those elements need to created and cloned in a special way when they are defined outside their
	 *          usual containers (e.g. like `<svg>`).
	 *        * See also the `directive.templateNamespace` property.
	 *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
	 *      then the default transclusion is provided.
	 *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
	 *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
	 *
	 * #### `require`
	 * Require another directive and inject its controller as the fourth argument to the linking function. The
	 * `require` property can be a string, an array or an object:
	 * * a **string** containing the name of the directive to pass to the linking function
	 * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
	 * linking function will be an array of controllers in the same order as the names in the `require` property
	 * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
	 * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
	 * controllers.
	 *
	 * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
	 * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
	 * have been constructed but before `$onInit` is called.
	 * If the name of the required controller is the same as the local name (the key), the name can be
	 * omitted. For example, `{parentDir: '^^'}` is equivalent to `{parentDir: '^^parentDir'}`.
	 * See the {@link $compileProvider#component} helper for an example of how this can be used.
	 * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
	 * raised (unless no link function is specified and the required controllers are not being bound to the directive
	 * controller, in which case error checking is skipped). The name can be prefixed with:
	 *
	 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
	 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
	 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
	 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
	 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
	 *   `null` to the `link` fn if not found.
	 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
	 *   `null` to the `link` fn if not found.
	 *
	 *
	 * #### `controllerAs`
	 * Identifier name for a reference to the controller in the directive's scope.
	 * This allows the controller to be referenced from the directive template. This is especially
	 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
	 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
	 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
	 *
	 *
	 * #### `restrict`
	 * String of subset of `EACM` which restricts the directive to a specific directive
	 * declaration style. If omitted, the defaults (elements and attributes) are used.
	 *
	 * * `E` - Element name (default): `<my-directive></my-directive>`
	 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
	 * * `C` - Class: `<div class="my-directive: exp;"></div>`
	 * * `M` - Comment: `<!-- directive: my-directive exp -->`
	 *
	 *
	 * #### `templateNamespace`
	 * String representing the document type used by the markup in the template.
	 * AngularJS needs this information as those elements need to be created and cloned
	 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
	 *
	 * * `html` - All root nodes in the template are HTML. Root nodes may also be
	 *   top-level elements such as `<svg>` or `<math>`.
	 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
	 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
	 *
	 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
	 *
	 * #### `template`
	 * HTML markup that may:
	 * * Replace the contents of the directive's element (default).
	 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
	 * * Wrap the contents of the directive's element (if `transclude` is true).
	 *
	 * Value may be:
	 *
	 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
	 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
	 *   function api below) and returns a string value.
	 *
	 *
	 * #### `templateUrl`
	 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
	 *
	 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
	 * for later when the template has been resolved.  In the meantime it will continue to compile and link
	 * sibling and parent elements as though this element had not contained any directives.
	 *
	 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
	 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
	 * case when only one deeply nested directive has `templateUrl`.
	 *
	 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
	 *
	 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
	 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
	 * a string value representing the url.  In either case, the template URL is passed through {@link
	 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
	 *
	 *
	 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
	 * specify what the template should replace. Defaults to `false`.
	 *
	 * * `true` - the template will replace the directive's element.
	 * * `false` - the template will replace the contents of the directive's element.
	 *
	 * The replacement process migrates all of the attributes / classes from the old element to the new
	 * one. See the {@link guide/directive#template-expanding-directive
	 * Directives Guide} for an example.
	 *
	 * There are very few scenarios where element replacement is required for the application function,
	 * the main one being reusable custom components that are used within SVG contexts
	 * (because SVG doesn't work with custom elements in the DOM tree).
	 *
	 * #### `transclude`
	 * Extract the contents of the element where the directive appears and make it available to the directive.
	 * The contents are compiled and provided to the directive as a **transclusion function**. See the
	 * {@link $compile#transclusion Transclusion} section below.
	 *
	 *
	 * #### `compile`
	 *
	 * ```js
	 *   function compile(tElement, tAttrs, transclude) { ... }
	 * ```
	 *
	 * The compile function deals with transforming the template DOM. Since most directives do not do
	 * template transformation, it is not used often. The compile function takes the following arguments:
	 *
	 *   * `tElement` - template element - The element where the directive has been declared. It is
	 *     safe to do template transformation on the element and child elements only.
	 *
	 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
	 *     between all directive compile functions.
	 *
	 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
	 *
	 * <div class="alert alert-warning">
	 * **Note:** The template instance and the link instance may be different objects if the template has
	 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
	 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
	 * should be done in a linking function rather than in a compile function.
	 * </div>

	 * <div class="alert alert-warning">
	 * **Note:** The compile function cannot handle directives that recursively use themselves in their
	 * own templates or compile functions. Compiling these directives results in an infinite loop and
	 * stack overflow errors.
	 *
	 * This can be avoided by manually using $compile in the postLink function to imperatively compile
	 * a directive's template instead of relying on automatic template compilation via `template` or
	 * `templateUrl` declaration or manual compilation inside the compile function.
	 * </div>
	 *
	 * <div class="alert alert-danger">
	 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
	 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
	 *   to the link function instead.
	 * </div>

	 * A compile function can have a return value which can be either a function or an object.
	 *
	 * * returning a (post-link) function - is equivalent to registering the linking function via the
	 *   `link` property of the config object when the compile function is empty.
	 *
	 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
	 *   control when a linking function should be called during the linking phase. See info about
	 *   pre-linking and post-linking functions below.
	 *
	 *
	 * #### `link`
	 * This property is used only if the `compile` property is not defined.
	 *
	 * ```js
	 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
	 * ```
	 *
	 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
	 * executed after the template has been cloned. This is where most of the directive logic will be
	 * put.
	 *
	 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
	 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
	 *
	 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
	 *     manipulate the children of the element only in `postLink` function since the children have
	 *     already been linked.
	 *
	 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
	 *     between all directive linking functions.
	 *
	 *   * `controller` - the directive's required controller instance(s) - Instances are shared
	 *     among all directives, which allows the directives to use the controllers as a communication
	 *     channel. The exact value depends on the directive's `require` property:
	 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
	 *       * `string`: the controller instance
	 *       * `array`: array of controller instances
	 *
	 *     If a required controller cannot be found, and it is optional, the instance is `null`,
	 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
	 *
	 *     Note that you can also require the directive's own controller - it will be made available like
	 *     any other controller.
	 *
	 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
	 *     This is the same as the `$transclude` parameter of directive controllers,
	 *     see {@link ng.$compile#-controller- the controller section for details}.
	 *     `function([scope], cloneLinkingFn, futureParentElement)`.
	 *
	 * #### Pre-linking function
	 *
	 * Executed before the child elements are linked. Not safe to do DOM transformation since the
	 * compiler linking function will fail to locate the correct elements for linking.
	 *
	 * #### Post-linking function
	 *
	 * Executed after the child elements are linked.
	 *
	 * Note that child elements that contain `templateUrl` directives will not have been compiled
	 * and linked since they are waiting for their template to load asynchronously and their own
	 * compilation and linking has been suspended until that occurs.
	 *
	 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
	 * for their async templates to be resolved.
	 *
	 *
	 * ### Transclusion
	 *
	 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
	 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
	 * scope from where they were taken.
	 *
	 * Transclusion is used (often with {@link ngTransclude}) to insert the
	 * original contents of a directive's element into a specified place in the template of the directive.
	 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
	 * content has access to the properties on the scope from which it was taken, even if the directive
	 * has isolated scope.
	 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
	 *
	 * This makes it possible for the widget to have private state for its template, while the transcluded
	 * content has access to its originating scope.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
	 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
	 * Testing Transclusion Directives}.
	 * </div>
	 *
	 * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
	 * directive's element, the entire element or multiple parts of the element contents:
	 *
	 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
	 * * `'element'` - transclude the whole of the directive's element including any directives on this
	 *   element that defined at a lower priority than this directive. When used, the `template`
	 *   property is ignored.
	 * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
	 *
	 * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.
	 *
	 * This object is a map where the keys are the name of the slot to fill and the value is an element selector
	 * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
	 * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
	 *
	 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	 *
	 * If the element selector is prefixed with a `?` then that slot is optional.
	 *
	 * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
	 * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
	 *
	 * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
	 * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
	 * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
	 * injectable into the directive's controller.
	 *
	 *
	 * #### Transclusion Functions
	 *
	 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
	 * function** to the directive's `link` function and `controller`. This transclusion function is a special
	 * **linking function** that will return the compiled contents linked to a new transclusion scope.
	 *
	 * <div class="alert alert-info">
	 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
	 * ngTransclude will deal with it for us.
	 * </div>
	 *
	 * If you want to manually control the insertion and removal of the transcluded content in your directive
	 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
	 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
	 *
	 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
	 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
	 * content and the `scope` is the newly created transclusion scope, which the clone will be linked to.
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
	 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
	 * </div>
	 *
	 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
	 * attach function**:
	 *
	 * ```js
	 * var transcludedContent, transclusionScope;
	 *
	 * $transclude(function(clone, scope) {
	 *   element.append(clone);
	 *   transcludedContent = clone;
	 *   transclusionScope = scope;
	 * });
	 * ```
	 *
	 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
	 * associated transclusion scope:
	 *
	 * ```js
	 * transcludedContent.remove();
	 * transclusionScope.$destroy();
	 * ```
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
	 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
	 * then you are also responsible for calling `$destroy` on the transclusion scope.
	 * </div>
	 *
	 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
	 * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
	 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
	 *
	 *
	 * #### Transclusion Scopes
	 *
	 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
	 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
	 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
	 * was taken.
	 *
	 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
	 * like this:
	 *
	 * ```html
	 * <div ng-app>
	 *   <div isolate>
	 *     <div transclusion>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `$parent` scope hierarchy will look like this:
	 *
	   ```
	   - $rootScope
	     - isolate
	       - transclusion
	   ```
	 *
	 * but the scopes will inherit prototypically from different scopes to their `$parent`.
	 *
	   ```
	   - $rootScope
	     - transclusion
	   - isolate
	   ```
	 *
	 *
	 * ### Attributes
	 *
	 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
	 * `link()` or `compile()` functions. It has a variety of uses.
	 *
	 * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:
	 *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access
	 *   to the attributes.
	 *
	 * * *Directive inter-communication:* All directives share the same instance of the attributes
	 *   object which allows the directives to use the attributes object as inter directive
	 *   communication.
	 *
	 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
	 *   allowing other directives to read the interpolated value.
	 *
	 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
	 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
	 *   the only way to easily get the actual value because during the linking phase the interpolation
	 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
	 *
	 * ```js
	 * function linkingFn(scope, elm, attrs, ctrl) {
	 *   // get the attribute value
	 *   console.log(attrs.ngModel);
	 *
	 *   // change the attribute
	 *   attrs.$set('ngModel', 'new value');
	 *
	 *   // observe changes to interpolated attribute
	 *   attrs.$observe('ngModel', function(value) {
	 *     console.log('ngModel has changed value to ' + value);
	 *   });
	 * }
	 * ```
	 *
	 * ## Example
	 *
	 * <div class="alert alert-warning">
	 * **Note**: Typically directives are registered with `module.directive`. The example below is
	 * to illustrate how `$compile` works.
	 * </div>
	 *
	 <example module="compileExample" name="compile">
	   <file name="index.html">
	    <script>
	      angular.module('compileExample', [], function($compileProvider) {
	        // configure new 'compile' directive by passing a directive
	        // factory function. The factory function injects the '$compile'
	        $compileProvider.directive('compile', function($compile) {
	          // directive factory creates a link function
	          return function(scope, element, attrs) {
	            scope.$watch(
	              function(scope) {
	                 // watch the 'compile' expression for changes
	                return scope.$eval(attrs.compile);
	              },
	              function(value) {
	                // when the 'compile' expression changes
	                // assign it into the current DOM
	                element.html(value);

	                // compile the new DOM and link it to the current
	                // scope.
	                // NOTE: we only compile .childNodes so that
	                // we don't get into infinite loop compiling ourselves
	                $compile(element.contents())(scope);
	              }
	            );
	          };
	        });
	      })
	      .controller('GreeterController', ['$scope', function($scope) {
	        $scope.name = 'Angular';
	        $scope.html = 'Hello {{name}}';
	      }]);
	    </script>
	    <div ng-controller="GreeterController">
	      <input ng-model="name"> <br/>
	      <textarea ng-model="html"></textarea> <br/>
	      <div compile="html"></div>
	    </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should auto compile', function() {
	       var textarea = $('textarea');
	       var output = $('div[compile]');
	       // The initial state reads 'Hello Angular'.
	       expect(output.getText()).toBe('Hello Angular');
	       textarea.clear();
	       textarea.sendKeys('{{name}}!');
	       expect(output.getText()).toBe('Angular!');
	     });
	   </file>
	 </example>

	 *
	 *
	 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
	 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
	 *
	 * <div class="alert alert-danger">
	 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
	 *   e.g. will not use the right outer scope. Please pass the transclude function as a
	 *   `parentBoundTranscludeFn` to the link function instead.
	 * </div>
	 *
	 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
	 *                 root element(s), not their children)
	 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
	 * (a DOM element/tree) to a scope. Where:
	 *
	 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
	 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
	 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
	 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
	 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
	 *
	 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
	 *      * `scope` - is the current scope with which the linking function is working with.
	 *
	 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
	 *  keys may be used to control linking behavior:
	 *
	 *      * `parentBoundTranscludeFn` - the transclude function made available to
	 *        directives; if given, it will be passed through to the link functions of
	 *        directives found in `element` during compilation.
	 *      * `transcludeControllers` - an object hash with keys that map controller names
	 *        to a hash with the key `instance`, which maps to the controller instance;
	 *        if given, it will make the controllers available to directives on the compileNode:
	 *        ```
	 *        {
	 *          parent: {
	 *            instance: parentControllerInstance
	 *          }
	 *        }
	 *        ```
	 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
	 *        the cloned elements; only needed for transcludes that are allowed to contain non html
	 *        elements (e.g. SVG elements). See also the directive.controller property.
	 *
	 * Calling the linking function returns the element of the template. It is either the original
	 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
	 *
	 * After linking the view is not updated until after a call to $digest which typically is done by
	 * Angular automatically.
	 *
	 * If you need access to the bound view, there are two ways to do it:
	 *
	 * - If you are not asking the linking function to clone the template, create the DOM element(s)
	 *   before you send them to the compiler and keep this reference around.
	 *   ```js
	 *     var element = $compile('<p>{{total}}</p>')(scope);
	 *   ```
	 *
	 * - if on the other hand, you need the element to be cloned, the view reference from the original
	 *   example would not point to the clone, but rather to the original template that was cloned. In
	 *   this case, you can access the clone via the cloneAttachFn:
	 *   ```js
	 *     var templateElement = angular.element('<p>{{total}}</p>'),
	 *         scope = ....;
	 *
	 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
	 *       //attach the clone to DOM document at the right place
	 *     });
	 *
	 *     //now we have reference to the cloned DOM via `clonedElement`
	 *   ```
	 *
	 *
	 * For information on how the compiler works, see the
	 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
	 *
	 * @knownIssue
	 *
	 * ### Double Compilation
	 *
	   Double compilation occurs when an already compiled part of the DOM gets
	   compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues,
	   and memory leaks. Refer to the Compiler Guide {@link guide/compiler#double-compilation-and-how-to-avoid-it
	   section on double compilation} for an in-depth explanation and ways to avoid it.
	 *
	 */var $compileMinErr=minErr('$compile');function UNINITIALIZED_VALUE(){}var _UNINITIALIZED_VALUE=new UNINITIALIZED_VALUE();/**
	 * @ngdoc provider
	 * @name $compileProvider
	 *
	 * @description
	 */$CompileProvider.$inject=['$provide','$$sanitizeUriProvider'];/** @this */function $CompileProvider($provide,$$sanitizeUriProvider){var hasDirectives={},Suffix='Directive',COMMENT_DIRECTIVE_REGEXP=/^\s*directive:\s*([\w-]+)\s+(.*)$/,CLASS_DIRECTIVE_REGEXP=/(([\w-]+)(?::([^;]+))?;?)/,ALL_OR_NOTHING_ATTRS=makeMap('ngSrc,ngSrcset,src,srcset'),REQUIRE_PREFIX_REGEXP=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/;// Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
	// The assumption is that future DOM event attribute names will begin with
	// 'on' and be composed of only English letters.
	var EVENT_HANDLER_ATTR_REGEXP=/^(on[a-z]+|formaction)$/;var bindingCache=createMap();function parseIsolateBindings(scope,directiveName,isController){var LOCAL_REGEXP=/^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/;var bindings=createMap();forEach(scope,function(definition,scopeName){if(definition in bindingCache){bindings[scopeName]=bindingCache[definition];return;}var match=definition.match(LOCAL_REGEXP);if(!match){throw $compileMinErr('iscp','Invalid {3} for directive \'{0}\'.'+' Definition: {... {1}: \'{2}\' ...}',directiveName,scopeName,definition,isController?'controller bindings definition':'isolate scope definition');}bindings[scopeName]={mode:match[1][0],collection:match[2]==='*',optional:match[3]==='?',attrName:match[4]||scopeName};if(match[4]){bindingCache[definition]=bindings[scopeName];}});return bindings;}function parseDirectiveBindings(directive,directiveName){var bindings={isolateScope:null,bindToController:null};if(isObject(directive.scope)){if(directive.bindToController===true){bindings.bindToController=parseIsolateBindings(directive.scope,directiveName,true);bindings.isolateScope={};}else{bindings.isolateScope=parseIsolateBindings(directive.scope,directiveName,false);}}if(isObject(directive.bindToController)){bindings.bindToController=parseIsolateBindings(directive.bindToController,directiveName,true);}if(bindings.bindToController&&!directive.controller){// There is no controller
	throw $compileMinErr('noctrl','Cannot bind to controller without directive \'{0}\'s controller.',directiveName);}return bindings;}function assertValidDirectiveName(name){var letter=name.charAt(0);if(!letter||letter!==lowercase(letter)){throw $compileMinErr('baddir','Directive/Component name \'{0}\' is invalid. The first character must be a lowercase letter',name);}if(name!==name.trim()){throw $compileMinErr('baddir','Directive/Component name \'{0}\' is invalid. The name should not contain leading or trailing whitespaces',name);}}function getDirectiveRequire(directive){var require=directive.require||directive.controller&&directive.name;if(!isArray(require)&&isObject(require)){forEach(require,function(value,key){var match=value.match(REQUIRE_PREFIX_REGEXP);var name=value.substring(match[0].length);if(!name)require[key]=match[0]+key;});}return require;}function getDirectiveRestrict(restrict,name){if(restrict&&!(isString(restrict)&&/[EACM]/.test(restrict))){throw $compileMinErr('badrestrict','Restrict property \'{0}\' of directive \'{1}\' is invalid',restrict,name);}return restrict||'EA';}/**
	   * @ngdoc method
	   * @name $compileProvider#directive
	   * @kind function
	   *
	   * @description
	   * Register a new directive with the compiler.
	   *
	   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
	   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
	   *    names and the values are the factories.
	   * @param {Function|Array} directiveFactory An injectable directive factory function. See the
	   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
	   * @returns {ng.$compileProvider} Self for chaining.
	   */this.directive=function registerDirective(name,directiveFactory){assertArg(name,'name');assertNotHasOwnProperty(name,'directive');if(isString(name)){assertValidDirectiveName(name);assertArg(directiveFactory,'directiveFactory');if(!hasDirectives.hasOwnProperty(name)){hasDirectives[name]=[];$provide.factory(name+Suffix,['$injector','$exceptionHandler',function($injector,$exceptionHandler){var directives=[];forEach(hasDirectives[name],function(directiveFactory,index){try{var directive=$injector.invoke(directiveFactory);if(isFunction(directive)){directive={compile:valueFn(directive)};}else if(!directive.compile&&directive.link){directive.compile=valueFn(directive.link);}directive.priority=directive.priority||0;directive.index=index;directive.name=directive.name||name;directive.require=getDirectiveRequire(directive);directive.restrict=getDirectiveRestrict(directive.restrict,name);directive.$$moduleName=directiveFactory.$$moduleName;directives.push(directive);}catch(e){$exceptionHandler(e);}});return directives;}]);}hasDirectives[name].push(directiveFactory);}else{forEach(name,reverseParams(registerDirective));}return this;};/**
	   * @ngdoc method
	   * @name $compileProvider#component
	   * @module ng
	   * @param {string} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`)
	   * @param {Object} options Component definition object (a simplified
	   *    {@link ng.$compile#directive-definition-object directive definition object}),
	   *    with the following properties (all optional):
	   *
	   *    - `controller` – `{(string|function()=}` – controller constructor function that should be
	   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
	   *      registered controller} if passed as a string. An empty `noop` function by default.
	   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
	   *      If present, the controller will be published to scope under the `controllerAs` name.
	   *      If not present, this will default to be `$ctrl`.
	   *    - `template` – `{string=|function()=}` – html template as a string or a function that
	   *      returns an html template as a string which should be used as the contents of this component.
	   *      Empty string by default.
	   *
	   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
	   *      template that should be used  as the contents of this component.
	   *
	   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
	   *      Component properties are always bound to the component controller and not to the scope.
	   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
	   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
	   *      Disabled by default.
	   *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
	   *      this component's controller. The object keys specify the property names under which the required
	   *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
	   *    - `$...` – additional properties to attach to the directive factory function and the controller
	   *      constructor function. (This is used by the component router to annotate)
	   *
	   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
	   * @description
	   * Register a **component definition** with the compiler. This is a shorthand for registering a special
	   * type of directive, which represents a self-contained UI component in your application. Such components
	   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
	   *
	   * Component definitions are very simple and do not require as much configuration as defining general
	   * directives. Component definitions usually consist only of a template and a controller backing it.
	   *
	   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
	   * `bindToController`. They always have **isolate scope** and are restricted to elements.
	   *
	   * Here are a few examples of how you would usually define components:
	   *
	   * ```js
	   *   var myMod = angular.module(...);
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     controller: function() {
	   *       this.name = 'shahar';
	   *     }
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     templateUrl: 'views/my-comp.html',
	   *     controller: 'MyCtrl',
	   *     controllerAs: 'ctrl',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   * ```
	   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
	   *
	   * <br />
	   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
	   */this.component=function registerComponent(name,options){var controller=options.controller||function(){};function factory($injector){function makeInjectable(fn){if(isFunction(fn)||isArray(fn)){return(/** @this */function(tElement,tAttrs){return $injector.invoke(fn,this,{$element:tElement,$attrs:tAttrs});});}else{return fn;}}var template=!options.template&&!options.templateUrl?'':options.template;var ddo={controller:controller,controllerAs:identifierForController(options.controller)||options.controllerAs||'$ctrl',template:makeInjectable(template),templateUrl:makeInjectable(options.templateUrl),transclude:options.transclude,scope:{},bindToController:options.bindings||{},restrict:'E',require:options.require};// Copy annotations (starting with $) over to the DDO
	forEach(options,function(val,key){if(key.charAt(0)==='$')ddo[key]=val;});return ddo;}// TODO(pete) remove the following `forEach` before we release 1.6.0
	// The component-router@0.2.0 looks for the annotations on the controller constructor
	// Nothing in Angular looks for annotations on the factory function but we can't remove
	// it from 1.5.x yet.
	// Copy any annotation properties (starting with $) over to the factory and controller constructor functions
	// These could be used by libraries such as the new component router
	forEach(options,function(val,key){if(key.charAt(0)==='$'){factory[key]=val;// Don't try to copy over annotations to named controller
	if(isFunction(controller))controller[key]=val;}});factory.$inject=['$injector'];return this.directive(name,factory);};/**
	   * @ngdoc method
	   * @name $compileProvider#aHrefSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */this.aHrefSanitizationWhitelist=function(regexp){if(isDefined(regexp)){$$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);return this;}else{return $$sanitizeUriProvider.aHrefSanitizationWhitelist();}};/**
	   * @ngdoc method
	   * @name $compileProvider#imgSrcSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */this.imgSrcSanitizationWhitelist=function(regexp){if(isDefined(regexp)){$$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);return this;}else{return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();}};/**
	   * @ngdoc method
	   * @name  $compileProvider#debugInfoEnabled
	   *
	   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
	   * current debugInfoEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable various debug runtime information in the compiler such as adding
	   * binding information and a reference to the current scope on to DOM elements.
	   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
	   * * `ng-binding` CSS class
	   * * `$binding` data property containing an array of the binding expressions
	   *
	   * You may want to disable this in production for a significant performance boost. See
	   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
	   *
	   * The default value is true.
	   */var debugInfoEnabled=true;this.debugInfoEnabled=function(enabled){if(isDefined(enabled)){debugInfoEnabled=enabled;return this;}return debugInfoEnabled;};/**
	   * @ngdoc method
	   * @name  $compileProvider#preAssignBindingsEnabled
	   *
	   * @param {boolean=} enabled update the preAssignBindingsEnabled state if provided, otherwise just return the
	   * current preAssignBindingsEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable whether directive controllers are assigned bindings before
	   * calling the controller's constructor.
	   * If enabled (true), the compiler assigns the value of each of the bindings to the
	   * properties of the controller object before the constructor of this object is called.
	   *
	   * If disabled (false), the compiler calls the constructor first before assigning bindings.
	   *
	   * The default value is true in Angular 1.5.x but will switch to false in Angular 1.6.x.
	   */var preAssignBindingsEnabled=false;this.preAssignBindingsEnabled=function(enabled){if(isDefined(enabled)){preAssignBindingsEnabled=enabled;return this;}return preAssignBindingsEnabled;};var TTL=10;/**
	   * @ngdoc method
	   * @name $compileProvider#onChangesTtl
	   * @description
	   *
	   * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
	   * assuming that the model is unstable.
	   *
	   * The current default is 10 iterations.
	   *
	   * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
	   * in several iterations of calls to these hooks. However if an application needs more than the default 10
	   * iterations to stabilize then you should investigate what is causing the model to continuously change during
	   * the `$onChanges` hook execution.
	   *
	   * Increasing the TTL could have performance implications, so you should not change it without proper justification.
	   *
	   * @param {number} limit The number of `$onChanges` hook iterations.
	   * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
	   */this.onChangesTtl=function(value){if(arguments.length){TTL=value;return this;}return TTL;};var commentDirectivesEnabledConfig=true;/**
	   * @ngdoc method
	   * @name $compileProvider#commentDirectivesEnabled
	   * @description
	   *
	   * It indicates to the compiler
	   * whether or not directives on comments should be compiled.
	   * Defaults to `true`.
	   *
	   * Calling this function with false disables the compilation of directives
	   * on comments for the whole application.
	   * This results in a compilation performance gain,
	   * as the compiler doesn't have to check comments when looking for directives.
	   * This should however only be used if you are sure that no comment directives are used in
	   * the application (including any 3rd party directives).
	   *
	   * @param {boolean} enabled `false` if the compiler may ignore directives on comments
	   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
	   */this.commentDirectivesEnabled=function(value){if(arguments.length){commentDirectivesEnabledConfig=value;return this;}return commentDirectivesEnabledConfig;};var cssClassDirectivesEnabledConfig=true;/**
	   * @ngdoc method
	   * @name $compileProvider#cssClassDirectivesEnabled
	   * @description
	   *
	   * It indicates to the compiler
	   * whether or not directives on element classes should be compiled.
	   * Defaults to `true`.
	   *
	   * Calling this function with false disables the compilation of directives
	   * on element classes for the whole application.
	   * This results in a compilation performance gain,
	   * as the compiler doesn't have to check element classes when looking for directives.
	   * This should however only be used if you are sure that no class directives are used in
	   * the application (including any 3rd party directives).
	   *
	   * @param {boolean} enabled `false` if the compiler may ignore directives on element classes
	   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
	   */this.cssClassDirectivesEnabled=function(value){if(arguments.length){cssClassDirectivesEnabledConfig=value;return this;}return cssClassDirectivesEnabledConfig;};this.$get=['$injector','$interpolate','$exceptionHandler','$templateRequest','$parse','$controller','$rootScope','$sce','$animate','$$sanitizeUri',function($injector,$interpolate,$exceptionHandler,$templateRequest,$parse,$controller,$rootScope,$sce,$animate,$$sanitizeUri){var SIMPLE_ATTR_NAME=/^\w/;var specialAttrHolder=window.document.createElement('div');var commentDirectivesEnabled=commentDirectivesEnabledConfig;var cssClassDirectivesEnabled=cssClassDirectivesEnabledConfig;var onChangesTtl=TTL;// The onChanges hooks should all be run together in a single digest
	// When changes occur, the call to trigger their hooks will be added to this queue
	var onChangesQueue;// This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
	function flushOnChangesQueue(){try{if(! --onChangesTtl){// We have hit the TTL limit so reset everything
	onChangesQueue=undefined;throw $compileMinErr('infchng','{0} $onChanges() iterations reached. Aborting!\n',TTL);}// We must run this hook in an apply since the $$postDigest runs outside apply
	$rootScope.$apply(function(){var errors=[];for(var i=0,ii=onChangesQueue.length;i<ii;++i){try{onChangesQueue[i]();}catch(e){errors.push(e);}}// Reset the queue to trigger a new schedule next time there is a change
	onChangesQueue=undefined;if(errors.length){throw errors;}});}finally{onChangesTtl++;}}function Attributes(element,attributesToCopy){if(attributesToCopy){var keys=Object.keys(attributesToCopy);var i,l,key;for(i=0,l=keys.length;i<l;i++){key=keys[i];this[key]=attributesToCopy[key];}}else{this.$attr={};}this.$$element=element;}Attributes.prototype={/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$normalize
	       * @kind function
	       *
	       * @description
	       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
	       * `data-`) to its normalized, camelCase form.
	       *
	       * Also there is special case for Moz prefix starting with upper case letter.
	       *
	       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	       *
	       * @param {string} name Name to normalize
	       */$normalize:directiveNormalize,/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$addClass
	       * @kind function
	       *
	       * @description
	       * Adds the CSS class value specified by the classVal parameter to the element. If animations
	       * are enabled then an animation will be triggered for the class addition.
	       *
	       * @param {string} classVal The className value that will be added to the element
	       */$addClass:function $addClass(classVal){if(classVal&&classVal.length>0){$animate.addClass(this.$$element,classVal);}},/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$removeClass
	       * @kind function
	       *
	       * @description
	       * Removes the CSS class value specified by the classVal parameter from the element. If
	       * animations are enabled then an animation will be triggered for the class removal.
	       *
	       * @param {string} classVal The className value that will be removed from the element
	       */$removeClass:function $removeClass(classVal){if(classVal&&classVal.length>0){$animate.removeClass(this.$$element,classVal);}},/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$updateClass
	       * @kind function
	       *
	       * @description
	       * Adds and removes the appropriate CSS class values to the element based on the difference
	       * between the new and old CSS class values (specified as newClasses and oldClasses).
	       *
	       * @param {string} newClasses The current CSS className value
	       * @param {string} oldClasses The former CSS className value
	       */$updateClass:function $updateClass(newClasses,oldClasses){var toAdd=tokenDifference(newClasses,oldClasses);if(toAdd&&toAdd.length){$animate.addClass(this.$$element,toAdd);}var toRemove=tokenDifference(oldClasses,newClasses);if(toRemove&&toRemove.length){$animate.removeClass(this.$$element,toRemove);}},/**
	       * Set a normalized attribute on the element in a way such that all directives
	       * can share the attribute. This function properly handles boolean attributes.
	       * @param {string} key Normalized key. (ie ngAttribute)
	       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
	       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
	       *     Defaults to true.
	       * @param {string=} attrName Optional none normalized name. Defaults to key.
	       */$set:function $set(key,value,writeAttr,attrName){// TODO: decide whether or not to throw an error if "class"
	//is set through this function since it may cause $updateClass to
	//become unstable.
	var node=this.$$element[0],booleanKey=getBooleanAttrName(node,key),aliasedKey=getAliasedAttrName(key),observer=key,nodeName;if(booleanKey){this.$$element.prop(key,value);attrName=booleanKey;}else if(aliasedKey){this[aliasedKey]=value;observer=aliasedKey;}this[key]=value;// translate normalized key to actual key
	if(attrName){this.$attr[key]=attrName;}else{attrName=this.$attr[key];if(!attrName){this.$attr[key]=attrName=snake_case(key,'-');}}nodeName=nodeName_(this.$$element);if(nodeName==='a'&&(key==='href'||key==='xlinkHref')||nodeName==='img'&&key==='src'){// sanitize a[href] and img[src] values
	this[key]=value=$$sanitizeUri(value,key==='src');}else if(nodeName==='img'&&key==='srcset'&&isDefined(value)){// sanitize img[srcset] values
	var result='';// first check if there are spaces because it's not the same pattern
	var trimmedSrcset=trim(value);//                (   999x   ,|   999w   ,|   ,|,   )
	var srcPattern=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;var pattern=/\s/.test(trimmedSrcset)?srcPattern:/(,)/;// split srcset into tuple of uri and descriptor except for the last item
	var rawUris=trimmedSrcset.split(pattern);// for each tuples
	var nbrUrisWith2parts=Math.floor(rawUris.length/2);for(var i=0;i<nbrUrisWith2parts;i++){var innerIdx=i*2;// sanitize the uri
	result+=$$sanitizeUri(trim(rawUris[innerIdx]),true);// add the descriptor
	result+=' '+trim(rawUris[innerIdx+1]);}// split the last item into uri and descriptor
	var lastTuple=trim(rawUris[i*2]).split(/\s/);// sanitize the last uri
	result+=$$sanitizeUri(trim(lastTuple[0]),true);// and add the last descriptor if any
	if(lastTuple.length===2){result+=' '+trim(lastTuple[1]);}this[key]=value=result;}if(writeAttr!==false){if(value===null||isUndefined(value)){this.$$element.removeAttr(attrName);}else{if(SIMPLE_ATTR_NAME.test(attrName)){this.$$element.attr(attrName,value);}else{setSpecialAttr(this.$$element[0],attrName,value);}}}// fire observers
	var $$observers=this.$$observers;if($$observers){forEach($$observers[observer],function(fn){try{fn(value);}catch(e){$exceptionHandler(e);}});}},/**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$observe
	       * @kind function
	       *
	       * @description
	       * Observes an interpolated attribute.
	       *
	       * The observer function will be invoked once during the next `$digest` following
	       * compilation. The observer is then invoked whenever the interpolated value
	       * changes.
	       *
	       * @param {string} key Normalized key. (ie ngAttribute) .
	       * @param {function(interpolatedValue)} fn Function that will be called whenever
	                the interpolated value of the attribute changes.
	       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
	       *        guide} for more info.
	       * @returns {function()} Returns a deregistration function for this observer.
	       */$observe:function $observe(key,fn){var attrs=this,$$observers=attrs.$$observers||(attrs.$$observers=createMap()),listeners=$$observers[key]||($$observers[key]=[]);listeners.push(fn);$rootScope.$evalAsync(function(){if(!listeners.$$inter&&attrs.hasOwnProperty(key)&&!isUndefined(attrs[key])){// no one registered attribute interpolation function, so lets call it manually
	fn(attrs[key]);}});return function(){arrayRemove(listeners,fn);};}};function setSpecialAttr(element,attrName,value){// Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
	// so we have to jump through some hoops to get such an attribute
	// https://github.com/angular/angular.js/pull/13318
	specialAttrHolder.innerHTML='<span '+attrName+'>';var attributes=specialAttrHolder.firstChild.attributes;var attribute=attributes[0];// We have to remove the attribute from its container element before we can add it to the destination element
	attributes.removeNamedItem(attribute.name);attribute.value=value;element.attributes.setNamedItem(attribute);}function safeAddClass($element,className){try{$element.addClass(className);}catch(e){// ignore, since it means that we are trying to set class on
	// SVG element, where class name is read-only.
	}}var startSymbol=$interpolate.startSymbol(),endSymbol=$interpolate.endSymbol(),denormalizeTemplate=startSymbol==='{{'&&endSymbol==='}}'?identity:function denormalizeTemplate(template){return template.replace(/\{\{/g,startSymbol).replace(/}}/g,endSymbol);},NG_ATTR_BINDING=/^ngAttr[A-Z]/;var MULTI_ELEMENT_DIR_RE=/^(.+)Start$/;compile.$$addBindingInfo=debugInfoEnabled?function $$addBindingInfo($element,binding){var bindings=$element.data('$binding')||[];if(isArray(binding)){bindings=bindings.concat(binding);}else{bindings.push(binding);}$element.data('$binding',bindings);}:noop;compile.$$addBindingClass=debugInfoEnabled?function $$addBindingClass($element){safeAddClass($element,'ng-binding');}:noop;compile.$$addScopeInfo=debugInfoEnabled?function $$addScopeInfo($element,scope,isolated,noTemplate){var dataName=isolated?noTemplate?'$isolateScopeNoTemplate':'$isolateScope':'$scope';$element.data(dataName,scope);}:noop;compile.$$addScopeClass=debugInfoEnabled?function $$addScopeClass($element,isolated){safeAddClass($element,isolated?'ng-isolate-scope':'ng-scope');}:noop;compile.$$createComment=function(directiveName,comment){var content='';if(debugInfoEnabled){content=' '+(directiveName||'')+': ';if(comment)content+=comment+' ';}return window.document.createComment(content);};return compile;//================================
	function compile($compileNodes,transcludeFn,maxPriority,ignoreDirective,previousCompileContext){if(!($compileNodes instanceof jqLite)){// jquery always rewraps, whereas we need to preserve the original selector so that we can
	// modify it.
	$compileNodes=jqLite($compileNodes);}var compositeLinkFn=compileNodes($compileNodes,transcludeFn,$compileNodes,maxPriority,ignoreDirective,previousCompileContext);compile.$$addScopeClass($compileNodes);var namespace=null;return function publicLinkFn(scope,cloneConnectFn,options){if(!$compileNodes){throw $compileMinErr('multilink','This element has already been linked.');}assertArg(scope,'scope');if(previousCompileContext&&previousCompileContext.needsNewScope){// A parent directive did a replace and a directive on this element asked
	// for transclusion, which caused us to lose a layer of element on which
	// we could hold the new transclusion scope, so we will create it manually
	// here.
	scope=scope.$parent.$new();}options=options||{};var parentBoundTranscludeFn=options.parentBoundTranscludeFn,transcludeControllers=options.transcludeControllers,futureParentElement=options.futureParentElement;// When `parentBoundTranscludeFn` is passed, it is a
	// `controllersBoundTransclude` function (it was previously passed
	// as `transclude` to directive.link) so we must unwrap it to get
	// its `boundTranscludeFn`
	if(parentBoundTranscludeFn&&parentBoundTranscludeFn.$$boundTransclude){parentBoundTranscludeFn=parentBoundTranscludeFn.$$boundTransclude;}if(!namespace){namespace=detectNamespaceForChildElements(futureParentElement);}var $linkNode;if(namespace!=='html'){// When using a directive with replace:true and templateUrl the $compileNodes
	// (or a child element inside of them)
	// might change, so we need to recreate the namespace adapted compileNodes
	// for call to the link function.
	// Note: This will already clone the nodes...
	$linkNode=jqLite(wrapTemplate(namespace,jqLite('<div>').append($compileNodes).html()));}else if(cloneConnectFn){// important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
	// and sometimes changes the structure of the DOM.
	$linkNode=JQLitePrototype.clone.call($compileNodes);}else{$linkNode=$compileNodes;}if(transcludeControllers){for(var controllerName in transcludeControllers){$linkNode.data('$'+controllerName+'Controller',transcludeControllers[controllerName].instance);}}compile.$$addScopeInfo($linkNode,scope);if(cloneConnectFn)cloneConnectFn($linkNode,scope);if(compositeLinkFn)compositeLinkFn(scope,$linkNode,$linkNode,parentBoundTranscludeFn);if(!cloneConnectFn){$compileNodes=compositeLinkFn=null;}return $linkNode;};}function detectNamespaceForChildElements(parentElement){// TODO: Make this detect MathML as well...
	var node=parentElement&&parentElement[0];if(!node){return'html';}else{return nodeName_(node)!=='foreignobject'&&toString.call(node).match(/SVG/)?'svg':'html';}}/**
	     * Compile function matches each node in nodeList against the directives. Once all directives
	     * for a particular node are collected their compile functions are executed. The compile
	     * functions return values - the linking functions - are combined into a composite linking
	     * function, which is the a linking function for the node.
	     *
	     * @param {NodeList} nodeList an array of nodes or NodeList to compile
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *        scope argument is auto-generated to the new child of the transcluded parent scope.
	     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
	     *        the rootElement must be set the jqLite collection of the compile root. This is
	     *        needed so that the jqLite collection items can be replaced with widgets.
	     * @param {number=} maxPriority Max directive priority.
	     * @returns {Function} A composite linking function of all of the matched directives or null.
	     */function compileNodes(nodeList,transcludeFn,$rootElement,maxPriority,ignoreDirective,previousCompileContext){var linkFns=[],// `nodeList` can be either an element's `.childNodes` (live NodeList)
	// or a jqLite/jQuery collection or an array
	notLiveList=isArray(nodeList)||nodeList instanceof jqLite,attrs,directives,nodeLinkFn,childNodes,childLinkFn,linkFnFound,nodeLinkFnFound;for(var i=0;i<nodeList.length;i++){attrs=new Attributes();// Support: IE 11 only
	// Workaround for #11781 and #14924
	if(msie===11){mergeConsecutiveTextNodes(nodeList,i,notLiveList);}// We must always refer to `nodeList[i]` hereafter,
	// since the nodes can be replaced underneath us.
	directives=collectDirectives(nodeList[i],[],attrs,i===0?maxPriority:undefined,ignoreDirective);nodeLinkFn=directives.length?applyDirectivesToNode(directives,nodeList[i],attrs,transcludeFn,$rootElement,null,[],[],previousCompileContext):null;if(nodeLinkFn&&nodeLinkFn.scope){compile.$$addScopeClass(attrs.$$element);}childLinkFn=nodeLinkFn&&nodeLinkFn.terminal||!(childNodes=nodeList[i].childNodes)||!childNodes.length?null:compileNodes(childNodes,nodeLinkFn?(nodeLinkFn.transcludeOnThisElement||!nodeLinkFn.templateOnThisElement)&&nodeLinkFn.transclude:transcludeFn);if(nodeLinkFn||childLinkFn){linkFns.push(i,nodeLinkFn,childLinkFn);linkFnFound=true;nodeLinkFnFound=nodeLinkFnFound||nodeLinkFn;}//use the previous context only for the first element in the virtual group
	previousCompileContext=null;}// return a linking function if we have found anything, null otherwise
	return linkFnFound?compositeLinkFn:null;function compositeLinkFn(scope,nodeList,$rootElement,parentBoundTranscludeFn){var nodeLinkFn,childLinkFn,node,childScope,i,ii,idx,childBoundTranscludeFn;var stableNodeList;if(nodeLinkFnFound){// copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
	// offsets don't get screwed up
	var nodeListLength=nodeList.length;stableNodeList=new Array(nodeListLength);// create a sparse array by only copying the elements which have a linkFn
	for(i=0;i<linkFns.length;i+=3){idx=linkFns[i];stableNodeList[idx]=nodeList[idx];}}else{stableNodeList=nodeList;}for(i=0,ii=linkFns.length;i<ii;){node=stableNodeList[linkFns[i++]];nodeLinkFn=linkFns[i++];childLinkFn=linkFns[i++];if(nodeLinkFn){if(nodeLinkFn.scope){childScope=scope.$new();compile.$$addScopeInfo(jqLite(node),childScope);}else{childScope=scope;}if(nodeLinkFn.transcludeOnThisElement){childBoundTranscludeFn=createBoundTranscludeFn(scope,nodeLinkFn.transclude,parentBoundTranscludeFn);}else if(!nodeLinkFn.templateOnThisElement&&parentBoundTranscludeFn){childBoundTranscludeFn=parentBoundTranscludeFn;}else if(!parentBoundTranscludeFn&&transcludeFn){childBoundTranscludeFn=createBoundTranscludeFn(scope,transcludeFn);}else{childBoundTranscludeFn=null;}nodeLinkFn(childLinkFn,childScope,node,$rootElement,childBoundTranscludeFn);}else if(childLinkFn){childLinkFn(scope,node.childNodes,undefined,parentBoundTranscludeFn);}}}}function mergeConsecutiveTextNodes(nodeList,idx,notLiveList){var node=nodeList[idx];var parent=node.parentNode;var sibling;if(node.nodeType!==NODE_TYPE_TEXT){return;}while(true){sibling=parent?node.nextSibling:nodeList[idx+1];if(!sibling||sibling.nodeType!==NODE_TYPE_TEXT){break;}node.nodeValue=node.nodeValue+sibling.nodeValue;if(sibling.parentNode){sibling.parentNode.removeChild(sibling);}if(notLiveList&&sibling===nodeList[idx+1]){nodeList.splice(idx+1,1);}}}function createBoundTranscludeFn(scope,transcludeFn,previousBoundTranscludeFn){function boundTranscludeFn(transcludedScope,cloneFn,controllers,futureParentElement,containingScope){if(!transcludedScope){transcludedScope=scope.$new(false,containingScope);transcludedScope.$$transcluded=true;}return transcludeFn(transcludedScope,cloneFn,{parentBoundTranscludeFn:previousBoundTranscludeFn,transcludeControllers:controllers,futureParentElement:futureParentElement});}// We need  to attach the transclusion slots onto the `boundTranscludeFn`
	// so that they are available inside the `controllersBoundTransclude` function
	var boundSlots=boundTranscludeFn.$$slots=createMap();for(var slotName in transcludeFn.$$slots){if(transcludeFn.$$slots[slotName]){boundSlots[slotName]=createBoundTranscludeFn(scope,transcludeFn.$$slots[slotName],previousBoundTranscludeFn);}else{boundSlots[slotName]=null;}}return boundTranscludeFn;}/**
	     * Looks for directives on the given node and adds them to the directive collection which is
	     * sorted.
	     *
	     * @param node Node to search.
	     * @param directives An array to which the directives are added to. This array is sorted before
	     *        the function returns.
	     * @param attrs The shared attrs object which is used to populate the normalized attributes.
	     * @param {number=} maxPriority Max directive priority.
	     */function collectDirectives(node,directives,attrs,maxPriority,ignoreDirective){var nodeType=node.nodeType,attrsMap=attrs.$attr,match,nodeName,className;switch(nodeType){case NODE_TYPE_ELEMENT:/* Element */nodeName=nodeName_(node);// use the node name: <directive>
	addDirective(directives,directiveNormalize(nodeName),'E',maxPriority,ignoreDirective);// iterate over the attributes
	for(var attr,name,nName,ngAttrName,value,isNgAttr,nAttrs=node.attributes,j=0,jj=nAttrs&&nAttrs.length;j<jj;j++){var attrStartName=false;var attrEndName=false;attr=nAttrs[j];name=attr.name;value=attr.value;// support ngAttr attribute binding
	ngAttrName=directiveNormalize(name);isNgAttr=NG_ATTR_BINDING.test(ngAttrName);if(isNgAttr){name=name.replace(PREFIX_REGEXP,'').substr(8).replace(/_(.)/g,function(match,letter){return letter.toUpperCase();});}var multiElementMatch=ngAttrName.match(MULTI_ELEMENT_DIR_RE);if(multiElementMatch&&directiveIsMultiElement(multiElementMatch[1])){attrStartName=name;attrEndName=name.substr(0,name.length-5)+'end';name=name.substr(0,name.length-6);}nName=directiveNormalize(name.toLowerCase());attrsMap[nName]=name;if(isNgAttr||!attrs.hasOwnProperty(nName)){attrs[nName]=value;if(getBooleanAttrName(node,nName)){attrs[nName]=true;// presence means true
	}}addAttrInterpolateDirective(node,directives,value,nName,isNgAttr);addDirective(directives,nName,'A',maxPriority,ignoreDirective,attrStartName,attrEndName);}if(nodeName==='input'&&node.getAttribute('type')==='hidden'){// Hidden input elements can have strange behaviour when navigating back to the page
	// This tells the browser not to try to cache and reinstate previous values
	node.setAttribute('autocomplete','off');}// use class as directive
	if(!cssClassDirectivesEnabled)break;className=node.className;if(isObject(className)){// Maybe SVGAnimatedString
	className=className.animVal;}if(isString(className)&&className!==''){while(match=CLASS_DIRECTIVE_REGEXP.exec(className)){nName=directiveNormalize(match[2]);if(addDirective(directives,nName,'C',maxPriority,ignoreDirective)){attrs[nName]=trim(match[3]);}className=className.substr(match.index+match[0].length);}}break;case NODE_TYPE_TEXT:/* Text Node */addTextInterpolateDirective(directives,node.nodeValue);break;case NODE_TYPE_COMMENT:/* Comment */if(!commentDirectivesEnabled)break;collectCommentDirectives(node,directives,attrs,maxPriority,ignoreDirective);break;}directives.sort(byPriority);return directives;}function collectCommentDirectives(node,directives,attrs,maxPriority,ignoreDirective){// function created because of performance, try/catch disables
	// the optimization of the whole function #14848
	try{var match=COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);if(match){var nName=directiveNormalize(match[1]);if(addDirective(directives,nName,'M',maxPriority,ignoreDirective)){attrs[nName]=trim(match[2]);}}}catch(e){// turns out that under some circumstances IE9 throws errors when one attempts to read
	// comment's node value.
	// Just ignore it and continue. (Can't seem to reproduce in test case.)
	}}/**
	     * Given a node with a directive-start it collects all of the siblings until it finds
	     * directive-end.
	     * @param node
	     * @param attrStart
	     * @param attrEnd
	     * @returns {*}
	     */function groupScan(node,attrStart,attrEnd){var nodes=[];var depth=0;if(attrStart&&node.hasAttribute&&node.hasAttribute(attrStart)){do{if(!node){throw $compileMinErr('uterdir','Unterminated attribute, found \'{0}\' but no matching \'{1}\' found.',attrStart,attrEnd);}if(node.nodeType===NODE_TYPE_ELEMENT){if(node.hasAttribute(attrStart))depth++;if(node.hasAttribute(attrEnd))depth--;}nodes.push(node);node=node.nextSibling;}while(depth>0);}else{nodes.push(node);}return jqLite(nodes);}/**
	     * Wrapper for linking function which converts normal linking function into a grouped
	     * linking function.
	     * @param linkFn
	     * @param attrStart
	     * @param attrEnd
	     * @returns {Function}
	     */function groupElementsLinkFnWrapper(linkFn,attrStart,attrEnd){return function groupedElementsLink(scope,element,attrs,controllers,transcludeFn){element=groupScan(element[0],attrStart,attrEnd);return linkFn(scope,element,attrs,controllers,transcludeFn);};}/**
	     * A function generator that is used to support both eager and lazy compilation
	     * linking function.
	     * @param eager
	     * @param $compileNodes
	     * @param transcludeFn
	     * @param maxPriority
	     * @param ignoreDirective
	     * @param previousCompileContext
	     * @returns {Function}
	     */function compilationGenerator(eager,$compileNodes,transcludeFn,maxPriority,ignoreDirective,previousCompileContext){var compiled;if(eager){return compile($compileNodes,transcludeFn,maxPriority,ignoreDirective,previousCompileContext);}return(/** @this */function lazyCompilation(){if(!compiled){compiled=compile($compileNodes,transcludeFn,maxPriority,ignoreDirective,previousCompileContext);// Null out all of these references in order to make them eligible for garbage collection
	// since this is a potentially long lived closure
	$compileNodes=transcludeFn=previousCompileContext=null;}return compiled.apply(this,arguments);});}/**
	     * Once the directives have been collected, their compile functions are executed. This method
	     * is responsible for inlining directive templates as well as terminating the application
	     * of the directives if the terminal directive has been reached.
	     *
	     * @param {Array} directives Array of collected directives to execute their compile function.
	     *        this needs to be pre-sorted by priority order.
	     * @param {Node} compileNode The raw DOM node to apply the compile functions to
	     * @param {Object} templateAttrs The shared attribute function
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *                                                  scope argument is auto-generated to the new
	     *                                                  child of the transcluded parent scope.
	     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
	     *                              argument has the root jqLite array so that we can replace nodes
	     *                              on it.
	     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
	     *                                           compiling the transclusion.
	     * @param {Array.<Function>} preLinkFns
	     * @param {Array.<Function>} postLinkFns
	     * @param {Object} previousCompileContext Context used for previous compilation of the current
	     *                                        node
	     * @returns {Function} linkFn
	     */function applyDirectivesToNode(directives,compileNode,templateAttrs,transcludeFn,jqCollection,originalReplaceDirective,preLinkFns,postLinkFns,previousCompileContext){previousCompileContext=previousCompileContext||{};var terminalPriority=-Number.MAX_VALUE,newScopeDirective=previousCompileContext.newScopeDirective,controllerDirectives=previousCompileContext.controllerDirectives,newIsolateScopeDirective=previousCompileContext.newIsolateScopeDirective,templateDirective=previousCompileContext.templateDirective,nonTlbTranscludeDirective=previousCompileContext.nonTlbTranscludeDirective,hasTranscludeDirective=false,hasTemplate=false,hasElementTranscludeDirective=previousCompileContext.hasElementTranscludeDirective,$compileNode=templateAttrs.$$element=jqLite(compileNode),directive,directiveName,$template,replaceDirective=originalReplaceDirective,childTranscludeFn=transcludeFn,linkFn,didScanForMultipleTransclusion=false,mightHaveMultipleTransclusionError=false,directiveValue;// executes all directives on the current element
	for(var i=0,ii=directives.length;i<ii;i++){directive=directives[i];var attrStart=directive.$$start;var attrEnd=directive.$$end;// collect multiblock sections
	if(attrStart){$compileNode=groupScan(compileNode,attrStart,attrEnd);}$template=undefined;if(terminalPriority>directive.priority){break;// prevent further processing of directives
	}directiveValue=directive.scope;if(directiveValue){// skip the check for directives with async templates, we'll check the derived sync
	// directive when the template arrives
	if(!directive.templateUrl){if(isObject(directiveValue)){// This directive is trying to add an isolated scope.
	// Check that there is no scope of any kind already
	assertNoDuplicate('new/isolated scope',newIsolateScopeDirective||newScopeDirective,directive,$compileNode);newIsolateScopeDirective=directive;}else{// This directive is trying to add a child scope.
	// Check that there is no isolated scope already
	assertNoDuplicate('new/isolated scope',newIsolateScopeDirective,directive,$compileNode);}}newScopeDirective=newScopeDirective||directive;}directiveName=directive.name;// If we encounter a condition that can result in transclusion on the directive,
	// then scan ahead in the remaining directives for others that may cause a multiple
	// transclusion error to be thrown during the compilation process.  If a matching directive
	// is found, then we know that when we encounter a transcluded directive, we need to eagerly
	// compile the `transclude` function rather than doing it lazily in order to throw
	// exceptions at the correct time
	if(!didScanForMultipleTransclusion&&(directive.replace&&(directive.templateUrl||directive.template)||directive.transclude&&!directive.$$tlb)){var candidateDirective;for(var scanningIndex=i+1;candidateDirective=directives[scanningIndex++];){if(candidateDirective.transclude&&!candidateDirective.$$tlb||candidateDirective.replace&&(candidateDirective.templateUrl||candidateDirective.template)){mightHaveMultipleTransclusionError=true;break;}}didScanForMultipleTransclusion=true;}if(!directive.templateUrl&&directive.controller){controllerDirectives=controllerDirectives||createMap();assertNoDuplicate('\''+directiveName+'\' controller',controllerDirectives[directiveName],directive,$compileNode);controllerDirectives[directiveName]=directive;}directiveValue=directive.transclude;if(directiveValue){hasTranscludeDirective=true;// Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
	// This option should only be used by directives that know how to safely handle element transclusion,
	// where the transcluded nodes are added or replaced after linking.
	if(!directive.$$tlb){assertNoDuplicate('transclusion',nonTlbTranscludeDirective,directive,$compileNode);nonTlbTranscludeDirective=directive;}if(directiveValue==='element'){hasElementTranscludeDirective=true;terminalPriority=directive.priority;$template=$compileNode;$compileNode=templateAttrs.$$element=jqLite(compile.$$createComment(directiveName,templateAttrs[directiveName]));compileNode=$compileNode[0];replaceWith(jqCollection,sliceArgs($template),compileNode);// Support: Chrome < 50
	// https://github.com/angular/angular.js/issues/14041
	// In the versions of V8 prior to Chrome 50, the document fragment that is created
	// in the `replaceWith` function is improperly garbage collected despite still
	// being referenced by the `parentNode` property of all of the child nodes.  By adding
	// a reference to the fragment via a different property, we can avoid that incorrect
	// behavior.
	// TODO: remove this line after Chrome 50 has been released
	$template[0].$$parentNode=$template[0].parentNode;childTranscludeFn=compilationGenerator(mightHaveMultipleTransclusionError,$template,transcludeFn,terminalPriority,replaceDirective&&replaceDirective.name,{// Don't pass in:
	// - controllerDirectives - otherwise we'll create duplicates controllers
	// - newIsolateScopeDirective or templateDirective - combining templates with
	//   element transclusion doesn't make sense.
	//
	// We need only nonTlbTranscludeDirective so that we prevent putting transclusion
	// on the same element more than once.
	nonTlbTranscludeDirective:nonTlbTranscludeDirective});}else{var slots=createMap();if(!isObject(directiveValue)){$template=jqLite(jqLiteClone(compileNode)).contents();}else{// We have transclusion slots,
	// collect them up, compile them and store their transclusion functions
	$template=[];var slotMap=createMap();var filledSlots=createMap();// Parse the element selectors
	forEach(directiveValue,function(elementSelector,slotName){// If an element selector starts with a ? then it is optional
	var optional=elementSelector.charAt(0)==='?';elementSelector=optional?elementSelector.substring(1):elementSelector;slotMap[elementSelector]=slotName;// We explicitly assign `null` since this implies that a slot was defined but not filled.
	// Later when calling boundTransclusion functions with a slot name we only error if the
	// slot is `undefined`
	slots[slotName]=null;// filledSlots contains `true` for all slots that are either optional or have been
	// filled. This is used to check that we have not missed any required slots
	filledSlots[slotName]=optional;});// Add the matching elements into their slot
	forEach($compileNode.contents(),function(node){var slotName=slotMap[directiveNormalize(nodeName_(node))];if(slotName){filledSlots[slotName]=true;slots[slotName]=slots[slotName]||[];slots[slotName].push(node);}else{$template.push(node);}});// Check for required slots that were not filled
	forEach(filledSlots,function(filled,slotName){if(!filled){throw $compileMinErr('reqslot','Required transclusion slot `{0}` was not filled.',slotName);}});for(var slotName in slots){if(slots[slotName]){// Only define a transclusion function if the slot was filled
	slots[slotName]=compilationGenerator(mightHaveMultipleTransclusionError,slots[slotName],transcludeFn);}}}$compileNode.empty();// clear contents
	childTranscludeFn=compilationGenerator(mightHaveMultipleTransclusionError,$template,transcludeFn,undefined,undefined,{needsNewScope:directive.$$isolateScope||directive.$$newScope});childTranscludeFn.$$slots=slots;}}if(directive.template){hasTemplate=true;assertNoDuplicate('template',templateDirective,directive,$compileNode);templateDirective=directive;directiveValue=isFunction(directive.template)?directive.template($compileNode,templateAttrs):directive.template;directiveValue=denormalizeTemplate(directiveValue);if(directive.replace){replaceDirective=directive;if(jqLiteIsTextNode(directiveValue)){$template=[];}else{$template=removeComments(wrapTemplate(directive.templateNamespace,trim(directiveValue)));}compileNode=$template[0];if($template.length!==1||compileNode.nodeType!==NODE_TYPE_ELEMENT){throw $compileMinErr('tplrt','Template for directive \'{0}\' must have exactly one root element. {1}',directiveName,'');}replaceWith(jqCollection,$compileNode,compileNode);var newTemplateAttrs={$attr:{}};// combine directives from the original node and from the template:
	// - take the array of directives for this element
	// - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
	// - collect directives from the template and sort them by priority
	// - combine directives as: processed + template + unprocessed
	var templateDirectives=collectDirectives(compileNode,[],newTemplateAttrs);var unprocessedDirectives=directives.splice(i+1,directives.length-(i+1));if(newIsolateScopeDirective||newScopeDirective){// The original directive caused the current element to be replaced but this element
	// also needs to have a new scope, so we need to tell the template directives
	// that they would need to get their scope from further up, if they require transclusion
	markDirectiveScope(templateDirectives,newIsolateScopeDirective,newScopeDirective);}directives=directives.concat(templateDirectives).concat(unprocessedDirectives);mergeTemplateAttributes(templateAttrs,newTemplateAttrs);ii=directives.length;}else{$compileNode.html(directiveValue);}}if(directive.templateUrl){hasTemplate=true;assertNoDuplicate('template',templateDirective,directive,$compileNode);templateDirective=directive;if(directive.replace){replaceDirective=directive;}// eslint-disable-next-line no-func-assign
	nodeLinkFn=compileTemplateUrl(directives.splice(i,directives.length-i),$compileNode,templateAttrs,jqCollection,hasTranscludeDirective&&childTranscludeFn,preLinkFns,postLinkFns,{controllerDirectives:controllerDirectives,newScopeDirective:newScopeDirective!==directive&&newScopeDirective,newIsolateScopeDirective:newIsolateScopeDirective,templateDirective:templateDirective,nonTlbTranscludeDirective:nonTlbTranscludeDirective});ii=directives.length;}else if(directive.compile){try{linkFn=directive.compile($compileNode,templateAttrs,childTranscludeFn);var context=directive.$$originalDirective||directive;if(isFunction(linkFn)){addLinkFns(null,bind(context,linkFn),attrStart,attrEnd);}else if(linkFn){addLinkFns(bind(context,linkFn.pre),bind(context,linkFn.post),attrStart,attrEnd);}}catch(e){$exceptionHandler(e,startingTag($compileNode));}}if(directive.terminal){nodeLinkFn.terminal=true;terminalPriority=Math.max(terminalPriority,directive.priority);}}nodeLinkFn.scope=newScopeDirective&&newScopeDirective.scope===true;nodeLinkFn.transcludeOnThisElement=hasTranscludeDirective;nodeLinkFn.templateOnThisElement=hasTemplate;nodeLinkFn.transclude=childTranscludeFn;previousCompileContext.hasElementTranscludeDirective=hasElementTranscludeDirective;// might be normal or delayed nodeLinkFn depending on if templateUrl is present
	return nodeLinkFn;////////////////////
	function addLinkFns(pre,post,attrStart,attrEnd){if(pre){if(attrStart)pre=groupElementsLinkFnWrapper(pre,attrStart,attrEnd);pre.require=directive.require;pre.directiveName=directiveName;if(newIsolateScopeDirective===directive||directive.$$isolateScope){pre=cloneAndAnnotateFn(pre,{isolateScope:true});}preLinkFns.push(pre);}if(post){if(attrStart)post=groupElementsLinkFnWrapper(post,attrStart,attrEnd);post.require=directive.require;post.directiveName=directiveName;if(newIsolateScopeDirective===directive||directive.$$isolateScope){post=cloneAndAnnotateFn(post,{isolateScope:true});}postLinkFns.push(post);}}function nodeLinkFn(childLinkFn,scope,linkNode,$rootElement,boundTranscludeFn){var i,ii,linkFn,isolateScope,controllerScope,elementControllers,transcludeFn,$element,attrs,scopeBindingInfo;if(compileNode===linkNode){attrs=templateAttrs;$element=templateAttrs.$$element;}else{$element=jqLite(linkNode);attrs=new Attributes($element,templateAttrs);}controllerScope=scope;if(newIsolateScopeDirective){isolateScope=scope.$new(true);}else if(newScopeDirective){controllerScope=scope.$parent;}if(boundTranscludeFn){// track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
	// is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
	transcludeFn=controllersBoundTransclude;transcludeFn.$$boundTransclude=boundTranscludeFn;// expose the slots on the `$transclude` function
	transcludeFn.isSlotFilled=function(slotName){return!!boundTranscludeFn.$$slots[slotName];};}if(controllerDirectives){elementControllers=setupControllers($element,attrs,transcludeFn,controllerDirectives,isolateScope,scope,newIsolateScopeDirective);}if(newIsolateScopeDirective){// Initialize isolate scope bindings for new isolate scope directive.
	compile.$$addScopeInfo($element,isolateScope,true,!(templateDirective&&(templateDirective===newIsolateScopeDirective||templateDirective===newIsolateScopeDirective.$$originalDirective)));compile.$$addScopeClass($element,true);isolateScope.$$isolateBindings=newIsolateScopeDirective.$$isolateBindings;scopeBindingInfo=initializeDirectiveBindings(scope,attrs,isolateScope,isolateScope.$$isolateBindings,newIsolateScopeDirective);if(scopeBindingInfo.removeWatches){isolateScope.$on('$destroy',scopeBindingInfo.removeWatches);}}// Initialize bindToController bindings
	for(var name in elementControllers){var controllerDirective=controllerDirectives[name];var controller=elementControllers[name];var bindings=controllerDirective.$$bindings.bindToController;if(preAssignBindingsEnabled){if(bindings){controller.bindingInfo=initializeDirectiveBindings(controllerScope,attrs,controller.instance,bindings,controllerDirective);}else{controller.bindingInfo={};}var controllerResult=controller();if(controllerResult!==controller.instance){// If the controller constructor has a return value, overwrite the instance
	// from setupControllers
	controller.instance=controllerResult;$element.data('$'+controllerDirective.name+'Controller',controllerResult);if(controller.bindingInfo.removeWatches){controller.bindingInfo.removeWatches();}controller.bindingInfo=initializeDirectiveBindings(controllerScope,attrs,controller.instance,bindings,controllerDirective);}}else{controller.instance=controller();$element.data('$'+controllerDirective.name+'Controller',controller.instance);controller.bindingInfo=initializeDirectiveBindings(controllerScope,attrs,controller.instance,bindings,controllerDirective);}}// Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
	forEach(controllerDirectives,function(controllerDirective,name){var require=controllerDirective.require;if(controllerDirective.bindToController&&!isArray(require)&&isObject(require)){extend(elementControllers[name].instance,getControllers(name,require,$element,elementControllers));}});// Handle the init and destroy lifecycle hooks on all controllers that have them
	forEach(elementControllers,function(controller){var controllerInstance=controller.instance;if(isFunction(controllerInstance.$onChanges)){try{controllerInstance.$onChanges(controller.bindingInfo.initialChanges);}catch(e){$exceptionHandler(e);}}if(isFunction(controllerInstance.$onInit)){try{controllerInstance.$onInit();}catch(e){$exceptionHandler(e);}}if(isFunction(controllerInstance.$doCheck)){controllerScope.$watch(function(){controllerInstance.$doCheck();});controllerInstance.$doCheck();}if(isFunction(controllerInstance.$onDestroy)){controllerScope.$on('$destroy',function callOnDestroyHook(){controllerInstance.$onDestroy();});}});// PRELINKING
	for(i=0,ii=preLinkFns.length;i<ii;i++){linkFn=preLinkFns[i];invokeLinkFn(linkFn,linkFn.isolateScope?isolateScope:scope,$element,attrs,linkFn.require&&getControllers(linkFn.directiveName,linkFn.require,$element,elementControllers),transcludeFn);}// RECURSION
	// We only pass the isolate scope, if the isolate directive has a template,
	// otherwise the child elements do not belong to the isolate directive.
	var scopeToChild=scope;if(newIsolateScopeDirective&&(newIsolateScopeDirective.template||newIsolateScopeDirective.templateUrl===null)){scopeToChild=isolateScope;}if(childLinkFn){childLinkFn(scopeToChild,linkNode.childNodes,undefined,boundTranscludeFn);}// POSTLINKING
	for(i=postLinkFns.length-1;i>=0;i--){linkFn=postLinkFns[i];invokeLinkFn(linkFn,linkFn.isolateScope?isolateScope:scope,$element,attrs,linkFn.require&&getControllers(linkFn.directiveName,linkFn.require,$element,elementControllers),transcludeFn);}// Trigger $postLink lifecycle hooks
	forEach(elementControllers,function(controller){var controllerInstance=controller.instance;if(isFunction(controllerInstance.$postLink)){controllerInstance.$postLink();}});// This is the function that is injected as `$transclude`.
	// Note: all arguments are optional!
	function controllersBoundTransclude(scope,cloneAttachFn,futureParentElement,slotName){var transcludeControllers;// No scope passed in:
	if(!isScope(scope)){slotName=futureParentElement;futureParentElement=cloneAttachFn;cloneAttachFn=scope;scope=undefined;}if(hasElementTranscludeDirective){transcludeControllers=elementControllers;}if(!futureParentElement){futureParentElement=hasElementTranscludeDirective?$element.parent():$element;}if(slotName){// slotTranscludeFn can be one of three things:
	//  * a transclude function - a filled slot
	//  * `null` - an optional slot that was not filled
	//  * `undefined` - a slot that was not declared (i.e. invalid)
	var slotTranscludeFn=boundTranscludeFn.$$slots[slotName];if(slotTranscludeFn){return slotTranscludeFn(scope,cloneAttachFn,transcludeControllers,futureParentElement,scopeToChild);}else if(isUndefined(slotTranscludeFn)){throw $compileMinErr('noslot','No parent directive that requires a transclusion with slot name "{0}". '+'Element: {1}',slotName,startingTag($element));}}else{return boundTranscludeFn(scope,cloneAttachFn,transcludeControllers,futureParentElement,scopeToChild);}}}}function getControllers(directiveName,require,$element,elementControllers){var value;if(isString(require)){var match=require.match(REQUIRE_PREFIX_REGEXP);var name=require.substring(match[0].length);var inheritType=match[1]||match[3];var optional=match[2]==='?';//If only parents then start at the parent element
	if(inheritType==='^^'){$element=$element.parent();//Otherwise attempt getting the controller from elementControllers in case
	//the element is transcluded (and has no data) and to avoid .data if possible
	}else{value=elementControllers&&elementControllers[name];value=value&&value.instance;}if(!value){var dataName='$'+name+'Controller';value=inheritType?$element.inheritedData(dataName):$element.data(dataName);}if(!value&&!optional){throw $compileMinErr('ctreq','Controller \'{0}\', required by directive \'{1}\', can\'t be found!',name,directiveName);}}else if(isArray(require)){value=[];for(var i=0,ii=require.length;i<ii;i++){value[i]=getControllers(directiveName,require[i],$element,elementControllers);}}else if(isObject(require)){value={};forEach(require,function(controller,property){value[property]=getControllers(directiveName,controller,$element,elementControllers);});}return value||null;}function setupControllers($element,attrs,transcludeFn,controllerDirectives,isolateScope,scope,newIsolateScopeDirective){var elementControllers=createMap();for(var controllerKey in controllerDirectives){var directive=controllerDirectives[controllerKey];var locals={$scope:directive===newIsolateScopeDirective||directive.$$isolateScope?isolateScope:scope,$element:$element,$attrs:attrs,$transclude:transcludeFn};var controller=directive.controller;if(controller==='@'){controller=attrs[directive.name];}var controllerInstance=$controller(controller,locals,true,directive.controllerAs);// For directives with element transclusion the element is a comment.
	// In this case .data will not attach any data.
	// Instead, we save the controllers for the element in a local hash and attach to .data
	// later, once we have the actual element.
	elementControllers[directive.name]=controllerInstance;$element.data('$'+directive.name+'Controller',controllerInstance.instance);}return elementControllers;}// Depending upon the context in which a directive finds itself it might need to have a new isolated
	// or child scope created. For instance:
	// * if the directive has been pulled into a template because another directive with a higher priority
	// asked for element transclusion
	// * if the directive itself asks for transclusion but it is at the root of a template and the original
	// element was replaced. See https://github.com/angular/angular.js/issues/12936
	function markDirectiveScope(directives,isolateScope,newScope){for(var j=0,jj=directives.length;j<jj;j++){directives[j]=inherit(directives[j],{$$isolateScope:isolateScope,$$newScope:newScope});}}/**
	     * looks up the directive and decorates it with exception handling and proper parameters. We
	     * call this the boundDirective.
	     *
	     * @param {string} name name of the directive to look up.
	     * @param {string} location The directive must be found in specific format.
	     *   String containing any of theses characters:
	     *
	     *   * `E`: element name
	     *   * `A': attribute
	     *   * `C`: class
	     *   * `M`: comment
	     * @returns {boolean} true if directive was added.
	     */function addDirective(tDirectives,name,location,maxPriority,ignoreDirective,startAttrName,endAttrName){if(name===ignoreDirective)return null;var match=null;if(hasDirectives.hasOwnProperty(name)){for(var directive,directives=$injector.get(name+Suffix),i=0,ii=directives.length;i<ii;i++){directive=directives[i];if((isUndefined(maxPriority)||maxPriority>directive.priority)&&directive.restrict.indexOf(location)!==-1){if(startAttrName){directive=inherit(directive,{$$start:startAttrName,$$end:endAttrName});}if(!directive.$$bindings){var bindings=directive.$$bindings=parseDirectiveBindings(directive,directive.name);if(isObject(bindings.isolateScope)){directive.$$isolateBindings=bindings.isolateScope;}}tDirectives.push(directive);match=directive;}}}return match;}/**
	     * looks up the directive and returns true if it is a multi-element directive,
	     * and therefore requires DOM nodes between -start and -end markers to be grouped
	     * together.
	     *
	     * @param {string} name name of the directive to look up.
	     * @returns true if directive was registered as multi-element.
	     */function directiveIsMultiElement(name){if(hasDirectives.hasOwnProperty(name)){for(var directive,directives=$injector.get(name+Suffix),i=0,ii=directives.length;i<ii;i++){directive=directives[i];if(directive.multiElement){return true;}}}return false;}/**
	     * When the element is replaced with HTML template then the new attributes
	     * on the template need to be merged with the existing attributes in the DOM.
	     * The desired effect is to have both of the attributes present.
	     *
	     * @param {object} dst destination attributes (original DOM)
	     * @param {object} src source attributes (from the directive template)
	     */function mergeTemplateAttributes(dst,src){var srcAttr=src.$attr,dstAttr=dst.$attr;// reapply the old attributes to the new element
	forEach(dst,function(value,key){if(key.charAt(0)!=='$'){if(src[key]&&src[key]!==value){if(value.length){value+=(key==='style'?';':' ')+src[key];}else{value=src[key];}}dst.$set(key,value,true,srcAttr[key]);}});// copy the new attributes on the old attrs object
	forEach(src,function(value,key){// Check if we already set this attribute in the loop above.
	// `dst` will never contain hasOwnProperty as DOM parser won't let it.
	// You will get an "InvalidCharacterError: DOM Exception 5" error if you
	// have an attribute like "has-own-property" or "data-has-own-property", etc.
	if(!dst.hasOwnProperty(key)&&key.charAt(0)!=='$'){dst[key]=value;if(key!=='class'&&key!=='style'){dstAttr[key]=srcAttr[key];}}});}function compileTemplateUrl(directives,$compileNode,tAttrs,$rootElement,childTranscludeFn,preLinkFns,postLinkFns,previousCompileContext){var linkQueue=[],afterTemplateNodeLinkFn,afterTemplateChildLinkFn,beforeTemplateCompileNode=$compileNode[0],origAsyncDirective=directives.shift(),derivedSyncDirective=inherit(origAsyncDirective,{templateUrl:null,transclude:null,replace:null,$$originalDirective:origAsyncDirective}),templateUrl=isFunction(origAsyncDirective.templateUrl)?origAsyncDirective.templateUrl($compileNode,tAttrs):origAsyncDirective.templateUrl,templateNamespace=origAsyncDirective.templateNamespace;$compileNode.empty();$templateRequest(templateUrl).then(function(content){var compileNode,tempTemplateAttrs,$template,childBoundTranscludeFn;content=denormalizeTemplate(content);if(origAsyncDirective.replace){if(jqLiteIsTextNode(content)){$template=[];}else{$template=removeComments(wrapTemplate(templateNamespace,trim(content)));}compileNode=$template[0];if($template.length!==1||compileNode.nodeType!==NODE_TYPE_ELEMENT){throw $compileMinErr('tplrt','Template for directive \'{0}\' must have exactly one root element. {1}',origAsyncDirective.name,templateUrl);}tempTemplateAttrs={$attr:{}};replaceWith($rootElement,$compileNode,compileNode);var templateDirectives=collectDirectives(compileNode,[],tempTemplateAttrs);if(isObject(origAsyncDirective.scope)){// the original directive that caused the template to be loaded async required
	// an isolate scope
	markDirectiveScope(templateDirectives,true);}directives=templateDirectives.concat(directives);mergeTemplateAttributes(tAttrs,tempTemplateAttrs);}else{compileNode=beforeTemplateCompileNode;$compileNode.html(content);}directives.unshift(derivedSyncDirective);afterTemplateNodeLinkFn=applyDirectivesToNode(directives,compileNode,tAttrs,childTranscludeFn,$compileNode,origAsyncDirective,preLinkFns,postLinkFns,previousCompileContext);forEach($rootElement,function(node,i){if(node===compileNode){$rootElement[i]=$compileNode[0];}});afterTemplateChildLinkFn=compileNodes($compileNode[0].childNodes,childTranscludeFn);while(linkQueue.length){var scope=linkQueue.shift(),beforeTemplateLinkNode=linkQueue.shift(),linkRootElement=linkQueue.shift(),boundTranscludeFn=linkQueue.shift(),linkNode=$compileNode[0];if(scope.$$destroyed)continue;if(beforeTemplateLinkNode!==beforeTemplateCompileNode){var oldClasses=beforeTemplateLinkNode.className;if(!(previousCompileContext.hasElementTranscludeDirective&&origAsyncDirective.replace)){// it was cloned therefore we have to clone as well.
	linkNode=jqLiteClone(compileNode);}replaceWith(linkRootElement,jqLite(beforeTemplateLinkNode),linkNode);// Copy in CSS classes from original node
	safeAddClass(jqLite(linkNode),oldClasses);}if(afterTemplateNodeLinkFn.transcludeOnThisElement){childBoundTranscludeFn=createBoundTranscludeFn(scope,afterTemplateNodeLinkFn.transclude,boundTranscludeFn);}else{childBoundTranscludeFn=boundTranscludeFn;}afterTemplateNodeLinkFn(afterTemplateChildLinkFn,scope,linkNode,$rootElement,childBoundTranscludeFn);}linkQueue=null;}).catch(function(error){if(error instanceof Error){$exceptionHandler(error);}}).catch(noop);return function delayedNodeLinkFn(ignoreChildLinkFn,scope,node,rootElement,boundTranscludeFn){var childBoundTranscludeFn=boundTranscludeFn;if(scope.$$destroyed)return;if(linkQueue){linkQueue.push(scope,node,rootElement,childBoundTranscludeFn);}else{if(afterTemplateNodeLinkFn.transcludeOnThisElement){childBoundTranscludeFn=createBoundTranscludeFn(scope,afterTemplateNodeLinkFn.transclude,boundTranscludeFn);}afterTemplateNodeLinkFn(afterTemplateChildLinkFn,scope,node,rootElement,childBoundTranscludeFn);}};}/**
	     * Sorting function for bound directives.
	     */function byPriority(a,b){var diff=b.priority-a.priority;if(diff!==0)return diff;if(a.name!==b.name)return a.name<b.name?-1:1;return a.index-b.index;}function assertNoDuplicate(what,previousDirective,directive,element){function wrapModuleNameIfDefined(moduleName){return moduleName?' (module: '+moduleName+')':'';}if(previousDirective){throw $compileMinErr('multidir','Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',previousDirective.name,wrapModuleNameIfDefined(previousDirective.$$moduleName),directive.name,wrapModuleNameIfDefined(directive.$$moduleName),what,startingTag(element));}}function addTextInterpolateDirective(directives,text){var interpolateFn=$interpolate(text,true);if(interpolateFn){directives.push({priority:0,compile:function textInterpolateCompileFn(templateNode){var templateNodeParent=templateNode.parent(),hasCompileParent=!!templateNodeParent.length;// When transcluding a template that has bindings in the root
	// we don't have a parent and thus need to add the class during linking fn.
	if(hasCompileParent)compile.$$addBindingClass(templateNodeParent);return function textInterpolateLinkFn(scope,node){var parent=node.parent();if(!hasCompileParent)compile.$$addBindingClass(parent);compile.$$addBindingInfo(parent,interpolateFn.expressions);scope.$watch(interpolateFn,function interpolateFnWatchAction(value){node[0].nodeValue=value;});};}});}}function wrapTemplate(type,template){type=lowercase(type||'html');switch(type){case'svg':case'math':var wrapper=window.document.createElement('div');wrapper.innerHTML='<'+type+'>'+template+'</'+type+'>';return wrapper.childNodes[0].childNodes;default:return template;}}function getTrustedContext(node,attrNormalizedName){if(attrNormalizedName==='srcdoc'){return $sce.HTML;}var tag=nodeName_(node);// All tags with src attributes require a RESOURCE_URL value, except for
	// img and various html5 media tags.
	if(attrNormalizedName==='src'||attrNormalizedName==='ngSrc'){if(['img','video','audio','source','track'].indexOf(tag)===-1){return $sce.RESOURCE_URL;}// maction[xlink:href] can source SVG.  It's not limited to <maction>.
	}else if(attrNormalizedName==='xlinkHref'||tag==='form'&&attrNormalizedName==='action'||// links can be stylesheets or imports, which can run script in the current origin
	tag==='link'&&attrNormalizedName==='href'){return $sce.RESOURCE_URL;}}function addAttrInterpolateDirective(node,directives,value,name,isNgAttr){var trustedContext=getTrustedContext(node,name);var mustHaveExpression=!isNgAttr;var allOrNothing=ALL_OR_NOTHING_ATTRS[name]||isNgAttr;var interpolateFn=$interpolate(value,mustHaveExpression,trustedContext,allOrNothing);// no interpolation found -> ignore
	if(!interpolateFn)return;if(name==='multiple'&&nodeName_(node)==='select'){throw $compileMinErr('selmulti','Binding to the \'multiple\' attribute is not supported. Element: {0}',startingTag(node));}if(EVENT_HANDLER_ATTR_REGEXP.test(name)){throw $compileMinErr('nodomevents','Interpolations for HTML DOM event attributes are disallowed.  Please use the '+'ng- versions (such as ng-click instead of onclick) instead.');}directives.push({priority:100,compile:function compile(){return{pre:function attrInterpolatePreLinkFn(scope,element,attr){var $$observers=attr.$$observers||(attr.$$observers=createMap());// If the attribute has changed since last $interpolate()ed
	var newValue=attr[name];if(newValue!==value){// we need to interpolate again since the attribute value has been updated
	// (e.g. by another directive's compile function)
	// ensure unset/empty values make interpolateFn falsy
	interpolateFn=newValue&&$interpolate(newValue,true,trustedContext,allOrNothing);value=newValue;}// if attribute was updated so that there is no interpolation going on we don't want to
	// register any observers
	if(!interpolateFn)return;// initialize attr object so that it's ready in case we need the value for isolate
	// scope initialization, otherwise the value would not be available from isolate
	// directive's linking fn during linking phase
	attr[name]=interpolateFn(scope);($$observers[name]||($$observers[name]=[])).$$inter=true;(attr.$$observers&&attr.$$observers[name].$$scope||scope).$watch(interpolateFn,function interpolateFnWatchAction(newValue,oldValue){//special case for class attribute addition + removal
	//so that class changes can tap into the animation
	//hooks provided by the $animate service. Be sure to
	//skip animations when the first digest occurs (when
	//both the new and the old values are the same) since
	//the CSS classes are the non-interpolated values
	if(name==='class'&&newValue!==oldValue){attr.$updateClass(newValue,oldValue);}else{attr.$set(name,newValue);}});}};}});}/**
	     * This is a special jqLite.replaceWith, which can replace items which
	     * have no parents, provided that the containing jqLite collection is provided.
	     *
	     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
	     *                               in the root of the tree.
	     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
	     *                                  the shell, but replace its DOM node reference.
	     * @param {Node} newNode The new DOM node.
	     */function replaceWith($rootElement,elementsToRemove,newNode){var firstElementToRemove=elementsToRemove[0],removeCount=elementsToRemove.length,parent=firstElementToRemove.parentNode,i,ii;if($rootElement){for(i=0,ii=$rootElement.length;i<ii;i++){if($rootElement[i]===firstElementToRemove){$rootElement[i++]=newNode;for(var j=i,j2=j+removeCount-1,jj=$rootElement.length;j<jj;j++,j2++){if(j2<jj){$rootElement[j]=$rootElement[j2];}else{delete $rootElement[j];}}$rootElement.length-=removeCount-1;// If the replaced element is also the jQuery .context then replace it
	// .context is a deprecated jQuery api, so we should set it only when jQuery set it
	// http://api.jquery.com/context/
	if($rootElement.context===firstElementToRemove){$rootElement.context=newNode;}break;}}}if(parent){parent.replaceChild(newNode,firstElementToRemove);}// Append all the `elementsToRemove` to a fragment. This will...
	// - remove them from the DOM
	// - allow them to still be traversed with .nextSibling
	// - allow a single fragment.qSA to fetch all elements being removed
	var fragment=window.document.createDocumentFragment();for(i=0;i<removeCount;i++){fragment.appendChild(elementsToRemove[i]);}if(jqLite.hasData(firstElementToRemove)){// Copy over user data (that includes Angular's $scope etc.). Don't copy private
	// data here because there's no public interface in jQuery to do that and copying over
	// event listeners (which is the main use of private data) wouldn't work anyway.
	jqLite.data(newNode,jqLite.data(firstElementToRemove));// Remove $destroy event listeners from `firstElementToRemove`
	jqLite(firstElementToRemove).off('$destroy');}// Cleanup any data/listeners on the elements and children.
	// This includes invoking the $destroy event on any elements with listeners.
	jqLite.cleanData(fragment.querySelectorAll('*'));// Update the jqLite collection to only contain the `newNode`
	for(i=1;i<removeCount;i++){delete elementsToRemove[i];}elementsToRemove[0]=newNode;elementsToRemove.length=1;}function cloneAndAnnotateFn(fn,annotation){return extend(function(){return fn.apply(null,arguments);},fn,annotation);}function invokeLinkFn(linkFn,scope,$element,attrs,controllers,transcludeFn){try{linkFn(scope,$element,attrs,controllers,transcludeFn);}catch(e){$exceptionHandler(e,startingTag($element));}}// Set up $watches for isolate scope and controller bindings.
	function initializeDirectiveBindings(scope,attrs,destination,bindings,directive){var removeWatchCollection=[];var initialChanges={};var changes;forEach(bindings,function initializeBinding(definition,scopeName){var attrName=definition.attrName,optional=definition.optional,mode=definition.mode,// @, =, <, or &
	lastValue,parentGet,parentSet,compare,removeWatch;switch(mode){case'@':if(!optional&&!hasOwnProperty.call(attrs,attrName)){destination[scopeName]=attrs[attrName]=undefined;}removeWatch=attrs.$observe(attrName,function(value){if(isString(value)||isBoolean(value)){var oldValue=destination[scopeName];recordChanges(scopeName,value,oldValue);destination[scopeName]=value;}});attrs.$$observers[attrName].$$scope=scope;lastValue=attrs[attrName];if(isString(lastValue)){// If the attribute has been provided then we trigger an interpolation to ensure
	// the value is there for use in the link fn
	destination[scopeName]=$interpolate(lastValue)(scope);}else if(isBoolean(lastValue)){// If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
	// the value to boolean rather than a string, so we special case this situation
	destination[scopeName]=lastValue;}initialChanges[scopeName]=new SimpleChange(_UNINITIALIZED_VALUE,destination[scopeName]);removeWatchCollection.push(removeWatch);break;case'=':if(!hasOwnProperty.call(attrs,attrName)){if(optional)break;attrs[attrName]=undefined;}if(optional&&!attrs[attrName])break;parentGet=$parse(attrs[attrName]);if(parentGet.literal){compare=equals;}else{// eslint-disable-next-line no-self-compare
	compare=function simpleCompare(a,b){return a===b||a!==a&&b!==b;};}parentSet=parentGet.assign||function(){// reset the change, or we will throw this exception on every $digest
	lastValue=destination[scopeName]=parentGet(scope);throw $compileMinErr('nonassign','Expression \'{0}\' in attribute \'{1}\' used with directive \'{2}\' is non-assignable!',attrs[attrName],attrName,directive.name);};lastValue=destination[scopeName]=parentGet(scope);var parentValueWatch=function parentValueWatch(parentValue){if(!compare(parentValue,destination[scopeName])){// we are out of sync and need to copy
	if(!compare(parentValue,lastValue)){// parent changed and it has precedence
	destination[scopeName]=parentValue;}else{// if the parent can be assigned then do so
	parentSet(scope,parentValue=destination[scopeName]);}}lastValue=parentValue;return lastValue;};parentValueWatch.$stateful=true;if(definition.collection){removeWatch=scope.$watchCollection(attrs[attrName],parentValueWatch);}else{removeWatch=scope.$watch($parse(attrs[attrName],parentValueWatch),null,parentGet.literal);}removeWatchCollection.push(removeWatch);break;case'<':if(!hasOwnProperty.call(attrs,attrName)){if(optional)break;attrs[attrName]=undefined;}if(optional&&!attrs[attrName])break;parentGet=$parse(attrs[attrName]);var deepWatch=parentGet.literal;var initialValue=destination[scopeName]=parentGet(scope);initialChanges[scopeName]=new SimpleChange(_UNINITIALIZED_VALUE,destination[scopeName]);removeWatch=scope.$watch(parentGet,function parentValueWatchAction(newValue,oldValue){if(oldValue===newValue){if(oldValue===initialValue||deepWatch&&equals(oldValue,initialValue)){return;}oldValue=initialValue;}recordChanges(scopeName,newValue,oldValue);destination[scopeName]=newValue;},deepWatch);removeWatchCollection.push(removeWatch);break;case'&':// Don't assign Object.prototype method to scope
	parentGet=attrs.hasOwnProperty(attrName)?$parse(attrs[attrName]):noop;// Don't assign noop to destination if expression is not valid
	if(parentGet===noop&&optional)break;destination[scopeName]=function(locals){return parentGet(scope,locals);};break;}});function recordChanges(key,currentValue,previousValue){if(isFunction(destination.$onChanges)&&currentValue!==previousValue&&(// eslint-disable-next-line no-self-compare
	currentValue===currentValue||previousValue===previousValue)){// If we have not already scheduled the top level onChangesQueue handler then do so now
	if(!onChangesQueue){scope.$$postDigest(flushOnChangesQueue);onChangesQueue=[];}// If we have not already queued a trigger of onChanges for this controller then do so now
	if(!changes){changes={};onChangesQueue.push(triggerOnChangesHook);}// If the has been a change on this property already then we need to reuse the previous value
	if(changes[key]){previousValue=changes[key].previousValue;}// Store this change
	changes[key]=new SimpleChange(previousValue,currentValue);}}function triggerOnChangesHook(){destination.$onChanges(changes);// Now clear the changes so that we schedule onChanges when more changes arrive
	changes=undefined;}return{initialChanges:initialChanges,removeWatches:removeWatchCollection.length&&function removeWatches(){for(var i=0,ii=removeWatchCollection.length;i<ii;++i){removeWatchCollection[i]();}}};}}];}function SimpleChange(previous,current){this.previousValue=previous;this.currentValue=current;}SimpleChange.prototype.isFirstChange=function(){return this.previousValue===_UNINITIALIZED_VALUE;};var PREFIX_REGEXP=/^((?:x|data)[:\-_])/i;var SPECIAL_CHARS_REGEXP=/[:\-_]+(.)/g;/**
	 * Converts all accepted directives format into proper directive name.
	 * @param name Name to normalize
	 */function directiveNormalize(name){return name.replace(PREFIX_REGEXP,'').replace(SPECIAL_CHARS_REGEXP,fnCamelCaseReplace);}/**
	 * @ngdoc type
	 * @name $compile.directive.Attributes
	 *
	 * @description
	 * A shared object between directive compile / linking functions which contains normalized DOM
	 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
	 * needed since all of these are treated as equivalent in Angular:
	 *
	 * ```
	 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
	 * ```
	 *//**
	 * @ngdoc property
	 * @name $compile.directive.Attributes#$attr
	 *
	 * @description
	 * A map of DOM element attribute names to the normalized name. This is
	 * needed to do reverse lookup from normalized name back to actual name.
	 *//**
	 * @ngdoc method
	 * @name $compile.directive.Attributes#$set
	 * @kind function
	 *
	 * @description
	 * Set DOM element attribute value.
	 *
	 *
	 * @param {string} name Normalized element attribute name of the property to modify. The name is
	 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
	 *          property to the original name.
	 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
	 *//**
	 * Closure compiler type information
	 */function nodesetLinkingFn(/* angular.Scope */scope,/* NodeList */nodeList,/* Element */rootElement,/* function(Function) */boundTranscludeFn){}function directiveLinkingFn(/* nodesetLinkingFn */nodesetLinkingFn,/* angular.Scope */scope,/* Node */node,/* Element */rootElement,/* function(Function) */boundTranscludeFn){}function tokenDifference(str1,str2){var values='',tokens1=str1.split(/\s+/),tokens2=str2.split(/\s+/);outer:for(var i=0;i<tokens1.length;i++){var token=tokens1[i];for(var j=0;j<tokens2.length;j++){if(token===tokens2[j])continue outer;}values+=(values.length>0?' ':'')+token;}return values;}function removeComments(jqNodes){jqNodes=jqLite(jqNodes);var i=jqNodes.length;if(i<=1){return jqNodes;}while(i--){var node=jqNodes[i];if(node.nodeType===NODE_TYPE_COMMENT||node.nodeType===NODE_TYPE_TEXT&&node.nodeValue.trim()===''){splice.call(jqNodes,i,1);}}return jqNodes;}var $controllerMinErr=minErr('$controller');var CNTRL_REG=/^(\S+)(\s+as\s+([\w$]+))?$/;function identifierForController(controller,ident){if(ident&&isString(ident))return ident;if(isString(controller)){var match=CNTRL_REG.exec(controller);if(match)return match[3];}}/**
	 * @ngdoc provider
	 * @name $controllerProvider
	 * @this
	 *
	 * @description
	 * The {@link ng.$controller $controller service} is used by Angular to create new
	 * controllers.
	 *
	 * This provider allows controller registration via the
	 * {@link ng.$controllerProvider#register register} method.
	 */function $ControllerProvider(){var controllers={},globals=false;/**
	   * @ngdoc method
	   * @name $controllerProvider#has
	   * @param {string} name Controller name to check.
	   */this.has=function(name){return controllers.hasOwnProperty(name);};/**
	   * @ngdoc method
	   * @name $controllerProvider#register
	   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
	   *    the names and the values are the constructors.
	   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
	   *    annotations in the array notation).
	   */this.register=function(name,constructor){assertNotHasOwnProperty(name,'controller');if(isObject(name)){extend(controllers,name);}else{controllers[name]=constructor;}};/**
	   * @ngdoc method
	   * @name $controllerProvider#allowGlobals
	   * @description If called, allows `$controller` to find controller constructors on `window`
	   *
	   * @deprecated
	   * sinceVersion="v1.3.0"
	   * removeVersion="v1.7.0"
	   * This method of finding controllers has been deprecated.
	   */this.allowGlobals=function(){globals=true;};this.$get=['$injector','$window',function($injector,$window){/**
	     * @ngdoc service
	     * @name $controller
	     * @requires $injector
	     *
	     * @param {Function|string} constructor If called with a function then it's considered to be the
	     *    controller constructor function. Otherwise it's considered to be a string which is used
	     *    to retrieve the controller constructor using the following steps:
	     *
	     *    * check if a controller with given name is registered via `$controllerProvider`
	     *    * check if evaluating the string on the current scope returns a constructor
	     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
	     *      `window` object (deprecated, not recommended)
	     *
	     *    The string can use the `controller as property` syntax, where the controller instance is published
	     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
	     *    to work correctly.
	     *
	     * @param {Object} locals Injection locals for Controller.
	     * @return {Object} Instance of given controller.
	     *
	     * @description
	     * `$controller` service is responsible for instantiating controllers.
	     *
	     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
	     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
	     */return function $controller(expression,locals,later,ident){// PRIVATE API:
	//   param `later` --- indicates that the controller's constructor is invoked at a later time.
	//                     If true, $controller will allocate the object with the correct
	//                     prototype chain, but will not invoke the controller until a returned
	//                     callback is invoked.
	//   param `ident` --- An optional label which overrides the label parsed from the controller
	//                     expression, if any.
	var instance,match,constructor,identifier;later=later===true;if(ident&&isString(ident)){identifier=ident;}if(isString(expression)){match=expression.match(CNTRL_REG);if(!match){throw $controllerMinErr('ctrlfmt','Badly formed controller string \'{0}\'. '+'Must match `__name__ as __id__` or `__name__`.',expression);}constructor=match[1];identifier=identifier||match[3];expression=controllers.hasOwnProperty(constructor)?controllers[constructor]:getter(locals.$scope,constructor,true)||(globals?getter($window,constructor,true):undefined);if(!expression){throw $controllerMinErr('ctrlreg','The controller with the name \'{0}\' is not registered.',constructor);}assertArgFn(expression,constructor,true);}if(later){// Instantiate controller later:
	// This machinery is used to create an instance of the object before calling the
	// controller's constructor itself.
	//
	// This allows properties to be added to the controller before the constructor is
	// invoked. Primarily, this is used for isolate scope bindings in $compile.
	//
	// This feature is not intended for use by applications, and is thus not documented
	// publicly.
	// Object creation: http://jsperf.com/create-constructor/2
	var controllerPrototype=(isArray(expression)?expression[expression.length-1]:expression).prototype;instance=Object.create(controllerPrototype||null);if(identifier){addIdentifier(locals,identifier,instance,constructor||expression.name);}return extend(function $controllerInit(){var result=$injector.invoke(expression,instance,locals,constructor);if(result!==instance&&(isObject(result)||isFunction(result))){instance=result;if(identifier){// If result changed, re-assign controllerAs value to scope.
	addIdentifier(locals,identifier,instance,constructor||expression.name);}}return instance;},{instance:instance,identifier:identifier});}instance=$injector.instantiate(expression,locals,constructor);if(identifier){addIdentifier(locals,identifier,instance,constructor||expression.name);}return instance;};function addIdentifier(locals,identifier,instance,name){if(!(locals&&isObject(locals.$scope))){throw minErr('$controller')('noscp','Cannot export controller \'{0}\' as \'{1}\'! No $scope object provided via `locals`.',name,identifier);}locals.$scope[identifier]=instance;}}];}/**
	 * @ngdoc service
	 * @name $document
	 * @requires $window
	 * @this
	 *
	 * @description
	 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
	 *
	 * @example
	   <example module="documentExample" name="document">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <p>$document title: <b ng-bind="title"></b></p>
	         <p>window.document title: <b ng-bind="windowTitle"></b></p>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('documentExample', [])
	         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
	     </file>
	   </example>
	 */function $DocumentProvider(){this.$get=['$window',function(window){return jqLite(window.document);}];}/**
	 * @private
	 * @this
	 * Listens for document visibility change and makes the current status accessible.
	 */function $$IsDocumentHiddenProvider(){this.$get=['$document','$rootScope',function($document,$rootScope){var doc=$document[0];var hidden=doc&&doc.hidden;$document.on('visibilitychange',changeListener);$rootScope.$on('$destroy',function(){$document.off('visibilitychange',changeListener);});function changeListener(){hidden=doc.hidden;}return function(){return hidden;};}];}/**
	 * @ngdoc service
	 * @name $exceptionHandler
	 * @requires ng.$log
	 * @this
	 *
	 * @description
	 * Any uncaught exception in angular expressions is delegated to this service.
	 * The default implementation simply delegates to `$log.error` which logs it into
	 * the browser console.
	 *
	 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
	 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
	 *
	 * ## Example:
	 *
	 * The example below will overwrite the default `$exceptionHandler` in order to (a) log uncaught
	 * errors to the backend for later inspection by the developers and (b) to use `$log.warn()` instead
	 * of `$log.error()`.
	 *
	 * ```js
	 *   angular.
	 *     module('exceptionOverwrite', []).
	 *     factory('$exceptionHandler', ['$log', 'logErrorsToBackend', function($log, logErrorsToBackend) {
	 *       return function myExceptionHandler(exception, cause) {
	 *         logErrorsToBackend(exception, cause);
	 *         $log.warn(exception, cause);
	 *       };
	 *     }]);
	 * ```
	 *
	 * <hr />
	 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
	 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
	 * (unless executed during a digest).
	 *
	 * If you wish, you can manually delegate exceptions, e.g.
	 * `try { ... } catch(e) { $exceptionHandler(e); }`
	 *
	 * @param {Error} exception Exception associated with the error.
	 * @param {string=} cause Optional information about the context in which
	 *       the error was thrown.
	 *
	 */function $ExceptionHandlerProvider(){this.$get=['$log',function($log){return function(exception,cause){$log.error.apply($log,arguments);};}];}var $$ForceReflowProvider=/** @this */function $$ForceReflowProvider(){this.$get=['$document',function($document){return function(domNode){//the line below will force the browser to perform a repaint so
	//that all the animated elements within the animation frame will
	//be properly updated and drawn on screen. This is required to
	//ensure that the preparation animation is properly flushed so that
	//the active state picks up from there. DO NOT REMOVE THIS LINE.
	//DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
	//WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
	//WILL TAKE YEARS AWAY FROM YOUR LIFE.
	if(domNode){if(!domNode.nodeType&&domNode instanceof jqLite){domNode=domNode[0];}}else{domNode=$document[0].body;}return domNode.offsetWidth+1;};}];};var APPLICATION_JSON='application/json';var CONTENT_TYPE_APPLICATION_JSON={'Content-Type':APPLICATION_JSON+';charset=utf-8'};var JSON_START=/^\[|^\{(?!\{)/;var JSON_ENDS={'[':/]$/,'{':/}$/};var JSON_PROTECTION_PREFIX=/^\)]\}',?\n/;var $httpMinErr=minErr('$http');function serializeValue(v){if(isObject(v)){return isDate(v)?v.toISOString():toJson(v);}return v;}/** @this */function $HttpParamSerializerProvider(){/**
	   * @ngdoc service
	   * @name $httpParamSerializer
	   * @description
	   *
	   * Default {@link $http `$http`} params serializer that converts objects to strings
	   * according to the following rules:
	   *
	   * * `{'foo': 'bar'}` results in `foo=bar`
	   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
	   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
	   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D` (stringified and encoded representation of an object)
	   *
	   * Note that serializer will sort the request parameters alphabetically.
	   * */this.$get=function(){return function ngParamSerializer(params){if(!params)return'';var parts=[];forEachSorted(params,function(value,key){if(value===null||isUndefined(value))return;if(isArray(value)){forEach(value,function(v){parts.push(encodeUriQuery(key)+'='+encodeUriQuery(serializeValue(v)));});}else{parts.push(encodeUriQuery(key)+'='+encodeUriQuery(serializeValue(value)));}});return parts.join('&');};};}/** @this */function $HttpParamSerializerJQLikeProvider(){/**
	   * @ngdoc service
	   * @name $httpParamSerializerJQLike
	   *
	   * @description
	   *
	   * Alternative {@link $http `$http`} params serializer that follows
	   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
	   * The serializer will also sort the params alphabetically.
	   *
	   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
	   *
	   * ```js
	   * $http({
	   *   url: myUrl,
	   *   method: 'GET',
	   *   params: myParams,
	   *   paramSerializer: '$httpParamSerializerJQLike'
	   * });
	   * ```
	   *
	   * It is also possible to set it as the default `paramSerializer` in the
	   * {@link $httpProvider#defaults `$httpProvider`}.
	   *
	   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
	   * form data for submission:
	   *
	   * ```js
	   * .controller(function($http, $httpParamSerializerJQLike) {
	   *   //...
	   *
	   *   $http({
	   *     url: myUrl,
	   *     method: 'POST',
	   *     data: $httpParamSerializerJQLike(myData),
	   *     headers: {
	   *       'Content-Type': 'application/x-www-form-urlencoded'
	   *     }
	   *   });
	   *
	   * });
	   * ```
	   *
	   * */this.$get=function(){return function jQueryLikeParamSerializer(params){if(!params)return'';var parts=[];serialize(params,'',true);return parts.join('&');function serialize(toSerialize,prefix,topLevel){if(toSerialize===null||isUndefined(toSerialize))return;if(isArray(toSerialize)){forEach(toSerialize,function(value,index){serialize(value,prefix+'['+(isObject(value)?index:'')+']');});}else if(isObject(toSerialize)&&!isDate(toSerialize)){forEachSorted(toSerialize,function(value,key){serialize(value,prefix+(topLevel?'':'[')+key+(topLevel?'':']'));});}else{parts.push(encodeUriQuery(prefix)+'='+encodeUriQuery(serializeValue(toSerialize)));}}};};}function defaultHttpResponseTransform(data,headers){if(isString(data)){// Strip json vulnerability protection prefix and trim whitespace
	var tempData=data.replace(JSON_PROTECTION_PREFIX,'').trim();if(tempData){var contentType=headers('Content-Type');if(contentType&&contentType.indexOf(APPLICATION_JSON)===0||isJsonLike(tempData)){data=fromJson(tempData);}}}return data;}function isJsonLike(str){var jsonStart=str.match(JSON_START);return jsonStart&&JSON_ENDS[jsonStart[0]].test(str);}/**
	 * Parse headers into key value object
	 *
	 * @param {string} headers Raw headers as a string
	 * @returns {Object} Parsed headers as key value object
	 */function parseHeaders(headers){var parsed=createMap(),i;function fillInParsed(key,val){if(key){parsed[key]=parsed[key]?parsed[key]+', '+val:val;}}if(isString(headers)){forEach(headers.split('\n'),function(line){i=line.indexOf(':');fillInParsed(lowercase(trim(line.substr(0,i))),trim(line.substr(i+1)));});}else if(isObject(headers)){forEach(headers,function(headerVal,headerKey){fillInParsed(lowercase(headerKey),trim(headerVal));});}return parsed;}/**
	 * Returns a function that provides access to parsed headers.
	 *
	 * Headers are lazy parsed when first requested.
	 * @see parseHeaders
	 *
	 * @param {(string|Object)} headers Headers to provide access to.
	 * @returns {function(string=)} Returns a getter function which if called with:
	 *
	 *   - if called with an argument returns a single header value or null
	 *   - if called with no arguments returns an object containing all headers.
	 */function headersGetter(headers){var headersObj;return function(name){if(!headersObj)headersObj=parseHeaders(headers);if(name){var value=headersObj[lowercase(name)];if(value===undefined){value=null;}return value;}return headersObj;};}/**
	 * Chain all given functions
	 *
	 * This function is used for both request and response transforming
	 *
	 * @param {*} data Data to transform.
	 * @param {function(string=)} headers HTTP headers getter fn.
	 * @param {number} status HTTP status code of the response.
	 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
	 * @returns {*} Transformed data.
	 */function transformData(data,headers,status,fns){if(isFunction(fns)){return fns(data,headers,status);}forEach(fns,function(fn){data=fn(data,headers,status);});return data;}function isSuccess(status){return 200<=status&&status<300;}/**
	 * @ngdoc provider
	 * @name $httpProvider
	 * @this
	 *
	 * @description
	 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
	 * */function $HttpProvider(){/**
	   * @ngdoc property
	   * @name $httpProvider#defaults
	   * @description
	   *
	   * Object containing default values for all {@link ng.$http $http} requests.
	   *
	   * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
	   * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
	   * by default. See {@link $http#caching $http Caching} for more information.
	   *
	   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
	   * Defaults value is `'XSRF-TOKEN'`.
	   *
	   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
	   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
	   *
	   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
	   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
	   * setting default headers.
	   *     - **`defaults.headers.common`**
	   *     - **`defaults.headers.post`**
	   *     - **`defaults.headers.put`**
	   *     - **`defaults.headers.patch`**
	   *
	   *
	   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
	   *  used to the prepare string representation of request parameters (specified as an object).
	   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
	   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
	   *
	   * - **`defaults.jsonpCallbackParam`** - `{string}` - the name of the query parameter that passes the name of the
	   * callback in a JSONP request. The value of this parameter will be replaced with the expression generated by the
	   * {@link $jsonpCallbacks} service. Defaults to `'callback'`.
	   *
	   **/var defaults=this.defaults={// transform incoming response data
	transformResponse:[defaultHttpResponseTransform],// transform outgoing request data
	transformRequest:[function(d){return isObject(d)&&!isFile(d)&&!isBlob(d)&&!isFormData(d)?toJson(d):d;}],// default headers
	headers:{common:{'Accept':'application/json, text/plain, */*'},post:shallowCopy(CONTENT_TYPE_APPLICATION_JSON),put:shallowCopy(CONTENT_TYPE_APPLICATION_JSON),patch:shallowCopy(CONTENT_TYPE_APPLICATION_JSON)},xsrfCookieName:'XSRF-TOKEN',xsrfHeaderName:'X-XSRF-TOKEN',paramSerializer:'$httpParamSerializer',jsonpCallbackParam:'callback'};var useApplyAsync=false;/**
	   * @ngdoc method
	   * @name $httpProvider#useApplyAsync
	   * @description
	   *
	   * Configure $http service to combine processing of multiple http responses received at around
	   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
	   * significant performance improvement for bigger applications that make many HTTP requests
	   * concurrently (common during application bootstrap).
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
	   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
	   *    to load and share the same digest cycle.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/this.useApplyAsync=function(value){if(isDefined(value)){useApplyAsync=!!value;return this;}return useApplyAsync;};/**
	   * @ngdoc property
	   * @name $httpProvider#interceptors
	   * @description
	   *
	   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
	   * pre-processing of request or postprocessing of responses.
	   *
	   * These service factories are ordered by request, i.e. they are applied in the same order as the
	   * array, on request, but reverse order, on response.
	   *
	   * {@link ng.$http#interceptors Interceptors detailed info}
	   **/var interceptorFactories=this.interceptors=[];this.$get=['$browser','$httpBackend','$$cookieReader','$cacheFactory','$rootScope','$q','$injector','$sce',function($browser,$httpBackend,$$cookieReader,$cacheFactory,$rootScope,$q,$injector,$sce){var defaultCache=$cacheFactory('$http');/**
	     * Make sure that default param serializer is exposed as a function
	     */defaults.paramSerializer=isString(defaults.paramSerializer)?$injector.get(defaults.paramSerializer):defaults.paramSerializer;/**
	     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
	     * The reversal is needed so that we can build up the interception chain around the
	     * server request.
	     */var reversedInterceptors=[];forEach(interceptorFactories,function(interceptorFactory){reversedInterceptors.unshift(isString(interceptorFactory)?$injector.get(interceptorFactory):$injector.invoke(interceptorFactory));});/**
	     * @ngdoc service
	     * @kind function
	     * @name $http
	     * @requires ng.$httpBackend
	     * @requires $cacheFactory
	     * @requires $rootScope
	     * @requires $q
	     * @requires $injector
	     *
	     * @description
	     * The `$http` service is a core Angular service that facilitates communication with the remote
	     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
	     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
	     *
	     * For unit testing applications that use `$http` service, see
	     * {@link ngMock.$httpBackend $httpBackend mock}.
	     *
	     * For a higher level of abstraction, please check out the {@link ngResource.$resource
	     * $resource} service.
	     *
	     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
	     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
	     * it is important to familiarize yourself with these APIs and the guarantees they provide.
	     *
	     *
	     * ## General usage
	     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
	     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
	     *
	     * ```js
	     *   // Simple GET request example:
	     *   $http({
	     *     method: 'GET',
	     *     url: '/someUrl'
	     *   }).then(function successCallback(response) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }, function errorCallback(response) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     * The response object has these properties:
	     *
	     *   - **data** – `{string|Object}` – The response body transformed with the transform
	     *     functions.
	     *   - **status** – `{number}` – HTTP status code of the response.
	     *   - **headers** – `{function([headerName])}` – Header getter function.
	     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
	     *   - **statusText** – `{string}` – HTTP status text of the response.
	     *
	     * A response status code between 200 and 299 is considered a success status and will result in
	     * the success callback being called. Any response status code outside of that range is
	     * considered an error status and will result in the error callback being called.
	     * Also, status codes less than -1 are normalized to zero. -1 usually means the request was
	     * aborted, e.g. using a `config.timeout`.
	     * Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning
	     * that the outcome (success or error) will be determined by the final response status code.
	     *
	     *
	     * ## Shortcut methods
	     *
	     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
	     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
	     * last argument.
	     *
	     * ```js
	     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
	     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
	     * ```
	     *
	     * Complete list of shortcut methods:
	     *
	     * - {@link ng.$http#get $http.get}
	     * - {@link ng.$http#head $http.head}
	     * - {@link ng.$http#post $http.post}
	     * - {@link ng.$http#put $http.put}
	     * - {@link ng.$http#delete $http.delete}
	     * - {@link ng.$http#jsonp $http.jsonp}
	     * - {@link ng.$http#patch $http.patch}
	     *
	     *
	     * ## Writing Unit Tests that use $http
	     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
	     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
	     * request using trained responses.
	     *
	     * ```
	     * $httpBackend.expectGET(...);
	     * $http.get(...);
	     * $httpBackend.flush();
	     * ```
	     *
	     * ## Setting HTTP Headers
	     *
	     * The $http service will automatically add certain HTTP headers to all requests. These defaults
	     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
	     * object, which currently contains this default configuration:
	     *
	     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
	     *   - <code>Accept: application/json, text/plain, \*&#65279;/&#65279;\*</code>
	     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
	     *   - `Content-Type: application/json`
	     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
	     *   - `Content-Type: application/json`
	     *
	     * To add or overwrite these defaults, simply add or remove a property from these configuration
	     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
	     * with the lowercased HTTP method name as the key, e.g.
	     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
	     *
	     * The defaults can also be set at runtime via the `$http.defaults` object in the same
	     * fashion. For example:
	     *
	     * ```
	     * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
	     * });
	     * ```
	     *
	     * In addition, you can supply a `headers` property in the config object passed when
	     * calling `$http(config)`, which overrides the defaults without changing them globally.
	     *
	     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
	     * Use the `headers` property, setting the desired header to `undefined`. For example:
	     *
	     * ```js
	     * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
	     *
	     * $http(req).then(function(){...}, function(){...});
	     * ```
	     *
	     * ## Transforming Requests and Responses
	     *
	     * Both requests and responses can be transformed using transformation functions: `transformRequest`
	     * and `transformResponse`. These properties can be a single function that returns
	     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
	     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
	     *
	     * <div class="alert alert-warning">
	     * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
	     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
	     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
	     * function will be reflected on the scope and in any templates where the object is data-bound.
	     * To prevent this, transform functions should have no side-effects.
	     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
	     * </div>
	     *
	     * ### Default Transformations
	     *
	     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
	     * `defaults.transformResponse` properties. If a request does not provide its own transformations
	     * then these will be applied.
	     *
	     * You can augment or replace the default transformations by modifying these properties by adding to or
	     * replacing the array.
	     *
	     * Angular provides the following default transformations:
	     *
	     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
	     *
	     * - If the `data` property of the request configuration object contains an object, serialize it
	     *   into JSON format.
	     *
	     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
	     *
	     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
	     *  - If JSON response is detected, deserialize it using a JSON parser.
	     *
	     *
	     * ### Overriding the Default Transformations Per Request
	     *
	     * If you wish to override the request/response transformations only for a single request then provide
	     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
	     * into `$http`.
	     *
	     * Note that if you provide these properties on the config object the default transformations will be
	     * overwritten. If you wish to augment the default transformations then you must include them in your
	     * local transformation array.
	     *
	     * The following code demonstrates adding a new response transformation to be run after the default response
	     * transformations have been run.
	     *
	     * ```js
	     * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
	     *
	     * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
	     * ```
	     *
	     *
	     * ## Caching
	     *
	     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
	     * set the config.cache value or the default cache value to TRUE or to a cache object (created
	     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
	     * precedence over the default cache value.
	     *
	     * In order to:
	     *   * cache all responses - set the default cache value to TRUE or to a cache object
	     *   * cache a specific response - set config.cache value to TRUE or to a cache object
	     *
	     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
	     * then the default `$cacheFactory("$http")` object is used.
	     *
	     * The default cache value can be set by updating the
	     * {@link ng.$http#defaults `$http.defaults.cache`} property or the
	     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
	     *
	     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
	     * the relevant cache object. The next time the same request is made, the response is returned
	     * from the cache without sending a request to the server.
	     *
	     * Take note that:
	     *
	     *   * Only GET and JSONP requests are cached.
	     *   * The cache key is the request URL including search parameters; headers are not considered.
	     *   * Cached responses are returned asynchronously, in the same way as responses from the server.
	     *   * If multiple identical requests are made using the same cache, which is not yet populated,
	     *     one request will be made to the server and remaining requests will return the same response.
	     *   * A cache-control header on the response does not affect if or how responses are cached.
	     *
	     *
	     * ## Interceptors
	     *
	     * Before you start creating interceptors, be sure to understand the
	     * {@link ng.$q $q and deferred/promise APIs}.
	     *
	     * For purposes of global error handling, authentication, or any kind of synchronous or
	     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
	     * able to intercept requests before they are handed to the server and
	     * responses before they are handed over to the application code that
	     * initiated these requests. The interceptors leverage the {@link ng.$q
	     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
	     *
	     * The interceptors are service factories that are registered with the `$httpProvider` by
	     * adding them to the `$httpProvider.interceptors` array. The factory is called and
	     * injected with dependencies (if specified) and returns the interceptor.
	     *
	     * There are two kinds of interceptors (and two kinds of rejection interceptors):
	     *
	     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
	     *     modify the `config` object or create a new one. The function needs to return the `config`
	     *     object directly, or a promise containing the `config` or a new `config` object.
	     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *   * `response`: interceptors get called with http `response` object. The function is free to
	     *     modify the `response` object or create a new one. The function needs to return the `response`
	     *     object directly, or as a promise containing the `response` or a new `response` object.
	     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *
	     *
	     * ```js
	     *   // register the interceptor as a service
	     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
	     *
	     *   $httpProvider.interceptors.push('myHttpInterceptor');
	     *
	     *
	     *   // alternatively, register the interceptor via an anonymous factory
	     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
	     * ```
	     *
	     * ## Security Considerations
	     *
	     * When designing web applications, consider security threats from:
	     *
	     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
	     *
	     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
	     * pre-configured with strategies that address these issues, but for this to work backend server
	     * cooperation is required.
	     *
	     * ### JSON Vulnerability Protection
	     *
	     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * allows third party website to turn your JSON resource URL into
	     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
	     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
	     * Angular will automatically strip the prefix before processing it as JSON.
	     *
	     * For example if your server needs to return:
	     * ```js
	     * ['one','two']
	     * ```
	     *
	     * which is vulnerable to attack, your server can return:
	     * ```js
	     * )]}',
	     * ['one','two']
	     * ```
	     *
	     * Angular will strip the prefix, before processing the JSON.
	     *
	     *
	     * ### Cross Site Request Forgery (XSRF) Protection
	     *
	     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
	     * which the attacker can trick an authenticated user into unknowingly executing actions on your
	     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
	     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
	     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
	     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
	     * The header will not be set for cross-domain requests.
	     *
	     * To take advantage of this, your server needs to set a token in a JavaScript readable session
	     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
	     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
	     * that only JavaScript running on your domain could have sent the request. The token must be
	     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
	     * making up its own tokens). We recommend that the token is a digest of your site's
	     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
	     * for added security.
	     *
	     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
	     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
	     * or the per-request config object.
	     *
	     * In order to prevent collisions in environments where multiple Angular apps share the
	     * same domain or subdomain, we recommend that each application uses unique cookie name.
	     *
	     * @param {object} config Object describing the request to be made and how it should be
	     *    processed. The object has following properties:
	     *
	     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
	     *    - **url** – `{string|TrustedObject}` – Absolute or relative URL of the resource that is being requested;
	     *      or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
	     *      with the `paramSerializer` and appended as GET parameters.
	     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
	     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
	     *      HTTP headers to send to the server. If the return value of a function is null, the
	     *      header will not be sent. Functions accept a config object as an argument.
	     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
	     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
	     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
	     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
	     *    - **transformRequest** –
	     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      request body and headers and returns its transformed (typically serialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **transformResponse** –
	     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      response body, headers and status and returns its transformed (typically deserialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
	     *      prepare the string representation of request parameters (specified as an object).
	     *      If specified as string, it is interpreted as function registered with the
	     *      {@link $injector $injector}, which means you can create your own serializer
	     *      by registering it as a {@link auto.$provide#service service}.
	     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
	     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
	     *    - **cache** – `{boolean|Object}` – A boolean value or object created with
	     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
	     *      See {@link $http#caching $http Caching} for more information.
	     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
	     *      that should abort the request when resolved.
	     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
	     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
	     *      for more information.
	     *    - **responseType** - `{string}` - see
	     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
	     *
	     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
	     *                        when the request succeeds or fails.
	     *
	     *
	     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
	     *   requests. This is primarily meant to be used for debugging purposes.
	     *
	     *
	     * @example
	<example module="httpExample" name="http-service">
	<file name="index.html">
	  <div ng-controller="FetchController">
	    <select ng-model="method" aria-label="Request method">
	      <option>GET</option>
	      <option>JSONP</option>
	    </select>
	    <input type="text" ng-model="url" size="80" aria-label="URL" />
	    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
	    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
	    <button id="samplejsonpbtn"
	      ng-click="updateModel('JSONP',
	                    'https://angularjs.org/greet.php?name=Super%20Hero')">
	      Sample JSONP
	    </button>
	    <button id="invalidjsonpbtn"
	      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist')">
	        Invalid JSONP
	      </button>
	    <pre>http status code: {{status}}</pre>
	    <pre>http response data: {{data}}</pre>
	  </div>
	</file>
	<file name="script.js">
	  angular.module('httpExample', [])
	    .config(['$sceDelegateProvider', function($sceDelegateProvider) {
	      // We must whitelist the JSONP endpoint that we are using to show that we trust it
	      $sceDelegateProvider.resourceUrlWhitelist([
	        'self',
	        'https://angularjs.org/**'
	      ]);
	    }])
	    .controller('FetchController', ['$scope', '$http', '$templateCache',
	      function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';

	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;

	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            then(function(response) {
	              $scope.status = response.status;
	              $scope.data = response.data;
	            }, function(response) {
	              $scope.data = response.data || 'Request failed';
	              $scope.status = response.status;
	          });
	        };

	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
	</file>
	<file name="http-hello.html">
	  Hello, $http!
	</file>
	<file name="protractor.js" type="protractor">
	  var status = element(by.binding('status'));
	  var data = element(by.binding('data'));
	  var fetchBtn = element(by.id('fetchbtn'));
	  var sampleGetBtn = element(by.id('samplegetbtn'));
	  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

	  it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });

	// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
	// it('should make a JSONP request to angularjs.org', function() {
	//   var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });

	  it('should make JSONP request to invalid URL and invoke the error handler',
	      function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
	</file>
	</example>
	     */function $http(requestConfig){if(!isObject(requestConfig)){throw minErr('$http')('badreq','Http request configuration must be an object.  Received: {0}',requestConfig);}if(!isString($sce.valueOf(requestConfig.url))){throw minErr('$http')('badreq','Http request configuration url must be a string or a $sce trusted object.  Received: {0}',requestConfig.url);}var config=extend({method:'get',transformRequest:defaults.transformRequest,transformResponse:defaults.transformResponse,paramSerializer:defaults.paramSerializer,jsonpCallbackParam:defaults.jsonpCallbackParam},requestConfig);config.headers=mergeHeaders(requestConfig);config.method=uppercase(config.method);config.paramSerializer=isString(config.paramSerializer)?$injector.get(config.paramSerializer):config.paramSerializer;$browser.$$incOutstandingRequestCount();var requestInterceptors=[];var responseInterceptors=[];var promise=$q.resolve(config);// apply interceptors
	forEach(reversedInterceptors,function(interceptor){if(interceptor.request||interceptor.requestError){requestInterceptors.unshift(interceptor.request,interceptor.requestError);}if(interceptor.response||interceptor.responseError){responseInterceptors.push(interceptor.response,interceptor.responseError);}});promise=chainInterceptors(promise,requestInterceptors);promise=promise.then(serverRequest);promise=chainInterceptors(promise,responseInterceptors);promise=promise.finally(completeOutstandingRequest);return promise;function chainInterceptors(promise,interceptors){for(var i=0,ii=interceptors.length;i<ii;){var thenFn=interceptors[i++];var rejectFn=interceptors[i++];promise=promise.then(thenFn,rejectFn);}interceptors.length=0;return promise;}function completeOutstandingRequest(){$browser.$$completeOutstandingRequest(noop);}function executeHeaderFns(headers,config){var headerContent,processedHeaders={};forEach(headers,function(headerFn,header){if(isFunction(headerFn)){headerContent=headerFn(config);if(headerContent!=null){processedHeaders[header]=headerContent;}}else{processedHeaders[header]=headerFn;}});return processedHeaders;}function mergeHeaders(config){var defHeaders=defaults.headers,reqHeaders=extend({},config.headers),defHeaderName,lowercaseDefHeaderName,reqHeaderName;defHeaders=extend({},defHeaders.common,defHeaders[lowercase(config.method)]);// using for-in instead of forEach to avoid unnecessary iteration after header has been found
	defaultHeadersIteration:for(defHeaderName in defHeaders){lowercaseDefHeaderName=lowercase(defHeaderName);for(reqHeaderName in reqHeaders){if(lowercase(reqHeaderName)===lowercaseDefHeaderName){continue defaultHeadersIteration;}}reqHeaders[defHeaderName]=defHeaders[defHeaderName];}// execute if header value is a function for merged headers
	return executeHeaderFns(reqHeaders,shallowCopy(config));}function serverRequest(config){var headers=config.headers;var reqData=transformData(config.data,headersGetter(headers),undefined,config.transformRequest);// strip content-type if data is undefined
	if(isUndefined(reqData)){forEach(headers,function(value,header){if(lowercase(header)==='content-type'){delete headers[header];}});}if(isUndefined(config.withCredentials)&&!isUndefined(defaults.withCredentials)){config.withCredentials=defaults.withCredentials;}// send request
	return sendReq(config,reqData).then(transformResponse,transformResponse);}function transformResponse(response){// make a copy since the response must be cacheable
	var resp=extend({},response);resp.data=transformData(response.data,response.headers,response.status,config.transformResponse);return isSuccess(response.status)?resp:$q.reject(resp);}}$http.pendingRequests=[];/**
	     * @ngdoc method
	     * @name $http#get
	     *
	     * @description
	     * Shortcut method to perform `GET` request.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     *//**
	     * @ngdoc method
	     * @name $http#delete
	     *
	     * @description
	     * Shortcut method to perform `DELETE` request.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     *//**
	     * @ngdoc method
	     * @name $http#head
	     *
	     * @description
	     * Shortcut method to perform `HEAD` request.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     *//**
	     * @ngdoc method
	     * @name $http#jsonp
	     *
	     * @description
	     * Shortcut method to perform `JSONP` request.
	     *
	     * Note that, since JSONP requests are sensitive because the response is given full access to the browser,
	     * the url must be declared, via {@link $sce} as a trusted resource URL.
	     * You can trust a URL by adding it to the whitelist via
	     * {@link $sceDelegateProvider#resourceUrlWhitelist  `$sceDelegateProvider.resourceUrlWhitelist`} or
	     * by explicitly trusting the URL via {@link $sce#trustAsResourceUrl `$sce.trustAsResourceUrl(url)`}.
	     *
	     * JSONP requests must specify a callback to be used in the response from the server. This callback
	     * is passed as a query parameter in the request. You must specify the name of this parameter by
	     * setting the `jsonpCallbackParam` property on the request config object.
	     *
	     * ```
	     * $http.jsonp('some/trusted/url', {jsonpCallbackParam: 'callback'})
	     * ```
	     *
	     * You can also specify a default callback parameter name in `$http.defaults.jsonpCallbackParam`.
	     * Initially this is set to `'callback'`.
	     *
	     * <div class="alert alert-danger">
	     * You can no longer use the `JSON_CALLBACK` string as a placeholder for specifying where the callback
	     * parameter value should go.
	     * </div>
	     *
	     * If you would like to customise where and how the callbacks are stored then try overriding
	     * or decorating the {@link $jsonpCallbacks} service.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */createShortMethods('get','delete','head','jsonp');/**
	     * @ngdoc method
	     * @name $http#post
	     *
	     * @description
	     * Shortcut method to perform `POST` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     *//**
	     * @ngdoc method
	     * @name $http#put
	     *
	     * @description
	     * Shortcut method to perform `PUT` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     *//**
	      * @ngdoc method
	      * @name $http#patch
	      *
	      * @description
	      * Shortcut method to perform `PATCH` request.
	      *
	      * @param {string} url Relative or absolute URL specifying the destination of the request
	      * @param {*} data Request content
	      * @param {Object=} config Optional configuration object
	      * @returns {HttpPromise} Future object
	      */createShortMethodsWithData('post','put','patch');/**
	         * @ngdoc property
	         * @name $http#defaults
	         *
	         * @description
	         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
	         * default headers, withCredentials as well as request and response transformations.
	         *
	         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
	         */$http.defaults=defaults;return $http;function createShortMethods(names){forEach(arguments,function(name){$http[name]=function(url,config){return $http(extend({},config||{},{method:name,url:url}));};});}function createShortMethodsWithData(name){forEach(arguments,function(name){$http[name]=function(url,data,config){return $http(extend({},config||{},{method:name,url:url,data:data}));};});}/**
	     * Makes the request.
	     *
	     * !!! ACCESSES CLOSURE VARS:
	     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
	     */function sendReq(config,reqData){var deferred=$q.defer(),promise=deferred.promise,cache,cachedResp,reqHeaders=config.headers,isJsonp=lowercase(config.method)==='jsonp',url=config.url;if(isJsonp){// JSONP is a pretty sensitive operation where we're allowing a script to have full access to
	// our DOM and JS space.  So we require that the URL satisfies SCE.RESOURCE_URL.
	url=$sce.getTrustedResourceUrl(url);}else if(!isString(url)){// If it is not a string then the URL must be a $sce trusted object
	url=$sce.valueOf(url);}url=buildUrl(url,config.paramSerializer(config.params));if(isJsonp){// Check the url and add the JSONP callback placeholder
	url=sanitizeJsonpCallbackParam(url,config.jsonpCallbackParam);}$http.pendingRequests.push(config);promise.then(removePendingReq,removePendingReq);if((config.cache||defaults.cache)&&config.cache!==false&&(config.method==='GET'||config.method==='JSONP')){cache=isObject(config.cache)?config.cache:isObject(defaults.cache)?defaults.cache:defaultCache;}if(cache){cachedResp=cache.get(url);if(isDefined(cachedResp)){if(isPromiseLike(cachedResp)){// cached request has already been sent, but there is no response yet
	cachedResp.then(resolvePromiseWithResult,resolvePromiseWithResult);}else{// serving from cache
	if(isArray(cachedResp)){resolvePromise(cachedResp[1],cachedResp[0],shallowCopy(cachedResp[2]),cachedResp[3]);}else{resolvePromise(cachedResp,200,{},'OK');}}}else{// put the promise for the non-transformed response into cache as a placeholder
	cache.put(url,promise);}}// if we won't have the response in cache, set the xsrf headers and
	// send the request to the backend
	if(isUndefined(cachedResp)){var xsrfValue=urlIsSameOrigin(config.url)?$$cookieReader()[config.xsrfCookieName||defaults.xsrfCookieName]:undefined;if(xsrfValue){reqHeaders[config.xsrfHeaderName||defaults.xsrfHeaderName]=xsrfValue;}$httpBackend(config.method,url,reqData,done,reqHeaders,config.timeout,config.withCredentials,config.responseType,createApplyHandlers(config.eventHandlers),createApplyHandlers(config.uploadEventHandlers));}return promise;function createApplyHandlers(eventHandlers){if(eventHandlers){var applyHandlers={};forEach(eventHandlers,function(eventHandler,key){applyHandlers[key]=function(event){if(useApplyAsync){$rootScope.$applyAsync(callEventHandler);}else if($rootScope.$$phase){callEventHandler();}else{$rootScope.$apply(callEventHandler);}function callEventHandler(){eventHandler(event);}};});return applyHandlers;}}/**
	       * Callback registered to $httpBackend():
	       *  - caches the response if desired
	       *  - resolves the raw $http promise
	       *  - calls $apply
	       */function done(status,response,headersString,statusText){if(cache){if(isSuccess(status)){cache.put(url,[status,response,parseHeaders(headersString),statusText]);}else{// remove promise from the cache
	cache.remove(url);}}function resolveHttpPromise(){resolvePromise(response,status,headersString,statusText);}if(useApplyAsync){$rootScope.$applyAsync(resolveHttpPromise);}else{resolveHttpPromise();if(!$rootScope.$$phase)$rootScope.$apply();}}/**
	       * Resolves the raw $http promise.
	       */function resolvePromise(response,status,headers,statusText){//status: HTTP response status code, 0, -1 (aborted by timeout / promise)
	status=status>=-1?status:0;(isSuccess(status)?deferred.resolve:deferred.reject)({data:response,status:status,headers:headersGetter(headers),config:config,statusText:statusText});}function resolvePromiseWithResult(result){resolvePromise(result.data,result.status,shallowCopy(result.headers()),result.statusText);}function removePendingReq(){var idx=$http.pendingRequests.indexOf(config);if(idx!==-1)$http.pendingRequests.splice(idx,1);}}function buildUrl(url,serializedParams){if(serializedParams.length>0){url+=(url.indexOf('?')===-1?'?':'&')+serializedParams;}return url;}function sanitizeJsonpCallbackParam(url,key){if(/[&?][^=]+=JSON_CALLBACK/.test(url)){// Throw if the url already contains a reference to JSON_CALLBACK
	throw $httpMinErr('badjsonp','Illegal use of JSON_CALLBACK in url, "{0}"',url);}var callbackParamRegex=new RegExp('[&?]'+key+'=');if(callbackParamRegex.test(url)){// Throw if the callback param was already provided
	throw $httpMinErr('badjsonp','Illegal use of callback param, "{0}", in url, "{1}"',key,url);}// Add in the JSON_CALLBACK callback param value
	url+=(url.indexOf('?')===-1?'?':'&')+key+'=JSON_CALLBACK';return url;}}];}/**
	 * @ngdoc service
	 * @name $xhrFactory
	 * @this
	 *
	 * @description
	 * Factory function used to create XMLHttpRequest objects.
	 *
	 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
	 *
	 * ```
	 * angular.module('myApp', [])
	 * .factory('$xhrFactory', function() {
	 *   return function createXhr(method, url) {
	 *     return new window.XMLHttpRequest({mozSystem: true});
	 *   };
	 * });
	 * ```
	 *
	 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
	 * @param {string} url URL of the request.
	 */function $xhrFactoryProvider(){this.$get=function(){return function createXhr(){return new window.XMLHttpRequest();};};}/**
	 * @ngdoc service
	 * @name $httpBackend
	 * @requires $jsonpCallbacks
	 * @requires $document
	 * @requires $xhrFactory
	 * @this
	 *
	 * @description
	 * HTTP backend used by the {@link ng.$http service} that delegates to
	 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
	 *
	 * You should never need to use this service directly, instead use the higher-level abstractions:
	 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
	 *
	 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
	 * $httpBackend} which can be trained with responses.
	 */function $HttpBackendProvider(){this.$get=['$browser','$jsonpCallbacks','$document','$xhrFactory',function($browser,$jsonpCallbacks,$document,$xhrFactory){return createHttpBackend($browser,$xhrFactory,$browser.defer,$jsonpCallbacks,$document[0]);}];}function createHttpBackend($browser,createXhr,$browserDefer,callbacks,rawDocument){// TODO(vojta): fix the signature
	return function(method,url,post,callback,headers,timeout,withCredentials,responseType,eventHandlers,uploadEventHandlers){url=url||$browser.url();if(lowercase(method)==='jsonp'){var callbackPath=callbacks.createCallback(url);var jsonpDone=jsonpReq(url,callbackPath,function(status,text){// jsonpReq only ever sets status to 200 (OK), 404 (ERROR) or -1 (WAITING)
	var response=status===200&&callbacks.getResponse(callbackPath);completeRequest(callback,status,response,'',text);callbacks.removeCallback(callbackPath);});}else{var xhr=createXhr(method,url);xhr.open(method,url,true);forEach(headers,function(value,key){if(isDefined(value)){xhr.setRequestHeader(key,value);}});xhr.onload=function requestLoaded(){var statusText=xhr.statusText||'';// responseText is the old-school way of retrieving response (supported by IE9)
	// response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	var response='response'in xhr?xhr.response:xhr.responseText;// normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	var status=xhr.status===1223?204:xhr.status;// fix status code when it is 0 (0 status is undocumented).
	// Occurs when accessing file resources or on Android 4.1 stock browser
	// while retrieving files from application cache.
	if(status===0){status=response?200:urlResolve(url).protocol==='file'?404:0;}completeRequest(callback,status,response,xhr.getAllResponseHeaders(),statusText);};var requestError=function requestError(){// The response is always empty
	// See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
	completeRequest(callback,-1,null,null,'');};xhr.onerror=requestError;xhr.onabort=requestError;xhr.ontimeout=requestError;forEach(eventHandlers,function(value,key){xhr.addEventListener(key,value);});forEach(uploadEventHandlers,function(value,key){xhr.upload.addEventListener(key,value);});if(withCredentials){xhr.withCredentials=true;}if(responseType){try{xhr.responseType=responseType;}catch(e){// WebKit added support for the json responseType value on 09/03/2013
	// https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
	// known to throw when setting the value "json" as the response type. Other older
	// browsers implementing the responseType
	//
	// The json response type can be ignored if not supported, because JSON payloads are
	// parsed on the client-side regardless.
	if(responseType!=='json'){throw e;}}}xhr.send(isUndefined(post)?null:post);}if(timeout>0){var timeoutId=$browserDefer(timeoutRequest,timeout);}else if(isPromiseLike(timeout)){timeout.then(timeoutRequest);}function timeoutRequest(){if(jsonpDone){jsonpDone();}if(xhr){xhr.abort();}}function completeRequest(callback,status,response,headersString,statusText){// cancel timeout and subsequent timeout promise resolution
	if(isDefined(timeoutId)){$browserDefer.cancel(timeoutId);}jsonpDone=xhr=null;callback(status,response,headersString,statusText);}};function jsonpReq(url,callbackPath,done){url=url.replace('JSON_CALLBACK',callbackPath);// we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
	// - fetches local scripts via XHR and evals them
	// - adds and immediately removes script elements from the document
	var script=rawDocument.createElement('script'),_callback=null;script.type='text/javascript';script.src=url;script.async=true;_callback=function callback(event){script.removeEventListener('load',_callback);script.removeEventListener('error',_callback);rawDocument.body.removeChild(script);script=null;var status=-1;var text='unknown';if(event){if(event.type==='load'&&!callbacks.wasCalled(callbackPath)){event={type:'error'};}text=event.type;status=event.type==='error'?404:200;}if(done){done(status,text);}};script.addEventListener('load',_callback);script.addEventListener('error',_callback);rawDocument.body.appendChild(script);return _callback;}}var $interpolateMinErr=angular.$interpolateMinErr=minErr('$interpolate');$interpolateMinErr.throwNoconcat=function(text){throw $interpolateMinErr('noconcat','Error while interpolating: {0}\nStrict Contextual Escaping disallows '+'interpolations that concatenate multiple expressions when a trusted value is '+'required.  See http://docs.angularjs.org/api/ng.$sce',text);};$interpolateMinErr.interr=function(text,err){return $interpolateMinErr('interr','Can\'t interpolate: {0}\n{1}',text,err.toString());};/**
	 * @ngdoc provider
	 * @name $interpolateProvider
	 * @this
	 *
	 * @description
	 *
	 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
	 *
	 * <div class="alert alert-danger">
	 * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
	 * template within a Python Jinja template (or any other template language). Mixing templating
	 * languages is **very dangerous**. The embedding template language will not safely escape Angular
	 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
	 * security bugs!
	 * </div>
	 *
	 * @example
	<example name="custom-interpolation-markup" module="customInterpolationApp">
	<file name="index.html">
	<script>
	  var customInterpolationApp = angular.module('customInterpolationApp', []);

	  customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });


	  customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
	</script>
	<div ng-controller="DemoController as demo">
	    //demo.label//
	</div>
	</file>
	<file name="protractor.js" type="protractor">
	  it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
	</file>
	</example>
	 */function $InterpolateProvider(){var startSymbol='{{';var endSymbol='}}';/**
	   * @ngdoc method
	   * @name $interpolateProvider#startSymbol
	   * @description
	   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
	   * @param {string=} value new value to set the starting symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */this.startSymbol=function(value){if(value){startSymbol=value;return this;}else{return startSymbol;}};/**
	   * @ngdoc method
	   * @name $interpolateProvider#endSymbol
	   * @description
	   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	   *
	   * @param {string=} value new value to set the ending symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */this.endSymbol=function(value){if(value){endSymbol=value;return this;}else{return endSymbol;}};this.$get=['$parse','$exceptionHandler','$sce',function($parse,$exceptionHandler,$sce){var startSymbolLength=startSymbol.length,endSymbolLength=endSymbol.length,escapedStartRegexp=new RegExp(startSymbol.replace(/./g,escape),'g'),escapedEndRegexp=new RegExp(endSymbol.replace(/./g,escape),'g');function escape(ch){return'\\\\\\'+ch;}function unescapeText(text){return text.replace(escapedStartRegexp,startSymbol).replace(escapedEndRegexp,endSymbol);}// TODO: this is the same as the constantWatchDelegate in parse.js
	function constantWatchDelegate(scope,listener,objectEquality,constantInterp){var unwatch=scope.$watch(function constantInterpolateWatch(scope){unwatch();return constantInterp(scope);},listener,objectEquality);return unwatch;}/**
	     * @ngdoc service
	     * @name $interpolate
	     * @kind function
	     *
	     * @requires $parse
	     * @requires $sce
	     *
	     * @description
	     *
	     * Compiles a string with markup into an interpolation function. This service is used by the
	     * HTML {@link ng.$compile $compile} service for data binding. See
	     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
	     * interpolation markup.
	     *
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var exp = $interpolate('Hello {{name | uppercase}}!');
	     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
	     * ```
	     *
	     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
	     * `true`, the interpolation function will return `undefined` unless all embedded expressions
	     * evaluate to a value other than `undefined`.
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var context = {greeting: 'Hello', name: undefined };
	     *
	     *   // default "forgiving" mode
	     *   var exp = $interpolate('{{greeting}} {{name}}!');
	     *   expect(exp(context)).toEqual('Hello !');
	     *
	     *   // "allOrNothing" mode
	     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
	     *   expect(exp(context)).toBeUndefined();
	     *   context.name = 'Angular';
	     *   expect(exp(context)).toEqual('Hello Angular!');
	     * ```
	     *
	     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
	     *
	     * #### Escaped Interpolation
	     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
	     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
	     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
	     * or binding.
	     *
	     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
	     * degree, while also enabling code examples to work without relying on the
	     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
	     *
	     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
	     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
	     * interpolation start/end markers with their escaped counterparts.**
	     *
	     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
	     * output when the $interpolate service processes the text. So, for HTML elements interpolated
	     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
	     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
	     * this is typically useful only when user-data is used in rendering a template from the server, or
	     * when otherwise untrusted data is used by a directive.
	     *
	     * <example name="interpolation">
	     *  <file name="index.html">
	     *    <div ng-init="username='A user'">
	     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
	     *        </p>
	     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
	     *        application, but fails to accomplish their task, because the server has correctly
	     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
	     *        characters.</p>
	     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
	     *        from the database by an administrator.</p>
	     *    </div>
	     *  </file>
	     * </example>
	     *
	     * @knownIssue
	     * It is currently not possible for an interpolated expression to contain the interpolation end
	     * symbol. For example, `{{ '}}' }}` will be incorrectly interpreted as `{{ ' }}` + `' }}`, i.e.
	     * an interpolated expression consisting of a single-quote (`'`) and the `' }}` string.
	     *
	     * @knownIssue
	     * All directives and components must use the standard `{{` `}}` interpolation symbols
	     * in their templates. If you change the application interpolation symbols the {@link $compile}
	     * service will attempt to denormalize the standard symbols to the custom symbols.
	     * The denormalization process is not clever enough to know not to replace instances of the standard
	     * symbols where they would not normally be treated as interpolation symbols. For example in the following
	     * code snippet the closing braces of the literal object will get incorrectly denormalized:
	     *
	     * ```
	     * <div data-context='{"context":{"id":3,"type":"page"}}">
	     * ```
	     *
	     * The workaround is to ensure that such instances are separated by whitespace:
	     * ```
	     * <div data-context='{"context":{"id":3,"type":"page"} }">
	     * ```
	     *
	     * See https://github.com/angular/angular.js/pull/14610#issuecomment-219401099 for more information.
	     *
	     * @param {string} text The text with markup to interpolate.
	     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
	     *    embedded expression in order to return an interpolation function. Strings with no
	     *    embedded expression will return null for the interpolation function.
	     * @param {string=} trustedContext when provided, the returned function passes the interpolated
	     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
	     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
	     *    provides Strict Contextual Escaping for details.
	     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
	     *    unless all embedded expressions evaluate to a value other than `undefined`.
	     * @returns {function(context)} an interpolation function which is used to compute the
	     *    interpolated string. The function has these parameters:
	     *
	     * - `context`: evaluation context for all expressions embedded in the interpolated text
	     */function $interpolate(text,mustHaveExpression,trustedContext,allOrNothing){// Provide a quick exit and simplified result function for text with no interpolation
	if(!text.length||text.indexOf(startSymbol)===-1){var constantInterp;if(!mustHaveExpression){var unescapedText=unescapeText(text);constantInterp=valueFn(unescapedText);constantInterp.exp=text;constantInterp.expressions=[];constantInterp.$$watchDelegate=constantWatchDelegate;}return constantInterp;}allOrNothing=!!allOrNothing;var startIndex,endIndex,index=0,expressions=[],parseFns=[],textLength=text.length,exp,concat=[],expressionPositions=[];while(index<textLength){if((startIndex=text.indexOf(startSymbol,index))!==-1&&(endIndex=text.indexOf(endSymbol,startIndex+startSymbolLength))!==-1){if(index!==startIndex){concat.push(unescapeText(text.substring(index,startIndex)));}exp=text.substring(startIndex+startSymbolLength,endIndex);expressions.push(exp);parseFns.push($parse(exp,parseStringifyInterceptor));index=endIndex+endSymbolLength;expressionPositions.push(concat.length);concat.push('');}else{// we did not find an interpolation, so we have to add the remainder to the separators array
	if(index!==textLength){concat.push(unescapeText(text.substring(index)));}break;}}// Concatenating expressions makes it hard to reason about whether some combination of
	// concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
	// single expression be used for iframe[src], object[src], etc., we ensure that the value
	// that's used is assigned or constructed by some JS code somewhere that is more testable or
	// make it obvious that you bound the value to some user controlled value.  This helps reduce
	// the load when auditing for XSS issues.
	if(trustedContext&&concat.length>1){$interpolateMinErr.throwNoconcat(text);}if(!mustHaveExpression||expressions.length){var compute=function compute(values){for(var i=0,ii=expressions.length;i<ii;i++){if(allOrNothing&&isUndefined(values[i]))return;concat[expressionPositions[i]]=values[i];}return concat.join('');};var getValue=function getValue(value){return trustedContext?$sce.getTrusted(trustedContext,value):$sce.valueOf(value);};return extend(function interpolationFn(context){var i=0;var ii=expressions.length;var values=new Array(ii);try{for(;i<ii;i++){values[i]=parseFns[i](context);}return compute(values);}catch(err){$exceptionHandler($interpolateMinErr.interr(text,err));}},{// all of these properties are undocumented for now
	exp:text,//just for compatibility with regular watchers created via $watch
	expressions:expressions,$$watchDelegate:function $$watchDelegate(scope,listener){var lastValue;return scope.$watchGroup(parseFns,/** @this */function interpolateFnWatcher(values,oldValues){var currValue=compute(values);if(isFunction(listener)){listener.call(this,currValue,values!==oldValues?lastValue:currValue,scope);}lastValue=currValue;});}});}function parseStringifyInterceptor(value){try{value=getValue(value);return allOrNothing&&!isDefined(value)?value:stringify(value);}catch(err){$exceptionHandler($interpolateMinErr.interr(text,err));}}}/**
	     * @ngdoc method
	     * @name $interpolate#startSymbol
	     * @description
	     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} start symbol.
	     */$interpolate.startSymbol=function(){return startSymbol;};/**
	     * @ngdoc method
	     * @name $interpolate#endSymbol
	     * @description
	     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	     *
	     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} end symbol.
	     */$interpolate.endSymbol=function(){return endSymbol;};return $interpolate;}];}/** @this */function $IntervalProvider(){this.$get=['$rootScope','$window','$q','$$q','$browser',function($rootScope,$window,$q,$$q,$browser){var intervals={};/**
	      * @ngdoc service
	      * @name $interval
	      *
	      * @description
	      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
	      * milliseconds.
	      *
	      * The return value of registering an interval function is a promise. This promise will be
	      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
	      * run indefinitely if `count` is not defined. The value of the notification will be the
	      * number of iterations that have run.
	      * To cancel an interval, call `$interval.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
	      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
	      * time.
	      *
	      * <div class="alert alert-warning">
	      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
	      * with them.  In particular they are not automatically destroyed when a controller's scope or a
	      * directive's element are destroyed.
	      * You should take this into consideration and make sure to always cancel the interval at the
	      * appropriate moment.  See the example below for more details on how and when to do this.
	      * </div>
	      *
	      * @param {function()} fn A function that should be called repeatedly.
	      * @param {number} delay Number of milliseconds between each function call.
	      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
	      *   indefinitely.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {promise} A promise which will be notified on each iteration.
	      *
	      * @example
	      * <example module="intervalExample" name="interval-service">
	      * <file name="index.html">
	      *   <script>
	      *     angular.module('intervalExample', [])
	      *       .controller('ExampleController', ['$scope', '$interval',
	      *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
	      *       // Register the 'myCurrentTime' directive factory method.
	      *       // We inject $interval and dateFilter service since the factory method is DI.
	      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
	      *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
	      *   </script>
	      *
	      *   <div>
	      *     <div ng-controller="ExampleController">
	      *       <label>Date format: <input ng-model="format"></label> <hr/>
	      *       Current time is: <span my-current-time="format"></span>
	      *       <hr/>
	      *       Blood 1 : <font color='red'>{{blood_1}}</font>
	      *       Blood 2 : <font color='red'>{{blood_2}}</font>
	      *       <button type="button" data-ng-click="fight()">Fight</button>
	      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
	      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
	      *     </div>
	      *   </div>
	      *
	      * </file>
	      * </example>
	      */function interval(fn,delay,count,invokeApply){var hasParams=arguments.length>4,args=hasParams?sliceArgs(arguments,4):[],setInterval=$window.setInterval,clearInterval=$window.clearInterval,iteration=0,skipApply=isDefined(invokeApply)&&!invokeApply,deferred=(skipApply?$$q:$q).defer(),promise=deferred.promise;count=isDefined(count)?count:0;promise.$$intervalId=setInterval(function tick(){if(skipApply){$browser.defer(callback);}else{$rootScope.$evalAsync(callback);}deferred.notify(iteration++);if(count>0&&iteration>=count){deferred.resolve(iteration);clearInterval(promise.$$intervalId);delete intervals[promise.$$intervalId];}if(!skipApply)$rootScope.$apply();},delay);intervals[promise.$$intervalId]=deferred;return promise;function callback(){if(!hasParams){fn(iteration);}else{fn.apply(null,args);}}}/**
	      * @ngdoc method
	      * @name $interval#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`.
	      *
	      * @param {Promise=} promise returned by the `$interval` function.
	      * @returns {boolean} Returns `true` if the task was successfully canceled.
	      */interval.cancel=function(promise){if(promise&&promise.$$intervalId in intervals){// Interval cancels should not report as unhandled promise.
	intervals[promise.$$intervalId].promise.catch(noop);intervals[promise.$$intervalId].reject('canceled');$window.clearInterval(promise.$$intervalId);delete intervals[promise.$$intervalId];return true;}return false;};return interval;}];}/**
	 * @ngdoc service
	 * @name $jsonpCallbacks
	 * @requires $window
	 * @description
	 * This service handles the lifecycle of callbacks to handle JSONP requests.
	 * Override this service if you wish to customise where the callbacks are stored and
	 * how they vary compared to the requested url.
	 */var $jsonpCallbacksProvider=/** @this */function $jsonpCallbacksProvider(){this.$get=['$window',function($window){var callbacks=$window.angular.callbacks;var callbackMap={};function _createCallback(callbackId){var callback=function callback(data){callback.data=data;callback.called=true;};callback.id=callbackId;return callback;}return{/**
	       * @ngdoc method
	       * @name $jsonpCallbacks#createCallback
	       * @param {string} url the url of the JSONP request
	       * @returns {string} the callback path to send to the server as part of the JSONP request
	       * @description
	       * {@link $httpBackend} calls this method to create a callback and get hold of the path to the callback
	       * to pass to the server, which will be used to call the callback with its payload in the JSONP response.
	       */createCallback:function createCallback(url){var callbackId='_'+(callbacks.$$counter++).toString(36);var callbackPath='angular.callbacks.'+callbackId;var callback=_createCallback(callbackId);callbackMap[callbackPath]=callbacks[callbackId]=callback;return callbackPath;},/**
	       * @ngdoc method
	       * @name $jsonpCallbacks#wasCalled
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @returns {boolean} whether the callback has been called, as a result of the JSONP response
	       * @description
	       * {@link $httpBackend} calls this method to find out whether the JSONP response actually called the
	       * callback that was passed in the request.
	       */wasCalled:function wasCalled(callbackPath){return callbackMap[callbackPath].called;},/**
	       * @ngdoc method
	       * @name $jsonpCallbacks#getResponse
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @returns {*} the data received from the response via the registered callback
	       * @description
	       * {@link $httpBackend} calls this method to get hold of the data that was provided to the callback
	       * in the JSONP response.
	       */getResponse:function getResponse(callbackPath){return callbackMap[callbackPath].data;},/**
	       * @ngdoc method
	       * @name $jsonpCallbacks#removeCallback
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @description
	       * {@link $httpBackend} calls this method to remove the callback after the JSONP request has
	       * completed or timed-out.
	       */removeCallback:function removeCallback(callbackPath){var callback=callbackMap[callbackPath];delete callbacks[callback.id];delete callbackMap[callbackPath];}};}];};/**
	 * @ngdoc service
	 * @name $locale
	 *
	 * @description
	 * $locale service provides localization rules for various Angular components. As of right now the
	 * only public api is:
	 *
	 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
	 */var PATH_MATCH=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,DEFAULT_PORTS={'http':80,'https':443,'ftp':21};var $locationMinErr=minErr('$location');/**
	 * Encode path using encodeUriSegment, ignoring forward slashes
	 *
	 * @param {string} path Path to encode
	 * @returns {string}
	 */function encodePath(path){var segments=path.split('/'),i=segments.length;while(i--){segments[i]=encodeUriSegment(segments[i]);}return segments.join('/');}function parseAbsoluteUrl(absoluteUrl,locationObj){var parsedUrl=urlResolve(absoluteUrl);locationObj.$$protocol=parsedUrl.protocol;locationObj.$$host=parsedUrl.hostname;locationObj.$$port=toInt(parsedUrl.port)||DEFAULT_PORTS[parsedUrl.protocol]||null;}var DOUBLE_SLASH_REGEX=/^\s*[\\/]{2,}/;function parseAppUrl(url,locationObj){if(DOUBLE_SLASH_REGEX.test(url)){throw $locationMinErr('badpath','Invalid url "{0}".',url);}var prefixed=url.charAt(0)!=='/';if(prefixed){url='/'+url;}var match=urlResolve(url);locationObj.$$path=decodeURIComponent(prefixed&&match.pathname.charAt(0)==='/'?match.pathname.substring(1):match.pathname);locationObj.$$search=parseKeyValue(match.search);locationObj.$$hash=decodeURIComponent(match.hash);// make sure path starts with '/';
	if(locationObj.$$path&&locationObj.$$path.charAt(0)!=='/'){locationObj.$$path='/'+locationObj.$$path;}}function startsWith(str,search){return str.slice(0,search.length)===search;}/**
	 *
	 * @param {string} base
	 * @param {string} url
	 * @returns {string} returns text from `url` after `base` or `undefined` if it does not begin with
	 *                   the expected string.
	 */function stripBaseUrl(base,url){if(startsWith(url,base)){return url.substr(base.length);}}function stripHash(url){var index=url.indexOf('#');return index===-1?url:url.substr(0,index);}function trimEmptyHash(url){return url.replace(/(#.+)|#$/,'$1');}function stripFile(url){return url.substr(0,stripHash(url).lastIndexOf('/')+1);}/* return the server only (scheme://host:port) */function serverBase(url){return url.substring(0,url.indexOf('/',url.indexOf('//')+2));}/**
	 * LocationHtml5Url represents a URL
	 * This object is exposed as $location service when HTML5 mode is enabled and supported
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} basePrefix URL path prefix
	 */function LocationHtml5Url(appBase,appBaseNoFile,basePrefix){this.$$html5=true;basePrefix=basePrefix||'';parseAbsoluteUrl(appBase,this);/**
	   * Parse given HTML5 (regular) URL string into properties
	   * @param {string} url HTML5 URL
	   * @private
	   */this.$$parse=function(url){var pathUrl=stripBaseUrl(appBaseNoFile,url);if(!isString(pathUrl)){throw $locationMinErr('ipthprfx','Invalid url "{0}", missing path prefix "{1}".',url,appBaseNoFile);}parseAppUrl(pathUrl,this);if(!this.$$path){this.$$path='/';}this.$$compose();};/**
	   * Compose url and update `absUrl` property
	   * @private
	   */this.$$compose=function(){var search=toKeyValue(this.$$search),hash=this.$$hash?'#'+encodeUriSegment(this.$$hash):'';this.$$url=encodePath(this.$$path)+(search?'?'+search:'')+hash;this.$$absUrl=appBaseNoFile+this.$$url.substr(1);// first char is always '/'
	};this.$$parseLinkUrl=function(url,relHref){if(relHref&&relHref[0]==='#'){// special case for links to hash fragments:
	// keep the old url and only replace the hash fragment
	this.hash(relHref.slice(1));return true;}var appUrl,prevAppUrl;var rewrittenUrl;if(isDefined(appUrl=stripBaseUrl(appBase,url))){prevAppUrl=appUrl;if(basePrefix&&isDefined(appUrl=stripBaseUrl(basePrefix,appUrl))){rewrittenUrl=appBaseNoFile+(stripBaseUrl('/',appUrl)||appUrl);}else{rewrittenUrl=appBase+prevAppUrl;}}else if(isDefined(appUrl=stripBaseUrl(appBaseNoFile,url))){rewrittenUrl=appBaseNoFile+appUrl;}else if(appBaseNoFile===url+'/'){rewrittenUrl=appBaseNoFile;}if(rewrittenUrl){this.$$parse(rewrittenUrl);}return!!rewrittenUrl;};}/**
	 * LocationHashbangUrl represents URL
	 * This object is exposed as $location service when developer doesn't opt into html5 mode.
	 * It also serves as the base class for html5 mode fallback on legacy browsers.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */function LocationHashbangUrl(appBase,appBaseNoFile,hashPrefix){parseAbsoluteUrl(appBase,this);/**
	   * Parse given hashbang URL into properties
	   * @param {string} url Hashbang URL
	   * @private
	   */this.$$parse=function(url){var withoutBaseUrl=stripBaseUrl(appBase,url)||stripBaseUrl(appBaseNoFile,url);var withoutHashUrl;if(!isUndefined(withoutBaseUrl)&&withoutBaseUrl.charAt(0)==='#'){// The rest of the URL starts with a hash so we have
	// got either a hashbang path or a plain hash fragment
	withoutHashUrl=stripBaseUrl(hashPrefix,withoutBaseUrl);if(isUndefined(withoutHashUrl)){// There was no hashbang prefix so we just have a hash fragment
	withoutHashUrl=withoutBaseUrl;}}else{// There was no hashbang path nor hash fragment:
	// If we are in HTML5 mode we use what is left as the path;
	// Otherwise we ignore what is left
	if(this.$$html5){withoutHashUrl=withoutBaseUrl;}else{withoutHashUrl='';if(isUndefined(withoutBaseUrl)){appBase=url;this.replace();}}}parseAppUrl(withoutHashUrl,this);this.$$path=removeWindowsDriveName(this.$$path,withoutHashUrl,appBase);this.$$compose();/*
	     * In Windows, on an anchor node on documents loaded from
	     * the filesystem, the browser will return a pathname
	     * prefixed with the drive name ('/C:/path') when a
	     * pathname without a drive is set:
	     *  * a.setAttribute('href', '/foo')
	     *   * a.pathname === '/C:/foo' //true
	     *
	     * Inside of Angular, we're always using pathnames that
	     * do not include drive names for routing.
	     */function removeWindowsDriveName(path,url,base){/*
	      Matches paths for file protocol on windows,
	      such as /C:/foo/bar, and captures only /foo/bar.
	      */var windowsFilePathExp=/^\/[A-Z]:(\/.*)/;var firstPathSegmentMatch;//Get the relative path from the input URL.
	if(startsWith(url,base)){url=url.replace(base,'');}// The input URL intentionally contains a first path segment that ends with a colon.
	if(windowsFilePathExp.exec(url)){return path;}firstPathSegmentMatch=windowsFilePathExp.exec(path);return firstPathSegmentMatch?firstPathSegmentMatch[1]:path;}};/**
	   * Compose hashbang URL and update `absUrl` property
	   * @private
	   */this.$$compose=function(){var search=toKeyValue(this.$$search),hash=this.$$hash?'#'+encodeUriSegment(this.$$hash):'';this.$$url=encodePath(this.$$path)+(search?'?'+search:'')+hash;this.$$absUrl=appBase+(this.$$url?hashPrefix+this.$$url:'');};this.$$parseLinkUrl=function(url,relHref){if(stripHash(appBase)===stripHash(url)){this.$$parse(url);return true;}return false;};}/**
	 * LocationHashbangUrl represents URL
	 * This object is exposed as $location service when html5 history api is enabled but the browser
	 * does not support it.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */function LocationHashbangInHtml5Url(appBase,appBaseNoFile,hashPrefix){this.$$html5=true;LocationHashbangUrl.apply(this,arguments);this.$$parseLinkUrl=function(url,relHref){if(relHref&&relHref[0]==='#'){// special case for links to hash fragments:
	// keep the old url and only replace the hash fragment
	this.hash(relHref.slice(1));return true;}var rewrittenUrl;var appUrl;if(appBase===stripHash(url)){rewrittenUrl=url;}else if(appUrl=stripBaseUrl(appBaseNoFile,url)){rewrittenUrl=appBase+hashPrefix+appUrl;}else if(appBaseNoFile===url+'/'){rewrittenUrl=appBaseNoFile;}if(rewrittenUrl){this.$$parse(rewrittenUrl);}return!!rewrittenUrl;};this.$$compose=function(){var search=toKeyValue(this.$$search),hash=this.$$hash?'#'+encodeUriSegment(this.$$hash):'';this.$$url=encodePath(this.$$path)+(search?'?'+search:'')+hash;// include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
	this.$$absUrl=appBase+hashPrefix+this.$$url;};}var locationPrototype={/**
	   * Ensure absolute URL is initialized.
	   * @private
	   */$$absUrl:'',/**
	   * Are we in html5 mode?
	   * @private
	   */$$html5:false,/**
	   * Has any change been replacing?
	   * @private
	   */$$replace:false,/**
	   * @ngdoc method
	   * @name $location#absUrl
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return full URL representation with all segments encoded according to rules specified in
	   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var absUrl = $location.absUrl();
	   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @return {string} full URL
	   */absUrl:locationGetter('$$absUrl'),/**
	   * @ngdoc method
	   * @name $location#url
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return URL (e.g. `/path?a=b#hash`) when called without any parameter.
	   *
	   * Change path, search and hash, when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var url = $location.url();
	   * // => "/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @param {string=} url New URL without base prefix (e.g. `/path?a=b#hash`)
	   * @return {string} url
	   */url:function url(_url){if(isUndefined(_url)){return this.$$url;}var match=PATH_MATCH.exec(_url);if(match[1]||_url==='')this.path(decodeURIComponent(match[1]));if(match[2]||match[1]||_url==='')this.search(match[3]||'');this.hash(match[5]||'');return this;},/**
	   * @ngdoc method
	   * @name $location#protocol
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return protocol of current URL.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var protocol = $location.protocol();
	   * // => "http"
	   * ```
	   *
	   * @return {string} protocol of current URL
	   */protocol:locationGetter('$$protocol'),/**
	   * @ngdoc method
	   * @name $location#host
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return host of current URL.
	   *
	   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var host = $location.host();
	   * // => "example.com"
	   *
	   * // given URL http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
	   * host = $location.host();
	   * // => "example.com"
	   * host = location.host;
	   * // => "example.com:8080"
	   * ```
	   *
	   * @return {string} host of current URL.
	   */host:locationGetter('$$host'),/**
	   * @ngdoc method
	   * @name $location#port
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return port of current URL.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var port = $location.port();
	   * // => 80
	   * ```
	   *
	   * @return {Number} port
	   */port:locationGetter('$$port'),/**
	   * @ngdoc method
	   * @name $location#path
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return path of current URL when called without any parameter.
	   *
	   * Change path when called with parameter and return `$location`.
	   *
	   * Note: Path should always begin with forward slash (/), this method will add the forward slash
	   * if it is missing.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var path = $location.path();
	   * // => "/some/path"
	   * ```
	   *
	   * @param {(string|number)=} path New path
	   * @return {(string|object)} path if called with no parameters, or `$location` if called with a parameter
	   */path:locationGetterSetter('$$path',function(path){path=path!==null?path.toString():'';return path.charAt(0)==='/'?path:'/'+path;}),/**
	   * @ngdoc method
	   * @name $location#search
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return search part (as object) of current URL when called without any parameter.
	   *
	   * Change search part when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var searchObject = $location.search();
	   * // => {foo: 'bar', baz: 'xoxo'}
	   *
	   * // set foo to 'yipee'
	   * $location.search('foo', 'yipee');
	   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
	   * ```
	   *
	   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
	   * hash object.
	   *
	   * When called with a single argument the method acts as a setter, setting the `search` component
	   * of `$location` to the specified value.
	   *
	   * If the argument is a hash object containing an array of values, these values will be encoded
	   * as duplicate search parameters in the URL.
	   *
	   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
	   * will override only a single search property.
	   *
	   * If `paramValue` is an array, it will override the property of the `search` component of
	   * `$location` specified via the first argument.
	   *
	   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
	   *
	   * If `paramValue` is `true`, the property specified via the first argument will be added with no
	   * value nor trailing equal sign.
	   *
	   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
	   * one or more arguments returns `$location` object itself.
	   */search:function search(_search,paramValue){switch(arguments.length){case 0:return this.$$search;case 1:if(isString(_search)||isNumber(_search)){_search=_search.toString();this.$$search=parseKeyValue(_search);}else if(isObject(_search)){_search=copy(_search,{});// remove object undefined or null properties
	forEach(_search,function(value,key){if(value==null)delete _search[key];});this.$$search=_search;}else{throw $locationMinErr('isrcharg','The first argument of the `$location#search()` call must be a string or an object.');}break;default:if(isUndefined(paramValue)||paramValue===null){delete this.$$search[_search];}else{this.$$search[_search]=paramValue;}}this.$$compose();return this;},/**
	   * @ngdoc method
	   * @name $location#hash
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Returns the hash fragment when called without any parameters.
	   *
	   * Changes the hash fragment when called with a parameter and returns `$location`.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
	   * var hash = $location.hash();
	   * // => "hashValue"
	   * ```
	   *
	   * @param {(string|number)=} hash New hash fragment
	   * @return {string} hash
	   */hash:locationGetterSetter('$$hash',function(hash){return hash!==null?hash.toString():'';}),/**
	   * @ngdoc method
	   * @name $location#replace
	   *
	   * @description
	   * If called, all changes to $location during the current `$digest` will replace the current history
	   * record, instead of adding a new one.
	   */replace:function replace(){this.$$replace=true;return this;}};forEach([LocationHashbangInHtml5Url,LocationHashbangUrl,LocationHtml5Url],function(Location){Location.prototype=Object.create(locationPrototype);/**
	   * @ngdoc method
	   * @name $location#state
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return the history state object when called without any parameter.
	   *
	   * Change the history state object when called with one parameter and return `$location`.
	   * The state object is later passed to `pushState` or `replaceState`.
	   *
	   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
	   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
	   * older browsers (like IE9 or Android < 4.0), don't use this method.
	   *
	   * @param {object=} state State object for pushState or replaceState
	   * @return {object} state
	   */Location.prototype.state=function(state){if(!arguments.length){return this.$$state;}if(Location!==LocationHtml5Url||!this.$$html5){throw $locationMinErr('nostate','History API state support is available only '+'in HTML5 mode and only in browsers supporting HTML5 History API');}// The user might modify `stateObject` after invoking `$location.state(stateObject)`
	// but we're changing the $$state reference to $browser.state() during the $digest
	// so the modification window is narrow.
	this.$$state=isUndefined(state)?null:state;return this;};});function locationGetter(property){return(/** @this */function(){return this[property];});}function locationGetterSetter(property,preprocess){return(/** @this */function(value){if(isUndefined(value)){return this[property];}this[property]=preprocess(value);this.$$compose();return this;});}/**
	 * @ngdoc service
	 * @name $location
	 *
	 * @requires $rootElement
	 *
	 * @description
	 * The $location service parses the URL in the browser address bar (based on the
	 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
	 * available to your application. Changes to the URL in the address bar are reflected into
	 * $location service and changes to $location are reflected into the browser address bar.
	 *
	 * **The $location service:**
	 *
	 * - Exposes the current URL in the browser address bar, so you can
	 *   - Watch and observe the URL.
	 *   - Change the URL.
	 * - Synchronizes the URL with the browser when the user
	 *   - Changes the address bar.
	 *   - Clicks the back or forward button (or clicks a History link).
	 *   - Clicks on a link.
	 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
	 *
	 * For more information see {@link guide/$location Developer Guide: Using $location}
	 *//**
	 * @ngdoc provider
	 * @name $locationProvider
	 * @this
	 *
	 * @description
	 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
	 */function $LocationProvider(){var hashPrefix='!',html5Mode={enabled:false,requireBase:true,rewriteLinks:true};/**
	   * @ngdoc method
	   * @name $locationProvider#hashPrefix
	   * @description
	   * The default value for the prefix is `'!'`.
	   * @param {string=} prefix Prefix for hash part (containing path and search)
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */this.hashPrefix=function(prefix){if(isDefined(prefix)){hashPrefix=prefix;return this;}else{return hashPrefix;}};/**
	   * @ngdoc method
	   * @name $locationProvider#html5Mode
	   * @description
	   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
	   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
	   *   properties:
	   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
	   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
	   *     support `pushState`.
	   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
	   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
	   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
	   *     See the {@link guide/$location $location guide for more information}
	   *   - **rewriteLinks** - `{boolean|string}` - (default: `true`) When html5Mode is enabled,
	   *     enables/disables URL rewriting for relative links. If set to a string, URL rewriting will
	   *     only happen on links with an attribute that matches the given string. For example, if set
	   *     to `'internal-link'`, then the URL will only be rewritten for `<a internal-link>` links.
	   *     Note that [attribute name normalization](guide/directive#normalization) does not apply
	   *     here, so `'internalLink'` will **not** match `'internal-link'`.
	   *
	   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
	   */this.html5Mode=function(mode){if(isBoolean(mode)){html5Mode.enabled=mode;return this;}else if(isObject(mode)){if(isBoolean(mode.enabled)){html5Mode.enabled=mode.enabled;}if(isBoolean(mode.requireBase)){html5Mode.requireBase=mode.requireBase;}if(isBoolean(mode.rewriteLinks)||isString(mode.rewriteLinks)){html5Mode.rewriteLinks=mode.rewriteLinks;}return this;}else{return html5Mode;}};/**
	   * @ngdoc event
	   * @name $location#$locationChangeStart
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted before a URL will change.
	   *
	   * This change can be prevented by calling
	   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
	   * details about event object. Upon successful change
	   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   *//**
	   * @ngdoc event
	   * @name $location#$locationChangeSuccess
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted after a URL was changed.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */this.$get=['$rootScope','$browser','$sniffer','$rootElement','$window',function($rootScope,$browser,$sniffer,$rootElement,$window){var $location,LocationMode,baseHref=$browser.baseHref(),// if base[href] is undefined, it defaults to ''
	initialUrl=$browser.url(),appBase;if(html5Mode.enabled){if(!baseHref&&html5Mode.requireBase){throw $locationMinErr('nobase','$location in HTML5 mode requires a <base> tag to be present!');}appBase=serverBase(initialUrl)+(baseHref||'/');LocationMode=$sniffer.history?LocationHtml5Url:LocationHashbangInHtml5Url;}else{appBase=stripHash(initialUrl);LocationMode=LocationHashbangUrl;}var appBaseNoFile=stripFile(appBase);$location=new LocationMode(appBase,appBaseNoFile,'#'+hashPrefix);$location.$$parseLinkUrl(initialUrl,initialUrl);$location.$$state=$browser.state();var IGNORE_URI_REGEXP=/^\s*(javascript|mailto):/i;function setBrowserUrlWithFallback(url,replace,state){var oldUrl=$location.url();var oldState=$location.$$state;try{$browser.url(url,replace,state);// Make sure $location.state() returns referentially identical (not just deeply equal)
	// state object; this makes possible quick checking if the state changed in the digest
	// loop. Checking deep equality would be too expensive.
	$location.$$state=$browser.state();}catch(e){// Restore old values if pushState fails
	$location.url(oldUrl);$location.$$state=oldState;throw e;}}$rootElement.on('click',function(event){var rewriteLinks=html5Mode.rewriteLinks;// TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
	// currently we open nice url link and redirect then
	if(!rewriteLinks||event.ctrlKey||event.metaKey||event.shiftKey||event.which===2||event.button===2)return;var elm=jqLite(event.target);// traverse the DOM up to find first A tag
	while(nodeName_(elm[0])!=='a'){// ignore rewriting if no A tag (reached root element, or no parent - removed from document)
	if(elm[0]===$rootElement[0]||!(elm=elm.parent())[0])return;}if(isString(rewriteLinks)&&isUndefined(elm.attr(rewriteLinks)))return;var absHref=elm.prop('href');// get the actual href attribute - see
	// http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
	var relHref=elm.attr('href')||elm.attr('xlink:href');if(isObject(absHref)&&absHref.toString()==='[object SVGAnimatedString]'){// SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
	// an animation.
	absHref=urlResolve(absHref.animVal).href;}// Ignore when url is started with javascript: or mailto:
	if(IGNORE_URI_REGEXP.test(absHref))return;if(absHref&&!elm.attr('target')&&!event.isDefaultPrevented()){if($location.$$parseLinkUrl(absHref,relHref)){// We do a preventDefault for all urls that are part of the angular application,
	// in html5mode and also without, so that we are able to abort navigation without
	// getting double entries in the location history.
	event.preventDefault();// update location manually
	if($location.absUrl()!==$browser.url()){$rootScope.$apply();// hack to work around FF6 bug 684208 when scenario runner clicks on links
	$window.angular['ff-684208-preventDefault']=true;}}}});// rewrite hashbang url <> html5 url
	if(trimEmptyHash($location.absUrl())!==trimEmptyHash(initialUrl)){$browser.url($location.absUrl(),true);}var initializing=true;// update $location when $browser url changes
	$browser.onUrlChange(function(newUrl,newState){if(!startsWith(newUrl,appBaseNoFile)){// If we are navigating outside of the app then force a reload
	$window.location.href=newUrl;return;}$rootScope.$evalAsync(function(){var oldUrl=$location.absUrl();var oldState=$location.$$state;var defaultPrevented;newUrl=trimEmptyHash(newUrl);$location.$$parse(newUrl);$location.$$state=newState;defaultPrevented=$rootScope.$broadcast('$locationChangeStart',newUrl,oldUrl,newState,oldState).defaultPrevented;// if the location was changed by a `$locationChangeStart` handler then stop
	// processing this location change
	if($location.absUrl()!==newUrl)return;if(defaultPrevented){$location.$$parse(oldUrl);$location.$$state=oldState;setBrowserUrlWithFallback(oldUrl,false,oldState);}else{initializing=false;afterLocationChange(oldUrl,oldState);}});if(!$rootScope.$$phase)$rootScope.$digest();});// update browser
	$rootScope.$watch(function $locationWatch(){var oldUrl=trimEmptyHash($browser.url());var newUrl=trimEmptyHash($location.absUrl());var oldState=$browser.state();var currentReplace=$location.$$replace;var urlOrStateChanged=oldUrl!==newUrl||$location.$$html5&&$sniffer.history&&oldState!==$location.$$state;if(initializing||urlOrStateChanged){initializing=false;$rootScope.$evalAsync(function(){var newUrl=$location.absUrl();var defaultPrevented=$rootScope.$broadcast('$locationChangeStart',newUrl,oldUrl,$location.$$state,oldState).defaultPrevented;// if the location was changed by a `$locationChangeStart` handler then stop
	// processing this location change
	if($location.absUrl()!==newUrl)return;if(defaultPrevented){$location.$$parse(oldUrl);$location.$$state=oldState;}else{if(urlOrStateChanged){setBrowserUrlWithFallback(newUrl,currentReplace,oldState===$location.$$state?null:$location.$$state);}afterLocationChange(oldUrl,oldState);}});}$location.$$replace=false;// we don't need to return anything because $evalAsync will make the digest loop dirty when
	// there is a change
	});return $location;function afterLocationChange(oldUrl,oldState){$rootScope.$broadcast('$locationChangeSuccess',$location.absUrl(),oldUrl,$location.$$state,oldState);}}];}/**
	 * @ngdoc service
	 * @name $log
	 * @requires $window
	 *
	 * @description
	 * Simple service for logging. Default implementation safely writes the message
	 * into the browser's console (if present).
	 *
	 * The main purpose of this service is to simplify debugging and troubleshooting.
	 *
	 * The default is to log `debug` messages. You can use
	 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
	 *
	 * @example
	   <example module="logExample" name="log-service">
	     <file name="script.js">
	       angular.module('logExample', [])
	         .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
	     </file>
	     <file name="index.html">
	       <div ng-controller="LogController">
	         <p>Reload this page with open console, enter text and hit the log button...</p>
	         <label>Message:
	         <input type="text" ng-model="message" /></label>
	         <button ng-click="$log.log(message)">log</button>
	         <button ng-click="$log.warn(message)">warn</button>
	         <button ng-click="$log.info(message)">info</button>
	         <button ng-click="$log.error(message)">error</button>
	         <button ng-click="$log.debug(message)">debug</button>
	       </div>
	     </file>
	   </example>
	 *//**
	 * @ngdoc provider
	 * @name $logProvider
	 * @this
	 *
	 * @description
	 * Use the `$logProvider` to configure how the application logs messages
	 */function $LogProvider(){var debug=true,self=this;/**
	   * @ngdoc method
	   * @name $logProvider#debugEnabled
	   * @description
	   * @param {boolean=} flag enable or disable debug level messages
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */this.debugEnabled=function(flag){if(isDefined(flag)){debug=flag;return this;}else{return debug;}};this.$get=['$window',function($window){return{/**
	       * @ngdoc method
	       * @name $log#log
	       *
	       * @description
	       * Write a log message
	       */log:consoleLog('log'),/**
	       * @ngdoc method
	       * @name $log#info
	       *
	       * @description
	       * Write an information message
	       */info:consoleLog('info'),/**
	       * @ngdoc method
	       * @name $log#warn
	       *
	       * @description
	       * Write a warning message
	       */warn:consoleLog('warn'),/**
	       * @ngdoc method
	       * @name $log#error
	       *
	       * @description
	       * Write an error message
	       */error:consoleLog('error'),/**
	       * @ngdoc method
	       * @name $log#debug
	       *
	       * @description
	       * Write a debug message
	       */debug:function(){var fn=consoleLog('debug');return function(){if(debug){fn.apply(self,arguments);}};}()};function formatError(arg){if(arg instanceof Error){if(arg.stack){arg=arg.message&&arg.stack.indexOf(arg.message)===-1?'Error: '+arg.message+'\n'+arg.stack:arg.stack;}else if(arg.sourceURL){arg=arg.message+'\n'+arg.sourceURL+':'+arg.line;}}return arg;}function consoleLog(type){var console=$window.console||{},logFn=console[type]||console.log||noop,hasApply=false;// Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
	// The reason behind this is that console.log has type "object" in IE8...
	try{hasApply=!!logFn.apply;}catch(e){/* empty */}if(hasApply){return function(){var args=[];forEach(arguments,function(arg){args.push(formatError(arg));});return logFn.apply(console,args);};}// we are IE which either doesn't have window.console => this is noop and we do nothing,
	// or we are IE where console.log doesn't have apply so we log at least first 2 args
	return function(arg1,arg2){logFn(arg1,arg2==null?'':arg2);};}}];}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var $parseMinErr=minErr('$parse');var objectValueOf={}.constructor.prototype.valueOf;// Sandboxing Angular Expressions
	// ------------------------------
	// Angular expressions are no longer sandboxed. So it is now even easier to access arbitrary JS code by
	// various means such as obtaining a reference to native JS functions like the Function constructor.
	//
	// As an example, consider the following Angular expression:
	//
	//   {}.toString.constructor('alert("evil JS code")')
	//
	// It is important to realize that if you create an expression from a string that contains user provided
	// content then it is possible that your application contains a security vulnerability to an XSS style attack.
	//
	// See https://docs.angularjs.org/guide/security
	function getStringValue(name){// Property names must be strings. This means that non-string objects cannot be used
	// as keys in an object. Any non-string object, including a number, is typecasted
	// into a string via the toString method.
	// -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
	//
	// So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
	// to a string. It's not always possible. If `name` is an object and its `toString` method is
	// 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
	//
	// TypeError: Cannot convert object to primitive value
	//
	// For performance reasons, we don't catch this error here and allow it to propagate up the call
	// stack. Note that you'll get the same error in JavaScript if you try to access a property using
	// such a 'broken' object as a key.
	return name+'';}var OPERATORS=createMap();forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '),function(operator){OPERATORS[operator]=true;});var ESCAPE={'n':'\n','f':'\f','r':'\r','t':'\t','v':'\v','\'':'\'','"':'"'};/////////////////////////////////////////
	/**
	 * @constructor
	 */var Lexer=function Lexer(options){this.options=options;};Lexer.prototype={constructor:Lexer,lex:function lex(text){this.text=text;this.index=0;this.tokens=[];while(this.index<this.text.length){var ch=this.text.charAt(this.index);if(ch==='"'||ch==='\''){this.readString(ch);}else if(this.isNumber(ch)||ch==='.'&&this.isNumber(this.peek())){this.readNumber();}else if(this.isIdentifierStart(this.peekMultichar())){this.readIdent();}else if(this.is(ch,'(){}[].,;:?')){this.tokens.push({index:this.index,text:ch});this.index++;}else if(this.isWhitespace(ch)){this.index++;}else{var ch2=ch+this.peek();var ch3=ch2+this.peek(2);var op1=OPERATORS[ch];var op2=OPERATORS[ch2];var op3=OPERATORS[ch3];if(op1||op2||op3){var token=op3?ch3:op2?ch2:ch;this.tokens.push({index:this.index,text:token,operator:true});this.index+=token.length;}else{this.throwError('Unexpected next character ',this.index,this.index+1);}}}return this.tokens;},is:function is(ch,chars){return chars.indexOf(ch)!==-1;},peek:function peek(i){var num=i||1;return this.index+num<this.text.length?this.text.charAt(this.index+num):false;},isNumber:function isNumber(ch){return'0'<=ch&&ch<='9'&&typeof ch==='string';},isWhitespace:function isWhitespace(ch){// IE treats non-breaking space as \u00A0
	return ch===' '||ch==='\r'||ch==='\t'||ch==='\n'||ch==='\v'||ch==='\xA0';},isIdentifierStart:function isIdentifierStart(ch){return this.options.isIdentifierStart?this.options.isIdentifierStart(ch,this.codePointAt(ch)):this.isValidIdentifierStart(ch);},isValidIdentifierStart:function isValidIdentifierStart(ch){return'a'<=ch&&ch<='z'||'A'<=ch&&ch<='Z'||'_'===ch||ch==='$';},isIdentifierContinue:function isIdentifierContinue(ch){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(ch,this.codePointAt(ch)):this.isValidIdentifierContinue(ch);},isValidIdentifierContinue:function isValidIdentifierContinue(ch,cp){return this.isValidIdentifierStart(ch,cp)||this.isNumber(ch);},codePointAt:function codePointAt(ch){if(ch.length===1)return ch.charCodeAt(0);// eslint-disable-next-line no-bitwise
	return(ch.charCodeAt(0)<<10)+ch.charCodeAt(1)-0x35FDC00;},peekMultichar:function peekMultichar(){var ch=this.text.charAt(this.index);var peek=this.peek();if(!peek){return ch;}var cp1=ch.charCodeAt(0);var cp2=peek.charCodeAt(0);if(cp1>=0xD800&&cp1<=0xDBFF&&cp2>=0xDC00&&cp2<=0xDFFF){return ch+peek;}return ch;},isExpOperator:function isExpOperator(ch){return ch==='-'||ch==='+'||this.isNumber(ch);},throwError:function throwError(error,start,end){end=end||this.index;var colStr=isDefined(start)?'s '+start+'-'+this.index+' ['+this.text.substring(start,end)+']':' '+end;throw $parseMinErr('lexerr','Lexer Error: {0} at column{1} in expression [{2}].',error,colStr,this.text);},readNumber:function readNumber(){var number='';var start=this.index;while(this.index<this.text.length){var ch=lowercase(this.text.charAt(this.index));if(ch==='.'||this.isNumber(ch)){number+=ch;}else{var peekCh=this.peek();if(ch==='e'&&this.isExpOperator(peekCh)){number+=ch;}else if(this.isExpOperator(ch)&&peekCh&&this.isNumber(peekCh)&&number.charAt(number.length-1)==='e'){number+=ch;}else if(this.isExpOperator(ch)&&(!peekCh||!this.isNumber(peekCh))&&number.charAt(number.length-1)==='e'){this.throwError('Invalid exponent');}else{break;}}this.index++;}this.tokens.push({index:start,text:number,constant:true,value:Number(number)});},readIdent:function readIdent(){var start=this.index;this.index+=this.peekMultichar().length;while(this.index<this.text.length){var ch=this.peekMultichar();if(!this.isIdentifierContinue(ch)){break;}this.index+=ch.length;}this.tokens.push({index:start,text:this.text.slice(start,this.index),identifier:true});},readString:function readString(quote){var start=this.index;this.index++;var string='';var rawString=quote;var escape=false;while(this.index<this.text.length){var ch=this.text.charAt(this.index);rawString+=ch;if(escape){if(ch==='u'){var hex=this.text.substring(this.index+1,this.index+5);if(!hex.match(/[\da-f]{4}/i)){this.throwError('Invalid unicode escape [\\u'+hex+']');}this.index+=4;string+=String.fromCharCode(parseInt(hex,16));}else{var rep=ESCAPE[ch];string=string+(rep||ch);}escape=false;}else if(ch==='\\'){escape=true;}else if(ch===quote){this.index++;this.tokens.push({index:start,text:rawString,constant:true,value:string});return;}else{string+=ch;}this.index++;}this.throwError('Unterminated quote',start);}};var AST=function AST(lexer,options){this.lexer=lexer;this.options=options;};AST.Program='Program';AST.ExpressionStatement='ExpressionStatement';AST.AssignmentExpression='AssignmentExpression';AST.ConditionalExpression='ConditionalExpression';AST.LogicalExpression='LogicalExpression';AST.BinaryExpression='BinaryExpression';AST.UnaryExpression='UnaryExpression';AST.CallExpression='CallExpression';AST.MemberExpression='MemberExpression';AST.Identifier='Identifier';AST.Literal='Literal';AST.ArrayExpression='ArrayExpression';AST.Property='Property';AST.ObjectExpression='ObjectExpression';AST.ThisExpression='ThisExpression';AST.LocalsExpression='LocalsExpression';// Internal use only
	AST.NGValueParameter='NGValueParameter';AST.prototype={ast:function ast(text){this.text=text;this.tokens=this.lexer.lex(text);var value=this.program();if(this.tokens.length!==0){this.throwError('is an unexpected token',this.tokens[0]);}return value;},program:function program(){var body=[];while(true){if(this.tokens.length>0&&!this.peek('}',')',';',']'))body.push(this.expressionStatement());if(!this.expect(';')){return{type:AST.Program,body:body};}}},expressionStatement:function expressionStatement(){return{type:AST.ExpressionStatement,expression:this.filterChain()};},filterChain:function filterChain(){var left=this.expression();while(this.expect('|')){left=this.filter(left);}return left;},expression:function expression(){return this.assignment();},assignment:function assignment(){var result=this.ternary();if(this.expect('=')){if(!isAssignable(result)){throw $parseMinErr('lval','Trying to assign a value to a non l-value');}result={type:AST.AssignmentExpression,left:result,right:this.assignment(),operator:'='};}return result;},ternary:function ternary(){var test=this.logicalOR();var alternate;var consequent;if(this.expect('?')){alternate=this.expression();if(this.consume(':')){consequent=this.expression();return{type:AST.ConditionalExpression,test:test,alternate:alternate,consequent:consequent};}}return test;},logicalOR:function logicalOR(){var left=this.logicalAND();while(this.expect('||')){left={type:AST.LogicalExpression,operator:'||',left:left,right:this.logicalAND()};}return left;},logicalAND:function logicalAND(){var left=this.equality();while(this.expect('&&')){left={type:AST.LogicalExpression,operator:'&&',left:left,right:this.equality()};}return left;},equality:function equality(){var left=this.relational();var token;while(token=this.expect('==','!=','===','!==')){left={type:AST.BinaryExpression,operator:token.text,left:left,right:this.relational()};}return left;},relational:function relational(){var left=this.additive();var token;while(token=this.expect('<','>','<=','>=')){left={type:AST.BinaryExpression,operator:token.text,left:left,right:this.additive()};}return left;},additive:function additive(){var left=this.multiplicative();var token;while(token=this.expect('+','-')){left={type:AST.BinaryExpression,operator:token.text,left:left,right:this.multiplicative()};}return left;},multiplicative:function multiplicative(){var left=this.unary();var token;while(token=this.expect('*','/','%')){left={type:AST.BinaryExpression,operator:token.text,left:left,right:this.unary()};}return left;},unary:function unary(){var token;if(token=this.expect('+','-','!')){return{type:AST.UnaryExpression,operator:token.text,prefix:true,argument:this.unary()};}else{return this.primary();}},primary:function primary(){var primary;if(this.expect('(')){primary=this.filterChain();this.consume(')');}else if(this.expect('[')){primary=this.arrayDeclaration();}else if(this.expect('{')){primary=this.object();}else if(this.selfReferential.hasOwnProperty(this.peek().text)){primary=copy(this.selfReferential[this.consume().text]);}else if(this.options.literals.hasOwnProperty(this.peek().text)){primary={type:AST.Literal,value:this.options.literals[this.consume().text]};}else if(this.peek().identifier){primary=this.identifier();}else if(this.peek().constant){primary=this.constant();}else{this.throwError('not a primary expression',this.peek());}var next;while(next=this.expect('(','[','.')){if(next.text==='('){primary={type:AST.CallExpression,callee:primary,arguments:this.parseArguments()};this.consume(')');}else if(next.text==='['){primary={type:AST.MemberExpression,object:primary,property:this.expression(),computed:true};this.consume(']');}else if(next.text==='.'){primary={type:AST.MemberExpression,object:primary,property:this.identifier(),computed:false};}else{this.throwError('IMPOSSIBLE');}}return primary;},filter:function filter(baseExpression){var args=[baseExpression];var result={type:AST.CallExpression,callee:this.identifier(),arguments:args,filter:true};while(this.expect(':')){args.push(this.expression());}return result;},parseArguments:function parseArguments(){var args=[];if(this.peekToken().text!==')'){do{args.push(this.filterChain());}while(this.expect(','));}return args;},identifier:function identifier(){var token=this.consume();if(!token.identifier){this.throwError('is not a valid identifier',token);}return{type:AST.Identifier,name:token.text};},constant:function constant(){// TODO check that it is a constant
	return{type:AST.Literal,value:this.consume().value};},arrayDeclaration:function arrayDeclaration(){var elements=[];if(this.peekToken().text!==']'){do{if(this.peek(']')){// Support trailing commas per ES5.1.
	break;}elements.push(this.expression());}while(this.expect(','));}this.consume(']');return{type:AST.ArrayExpression,elements:elements};},object:function object(){var properties=[],property;if(this.peekToken().text!=='}'){do{if(this.peek('}')){// Support trailing commas per ES5.1.
	break;}property={type:AST.Property,kind:'init'};if(this.peek().constant){property.key=this.constant();property.computed=false;this.consume(':');property.value=this.expression();}else if(this.peek().identifier){property.key=this.identifier();property.computed=false;if(this.peek(':')){this.consume(':');property.value=this.expression();}else{property.value=property.key;}}else if(this.peek('[')){this.consume('[');property.key=this.expression();this.consume(']');property.computed=true;this.consume(':');property.value=this.expression();}else{this.throwError('invalid key',this.peek());}properties.push(property);}while(this.expect(','));}this.consume('}');return{type:AST.ObjectExpression,properties:properties};},throwError:function throwError(msg,token){throw $parseMinErr('syntax','Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',token.text,msg,token.index+1,this.text,this.text.substring(token.index));},consume:function consume(e1){if(this.tokens.length===0){throw $parseMinErr('ueoe','Unexpected end of expression: {0}',this.text);}var token=this.expect(e1);if(!token){this.throwError('is unexpected, expecting ['+e1+']',this.peek());}return token;},peekToken:function peekToken(){if(this.tokens.length===0){throw $parseMinErr('ueoe','Unexpected end of expression: {0}',this.text);}return this.tokens[0];},peek:function peek(e1,e2,e3,e4){return this.peekAhead(0,e1,e2,e3,e4);},peekAhead:function peekAhead(i,e1,e2,e3,e4){if(this.tokens.length>i){var token=this.tokens[i];var t=token.text;if(t===e1||t===e2||t===e3||t===e4||!e1&&!e2&&!e3&&!e4){return token;}}return false;},expect:function expect(e1,e2,e3,e4){var token=this.peek(e1,e2,e3,e4);if(token){this.tokens.shift();return token;}return false;},selfReferential:{'this':{type:AST.ThisExpression},'$locals':{type:AST.LocalsExpression}}};function ifDefined(v,d){return typeof v!=='undefined'?v:d;}function plusFn(l,r){if(typeof l==='undefined')return r;if(typeof r==='undefined')return l;return l+r;}function isStateless($filter,filterName){var fn=$filter(filterName);return!fn.$stateful;}function findConstantAndWatchExpressions(ast,$filter){var allConstants;var argsToWatch;var isStatelessFilter;switch(ast.type){case AST.Program:allConstants=true;forEach(ast.body,function(expr){findConstantAndWatchExpressions(expr.expression,$filter);allConstants=allConstants&&expr.expression.constant;});ast.constant=allConstants;break;case AST.Literal:ast.constant=true;ast.toWatch=[];break;case AST.UnaryExpression:findConstantAndWatchExpressions(ast.argument,$filter);ast.constant=ast.argument.constant;ast.toWatch=ast.argument.toWatch;break;case AST.BinaryExpression:findConstantAndWatchExpressions(ast.left,$filter);findConstantAndWatchExpressions(ast.right,$filter);ast.constant=ast.left.constant&&ast.right.constant;ast.toWatch=ast.left.toWatch.concat(ast.right.toWatch);break;case AST.LogicalExpression:findConstantAndWatchExpressions(ast.left,$filter);findConstantAndWatchExpressions(ast.right,$filter);ast.constant=ast.left.constant&&ast.right.constant;ast.toWatch=ast.constant?[]:[ast];break;case AST.ConditionalExpression:findConstantAndWatchExpressions(ast.test,$filter);findConstantAndWatchExpressions(ast.alternate,$filter);findConstantAndWatchExpressions(ast.consequent,$filter);ast.constant=ast.test.constant&&ast.alternate.constant&&ast.consequent.constant;ast.toWatch=ast.constant?[]:[ast];break;case AST.Identifier:ast.constant=false;ast.toWatch=[ast];break;case AST.MemberExpression:findConstantAndWatchExpressions(ast.object,$filter);if(ast.computed){findConstantAndWatchExpressions(ast.property,$filter);}ast.constant=ast.object.constant&&(!ast.computed||ast.property.constant);ast.toWatch=[ast];break;case AST.CallExpression:isStatelessFilter=ast.filter?isStateless($filter,ast.callee.name):false;allConstants=isStatelessFilter;argsToWatch=[];forEach(ast.arguments,function(expr){findConstantAndWatchExpressions(expr,$filter);allConstants=allConstants&&expr.constant;if(!expr.constant){argsToWatch.push.apply(argsToWatch,expr.toWatch);}});ast.constant=allConstants;ast.toWatch=isStatelessFilter?argsToWatch:[ast];break;case AST.AssignmentExpression:findConstantAndWatchExpressions(ast.left,$filter);findConstantAndWatchExpressions(ast.right,$filter);ast.constant=ast.left.constant&&ast.right.constant;ast.toWatch=[ast];break;case AST.ArrayExpression:allConstants=true;argsToWatch=[];forEach(ast.elements,function(expr){findConstantAndWatchExpressions(expr,$filter);allConstants=allConstants&&expr.constant;if(!expr.constant){argsToWatch.push.apply(argsToWatch,expr.toWatch);}});ast.constant=allConstants;ast.toWatch=argsToWatch;break;case AST.ObjectExpression:allConstants=true;argsToWatch=[];forEach(ast.properties,function(property){findConstantAndWatchExpressions(property.value,$filter);allConstants=allConstants&&property.value.constant&&!property.computed;if(!property.value.constant){argsToWatch.push.apply(argsToWatch,property.value.toWatch);}});ast.constant=allConstants;ast.toWatch=argsToWatch;break;case AST.ThisExpression:ast.constant=false;ast.toWatch=[];break;case AST.LocalsExpression:ast.constant=false;ast.toWatch=[];break;}}function getInputs(body){if(body.length!==1)return;var lastExpression=body[0].expression;var candidate=lastExpression.toWatch;if(candidate.length!==1)return candidate;return candidate[0]!==lastExpression?candidate:undefined;}function isAssignable(ast){return ast.type===AST.Identifier||ast.type===AST.MemberExpression;}function assignableAST(ast){if(ast.body.length===1&&isAssignable(ast.body[0].expression)){return{type:AST.AssignmentExpression,left:ast.body[0].expression,right:{type:AST.NGValueParameter},operator:'='};}}function isLiteral(ast){return ast.body.length===0||ast.body.length===1&&(ast.body[0].expression.type===AST.Literal||ast.body[0].expression.type===AST.ArrayExpression||ast.body[0].expression.type===AST.ObjectExpression);}function isConstant(ast){return ast.constant;}function ASTCompiler(astBuilder,$filter){this.astBuilder=astBuilder;this.$filter=$filter;}ASTCompiler.prototype={compile:function compile(expression){var self=this;var ast=this.astBuilder.ast(expression);this.state={nextId:0,filters:{},fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]};findConstantAndWatchExpressions(ast,self.$filter);var extra='';var assignable;this.stage='assign';if(assignable=assignableAST(ast)){this.state.computing='assign';var result=this.nextId();this.recurse(assignable,result);this.return_(result);extra='fn.assign='+this.generateFunction('assign','s,v,l');}var toWatch=getInputs(ast.body);self.stage='inputs';forEach(toWatch,function(watch,key){var fnKey='fn'+key;self.state[fnKey]={vars:[],body:[],own:{}};self.state.computing=fnKey;var intoId=self.nextId();self.recurse(watch,intoId);self.return_(intoId);self.state.inputs.push(fnKey);watch.watchId=key;});this.state.computing='fn';this.stage='main';this.recurse(ast);var fnString=// The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
	// This is a workaround for this until we do a better job at only removing the prefix only when we should.
	'"'+this.USE+' '+this.STRICT+'";\n'+this.filterPrefix()+'var fn='+this.generateFunction('fn','s,l,a,i')+extra+this.watchFns()+'return fn;';// eslint-disable-next-line no-new-func
	var fn=new Function('$filter','getStringValue','ifDefined','plus',fnString)(this.$filter,getStringValue,ifDefined,plusFn);this.state=this.stage=undefined;fn.literal=isLiteral(ast);fn.constant=isConstant(ast);return fn;},USE:'use',STRICT:'strict',watchFns:function watchFns(){var result=[];var fns=this.state.inputs;var self=this;forEach(fns,function(name){result.push('var '+name+'='+self.generateFunction(name,'s'));});if(fns.length){result.push('fn.inputs=['+fns.join(',')+'];');}return result.join('');},generateFunction:function generateFunction(name,params){return'function('+params+'){'+this.varsPrefix(name)+this.body(name)+'};';},filterPrefix:function filterPrefix(){var parts=[];var self=this;forEach(this.state.filters,function(id,filter){parts.push(id+'=$filter('+self.escape(filter)+')');});if(parts.length)return'var '+parts.join(',')+';';return'';},varsPrefix:function varsPrefix(section){return this.state[section].vars.length?'var '+this.state[section].vars.join(',')+';':'';},body:function body(section){return this.state[section].body.join('');},recurse:function recurse(ast,intoId,nameId,recursionFn,create,skipWatchIdCheck){var left,right,self=this,args,expression,computed;recursionFn=recursionFn||noop;if(!skipWatchIdCheck&&isDefined(ast.watchId)){intoId=intoId||this.nextId();this.if_('i',this.lazyAssign(intoId,this.computedMember('i',ast.watchId)),this.lazyRecurse(ast,intoId,nameId,recursionFn,create,true));return;}switch(ast.type){case AST.Program:forEach(ast.body,function(expression,pos){self.recurse(expression.expression,undefined,undefined,function(expr){right=expr;});if(pos!==ast.body.length-1){self.current().body.push(right,';');}else{self.return_(right);}});break;case AST.Literal:expression=this.escape(ast.value);this.assign(intoId,expression);recursionFn(intoId||expression);break;case AST.UnaryExpression:this.recurse(ast.argument,undefined,undefined,function(expr){right=expr;});expression=ast.operator+'('+this.ifDefined(right,0)+')';this.assign(intoId,expression);recursionFn(expression);break;case AST.BinaryExpression:this.recurse(ast.left,undefined,undefined,function(expr){left=expr;});this.recurse(ast.right,undefined,undefined,function(expr){right=expr;});if(ast.operator==='+'){expression=this.plus(left,right);}else if(ast.operator==='-'){expression=this.ifDefined(left,0)+ast.operator+this.ifDefined(right,0);}else{expression='('+left+')'+ast.operator+'('+right+')';}this.assign(intoId,expression);recursionFn(expression);break;case AST.LogicalExpression:intoId=intoId||this.nextId();self.recurse(ast.left,intoId);self.if_(ast.operator==='&&'?intoId:self.not(intoId),self.lazyRecurse(ast.right,intoId));recursionFn(intoId);break;case AST.ConditionalExpression:intoId=intoId||this.nextId();self.recurse(ast.test,intoId);self.if_(intoId,self.lazyRecurse(ast.alternate,intoId),self.lazyRecurse(ast.consequent,intoId));recursionFn(intoId);break;case AST.Identifier:intoId=intoId||this.nextId();if(nameId){nameId.context=self.stage==='inputs'?'s':this.assign(this.nextId(),this.getHasOwnProperty('l',ast.name)+'?l:s');nameId.computed=false;nameId.name=ast.name;}self.if_(self.stage==='inputs'||self.not(self.getHasOwnProperty('l',ast.name)),function(){self.if_(self.stage==='inputs'||'s',function(){if(create&&create!==1){self.if_(self.isNull(self.nonComputedMember('s',ast.name)),self.lazyAssign(self.nonComputedMember('s',ast.name),'{}'));}self.assign(intoId,self.nonComputedMember('s',ast.name));});},intoId&&self.lazyAssign(intoId,self.nonComputedMember('l',ast.name)));recursionFn(intoId);break;case AST.MemberExpression:left=nameId&&(nameId.context=this.nextId())||this.nextId();intoId=intoId||this.nextId();self.recurse(ast.object,left,undefined,function(){self.if_(self.notNull(left),function(){if(ast.computed){right=self.nextId();self.recurse(ast.property,right);self.getStringValue(right);if(create&&create!==1){self.if_(self.not(self.computedMember(left,right)),self.lazyAssign(self.computedMember(left,right),'{}'));}expression=self.computedMember(left,right);self.assign(intoId,expression);if(nameId){nameId.computed=true;nameId.name=right;}}else{if(create&&create!==1){self.if_(self.isNull(self.nonComputedMember(left,ast.property.name)),self.lazyAssign(self.nonComputedMember(left,ast.property.name),'{}'));}expression=self.nonComputedMember(left,ast.property.name);self.assign(intoId,expression);if(nameId){nameId.computed=false;nameId.name=ast.property.name;}}},function(){self.assign(intoId,'undefined');});recursionFn(intoId);},!!create);break;case AST.CallExpression:intoId=intoId||this.nextId();if(ast.filter){right=self.filter(ast.callee.name);args=[];forEach(ast.arguments,function(expr){var argument=self.nextId();self.recurse(expr,argument);args.push(argument);});expression=right+'('+args.join(',')+')';self.assign(intoId,expression);recursionFn(intoId);}else{right=self.nextId();left={};args=[];self.recurse(ast.callee,right,left,function(){self.if_(self.notNull(right),function(){forEach(ast.arguments,function(expr){self.recurse(expr,ast.constant?undefined:self.nextId(),undefined,function(argument){args.push(argument);});});if(left.name){expression=self.member(left.context,left.name,left.computed)+'('+args.join(',')+')';}else{expression=right+'('+args.join(',')+')';}self.assign(intoId,expression);},function(){self.assign(intoId,'undefined');});recursionFn(intoId);});}break;case AST.AssignmentExpression:right=this.nextId();left={};this.recurse(ast.left,undefined,left,function(){self.if_(self.notNull(left.context),function(){self.recurse(ast.right,right);expression=self.member(left.context,left.name,left.computed)+ast.operator+right;self.assign(intoId,expression);recursionFn(intoId||expression);});},1);break;case AST.ArrayExpression:args=[];forEach(ast.elements,function(expr){self.recurse(expr,ast.constant?undefined:self.nextId(),undefined,function(argument){args.push(argument);});});expression='['+args.join(',')+']';this.assign(intoId,expression);recursionFn(intoId||expression);break;case AST.ObjectExpression:args=[];computed=false;forEach(ast.properties,function(property){if(property.computed){computed=true;}});if(computed){intoId=intoId||this.nextId();this.assign(intoId,'{}');forEach(ast.properties,function(property){if(property.computed){left=self.nextId();self.recurse(property.key,left);}else{left=property.key.type===AST.Identifier?property.key.name:''+property.key.value;}right=self.nextId();self.recurse(property.value,right);self.assign(self.member(intoId,left,property.computed),right);});}else{forEach(ast.properties,function(property){self.recurse(property.value,ast.constant?undefined:self.nextId(),undefined,function(expr){args.push(self.escape(property.key.type===AST.Identifier?property.key.name:''+property.key.value)+':'+expr);});});expression='{'+args.join(',')+'}';this.assign(intoId,expression);}recursionFn(intoId||expression);break;case AST.ThisExpression:this.assign(intoId,'s');recursionFn(intoId||'s');break;case AST.LocalsExpression:this.assign(intoId,'l');recursionFn(intoId||'l');break;case AST.NGValueParameter:this.assign(intoId,'v');recursionFn(intoId||'v');break;}},getHasOwnProperty:function getHasOwnProperty(element,property){var key=element+'.'+property;var own=this.current().own;if(!own.hasOwnProperty(key)){own[key]=this.nextId(false,element+'&&('+this.escape(property)+' in '+element+')');}return own[key];},assign:function assign(id,value){if(!id)return;this.current().body.push(id,'=',value,';');return id;},filter:function filter(filterName){if(!this.state.filters.hasOwnProperty(filterName)){this.state.filters[filterName]=this.nextId(true);}return this.state.filters[filterName];},ifDefined:function ifDefined(id,defaultValue){return'ifDefined('+id+','+this.escape(defaultValue)+')';},plus:function plus(left,right){return'plus('+left+','+right+')';},return_:function return_(id){this.current().body.push('return ',id,';');},if_:function if_(test,alternate,consequent){if(test===true){alternate();}else{var body=this.current().body;body.push('if(',test,'){');alternate();body.push('}');if(consequent){body.push('else{');consequent();body.push('}');}}},not:function not(expression){return'!('+expression+')';},isNull:function isNull(expression){return expression+'==null';},notNull:function notNull(expression){return expression+'!=null';},nonComputedMember:function nonComputedMember(left,right){var SAFE_IDENTIFIER=/^[$_a-zA-Z][$_a-zA-Z0-9]*$/;var UNSAFE_CHARACTERS=/[^$_a-zA-Z0-9]/g;if(SAFE_IDENTIFIER.test(right)){return left+'.'+right;}else{return left+'["'+right.replace(UNSAFE_CHARACTERS,this.stringEscapeFn)+'"]';}},computedMember:function computedMember(left,right){return left+'['+right+']';},member:function member(left,right,computed){if(computed)return this.computedMember(left,right);return this.nonComputedMember(left,right);},getStringValue:function getStringValue(item){this.assign(item,'getStringValue('+item+')');},lazyRecurse:function lazyRecurse(ast,intoId,nameId,recursionFn,create,skipWatchIdCheck){var self=this;return function(){self.recurse(ast,intoId,nameId,recursionFn,create,skipWatchIdCheck);};},lazyAssign:function lazyAssign(id,value){var self=this;return function(){self.assign(id,value);};},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function stringEscapeFn(c){return'\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);},escape:function escape(value){if(isString(value))return'\''+value.replace(this.stringEscapeRegex,this.stringEscapeFn)+'\'';if(isNumber(value))return value.toString();if(value===true)return'true';if(value===false)return'false';if(value===null)return'null';if(typeof value==='undefined')return'undefined';throw $parseMinErr('esc','IMPOSSIBLE');},nextId:function nextId(skip,init){var id='v'+this.state.nextId++;if(!skip){this.current().vars.push(id+(init?'='+init:''));}return id;},current:function current(){return this.state[this.state.computing];}};function ASTInterpreter(astBuilder,$filter){this.astBuilder=astBuilder;this.$filter=$filter;}ASTInterpreter.prototype={compile:function compile(expression){var self=this;var ast=this.astBuilder.ast(expression);findConstantAndWatchExpressions(ast,self.$filter);var assignable;var assign;if(assignable=assignableAST(ast)){assign=this.recurse(assignable);}var toWatch=getInputs(ast.body);var inputs;if(toWatch){inputs=[];forEach(toWatch,function(watch,key){var input=self.recurse(watch);watch.input=input;inputs.push(input);watch.watchId=key;});}var expressions=[];forEach(ast.body,function(expression){expressions.push(self.recurse(expression.expression));});var fn=ast.body.length===0?noop:ast.body.length===1?expressions[0]:function(scope,locals){var lastValue;forEach(expressions,function(exp){lastValue=exp(scope,locals);});return lastValue;};if(assign){fn.assign=function(scope,value,locals){return assign(scope,locals,value);};}if(inputs){fn.inputs=inputs;}fn.literal=isLiteral(ast);fn.constant=isConstant(ast);return fn;},recurse:function recurse(ast,context,create){var left,right,self=this,args;if(ast.input){return this.inputs(ast.input,ast.watchId);}switch(ast.type){case AST.Literal:return this.value(ast.value,context);case AST.UnaryExpression:right=this.recurse(ast.argument);return this['unary'+ast.operator](right,context);case AST.BinaryExpression:left=this.recurse(ast.left);right=this.recurse(ast.right);return this['binary'+ast.operator](left,right,context);case AST.LogicalExpression:left=this.recurse(ast.left);right=this.recurse(ast.right);return this['binary'+ast.operator](left,right,context);case AST.ConditionalExpression:return this['ternary?:'](this.recurse(ast.test),this.recurse(ast.alternate),this.recurse(ast.consequent),context);case AST.Identifier:return self.identifier(ast.name,context,create);case AST.MemberExpression:left=this.recurse(ast.object,false,!!create);if(!ast.computed){right=ast.property.name;}if(ast.computed)right=this.recurse(ast.property);return ast.computed?this.computedMember(left,right,context,create):this.nonComputedMember(left,right,context,create);case AST.CallExpression:args=[];forEach(ast.arguments,function(expr){args.push(self.recurse(expr));});if(ast.filter)right=this.$filter(ast.callee.name);if(!ast.filter)right=this.recurse(ast.callee,true);return ast.filter?function(scope,locals,assign,inputs){var values=[];for(var i=0;i<args.length;++i){values.push(args[i](scope,locals,assign,inputs));}var value=right.apply(undefined,values,inputs);return context?{context:undefined,name:undefined,value:value}:value;}:function(scope,locals,assign,inputs){var rhs=right(scope,locals,assign,inputs);var value;if(rhs.value!=null){var values=[];for(var i=0;i<args.length;++i){values.push(args[i](scope,locals,assign,inputs));}value=rhs.value.apply(rhs.context,values);}return context?{value:value}:value;};case AST.AssignmentExpression:left=this.recurse(ast.left,true,1);right=this.recurse(ast.right);return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);var rhs=right(scope,locals,assign,inputs);lhs.context[lhs.name]=rhs;return context?{value:rhs}:rhs;};case AST.ArrayExpression:args=[];forEach(ast.elements,function(expr){args.push(self.recurse(expr));});return function(scope,locals,assign,inputs){var value=[];for(var i=0;i<args.length;++i){value.push(args[i](scope,locals,assign,inputs));}return context?{value:value}:value;};case AST.ObjectExpression:args=[];forEach(ast.properties,function(property){if(property.computed){args.push({key:self.recurse(property.key),computed:true,value:self.recurse(property.value)});}else{args.push({key:property.key.type===AST.Identifier?property.key.name:''+property.key.value,computed:false,value:self.recurse(property.value)});}});return function(scope,locals,assign,inputs){var value={};for(var i=0;i<args.length;++i){if(args[i].computed){value[args[i].key(scope,locals,assign,inputs)]=args[i].value(scope,locals,assign,inputs);}else{value[args[i].key]=args[i].value(scope,locals,assign,inputs);}}return context?{value:value}:value;};case AST.ThisExpression:return function(scope){return context?{value:scope}:scope;};case AST.LocalsExpression:return function(scope,locals){return context?{value:locals}:locals;};case AST.NGValueParameter:return function(scope,locals,assign){return context?{value:assign}:assign;};}},'unary+':function unary(argument,context){return function(scope,locals,assign,inputs){var arg=argument(scope,locals,assign,inputs);if(isDefined(arg)){arg=+arg;}else{arg=0;}return context?{value:arg}:arg;};},'unary-':function unary(argument,context){return function(scope,locals,assign,inputs){var arg=argument(scope,locals,assign,inputs);if(isDefined(arg)){arg=-arg;}else{arg=-0;}return context?{value:arg}:arg;};},'unary!':function unary(argument,context){return function(scope,locals,assign,inputs){var arg=!argument(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary+':function binary(left,right,context){return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);var rhs=right(scope,locals,assign,inputs);var arg=plusFn(lhs,rhs);return context?{value:arg}:arg;};},'binary-':function binary(left,right,context){return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);var rhs=right(scope,locals,assign,inputs);var arg=(isDefined(lhs)?lhs:0)-(isDefined(rhs)?rhs:0);return context?{value:arg}:arg;};},'binary*':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)*right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary/':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)/right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary%':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)%right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary===':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)===right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary!==':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)!==right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary==':function binary(left,right,context){return function(scope,locals,assign,inputs){// eslint-disable-next-line eqeqeq
	var arg=left(scope,locals,assign,inputs)==right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary!=':function binary(left,right,context){return function(scope,locals,assign,inputs){// eslint-disable-next-line eqeqeq
	var arg=left(scope,locals,assign,inputs)!=right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary<':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)<right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary>':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)>right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary<=':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)<=right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary>=':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)>=right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary&&':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)&&right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary||':function binary(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)||right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'ternary?:':function ternary(test,alternate,consequent,context){return function(scope,locals,assign,inputs){var arg=test(scope,locals,assign,inputs)?alternate(scope,locals,assign,inputs):consequent(scope,locals,assign,inputs);return context?{value:arg}:arg;};},value:function value(_value2,context){return function(){return context?{context:undefined,name:undefined,value:_value2}:_value2;};},identifier:function identifier(name,context,create){return function(scope,locals,assign,inputs){var base=locals&&name in locals?locals:scope;if(create&&create!==1&&base&&base[name]==null){base[name]={};}var value=base?base[name]:undefined;if(context){return{context:base,name:name,value:value};}else{return value;}};},computedMember:function computedMember(left,right,context,create){return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);var rhs;var value;if(lhs!=null){rhs=right(scope,locals,assign,inputs);rhs=getStringValue(rhs);if(create&&create!==1){if(lhs&&!lhs[rhs]){lhs[rhs]={};}}value=lhs[rhs];}if(context){return{context:lhs,name:rhs,value:value};}else{return value;}};},nonComputedMember:function nonComputedMember(left,right,context,create){return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);if(create&&create!==1){if(lhs&&lhs[right]==null){lhs[right]={};}}var value=lhs!=null?lhs[right]:undefined;if(context){return{context:lhs,name:right,value:value};}else{return value;}};},inputs:function inputs(input,watchId){return function(scope,value,locals,inputs){if(inputs)return inputs[watchId];return input(scope,value,locals);};}};/**
	 * @constructor
	 */var Parser=function Parser(lexer,$filter,options){this.lexer=lexer;this.$filter=$filter;this.options=options;this.ast=new AST(lexer,options);this.astCompiler=options.csp?new ASTInterpreter(this.ast,$filter):new ASTCompiler(this.ast,$filter);};Parser.prototype={constructor:Parser,parse:function parse(text){return this.astCompiler.compile(text);}};function getValueOf(value){return isFunction(value.valueOf)?value.valueOf():objectValueOf.call(value);}///////////////////////////////////
	/**
	 * @ngdoc service
	 * @name $parse
	 * @kind function
	 *
	 * @description
	 *
	 * Converts Angular {@link guide/expression expression} into a function.
	 *
	 * ```js
	 *   var getter = $parse('user.name');
	 *   var setter = getter.assign;
	 *   var context = {user:{name:'angular'}};
	 *   var locals = {user:{name:'local'}};
	 *
	 *   expect(getter(context)).toEqual('angular');
	 *   setter(context, 'newValue');
	 *   expect(context.user.name).toEqual('newValue');
	 *   expect(getter(context, locals)).toEqual('local');
	 * ```
	 *
	 *
	 * @param {string} expression String expression to compile.
	 * @returns {function(context, locals)} a function which represents the compiled expression:
	 *
	 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	 *      are evaluated against (typically a scope object).
	 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	 *      `context`.
	 *
	 *    The returned function also has the following properties:
	 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
	 *        literal.
	 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
	 *        constant literals.
	 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
	 *        set to a function to change its value on the given context.
	 *
	 *//**
	 * @ngdoc provider
	 * @name $parseProvider
	 * @this
	 *
	 * @description
	 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
	 *  service.
	 */function $ParseProvider(){var cache=createMap();var literals={'true':true,'false':false,'null':null,'undefined':undefined};var identStart,identContinue;/**
	   * @ngdoc method
	   * @name $parseProvider#addLiteral
	   * @description
	   *
	   * Configure $parse service to add literal values that will be present as literal at expressions.
	   *
	   * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
	   * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
	   *
	   **/this.addLiteral=function(literalName,literalValue){literals[literalName]=literalValue;};/**
	  * @ngdoc method
	  * @name $parseProvider#setIdentifierFns
	  *
	  * @description
	  *
	  * Allows defining the set of characters that are allowed in Angular expressions. The function
	  * `identifierStart` will get called to know if a given character is a valid character to be the
	  * first character for an identifier. The function `identifierContinue` will get called to know if
	  * a given character is a valid character to be a follow-up identifier character. The functions
	  * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
	  * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
	  * mind that the `string` parameter can be two characters long depending on the character
	  * representation. It is expected for the function to return `true` or `false`, whether that
	  * character is allowed or not.
	  *
	  * Since this function will be called extensively, keep the implementation of these functions fast,
	  * as the performance of these functions have a direct impact on the expressions parsing speed.
	  *
	  * @param {function=} identifierStart The function that will decide whether the given character is
	  *   a valid identifier start character.
	  * @param {function=} identifierContinue The function that will decide whether the given character is
	  *   a valid identifier continue character.
	  */this.setIdentifierFns=function(identifierStart,identifierContinue){identStart=identifierStart;identContinue=identifierContinue;return this;};this.$get=['$filter',function($filter){var noUnsafeEval=csp().noUnsafeEval;var $parseOptions={csp:noUnsafeEval,literals:copy(literals),isIdentifierStart:isFunction(identStart)&&identStart,isIdentifierContinue:isFunction(identContinue)&&identContinue};return $parse;function $parse(exp,interceptorFn){var parsedExpression,oneTime,cacheKey;switch(typeof exp==='undefined'?'undefined':_typeof(exp)){case'string':exp=exp.trim();cacheKey=exp;parsedExpression=cache[cacheKey];if(!parsedExpression){if(exp.charAt(0)===':'&&exp.charAt(1)===':'){oneTime=true;exp=exp.substring(2);}var lexer=new Lexer($parseOptions);var parser=new Parser(lexer,$filter,$parseOptions);parsedExpression=parser.parse(exp);if(parsedExpression.constant){parsedExpression.$$watchDelegate=constantWatchDelegate;}else if(oneTime){parsedExpression.$$watchDelegate=parsedExpression.literal?oneTimeLiteralWatchDelegate:oneTimeWatchDelegate;}else if(parsedExpression.inputs){parsedExpression.$$watchDelegate=inputsWatchDelegate;}cache[cacheKey]=parsedExpression;}return addInterceptor(parsedExpression,interceptorFn);case'function':return addInterceptor(exp,interceptorFn);default:return addInterceptor(noop,interceptorFn);}}function expressionInputDirtyCheck(newValue,oldValueOfValue){if(newValue==null||oldValueOfValue==null){// null/undefined
	return newValue===oldValueOfValue;}if((typeof newValue==='undefined'?'undefined':_typeof(newValue))==='object'){// attempt to convert the value to a primitive type
	// TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
	//             be cheaply dirty-checked
	newValue=getValueOf(newValue);if((typeof newValue==='undefined'?'undefined':_typeof(newValue))==='object'){// objects/arrays are not supported - deep-watching them would be too expensive
	return false;}// fall-through to the primitive equality check
	}//Primitive or NaN
	// eslint-disable-next-line no-self-compare
	return newValue===oldValueOfValue||newValue!==newValue&&oldValueOfValue!==oldValueOfValue;}function inputsWatchDelegate(scope,listener,objectEquality,parsedExpression,prettyPrintExpression){var inputExpressions=parsedExpression.inputs;var lastResult;if(inputExpressions.length===1){var oldInputValueOf=expressionInputDirtyCheck;// init to something unique so that equals check fails
	inputExpressions=inputExpressions[0];return scope.$watch(function expressionInputWatch(scope){var newInputValue=inputExpressions(scope);if(!expressionInputDirtyCheck(newInputValue,oldInputValueOf)){lastResult=parsedExpression(scope,undefined,undefined,[newInputValue]);oldInputValueOf=newInputValue&&getValueOf(newInputValue);}return lastResult;},listener,objectEquality,prettyPrintExpression);}var oldInputValueOfValues=[];var oldInputValues=[];for(var i=0,ii=inputExpressions.length;i<ii;i++){oldInputValueOfValues[i]=expressionInputDirtyCheck;// init to something unique so that equals check fails
	oldInputValues[i]=null;}return scope.$watch(function expressionInputsWatch(scope){var changed=false;for(var i=0,ii=inputExpressions.length;i<ii;i++){var newInputValue=inputExpressions[i](scope);if(changed||(changed=!expressionInputDirtyCheck(newInputValue,oldInputValueOfValues[i]))){oldInputValues[i]=newInputValue;oldInputValueOfValues[i]=newInputValue&&getValueOf(newInputValue);}}if(changed){lastResult=parsedExpression(scope,undefined,undefined,oldInputValues);}return lastResult;},listener,objectEquality,prettyPrintExpression);}function oneTimeWatchDelegate(scope,listener,objectEquality,parsedExpression,prettyPrintExpression){var unwatch,lastValue;if(parsedExpression.inputs){unwatch=inputsWatchDelegate(scope,oneTimeListener,objectEquality,parsedExpression,prettyPrintExpression);}else{unwatch=scope.$watch(oneTimeWatch,oneTimeListener,objectEquality);}return unwatch;function oneTimeWatch(scope){return parsedExpression(scope);}function oneTimeListener(value,old,scope){lastValue=value;if(isFunction(listener)){listener(value,old,scope);}if(isDefined(value)){scope.$$postDigest(function(){if(isDefined(lastValue)){unwatch();}});}}}function oneTimeLiteralWatchDelegate(scope,listener,objectEquality,parsedExpression){var unwatch,lastValue;unwatch=scope.$watch(function oneTimeWatch(scope){return parsedExpression(scope);},function oneTimeListener(value,old,scope){lastValue=value;if(isFunction(listener)){listener(value,old,scope);}if(isAllDefined(value)){scope.$$postDigest(function(){if(isAllDefined(lastValue))unwatch();});}},objectEquality);return unwatch;function isAllDefined(value){var allDefined=true;forEach(value,function(val){if(!isDefined(val))allDefined=false;});return allDefined;}}function constantWatchDelegate(scope,listener,objectEquality,parsedExpression){var unwatch=scope.$watch(function constantWatch(scope){unwatch();return parsedExpression(scope);},listener,objectEquality);return unwatch;}function addInterceptor(parsedExpression,interceptorFn){if(!interceptorFn)return parsedExpression;var watchDelegate=parsedExpression.$$watchDelegate;var useInputs=false;var regularWatch=watchDelegate!==oneTimeLiteralWatchDelegate&&watchDelegate!==oneTimeWatchDelegate;var fn=regularWatch?function regularInterceptedExpression(scope,locals,assign,inputs){var value=useInputs&&inputs?inputs[0]:parsedExpression(scope,locals,assign,inputs);return interceptorFn(value,scope,locals);}:function oneTimeInterceptedExpression(scope,locals,assign,inputs){var value=parsedExpression(scope,locals,assign,inputs);var result=interceptorFn(value,scope,locals);// we only return the interceptor's result if the
	// initial value is defined (for bind-once)
	return isDefined(value)?result:value;};// Propagate $$watchDelegates other then inputsWatchDelegate
	useInputs=!parsedExpression.inputs;if(parsedExpression.$$watchDelegate&&parsedExpression.$$watchDelegate!==inputsWatchDelegate){fn.$$watchDelegate=parsedExpression.$$watchDelegate;fn.inputs=parsedExpression.inputs;}else if(!interceptorFn.$stateful){// If there is an interceptor, but no watchDelegate then treat the interceptor like
	// we treat filters - it is assumed to be a pure function unless flagged with $stateful
	fn.$$watchDelegate=inputsWatchDelegate;fn.inputs=parsedExpression.inputs?parsedExpression.inputs:[parsedExpression];}return fn;}}];}/**
	 * @ngdoc service
	 * @name $q
	 * @requires $rootScope
	 *
	 * @description
	 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
	 * when they are done processing.
	 *
	 * This is a [Promises/A+](https://promisesaplus.com/)-compliant implementation of promises/deferred
	 * objects inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
	 *
	 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
	 * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
	 *
	 * # $q constructor
	 *
	 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
	 * function as the first argument. This is similar to the native Promise implementation from ES6,
	 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
	 *
	 * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
	 * available yet.
	 *
	 * It can be used like so:
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
	 * ```
	 *
	 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
	 *
	 * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
	 *
	 * However, the more traditional CommonJS-style usage is still available, and documented below.
	 *
	 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
	 * interface for interacting with an object that represents the result of an action that is
	 * performed asynchronously, and may or may not be finished at any given point in time.
	 *
	 * From the perspective of dealing with error handling, deferred and promise APIs are to
	 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
	 * ```
	 *
	 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
	 * comes in the way of guarantees that promise and deferred APIs make, see
	 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
	 *
	 * Additionally the promise api allows for composition that is very hard to do with the
	 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
	 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
	 * section on serial or parallel joining of promises.
	 *
	 * # The Deferred API
	 *
	 * A new instance of deferred is constructed by calling `$q.defer()`.
	 *
	 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
	 * that can be used for signaling the successful or unsuccessful completion, as well as the status
	 * of the task.
	 *
	 * **Methods**
	 *
	 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
	 *   constructed via `$q.reject`, the promise will be rejected instead.
	 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
	 *   resolving it with a rejection constructed via `$q.reject`.
	 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
	 *   multiple times before the promise is either resolved or rejected.
	 *
	 * **Properties**
	 *
	 * - promise – `{Promise}` – promise object associated with this deferred.
	 *
	 *
	 * # The Promise API
	 *
	 * A new promise instance is created when a deferred instance is created and can be retrieved by
	 * calling `deferred.promise`.
	 *
	 * The purpose of the promise object is to allow for interested parties to get access to the result
	 * of the deferred task when it completes.
	 *
	 * **Methods**
	 *
	 * - `then(successCallback, [errorCallback], [notifyCallback])` – regardless of when the promise was or
	 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
	 *   as soon as the result is available. The callbacks are called with a single argument: the result
	 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
	 *   provide a progress indication, before the promise is resolved or rejected.
	 *
	 *   This method *returns a new promise* which is resolved or rejected via the return value of the
	 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
	 *   with the value which is resolved in that promise using
	 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
	 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
	 *   resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback
	 *   arguments are optional.
	 *
	 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
	 *
	 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
	 *   but to do so without modifying the final value. This is useful to release resources or do some
	 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
	 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
	 *   more information.
	 *
	 * # Chaining promises
	 *
	 * Because calling the `then` method of a promise returns a new derived promise, it is easily
	 * possible to create a chain of promises:
	 *
	 * ```js
	 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
	 *
	 *   // promiseB will be resolved immediately after promiseA is resolved and its value
	 *   // will be the result of promiseA incremented by 1
	 * ```
	 *
	 * It is possible to create chains of any length and since a promise can be resolved with another
	 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
	 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
	 * $http's response interceptors.
	 *
	 *
	 * # Differences between Kris Kowal's Q and $q
	 *
	 *  There are two main differences:
	 *
	 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
	 *   mechanism in angular, which means faster propagation of resolution or rejection into your
	 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
	 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
	 *   all the important functionality needed for common async tasks.
	 *
	 * # Testing
	 *
	 *  ```js
	 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
	 *  ```
	 *
	 * @param {function(function, function)} resolver Function which is responsible for resolving or
	 *   rejecting the newly created promise. The first parameter is a function which resolves the
	 *   promise, the second parameter is a function which rejects the promise.
	 *
	 * @returns {Promise} The newly created promise.
	 *//**
	 * @ngdoc provider
	 * @name $qProvider
	 * @this
	 *
	 * @description
	 */function $QProvider(){var errorOnUnhandledRejections=true;this.$get=['$rootScope','$exceptionHandler',function($rootScope,$exceptionHandler){return qFactory(function(callback){$rootScope.$evalAsync(callback);},$exceptionHandler,errorOnUnhandledRejections);}];/**
	   * @ngdoc method
	   * @name $qProvider#errorOnUnhandledRejections
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides whether to generate an error when a rejected promise is not handled.
	   *
	   * @param {boolean=} value Whether to generate an error when a rejected promise is not handled.
	   * @returns {boolean|ng.$qProvider} Current value when called without a new value or self for
	   *    chaining otherwise.
	   */this.errorOnUnhandledRejections=function(value){if(isDefined(value)){errorOnUnhandledRejections=value;return this;}else{return errorOnUnhandledRejections;}};}/** @this */function $$QProvider(){var errorOnUnhandledRejections=true;this.$get=['$browser','$exceptionHandler',function($browser,$exceptionHandler){return qFactory(function(callback){$browser.defer(callback);},$exceptionHandler,errorOnUnhandledRejections);}];this.errorOnUnhandledRejections=function(value){if(isDefined(value)){errorOnUnhandledRejections=value;return this;}else{return errorOnUnhandledRejections;}};}/**
	 * Constructs a promise manager.
	 *
	 * @param {function(function)} nextTick Function for executing functions in the next turn.
	 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
	 *     debugging purposes.
	 @ param {=boolean} errorOnUnhandledRejections Whether an error should be generated on unhandled
	 *     promises rejections.
	 * @returns {object} Promise manager.
	 */function qFactory(nextTick,exceptionHandler,errorOnUnhandledRejections){var $qMinErr=minErr('$q',TypeError);var queueSize=0;var checkQueue=[];/**
	   * @ngdoc method
	   * @name ng.$q#defer
	   * @kind function
	   *
	   * @description
	   * Creates a `Deferred` object which represents a task which will finish in the future.
	   *
	   * @returns {Deferred} Returns a new instance of deferred.
	   */function defer(){return new Deferred();}function Deferred(){var promise=this.promise=new Promise();//Non prototype methods necessary to support unbound execution :/
	this.resolve=function(val){resolvePromise(promise,val);};this.reject=function(reason){rejectPromise(promise,reason);};this.notify=function(progress){notifyPromise(promise,progress);};}function Promise(){this.$$state={status:0};}extend(Promise.prototype,{then:function then(onFulfilled,onRejected,progressBack){if(isUndefined(onFulfilled)&&isUndefined(onRejected)&&isUndefined(progressBack)){return this;}var result=new Promise();this.$$state.pending=this.$$state.pending||[];this.$$state.pending.push([result,onFulfilled,onRejected,progressBack]);if(this.$$state.status>0)scheduleProcessQueue(this.$$state);return result;},'catch':function _catch(callback){return this.then(null,callback);},'finally':function _finally(callback,progressBack){return this.then(function(value){return handleCallback(value,resolve,callback);},function(error){return handleCallback(error,reject,callback);},progressBack);}});function processQueue(state){var fn,promise,pending;pending=state.pending;state.processScheduled=false;state.pending=undefined;try{for(var i=0,ii=pending.length;i<ii;++i){state.pur=true;promise=pending[i][0];fn=pending[i][state.status];try{if(isFunction(fn)){resolvePromise(promise,fn(state.value));}else if(state.status===1){resolvePromise(promise,state.value);}else{rejectPromise(promise,state.value);}}catch(e){rejectPromise(promise,e);}}}finally{--queueSize;if(errorOnUnhandledRejections&&queueSize===0){nextTick(processChecks);}}}function processChecks(){// eslint-disable-next-line no-unmodified-loop-condition
	while(!queueSize&&checkQueue.length){var toCheck=checkQueue.shift();if(!toCheck.pur){toCheck.pur=true;var errorMessage='Possibly unhandled rejection: '+toDebugString(toCheck.value);exceptionHandler(errorMessage);}}}function scheduleProcessQueue(state){if(errorOnUnhandledRejections&&!state.pending&&state.status===2&&!state.pur){if(queueSize===0&&checkQueue.length===0){nextTick(processChecks);}checkQueue.push(state);}if(state.processScheduled||!state.pending)return;state.processScheduled=true;++queueSize;nextTick(function(){processQueue(state);});}function resolvePromise(promise,val){if(promise.$$state.status)return;if(val===promise){$$reject(promise,$qMinErr('qcycle','Expected promise to be resolved with value other than itself \'{0}\'',val));}else{$$resolve(promise,val);}}function $$resolve(promise,val){var then;var done=false;try{if(isObject(val)||isFunction(val))then=val.then;if(isFunction(then)){promise.$$state.status=-1;then.call(val,doResolve,doReject,doNotify);}else{promise.$$state.value=val;promise.$$state.status=1;scheduleProcessQueue(promise.$$state);}}catch(e){doReject(e);}function doResolve(val){if(done)return;done=true;$$resolve(promise,val);}function doReject(val){if(done)return;done=true;$$reject(promise,val);}function doNotify(progress){notifyPromise(promise,progress);}}function rejectPromise(promise,reason){if(promise.$$state.status)return;$$reject(promise,reason);}function $$reject(promise,reason){promise.$$state.value=reason;promise.$$state.status=2;scheduleProcessQueue(promise.$$state);}function notifyPromise(promise,progress){var callbacks=promise.$$state.pending;if(promise.$$state.status<=0&&callbacks&&callbacks.length){nextTick(function(){var callback,result;for(var i=0,ii=callbacks.length;i<ii;i++){result=callbacks[i][0];callback=callbacks[i][3];try{notifyPromise(result,isFunction(callback)?callback(progress):progress);}catch(e){exceptionHandler(e);}}});}}/**
	   * @ngdoc method
	   * @name $q#reject
	   * @kind function
	   *
	   * @description
	   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
	   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
	   * a promise chain, you don't need to worry about it.
	   *
	   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
	   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
	   * a promise error callback and you want to forward the error to the promise derived from the
	   * current promise, you have to "rethrow" the error by returning a rejection constructed via
	   * `reject`.
	   *
	   * ```js
	   *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
	   * ```
	   *
	   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
	   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
	   */function reject(reason){var result=new Promise();rejectPromise(result,reason);return result;}function handleCallback(value,resolver,callback){var callbackOutput=null;try{if(isFunction(callback))callbackOutput=callback();}catch(e){return reject(e);}if(isPromiseLike(callbackOutput)){return callbackOutput.then(function(){return resolver(value);},reject);}else{return resolver(value);}}/**
	   * @ngdoc method
	   * @name $q#when
	   * @kind function
	   *
	   * @description
	   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
	   * This is useful when you are dealing with an object that might or might not be a promise, or if
	   * the promise comes from a source that can't be trusted.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */function when(value,callback,errback,progressBack){var result=new Promise();resolvePromise(result,value);return result.then(callback,errback,progressBack);}/**
	   * @ngdoc method
	   * @name $q#resolve
	   * @kind function
	   *
	   * @description
	   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */var resolve=when;/**
	   * @ngdoc method
	   * @name $q#all
	   * @kind function
	   *
	   * @description
	   * Combines multiple promises into a single promise that is resolved when all of the input
	   * promises are resolved.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
	   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
	   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
	   *   with the same rejection value.
	   */function all(promises){var result=new Promise(),counter=0,results=isArray(promises)?[]:{};forEach(promises,function(promise,key){counter++;when(promise).then(function(value){results[key]=value;if(! --counter)resolvePromise(result,results);},function(reason){rejectPromise(result,reason);});});if(counter===0){resolvePromise(result,results);}return result;}/**
	   * @ngdoc method
	   * @name $q#race
	   * @kind function
	   *
	   * @description
	   * Returns a promise that resolves or rejects as soon as one of those promises
	   * resolves or rejects, with the value or reason from that promise.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} a promise that resolves or rejects as soon as one of the `promises`
	   * resolves or rejects, with the value or reason from that promise.
	   */function race(promises){var deferred=defer();forEach(promises,function(promise){when(promise).then(deferred.resolve,deferred.reject);});return deferred.promise;}function $Q(resolver){if(!isFunction(resolver)){throw $qMinErr('norslvr','Expected resolverFn, got \'{0}\'',resolver);}var promise=new Promise();function resolveFn(value){resolvePromise(promise,value);}function rejectFn(reason){rejectPromise(promise,reason);}resolver(resolveFn,rejectFn);return promise;}// Let's make the instanceof operator work for promises, so that
	// `new $q(fn) instanceof $q` would evaluate to true.
	$Q.prototype=Promise.prototype;$Q.defer=defer;$Q.reject=reject;$Q.when=when;$Q.resolve=resolve;$Q.all=all;$Q.race=race;return $Q;}/** @this */function $$RAFProvider(){//rAF
	this.$get=['$window','$timeout',function($window,$timeout){var requestAnimationFrame=$window.requestAnimationFrame||$window.webkitRequestAnimationFrame;var cancelAnimationFrame=$window.cancelAnimationFrame||$window.webkitCancelAnimationFrame||$window.webkitCancelRequestAnimationFrame;var rafSupported=!!requestAnimationFrame;var raf=rafSupported?function(fn){var id=requestAnimationFrame(fn);return function(){cancelAnimationFrame(id);};}:function(fn){var timer=$timeout(fn,16.66,false);// 1000 / 60 = 16.666
	return function(){$timeout.cancel(timer);};};raf.supported=rafSupported;return raf;}];}/**
	 * DESIGN NOTES
	 *
	 * The design decisions behind the scope are heavily favored for speed and memory consumption.
	 *
	 * The typical use of scope is to watch the expressions, which most of the time return the same
	 * value as last time so we optimize the operation.
	 *
	 * Closures construction is expensive in terms of speed as well as memory:
	 *   - No closures, instead use prototypical inheritance for API
	 *   - Internal state needs to be stored on scope directly, which means that private state is
	 *     exposed as $$____ properties
	 *
	 * Loop operations are optimized by using while(count--) { ... }
	 *   - This means that in order to keep the same order of execution as addition we have to add
	 *     items to the array at the beginning (unshift) instead of at the end (push)
	 *
	 * Child scopes are created and removed often
	 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
	 *
	 * There are fewer watches than observers. This is why you don't want the observer to be implemented
	 * in the same way as watch. Watch requires return of the initialization function which is expensive
	 * to construct.
	 *//**
	 * @ngdoc provider
	 * @name $rootScopeProvider
	 * @description
	 *
	 * Provider for the $rootScope service.
	 *//**
	 * @ngdoc method
	 * @name $rootScopeProvider#digestTtl
	 * @description
	 *
	 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
	 * assuming that the model is unstable.
	 *
	 * The current default is 10 iterations.
	 *
	 * In complex applications it's possible that the dependencies between `$watch`s will result in
	 * several digest iterations. However if an application needs more than the default 10 digest
	 * iterations for its model to stabilize then you should investigate what is causing the model to
	 * continuously change during the digest.
	 *
	 * Increasing the TTL could have performance implications, so you should not change it without
	 * proper justification.
	 *
	 * @param {number} limit The number of digest iterations.
	 *//**
	 * @ngdoc service
	 * @name $rootScope
	 * @this
	 *
	 * @description
	 *
	 * Every application has a single root {@link ng.$rootScope.Scope scope}.
	 * All other scopes are descendant scopes of the root scope. Scopes provide separation
	 * between the model and the view, via a mechanism for watching the model for changes.
	 * They also provide event emission/broadcast and subscription facility. See the
	 * {@link guide/scope developer guide on scopes}.
	 */function $RootScopeProvider(){var TTL=10;var $rootScopeMinErr=minErr('$rootScope');var lastDirtyWatch=null;var applyAsyncId=null;this.digestTtl=function(value){if(arguments.length){TTL=value;}return TTL;};function createChildScopeClass(parent){function ChildScope(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$id=nextUid();this.$$ChildScope=null;}ChildScope.prototype=parent;return ChildScope;}this.$get=['$exceptionHandler','$parse','$browser',function($exceptionHandler,$parse,$browser){function destroyChildScope($event){$event.currentScope.$$destroyed=true;}function cleanUpScope($scope){// Support: IE 9 only
	if(msie===9){// There is a memory leak in IE9 if all child scopes are not disconnected
	// completely when a scope is destroyed. So this code will recurse up through
	// all this scopes children
	//
	// See issue https://github.com/angular/angular.js/issues/10706
	if($scope.$$childHead){cleanUpScope($scope.$$childHead);}if($scope.$$nextSibling){cleanUpScope($scope.$$nextSibling);}}// The code below works around IE9 and V8's memory leaks
	//
	// See:
	// - https://code.google.com/p/v8/issues/detail?id=2073#c26
	// - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
	// - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
	$scope.$parent=$scope.$$nextSibling=$scope.$$prevSibling=$scope.$$childHead=$scope.$$childTail=$scope.$root=$scope.$$watchers=null;}/**
	     * @ngdoc type
	     * @name $rootScope.Scope
	     *
	     * @description
	     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
	     * {@link auto.$injector $injector}. Child scopes are created using the
	     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
	     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
	     * an in-depth introduction and usage examples.
	     *
	     *
	     * # Inheritance
	     * A scope can inherit from a parent scope, as in this example:
	     * ```js
	         var parent = $rootScope;
	         var child = parent.$new();

	         parent.salutation = "Hello";
	         expect(child.salutation).toEqual('Hello');

	         child.salutation = "Welcome";
	         expect(child.salutation).toEqual('Welcome');
	         expect(parent.salutation).toEqual('Hello');
	     * ```
	     *
	     * When interacting with `Scope` in tests, additional helper methods are available on the
	     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
	     * details.
	     *
	     *
	     * @param {Object.<string, function()>=} providers Map of service factory which need to be
	     *                                       provided for the current scope. Defaults to {@link ng}.
	     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
	     *                              append/override services provided by `providers`. This is handy
	     *                              when unit-testing and having the need to override a default
	     *                              service.
	     * @returns {Object} Newly created scope.
	     *
	     */function Scope(){this.$id=nextUid();this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this.$root=this;this.$$destroyed=false;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$$isolateBindings=null;}/**
	     * @ngdoc property
	     * @name $rootScope.Scope#$id
	     *
	     * @description
	     * Unique scope ID (monotonically increasing) useful for debugging.
	     *//**
	      * @ngdoc property
	      * @name $rootScope.Scope#$parent
	      *
	      * @description
	      * Reference to the parent scope.
	      *//**
	       * @ngdoc property
	       * @name $rootScope.Scope#$root
	       *
	       * @description
	       * Reference to the root scope.
	       */Scope.prototype={constructor:Scope,/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$new
	       * @kind function
	       *
	       * @description
	       * Creates a new child {@link ng.$rootScope.Scope scope}.
	       *
	       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
	       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
	       *
	       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
	       * desired for the scope and its child scopes to be permanently detached from the parent and
	       * thus stop participating in model change detection and listener notification by invoking.
	       *
	       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
	       *         parent scope. The scope is isolated, as it can not see parent scope properties.
	       *         When creating widgets, it is useful for the widget to not accidentally read parent
	       *         state.
	       *
	       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
	       *                              of the newly created scope. Defaults to `this` scope if not provided.
	       *                              This is used when creating a transclude scope to correctly place it
	       *                              in the scope hierarchy while maintaining the correct prototypical
	       *                              inheritance.
	       *
	       * @returns {Object} The newly created child scope.
	       *
	       */$new:function $new(isolate,parent){var child;parent=parent||this;if(isolate){child=new Scope();child.$root=this.$root;}else{// Only create a child scope class if somebody asks for one,
	// but cache it to allow the VM to optimize lookups.
	if(!this.$$ChildScope){this.$$ChildScope=createChildScopeClass(this);}child=new this.$$ChildScope();}child.$parent=parent;child.$$prevSibling=parent.$$childTail;if(parent.$$childHead){parent.$$childTail.$$nextSibling=child;parent.$$childTail=child;}else{parent.$$childHead=parent.$$childTail=child;}// When the new scope is not isolated or we inherit from `this`, and
	// the parent scope is destroyed, the property `$$destroyed` is inherited
	// prototypically. In all other cases, this property needs to be set
	// when the parent scope is destroyed.
	// The listener needs to be added after the parent is set
	if(isolate||parent!==this)child.$on('$destroy',destroyChildScope);return child;},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watch
	       * @kind function
	       *
	       * @description
	       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
	       *
	       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
	       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
	       *   its value when executed multiple times with the same input because it may be executed multiple
	       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
	       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).)
	       * - The `listener` is called only when the value from the current `watchExpression` and the
	       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
	       *   see below). Inequality is determined according to reference inequality,
	       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
	       *    via the `!==` Javascript operator, unless `objectEquality == true`
	       *   (see next point)
	       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
	       *   according to the {@link angular.equals} function. To save the value of the object for
	       *   later comparison, the {@link angular.copy} function is used. This therefore means that
	       *   watching complex objects will have adverse memory and performance implications.
	       * - This should not be used to watch for changes in objects that are
	       *   or contain [File](https://developer.mozilla.org/docs/Web/API/File) objects due to limitations with {@link angular.copy `angular.copy`}.
	       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
	       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
	       *   iteration limit is 10 to prevent an infinite loop deadlock.
	       *
	       *
	       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
	       * you can register a `watchExpression` function with no `listener`. (Be prepared for
	       * multiple calls to your `watchExpression` because it will execute multiple times in a
	       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
	       *
	       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
	       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
	       * watcher. In rare cases, this is undesirable because the listener is called when the result
	       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
	       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
	       * listener was called due to initialization.
	       *
	       *
	       *
	       * # Example
	       * ```js
	           // let's assume that scope was dependency injected as the $rootScope
	           var scope = $rootScope;
	           scope.name = 'misko';
	           scope.counter = 0;

	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);

	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);

	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);

	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);



	           // Using a function as a watchExpression
	           var food;
	           scope.foodCounter = 0;
	           expect(scope.foodCounter).toEqual(0);
	           scope.$watch(
	             // This function returns the value being watched. It is called for each turn of the $digest loop
	             function() { return food; },
	             // This is the change listener, called when the value returned from the above function changes
	             function(newValue, oldValue) {
	               if ( newValue !== oldValue ) {
	                 // Only increment the counter if the value changed
	                 scope.foodCounter = scope.foodCounter + 1;
	               }
	             }
	           );
	           // No digest has been run so the counter will be zero
	           expect(scope.foodCounter).toEqual(0);

	           // Run the digest but since food has not changed count will still be zero
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(0);

	           // Update food and run digest.  Now the counter will increment
	           food = 'cheeseburger';
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(1);

	       * ```
	       *
	       *
	       *
	       * @param {(function()|string)} watchExpression Expression that is evaluated on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
	       *    a call to the `listener`.
	       *
	       *    - `string`: Evaluated as {@link guide/expression expression}
	       *    - `function(scope)`: called with current `scope` as a parameter.
	       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
	       *    of `watchExpression` changes.
	       *
	       *    - `newVal` contains the current value of the `watchExpression`
	       *    - `oldVal` contains the previous value of the `watchExpression`
	       *    - `scope` refers to the current scope
	       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
	       *     comparing for reference equality.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */$watch:function $watch(watchExp,listener,objectEquality,prettyPrintExpression){var get=$parse(watchExp);if(get.$$watchDelegate){return get.$$watchDelegate(this,listener,objectEquality,get,watchExp);}var scope=this,array=scope.$$watchers,watcher={fn:listener,last:initWatchVal,get:get,exp:prettyPrintExpression||watchExp,eq:!!objectEquality};lastDirtyWatch=null;if(!isFunction(listener)){watcher.fn=noop;}if(!array){array=scope.$$watchers=[];}// we use unshift since we use a while loop in $digest for speed.
	// the while loop reads in reverse order.
	array.unshift(watcher);incrementWatchersCount(this,1);return function deregisterWatch(){if(arrayRemove(array,watcher)>=0){incrementWatchersCount(scope,-1);}lastDirtyWatch=null;};},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchGroup
	       * @kind function
	       *
	       * @description
	       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
	       * If any one expression in the collection changes the `listener` is executed.
	       *
	       * - The items in the `watchExpressions` array are observed via the standard `$watch` operation. Their return
	       *   values are examined for changes on every call to `$digest`.
	       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
	       *
	       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
	       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
	       *
	       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
	       *    expression in `watchExpressions` changes
	       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    The `scope` refers to the current scope.
	       * @returns {function()} Returns a de-registration function for all listeners.
	       */$watchGroup:function $watchGroup(watchExpressions,listener){var oldValues=new Array(watchExpressions.length);var newValues=new Array(watchExpressions.length);var deregisterFns=[];var self=this;var changeReactionScheduled=false;var firstRun=true;if(!watchExpressions.length){// No expressions means we call the listener ASAP
	var shouldCall=true;self.$evalAsync(function(){if(shouldCall)listener(newValues,newValues,self);});return function deregisterWatchGroup(){shouldCall=false;};}if(watchExpressions.length===1){// Special case size of one
	return this.$watch(watchExpressions[0],function watchGroupAction(value,oldValue,scope){newValues[0]=value;oldValues[0]=oldValue;listener(newValues,value===oldValue?newValues:oldValues,scope);});}forEach(watchExpressions,function(expr,i){var unwatchFn=self.$watch(expr,function watchGroupSubAction(value,oldValue){newValues[i]=value;oldValues[i]=oldValue;if(!changeReactionScheduled){changeReactionScheduled=true;self.$evalAsync(watchGroupAction);}});deregisterFns.push(unwatchFn);});function watchGroupAction(){changeReactionScheduled=false;if(firstRun){firstRun=false;listener(newValues,newValues,self);}else{listener(newValues,oldValues,self);}}return function deregisterWatchGroup(){while(deregisterFns.length){deregisterFns.shift()();}};},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchCollection
	       * @kind function
	       *
	       * @description
	       * Shallow watches the properties of an object and fires whenever any of the properties change
	       * (for arrays, this implies watching the array items; for object maps, this implies watching
	       * the properties). If a change is detected, the `listener` callback is fired.
	       *
	       * - The `obj` collection is observed via standard $watch operation and is examined on every
	       *   call to $digest() to see if any items have been added, removed, or moved.
	       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
	       *   adding, removing, and moving items belonging to an object or array.
	       *
	       *
	       * # Example
	       * ```js
	          $scope.names = ['igor', 'matias', 'misko', 'james'];
	          $scope.dataCount = 4;

	          $scope.$watchCollection('names', function(newNames, oldNames) {
	            $scope.dataCount = newNames.length;
	          });

	          expect($scope.dataCount).toEqual(4);
	          $scope.$digest();

	          //still at 4 ... no changes
	          expect($scope.dataCount).toEqual(4);

	          $scope.names.pop();
	          $scope.$digest();

	          //now there's been a change
	          expect($scope.dataCount).toEqual(3);
	       * ```
	       *
	       *
	       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
	       *    expression value should evaluate to an object or an array which is observed on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
	       *    collection will trigger a call to the `listener`.
	       *
	       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
	       *    when a change is detected.
	       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
	       *    - The `oldCollection` object is a copy of the former collection data.
	       *      Due to performance considerations, the`oldCollection` value is computed only if the
	       *      `listener` function declares two or more arguments.
	       *    - The `scope` argument refers to the current scope.
	       *
	       * @returns {function()} Returns a de-registration function for this listener. When the
	       *    de-registration function is executed, the internal watch operation is terminated.
	       */$watchCollection:function $watchCollection(obj,listener){$watchCollectionInterceptor.$stateful=true;var self=this;// the current value, updated on each dirty-check run
	var newValue;// a shallow copy of the newValue from the last dirty-check run,
	// updated to match newValue during dirty-check run
	var oldValue;// a shallow copy of the newValue from when the last change happened
	var veryOldValue;// only track veryOldValue if the listener is asking for it
	var trackVeryOldValue=listener.length>1;var changeDetected=0;var changeDetector=$parse(obj,$watchCollectionInterceptor);var internalArray=[];var internalObject={};var initRun=true;var oldLength=0;function $watchCollectionInterceptor(_value){newValue=_value;var newLength,key,bothNaN,newItem,oldItem;// If the new value is undefined, then return undefined as the watch may be a one-time watch
	if(isUndefined(newValue))return;if(!isObject(newValue)){// if primitive
	if(oldValue!==newValue){oldValue=newValue;changeDetected++;}}else if(isArrayLike(newValue)){if(oldValue!==internalArray){// we are transitioning from something which was not an array into array.
	oldValue=internalArray;oldLength=oldValue.length=0;changeDetected++;}newLength=newValue.length;if(oldLength!==newLength){// if lengths do not match we need to trigger change notification
	changeDetected++;oldValue.length=oldLength=newLength;}// copy the items to oldValue and look for changes.
	for(var i=0;i<newLength;i++){oldItem=oldValue[i];newItem=newValue[i];// eslint-disable-next-line no-self-compare
	bothNaN=oldItem!==oldItem&&newItem!==newItem;if(!bothNaN&&oldItem!==newItem){changeDetected++;oldValue[i]=newItem;}}}else{if(oldValue!==internalObject){// we are transitioning from something which was not an object into object.
	oldValue=internalObject={};oldLength=0;changeDetected++;}// copy the items to oldValue and look for changes.
	newLength=0;for(key in newValue){if(hasOwnProperty.call(newValue,key)){newLength++;newItem=newValue[key];oldItem=oldValue[key];if(key in oldValue){// eslint-disable-next-line no-self-compare
	bothNaN=oldItem!==oldItem&&newItem!==newItem;if(!bothNaN&&oldItem!==newItem){changeDetected++;oldValue[key]=newItem;}}else{oldLength++;oldValue[key]=newItem;changeDetected++;}}}if(oldLength>newLength){// we used to have more keys, need to find them and destroy them.
	changeDetected++;for(key in oldValue){if(!hasOwnProperty.call(newValue,key)){oldLength--;delete oldValue[key];}}}}return changeDetected;}function $watchCollectionAction(){if(initRun){initRun=false;listener(newValue,newValue,self);}else{listener(newValue,veryOldValue,self);}// make a copy for the next time a collection is changed
	if(trackVeryOldValue){if(!isObject(newValue)){//primitive
	veryOldValue=newValue;}else if(isArrayLike(newValue)){veryOldValue=new Array(newValue.length);for(var i=0;i<newValue.length;i++){veryOldValue[i]=newValue[i];}}else{// if object
	veryOldValue={};for(var key in newValue){if(hasOwnProperty.call(newValue,key)){veryOldValue[key]=newValue[key];}}}}}return this.$watch(changeDetector,$watchCollectionAction);},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$digest
	       * @kind function
	       *
	       * @description
	       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
	       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
	       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
	       * until no more listeners are firing. This means that it is possible to get into an infinite
	       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
	       * iterations exceeds 10.
	       *
	       * Usually, you don't call `$digest()` directly in
	       * {@link ng.directive:ngController controllers} or in
	       * {@link ng.$compileProvider#directive directives}.
	       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
	       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
	       *
	       * If you want to be notified whenever `$digest()` is called,
	       * you can register a `watchExpression` function with
	       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
	       *
	       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
	       *
	       * # Example
	       * ```js
	           var scope = ...;
	           scope.name = 'misko';
	           scope.counter = 0;

	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);

	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);

	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);

	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	       * ```
	       *
	       */$digest:function $digest(){var watch,value,last,fn,get,watchers,length,dirty,ttl=TTL,next,current,target=this,watchLog=[],logIdx,asyncTask;beginPhase('$digest');// Check for changes to browser url that happened in sync before the call to $digest
	$browser.$$checkUrlChange();if(this===$rootScope&&applyAsyncId!==null){// If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
	// cancel the scheduled $apply and flush the queue of expressions to be evaluated.
	$browser.defer.cancel(applyAsyncId);flushApplyAsync();}lastDirtyWatch=null;do{// "while dirty" loop
	dirty=false;current=target;// It's safe for asyncQueuePosition to be a local variable here because this loop can't
	// be reentered recursively. Calling $digest from a function passed to $applyAsync would
	// lead to a '$digest already in progress' error.
	for(var asyncQueuePosition=0;asyncQueuePosition<asyncQueue.length;asyncQueuePosition++){try{asyncTask=asyncQueue[asyncQueuePosition];asyncTask.scope.$eval(asyncTask.expression,asyncTask.locals);}catch(e){$exceptionHandler(e);}lastDirtyWatch=null;}asyncQueue.length=0;traverseScopesLoop:do{// "traverse the scopes" loop
	if(watchers=current.$$watchers){// process our watches
	length=watchers.length;while(length--){try{watch=watchers[length];// Most common watches are on primitives, in which case we can short
	// circuit it with === operator, only when === fails do we use .equals
	if(watch){get=watch.get;if((value=get(current))!==(last=watch.last)&&!(watch.eq?equals(value,last):isNumberNaN(value)&&isNumberNaN(last))){dirty=true;lastDirtyWatch=watch;watch.last=watch.eq?copy(value,null):value;fn=watch.fn;fn(value,last===initWatchVal?value:last,current);if(ttl<5){logIdx=4-ttl;if(!watchLog[logIdx])watchLog[logIdx]=[];watchLog[logIdx].push({msg:isFunction(watch.exp)?'fn: '+(watch.exp.name||watch.exp.toString()):watch.exp,newVal:value,oldVal:last});}}else if(watch===lastDirtyWatch){// If the most recently dirty watcher is now clean, short circuit since the remaining watchers
	// have already been tested.
	dirty=false;break traverseScopesLoop;}}}catch(e){$exceptionHandler(e);}}}// Insanity Warning: scope depth-first traversal
	// yes, this code is a bit crazy, but it works and we have tests to prove it!
	// this piece should be kept in sync with the traversal in $broadcast
	if(!(next=current.$$watchersCount&&current.$$childHead||current!==target&&current.$$nextSibling)){while(current!==target&&!(next=current.$$nextSibling)){current=current.$parent;}}}while(current=next);// `break traverseScopesLoop;` takes us to here
	if((dirty||asyncQueue.length)&&!ttl--){clearPhase();throw $rootScopeMinErr('infdig','{0} $digest() iterations reached. Aborting!\n'+'Watchers fired in the last 5 iterations: {1}',TTL,watchLog);}}while(dirty||asyncQueue.length);clearPhase();// postDigestQueuePosition isn't local here because this loop can be reentered recursively.
	while(postDigestQueuePosition<postDigestQueue.length){try{postDigestQueue[postDigestQueuePosition++]();}catch(e){$exceptionHandler(e);}}postDigestQueue.length=postDigestQueuePosition=0;},/**
	       * @ngdoc event
	       * @name $rootScope.Scope#$destroy
	       * @eventType broadcast on scope being destroyed
	       *
	       * @description
	       * Broadcasted when a scope and its children are being destroyed.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       *//**
	       * @ngdoc method
	       * @name $rootScope.Scope#$destroy
	       * @kind function
	       *
	       * @description
	       * Removes the current scope (and all of its children) from the parent scope. Removal implies
	       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
	       * propagate to the current scope and its children. Removal also implies that the current
	       * scope is eligible for garbage collection.
	       *
	       * The `$destroy()` is usually used by directives such as
	       * {@link ng.directive:ngRepeat ngRepeat} for managing the
	       * unrolling of the loop.
	       *
	       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
	       * Application code can register a `$destroy` event handler that will give it a chance to
	       * perform any necessary cleanup.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */$destroy:function $destroy(){// We can't destroy a scope that has been already destroyed.
	if(this.$$destroyed)return;var parent=this.$parent;this.$broadcast('$destroy');this.$$destroyed=true;if(this===$rootScope){//Remove handlers attached to window when $rootScope is removed
	$browser.$$applicationDestroyed();}incrementWatchersCount(this,-this.$$watchersCount);for(var eventName in this.$$listenerCount){decrementListenerCount(this,this.$$listenerCount[eventName],eventName);}// sever all the references to parent scopes (after this cleanup, the current scope should
	// not be retained by any of our references and should be eligible for garbage collection)
	if(parent&&parent.$$childHead===this)parent.$$childHead=this.$$nextSibling;if(parent&&parent.$$childTail===this)parent.$$childTail=this.$$prevSibling;if(this.$$prevSibling)this.$$prevSibling.$$nextSibling=this.$$nextSibling;if(this.$$nextSibling)this.$$nextSibling.$$prevSibling=this.$$prevSibling;// Disable listeners, watchers and apply/digest methods
	this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=noop;this.$on=this.$watch=this.$watchGroup=function(){return noop;};this.$$listeners={};// Disconnect the next sibling to prevent `cleanUpScope` destroying those too
	this.$$nextSibling=null;cleanUpScope(this);},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$eval
	       * @kind function
	       *
	       * @description
	       * Executes the `expression` on the current scope and returns the result. Any exceptions in
	       * the expression are propagated (uncaught). This is useful when evaluating Angular
	       * expressions.
	       *
	       * # Example
	       * ```js
	           var scope = ng.$rootScope.Scope();
	           scope.a = 1;
	           scope.b = 2;

	           expect(scope.$eval('a+b')).toEqual(3);
	           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
	       * ```
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       * @returns {*} The result of evaluating the expression.
	       */$eval:function $eval(expr,locals){return $parse(expr)(this,locals);},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$evalAsync
	       * @kind function
	       *
	       * @description
	       * Executes the expression on the current scope at a later point in time.
	       *
	       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
	       * that:
	       *
	       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
	       *     rendering).
	       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
	       *     `expression` execution.
	       *
	       * Any exceptions from the execution of the expression are forwarded to the
	       * {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
	       * will be scheduled. However, it is encouraged to always call code that changes the model
	       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       */$evalAsync:function $evalAsync(expr,locals){// if we are outside of an $digest loop and this is the first time we are scheduling async
	// task also schedule async auto-flush
	if(!$rootScope.$$phase&&!asyncQueue.length){$browser.defer(function(){if(asyncQueue.length){$rootScope.$digest();}});}asyncQueue.push({scope:this,expression:$parse(expr),locals:locals});},$$postDigest:function $$postDigest(fn){postDigestQueue.push(fn);},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$apply
	       * @kind function
	       *
	       * @description
	       * `$apply()` is used to execute an expression in angular from outside of the angular
	       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
	       * Because we are calling into the angular framework we need to perform proper scope life
	       * cycle of {@link ng.$exceptionHandler exception handling},
	       * {@link ng.$rootScope.Scope#$digest executing watches}.
	       *
	       * ## Life cycle
	       *
	       * # Pseudo-Code of `$apply()`
	       * ```js
	           function $apply(expr) {
	             try {
	               return $eval(expr);
	             } catch (e) {
	               $exceptionHandler(e);
	             } finally {
	               $root.$digest();
	             }
	           }
	       * ```
	       *
	       *
	       * Scope's `$apply()` method transitions through the following stages:
	       *
	       * 1. The {@link guide/expression expression} is executed using the
	       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
	       * 2. Any exceptions from the execution of the expression are forwarded to the
	       *    {@link ng.$exceptionHandler $exceptionHandler} service.
	       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
	       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
	       *
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       *
	       * @returns {*} The result of evaluating the expression.
	       */$apply:function $apply(expr){try{beginPhase('$apply');try{return this.$eval(expr);}finally{clearPhase();}}catch(e){$exceptionHandler(e);}finally{try{$rootScope.$digest();}catch(e){$exceptionHandler(e);// eslint-disable-next-line no-unsafe-finally
	throw e;}}},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$applyAsync
	       * @kind function
	       *
	       * @description
	       * Schedule the invocation of $apply to occur at a later time. The actual time difference
	       * varies across browsers, but is typically around ~10 milliseconds.
	       *
	       * This can be used to queue up multiple expressions which need to be evaluated in the same
	       * digest.
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       */$applyAsync:function $applyAsync(expr){var scope=this;if(expr){applyAsyncQueue.push($applyAsyncExpression);}expr=$parse(expr);scheduleApplyAsync();function $applyAsyncExpression(){scope.$eval(expr);}},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$on
	       * @kind function
	       *
	       * @description
	       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
	       * discussion of event life cycle.
	       *
	       * The event listener function format is: `function(event, args...)`. The `event` object
	       * passed into the listener has the following attributes:
	       *
	       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
	       *     `$broadcast`-ed.
	       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
	       *     event propagates through the scope hierarchy, this property is set to null.
	       *   - `name` - `{string}`: name of the event.
	       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
	       *     further event propagation (available only for events that were `$emit`-ed).
	       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
	       *     to true.
	       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
	       *
	       * @param {string} name Event name to listen on.
	       * @param {function(event, ...args)} listener Function to call when the event is emitted.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */$on:function $on(name,listener){var namedListeners=this.$$listeners[name];if(!namedListeners){this.$$listeners[name]=namedListeners=[];}namedListeners.push(listener);var current=this;do{if(!current.$$listenerCount[name]){current.$$listenerCount[name]=0;}current.$$listenerCount[name]++;}while(current=current.$parent);var self=this;return function(){var indexOfListener=namedListeners.indexOf(listener);if(indexOfListener!==-1){namedListeners[indexOfListener]=null;decrementListenerCount(self,1,name);}};},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$emit
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` upwards through the scope hierarchy notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$emit` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
	       * registered listeners along the way. The event will stop propagating if one of the listeners
	       * cancels it.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to emit.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
	       */$emit:function $emit(name,args){var empty=[],namedListeners,scope=this,_stopPropagation=false,event={name:name,targetScope:scope,stopPropagation:function stopPropagation(){_stopPropagation=true;},preventDefault:function preventDefault(){event.defaultPrevented=true;},defaultPrevented:false},listenerArgs=concat([event],arguments,1),i,length;do{namedListeners=scope.$$listeners[name]||empty;event.currentScope=scope;for(i=0,length=namedListeners.length;i<length;i++){// if listeners were deregistered, defragment the array
	if(!namedListeners[i]){namedListeners.splice(i,1);i--;length--;continue;}try{//allow all listeners attached to the current scope to run
	namedListeners[i].apply(null,listenerArgs);}catch(e){$exceptionHandler(e);}}//if any listener on the current scope stops propagation, prevent bubbling
	if(_stopPropagation){event.currentScope=null;return event;}//traverse upwards
	scope=scope.$parent;}while(scope);event.currentScope=null;return event;},/**
	       * @ngdoc method
	       * @name $rootScope.Scope#$broadcast
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$broadcast` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
	       * scope and calls all registered listeners along the way. The event cannot be canceled.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to broadcast.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
	       */$broadcast:function $broadcast(name,args){var target=this,current=target,next=target,event={name:name,targetScope:target,preventDefault:function preventDefault(){event.defaultPrevented=true;},defaultPrevented:false};if(!target.$$listenerCount[name])return event;var listenerArgs=concat([event],arguments,1),listeners,i,length;//down while you can, then up and next sibling or up and next sibling until back at root
	while(current=next){event.currentScope=current;listeners=current.$$listeners[name]||[];for(i=0,length=listeners.length;i<length;i++){// if listeners were deregistered, defragment the array
	if(!listeners[i]){listeners.splice(i,1);i--;length--;continue;}try{listeners[i].apply(null,listenerArgs);}catch(e){$exceptionHandler(e);}}// Insanity Warning: scope depth-first traversal
	// yes, this code is a bit crazy, but it works and we have tests to prove it!
	// this piece should be kept in sync with the traversal in $digest
	// (though it differs due to having the extra check for $$listenerCount)
	if(!(next=current.$$listenerCount[name]&&current.$$childHead||current!==target&&current.$$nextSibling)){while(current!==target&&!(next=current.$$nextSibling)){current=current.$parent;}}}event.currentScope=null;return event;}};var $rootScope=new Scope();//The internal queues. Expose them on the $rootScope for debugging/testing purposes.
	var asyncQueue=$rootScope.$$asyncQueue=[];var postDigestQueue=$rootScope.$$postDigestQueue=[];var applyAsyncQueue=$rootScope.$$applyAsyncQueue=[];var postDigestQueuePosition=0;return $rootScope;function beginPhase(phase){if($rootScope.$$phase){throw $rootScopeMinErr('inprog','{0} already in progress',$rootScope.$$phase);}$rootScope.$$phase=phase;}function clearPhase(){$rootScope.$$phase=null;}function incrementWatchersCount(current,count){do{current.$$watchersCount+=count;}while(current=current.$parent);}function decrementListenerCount(current,count,name){do{current.$$listenerCount[name]-=count;if(current.$$listenerCount[name]===0){delete current.$$listenerCount[name];}}while(current=current.$parent);}/**
	     * function used as an initial value for watchers.
	     * because it's unique we can easily tell it apart from other values
	     */function initWatchVal(){}function flushApplyAsync(){while(applyAsyncQueue.length){try{applyAsyncQueue.shift()();}catch(e){$exceptionHandler(e);}}applyAsyncId=null;}function scheduleApplyAsync(){if(applyAsyncId===null){applyAsyncId=$browser.defer(function(){$rootScope.$apply(flushApplyAsync);});}}}];}/**
	 * @ngdoc service
	 * @name $rootElement
	 *
	 * @description
	 * The root element of Angular application. This is either the element where {@link
	 * ng.directive:ngApp ngApp} was declared or the element passed into
	 * {@link angular.bootstrap}. The element represents the root element of application. It is also the
	 * location where the application's {@link auto.$injector $injector} service gets
	 * published, and can be retrieved using `$rootElement.injector()`.
	 */// the implementation is in angular.bootstrap
	/**
	 * @this
	 * @description
	 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
	 */function $$SanitizeUriProvider(){var aHrefSanitizationWhitelist=/^\s*(https?|ftp|mailto|tel|file):/,imgSrcSanitizationWhitelist=/^\s*((https?|ftp|file|blob):|data:image\/)/;/**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */this.aHrefSanitizationWhitelist=function(regexp){if(isDefined(regexp)){aHrefSanitizationWhitelist=regexp;return this;}return aHrefSanitizationWhitelist;};/**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */this.imgSrcSanitizationWhitelist=function(regexp){if(isDefined(regexp)){imgSrcSanitizationWhitelist=regexp;return this;}return imgSrcSanitizationWhitelist;};this.$get=function(){return function sanitizeUri(uri,isImage){var regex=isImage?imgSrcSanitizationWhitelist:aHrefSanitizationWhitelist;var normalizedVal;normalizedVal=urlResolve(uri).href;if(normalizedVal!==''&&!normalizedVal.match(regex)){return'unsafe:'+normalizedVal;}return uri;};};}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* exported $SceProvider, $SceDelegateProvider */var $sceMinErr=minErr('$sce');var SCE_CONTEXTS={HTML:'html',CSS:'css',URL:'url',// RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
	// url.  (e.g. ng-include, script src, templateUrl)
	RESOURCE_URL:'resourceUrl',JS:'js'};// Helper functions follow.
	var UNDERSCORE_LOWERCASE_REGEXP=/_([a-z])/g;function snakeToCamel(name){return name.replace(UNDERSCORE_LOWERCASE_REGEXP,fnCamelCaseReplace);}function adjustMatcher(matcher){if(matcher==='self'){return matcher;}else if(isString(matcher)){// Strings match exactly except for 2 wildcards - '*' and '**'.
	// '*' matches any character except those from the set ':/.?&'.
	// '**' matches any character (like .* in a RegExp).
	// More than 2 *'s raises an error as it's ill defined.
	if(matcher.indexOf('***')>-1){throw $sceMinErr('iwcard','Illegal sequence *** in string matcher.  String: {0}',matcher);}matcher=escapeForRegexp(matcher).replace(/\\\*\\\*/g,'.*').replace(/\\\*/g,'[^:/.?&;]*');return new RegExp('^'+matcher+'$');}else if(isRegExp(matcher)){// The only other type of matcher allowed is a Regexp.
	// Match entire URL / disallow partial matches.
	// Flags are reset (i.e. no global, ignoreCase or multiline)
	return new RegExp('^'+matcher.source+'$');}else{throw $sceMinErr('imatcher','Matchers may only be "self", string patterns or RegExp objects');}}function adjustMatchers(matchers){var adjustedMatchers=[];if(isDefined(matchers)){forEach(matchers,function(matcher){adjustedMatchers.push(adjustMatcher(matcher));});}return adjustedMatchers;}/**
	 * @ngdoc service
	 * @name $sceDelegate
	 * @kind function
	 *
	 * @description
	 *
	 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
	 * Contextual Escaping (SCE)} services to AngularJS.
	 *
	 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
	 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
	 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
	 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
	 * work because `$sce` delegates to `$sceDelegate` for these operations.
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
	 *
	 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
	 * can override it completely to change the behavior of `$sce`, the common case would
	 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
	 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
	 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
	 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *//**
	 * @ngdoc provider
	 * @name $sceDelegateProvider
	 * @this
	 *
	 * @description
	 *
	 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
	 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
	 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
	 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *
	 * For the general details about this service in Angular, read the main page for {@link ng.$sce
	 * Strict Contextual Escaping (SCE)}.
	 *
	 * **Example**:  Consider the following case. <a name="example"></a>
	 *
	 * - your app is hosted at url `http://myapp.example.com/`
	 * - but some of your templates are hosted on other domains you control such as
	 *   `http://srv01.assets.example.com/`, `http://srv02.assets.example.com/`, etc.
	 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
	 *
	 * Here is what a secure configuration for this scenario might look like:
	 *
	 * ```
	 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
	 * ```
	 */function $SceDelegateProvider(){this.SCE_CONTEXTS=SCE_CONTEXTS;// Resource URLs can also be trusted by policy.
	var resourceUrlWhitelist=['self'],resourceUrlBlacklist=[];/**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlWhitelist
	   * @kind function
	   *
	   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** an empty whitelist array will block all URLs!
	   *    </div>
	   *
	   * @return {Array} the currently set whitelist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
	   * same origin resource requests.
	   *
	   * @description
	   * Sets/Gets the whitelist of trusted resource URLs.
	   */this.resourceUrlWhitelist=function(value){if(arguments.length){resourceUrlWhitelist=adjustMatchers(value);}return resourceUrlWhitelist;};/**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlBlacklist
	   * @kind function
	   *
	   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    The typical usage for the blacklist is to **block
	   *    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
	   *    these would otherwise be trusted but actually return content from the redirected domain.
	   *
	   *    Finally, **the blacklist overrides the whitelist** and has the final say.
	   *
	   * @return {Array} the currently set blacklist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
	   * is no blacklist.)
	   *
	   * @description
	   * Sets/Gets the blacklist of trusted resource URLs.
	   */this.resourceUrlBlacklist=function(value){if(arguments.length){resourceUrlBlacklist=adjustMatchers(value);}return resourceUrlBlacklist;};this.$get=['$injector',function($injector){var htmlSanitizer=function htmlSanitizer(html){throw $sceMinErr('unsafe','Attempting to use an unsafe value in a safe context.');};if($injector.has('$sanitize')){htmlSanitizer=$injector.get('$sanitize');}function matchUrl(matcher,parsedUrl){if(matcher==='self'){return urlIsSameOrigin(parsedUrl);}else{// definitely a regex.  See adjustMatchers()
	return!!matcher.exec(parsedUrl.href);}}function isResourceUrlAllowedByPolicy(url){var parsedUrl=urlResolve(url.toString());var i,n,allowed=false;// Ensure that at least one item from the whitelist allows this url.
	for(i=0,n=resourceUrlWhitelist.length;i<n;i++){if(matchUrl(resourceUrlWhitelist[i],parsedUrl)){allowed=true;break;}}if(allowed){// Ensure that no item from the blacklist blocked this url.
	for(i=0,n=resourceUrlBlacklist.length;i<n;i++){if(matchUrl(resourceUrlBlacklist[i],parsedUrl)){allowed=false;break;}}}return allowed;}function generateHolderType(Base){var holderType=function TrustedValueHolderType(trustedValue){this.$$unwrapTrustedValue=function(){return trustedValue;};};if(Base){holderType.prototype=new Base();}holderType.prototype.valueOf=function sceValueOf(){return this.$$unwrapTrustedValue();};holderType.prototype.toString=function sceToString(){return this.$$unwrapTrustedValue().toString();};return holderType;}var trustedValueHolderBase=generateHolderType(),byType={};byType[SCE_CONTEXTS.HTML]=generateHolderType(trustedValueHolderBase);byType[SCE_CONTEXTS.CSS]=generateHolderType(trustedValueHolderBase);byType[SCE_CONTEXTS.URL]=generateHolderType(trustedValueHolderBase);byType[SCE_CONTEXTS.JS]=generateHolderType(trustedValueHolderBase);byType[SCE_CONTEXTS.RESOURCE_URL]=generateHolderType(byType[SCE_CONTEXTS.URL]);/**
	     * @ngdoc method
	     * @name $sceDelegate#trustAs
	     *
	     * @description
	     * Returns an object that is trusted by angular for use in specified strict
	     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
	     * attribute interpolation, any dom event binding attribute interpolation
	     * such as for onclick,  etc.) that uses the provided value.
	     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */function trustAs(type,trustedValue){var Constructor=byType.hasOwnProperty(type)?byType[type]:null;if(!Constructor){throw $sceMinErr('icontext','Attempted to trust a value in invalid context. Context: {0}; Value: {1}',type,trustedValue);}if(trustedValue===null||isUndefined(trustedValue)||trustedValue===''){return trustedValue;}// All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
	// mutable objects, we ensure here that the value passed in is actually a string.
	if(typeof trustedValue!=='string'){throw $sceMinErr('itype','Attempted to trust a non-string value in a content requiring a string: Context: {0}',type);}return new Constructor(trustedValue);}/**
	     * @ngdoc method
	     * @name $sceDelegate#valueOf
	     *
	     * @description
	     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
	     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
	     *
	     * If the passed parameter is not a value that had been returned by {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
	     *
	     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
	     *      call or anything else.
	     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
	     *     `value` unchanged.
	     */function valueOf(maybeTrusted){if(maybeTrusted instanceof trustedValueHolderBase){return maybeTrusted.$$unwrapTrustedValue();}else{return maybeTrusted;}}/**
	     * @ngdoc method
	     * @name $sceDelegate#getTrusted
	     *
	     * @description
	     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
	     * returns the originally supplied value if the queried context type is a supertype of the
	     * created type.  If this condition isn't satisfied, throws an exception.
	     *
	     * <div class="alert alert-danger">
	     * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting
	     * (XSS) vulnerability in your application.
	     * </div>
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} call.
	     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
	     */function getTrusted(type,maybeTrusted){if(maybeTrusted===null||isUndefined(maybeTrusted)||maybeTrusted===''){return maybeTrusted;}var constructor=byType.hasOwnProperty(type)?byType[type]:null;if(constructor&&maybeTrusted instanceof constructor){return maybeTrusted.$$unwrapTrustedValue();}// If we get here, then we may only take one of two actions.
	// 1. sanitize the value for the requested type, or
	// 2. throw an exception.
	if(type===SCE_CONTEXTS.RESOURCE_URL){if(isResourceUrlAllowedByPolicy(maybeTrusted)){return maybeTrusted;}else{throw $sceMinErr('insecurl','Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',maybeTrusted.toString());}}else if(type===SCE_CONTEXTS.HTML){return htmlSanitizer(maybeTrusted);}throw $sceMinErr('unsafe','Attempting to use an unsafe value in a safe context.');}return{trustAs:trustAs,getTrusted:getTrusted,valueOf:valueOf};}];}/**
	 * @ngdoc provider
	 * @name $sceProvider
	 * @this
	 *
	 * @description
	 *
	 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
	 * -   enable/disable Strict Contextual Escaping (SCE) in a module
	 * -   override the default implementation with a custom delegate
	 *
	 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 *//**
	 * @ngdoc service
	 * @name $sce
	 * @kind function
	 *
	 * @description
	 *
	 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
	 *
	 * # Strict Contextual Escaping
	 *
	 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
	 * contexts to result in a value that is marked as safe to use for that context.  One example of
	 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
	 * to these contexts as privileged or SCE contexts.
	 *
	 * As of version 1.2, Angular ships with SCE enabled by default.
	 *
	 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
	 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
	 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
	 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
	 * to the top of your HTML document.
	 *
	 * SCE assists in writing code in a way that (a) is secure by default and (b) makes auditing for
	 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
	 *
	 * Here's an example of a binding in a privileged context:
	 *
	 * ```
	 * <input ng-model="userHtml" aria-label="User input">
	 * <div ng-bind-html="userHtml"></div>
	 * ```
	 *
	 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
	 * disabled, this application allows the user to render arbitrary HTML into the DIV.
	 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
	 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
	 * security vulnerabilities.)
	 *
	 * For the case of HTML, you might use a library, either on the client side, or on the server side,
	 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
	 *
	 * How would you ensure that every place that used these types of bindings was bound to a value that
	 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
	 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
	 * properties/fields and forgot to update the binding to the sanitized value?
	 *
	 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
	 * determine that something explicitly says it's safe to use a value for binding in that
	 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
	 * for those values that you can easily tell are safe - because they were received from your server,
	 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
	 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
	 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
	 *
	 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
	 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
	 * obtain values that will be accepted by SCE / privileged contexts.
	 *
	 *
	 * ## How does it work?
	 *
	 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
	 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
	 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
	 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
	 *
	 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
	 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
	 * simplified):
	 *
	 * ```
	 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
	 * ```
	 *
	 * ## Impact on loading templates
	 *
	 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
	 * `templateUrl`'s specified by {@link guide/directive directives}.
	 *
	 * By default, Angular only loads templates from the same domain and protocol as the application
	 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
	 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
	 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
	 *
	 * *Please note*:
	 * The browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy apply in addition to this and may further restrict whether the template is successfully
	 * loaded.  This means that without the right CORS policy, loading templates from a different domain
	 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
	 * browsers.
	 *
	 * ## This feels like too much overhead
	 *
	 * It's important to remember that SCE only applies to interpolation expressions.
	 *
	 * If your expressions are constant literals, they're automatically trusted and you don't need to
	 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
	 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
	 *
	 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
	 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
	 *
	 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
	 * templates in `ng-include` from your application's domain without having to even know about SCE.
	 * It blocks loading templates from other domains or loading templates over http from an https
	 * served document.  You can change these by setting your own custom {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
	 *
	 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
	 * application that's secure and can be audited to verify that with much more ease than bolting
	 * security onto an application later.
	 *
	 * <a name="contexts"></a>
	 * ## What trusted context types are supported?
	 *
	 * | Context             | Notes          |
	 * |---------------------|----------------|
	 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
	 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
	 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
	 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG`, `VIDEO`, `AUDIO`, `SOURCE`, and `TRACK` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
	 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
	 *
	 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
	 *
	 *  Each element in these arrays must be one of the following:
	 *
	 *  - **'self'**
	 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
	 *      domain** as the application document using the **same protocol**.
	 *  - **String** (except the special value `'self'`)
	 *    - The string is matched against the full *normalized / absolute URL* of the resource
	 *      being tested (substring matches are not good enough.)
	 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
	 *      match themselves.
	 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
	 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
	 *      in a whitelist.
	 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
	 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
	 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
	 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
	 *      http://foo.example.com/templates/**).
	 *  - **RegExp** (*see caveat below*)
	 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
	 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
	 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
	 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
	 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
	 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
	 *      is highly recommended to use the string patterns and only fall back to regular expressions
	 *      as a last resort.
	 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
	 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
	 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
	 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
	 *    - If you are generating your JavaScript from some other templating engine (not
	 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
	 *      remember to escape your regular expression (and be aware that you might need more than
	 *      one level of escaping depending on your templating engine and the way you interpolated
	 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
	 *      enough before coding your own.  E.g. Ruby has
	 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
	 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
	 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
	 *      Closure library's [goog.string.regExpEscape(s)](
	 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
	 *
	 * ## Show me an example using SCE.
	 *
	 * <example module="mySceApp" deps="angular-sanitize.js" name="sce-service">
	 * <file name="index.html">
	 *   <div ng-controller="AppController as myCtrl">
	 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
	 *     <b>User comments</b><br>
	 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
	 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
	 *     exploit.
	 *     <div class="well">
	 *       <div ng-repeat="userComment in myCtrl.userComments">
	 *         <b>{{userComment.name}}</b>:
	 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
	 *         <br>
	 *       </div>
	 *     </div>
	 *   </div>
	 * </file>
	 *
	 * <file name="script.js">
	 *   angular.module('mySceApp', ['ngSanitize'])
	 *     .controller('AppController', ['$http', '$templateCache', '$sce',
	 *       function AppController($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get('test_data.json', {cache: $templateCache}).then(function(response) {
	 *           self.userComments = response.data;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
	 * </file>
	 *
	 * <file name="test_data.json">
	 * [
	 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
	 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
	 * ]
	 * </file>
	 *
	 * <file name="protractor.js" type="protractor">
	 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getAttribute('innerHTML'))
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getAttribute('innerHTML')).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
	 * </file>
	 * </example>
	 *
	 *
	 *
	 * ## Can I disable SCE completely?
	 *
	 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
	 * for little coding overhead.  It will be much harder to take an SCE disabled application and
	 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
	 * for cases where you have a lot of existing code that was written before SCE was introduced and
	 * you're migrating them a module at a time.
	 *
	 * That said, here's how you can completely disable SCE:
	 *
	 * ```
	 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects.
	 *   $sceProvider.enabled(false);
	 * });
	 * ```
	 *
	 */function $SceProvider(){var enabled=true;/**
	   * @ngdoc method
	   * @name $sceProvider#enabled
	   * @kind function
	   *
	   * @param {boolean=} value If provided, then enables/disables SCE.
	   * @return {boolean} true if SCE is enabled, false otherwise.
	   *
	   * @description
	   * Enables/disables SCE and returns the current value.
	   */this.enabled=function(value){if(arguments.length){enabled=!!value;}return enabled;};/* Design notes on the default implementation for SCE.
	   *
	   * The API contract for the SCE delegate
	   * -------------------------------------
	   * The SCE delegate object must provide the following 3 methods:
	   *
	   * - trustAs(contextEnum, value)
	   *     This method is used to tell the SCE service that the provided value is OK to use in the
	   *     contexts specified by contextEnum.  It must return an object that will be accepted by
	   *     getTrusted() for a compatible contextEnum and return this value.
	   *
	   * - valueOf(value)
	   *     For values that were not produced by trustAs(), return them as is.  For values that were
	   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
	   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
	   *     such a value.
	   *
	   * - getTrusted(contextEnum, value)
	   *     This function should return the a value that is safe to use in the context specified by
	   *     contextEnum or throw and exception otherwise.
	   *
	   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
	   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
	   * instance, an implementation could maintain a registry of all trusted objects by context.  In
	   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
	   * return the same object passed in if it was found in the registry under a compatible context or
	   * throw an exception otherwise.  An implementation might only wrap values some of the time based
	   * on some criteria.  getTrusted() might return a value and not throw an exception for special
	   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
	   *
	   *
	   * A note on the inheritance model for SCE contexts
	   * ------------------------------------------------
	   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
	   * is purely an implementation details.
	   *
	   * The contract is simply this:
	   *
	   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
	   *     will also succeed.
	   *
	   * Inheritance happens to capture this in a natural way.  In some future, we
	   * may not use inheritance anymore.  That is OK because no code outside of
	   * sce.js and sceSpecs.js would need to be aware of this detail.
	   */this.$get=['$parse','$sceDelegate',function($parse,$sceDelegate){// Support: IE 9-11 only
	// Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
	// the "expression(javascript expression)" syntax which is insecure.
	if(enabled&&msie<8){throw $sceMinErr('iequirks','Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks '+'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML '+'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');}var sce=shallowCopy(SCE_CONTEXTS);/**
	     * @ngdoc method
	     * @name $sce#isEnabled
	     * @kind function
	     *
	     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
	     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
	     *
	     * @description
	     * Returns a boolean indicating if SCE is enabled.
	     */sce.isEnabled=function(){return enabled;};sce.trustAs=$sceDelegate.trustAs;sce.getTrusted=$sceDelegate.getTrusted;sce.valueOf=$sceDelegate.valueOf;if(!enabled){sce.trustAs=sce.getTrusted=function(type,value){return value;};sce.valueOf=identity;}/**
	     * @ngdoc method
	     * @name $sce#parseAs
	     *
	     * @description
	     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
	     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
	     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
	     * *result*)}
	     *
	     * @param {string} type The kind of SCE context in which this result will be used.
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */sce.parseAs=function sceParseAs(type,expr){var parsed=$parse(expr);if(parsed.literal&&parsed.constant){return parsed;}else{return $parse(expr,function(value){return sce.getTrusted(type,value);});}};/**
	     * @ngdoc method
	     * @name $sce#trustAs
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
	     * returns an object that is trusted by angular for use in specified strict contextual
	     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
	     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
	     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
	     * escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     *//**
	     * @ngdoc method
	     * @name $sce#trustAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsHtml(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
	     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     *//**
	     * @ngdoc method
	     * @name $sce#trustAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
	     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     *//**
	     * @ngdoc method
	     * @name $sce#trustAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
	     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the return
	     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     *//**
	     * @ngdoc method
	     * @name $sce#trustAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsJs(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
	     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     *//**
	     * @ngdoc method
	     * @name $sce#getTrusted
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
	     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
	     * originally supplied value if the queried context type is a supertype of the created type.
	     * If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
	     *                         call.
	     * @returns {*} The value the was originally provided to
	     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
	     *              Otherwise, throws an exception.
	     *//**
	     * @ngdoc method
	     * @name $sce#getTrustedHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedHtml(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
	     *//**
	     * @ngdoc method
	     * @name $sce#getTrustedCss
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedCss(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
	     *//**
	     * @ngdoc method
	     * @name $sce#getTrustedUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
	     *//**
	     * @ngdoc method
	     * @name $sce#getTrustedResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
	     *//**
	     * @ngdoc method
	     * @name $sce#getTrustedJs
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedJs(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
	     *//**
	     * @ngdoc method
	     * @name $sce#parseAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     *//**
	     * @ngdoc method
	     * @name $sce#parseAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsCss(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     *//**
	     * @ngdoc method
	     * @name $sce#parseAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     *//**
	     * @ngdoc method
	     * @name $sce#parseAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     *//**
	     * @ngdoc method
	     * @name $sce#parseAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsJs(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */// Shorthand delegations.
	var parse=sce.parseAs,getTrusted=sce.getTrusted,trustAs=sce.trustAs;forEach(SCE_CONTEXTS,function(enumValue,name){var lName=lowercase(name);sce[snakeToCamel('parse_as_'+lName)]=function(expr){return parse(enumValue,expr);};sce[snakeToCamel('get_trusted_'+lName)]=function(value){return getTrusted(enumValue,value);};sce[snakeToCamel('trust_as_'+lName)]=function(value){return trustAs(enumValue,value);};});return sce;}];}/* exported $SnifferProvider *//**
	 * !!! This is an undocumented "private" service !!!
	 *
	 * @name $sniffer
	 * @requires $window
	 * @requires $document
	 * @this
	 *
	 * @property {boolean} history Does the browser support html5 history api ?
	 * @property {boolean} transitions Does the browser support CSS transition events ?
	 * @property {boolean} animations Does the browser support CSS animation events ?
	 *
	 * @description
	 * This is very simple implementation of testing browser's features.
	 */function $SnifferProvider(){this.$get=['$window','$document',function($window,$document){var eventSupport={},// Chrome Packaged Apps are not allowed to access `history.pushState`.
	// If not sandboxed, they can be detected by the presence of `chrome.app.runtime`
	// (see https://developer.chrome.com/apps/api_index). If sandboxed, they can be detected by
	// the presence of an extension runtime ID and the absence of other Chrome runtime APIs
	// (see https://developer.chrome.com/apps/manifest/sandbox).
	isChromePackagedApp=$window.chrome&&($window.chrome.app&&$window.chrome.app.runtime||!$window.chrome.app&&$window.chrome.runtime&&$window.chrome.runtime.id),hasHistoryPushState=!isChromePackagedApp&&$window.history&&$window.history.pushState,android=toInt((/android (\d+)/.exec(lowercase(($window.navigator||{}).userAgent))||[])[1]),boxee=/Boxee/i.test(($window.navigator||{}).userAgent),document=$document[0]||{},bodyStyle=document.body&&document.body.style,transitions=false,animations=false;if(bodyStyle){// Support: Android <5, Blackberry Browser 10, default Chrome in Android 4.4.x
	// Mentioned browsers need a -webkit- prefix for transitions & animations.
	transitions=!!('transition'in bodyStyle||'webkitTransition'in bodyStyle);animations=!!('animation'in bodyStyle||'webkitAnimation'in bodyStyle);}return{// Android has history.pushState, but it does not update location correctly
	// so let's not use the history API at all.
	// http://code.google.com/p/android/issues/detail?id=17471
	// https://github.com/angular/angular.js/issues/904
	// older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
	// so let's not use the history API also
	// We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
	history:!!(hasHistoryPushState&&!(android<4)&&!boxee),hasEvent:function hasEvent(event){// Support: IE 9-11 only
	// IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
	// it. In particular the event is not fired when backspace or delete key are pressed or
	// when cut operation is performed.
	// IE10+ implements 'input' event but it erroneously fires under various situations,
	// e.g. when placeholder changes, or a form is focused.
	if(event==='input'&&msie)return false;if(isUndefined(eventSupport[event])){var divElm=document.createElement('div');eventSupport[event]='on'+event in divElm;}return eventSupport[event];},csp:csp(),transitions:transitions,animations:animations,android:android};}];}var $templateRequestMinErr=minErr('$compile');/**
	 * @ngdoc provider
	 * @name $templateRequestProvider
	 * @this
	 *
	 * @description
	 * Used to configure the options passed to the {@link $http} service when making a template request.
	 *
	 * For example, it can be used for specifying the "Accept" header that is sent to the server, when
	 * requesting a template.
	 */function $TemplateRequestProvider(){var httpOptions;/**
	   * @ngdoc method
	   * @name $templateRequestProvider#httpOptions
	   * @description
	   * The options to be passed to the {@link $http} service when making the request.
	   * You can use this to override options such as the "Accept" header for template requests.
	   *
	   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
	   * options if not overridden here.
	   *
	   * @param {string=} value new value for the {@link $http} options.
	   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
	   */this.httpOptions=function(val){if(val){httpOptions=val;return this;}return httpOptions;};/**
	   * @ngdoc service
	   * @name $templateRequest
	   *
	   * @description
	   * The `$templateRequest` service runs security checks then downloads the provided template using
	   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
	   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
	   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
	   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
	   * when `tpl` is of type string and `$templateCache` has the matching entry.
	   *
	   * If you want to pass custom options to the `$http` service, such as setting the Accept header you
	   * can configure this via {@link $templateRequestProvider#httpOptions}.
	   *
	   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
	   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
	   *
	   * @return {Promise} a promise for the HTTP response data of the given URL.
	   *
	   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
	   */this.$get=['$exceptionHandler','$templateCache','$http','$q','$sce',function($exceptionHandler,$templateCache,$http,$q,$sce){function handleRequestFn(tpl,ignoreRequestError){handleRequestFn.totalPendingRequests++;// We consider the template cache holds only trusted templates, so
	// there's no need to go through whitelisting again for keys that already
	// are included in there. This also makes Angular accept any script
	// directive, no matter its name. However, we still need to unwrap trusted
	// types.
	if(!isString(tpl)||isUndefined($templateCache.get(tpl))){tpl=$sce.getTrustedResourceUrl(tpl);}var transformResponse=$http.defaults&&$http.defaults.transformResponse;if(isArray(transformResponse)){transformResponse=transformResponse.filter(function(transformer){return transformer!==defaultHttpResponseTransform;});}else if(transformResponse===defaultHttpResponseTransform){transformResponse=null;}return $http.get(tpl,extend({cache:$templateCache,transformResponse:transformResponse},httpOptions)).finally(function(){handleRequestFn.totalPendingRequests--;}).then(function(response){$templateCache.put(tpl,response.data);return response.data;},handleError);function handleError(resp){if(!ignoreRequestError){resp=$templateRequestMinErr('tpload','Failed to load template: {0} (HTTP status: {1} {2})',tpl,resp.status,resp.statusText);$exceptionHandler(resp);}return $q.reject(resp);}}handleRequestFn.totalPendingRequests=0;return handleRequestFn;}];}/** @this */function $$TestabilityProvider(){this.$get=['$rootScope','$browser','$location',function($rootScope,$browser,$location){/**
	     * @name $testability
	     *
	     * @description
	     * The private $$testability service provides a collection of methods for use when debugging
	     * or by automated test and debugging tools.
	     */var testability={};/**
	     * @name $$testability#findBindings
	     *
	     * @description
	     * Returns an array of elements that are bound (via ng-bind or {{}})
	     * to expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The binding expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression. Filters and whitespace are ignored.
	     */testability.findBindings=function(element,expression,opt_exactMatch){var bindings=element.getElementsByClassName('ng-binding');var matches=[];forEach(bindings,function(binding){var dataBinding=angular.element(binding).data('$binding');if(dataBinding){forEach(dataBinding,function(bindingName){if(opt_exactMatch){var matcher=new RegExp('(^|\\s)'+escapeForRegexp(expression)+'(\\s|\\||$)');if(matcher.test(bindingName)){matches.push(binding);}}else{if(bindingName.indexOf(expression)!==-1){matches.push(binding);}}});}});return matches;};/**
	     * @name $$testability#findModels
	     *
	     * @description
	     * Returns an array of elements that are two-way found via ng-model to
	     * expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The model expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression.
	     */testability.findModels=function(element,expression,opt_exactMatch){var prefixes=['ng-','data-ng-','ng\\:'];for(var p=0;p<prefixes.length;++p){var attributeEquals=opt_exactMatch?'=':'*=';var selector='['+prefixes[p]+'model'+attributeEquals+'"'+expression+'"]';var elements=element.querySelectorAll(selector);if(elements.length){return elements;}}};/**
	     * @name $$testability#getLocation
	     *
	     * @description
	     * Shortcut for getting the location in a browser agnostic way. Returns
	     *     the path, search, and hash. (e.g. /path?a=b#hash)
	     */testability.getLocation=function(){return $location.url();};/**
	     * @name $$testability#setLocation
	     *
	     * @description
	     * Shortcut for navigating to a location without doing a full page reload.
	     *
	     * @param {string} url The location url (path, search and hash,
	     *     e.g. /path?a=b#hash) to go to.
	     */testability.setLocation=function(url){if(url!==$location.url()){$location.url(url);$rootScope.$digest();}};/**
	     * @name $$testability#whenStable
	     *
	     * @description
	     * Calls the callback when $timeout and $http requests are completed.
	     *
	     * @param {function} callback
	     */testability.whenStable=function(callback){$browser.notifyWhenNoOutstandingRequests(callback);};return testability;}];}/** @this */function $TimeoutProvider(){this.$get=['$rootScope','$browser','$q','$$q','$exceptionHandler',function($rootScope,$browser,$q,$$q,$exceptionHandler){var deferreds={};/**
	      * @ngdoc service
	      * @name $timeout
	      *
	      * @description
	      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
	      * block and delegates any exceptions to
	      * {@link ng.$exceptionHandler $exceptionHandler} service.
	      *
	      * The return value of calling `$timeout` is a promise, which will be resolved when
	      * the delay has passed and the timeout function, if provided, is executed.
	      *
	      * To cancel a timeout request, call `$timeout.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
	      * synchronously flush the queue of deferred functions.
	      *
	      * If you only want a promise that will be resolved after some specified delay
	      * then you can call `$timeout` without the `fn` function.
	      *
	      * @param {function()=} fn A function, whose execution should be delayed.
	      * @param {number=} [delay=0] Delay in milliseconds.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
	      *   will be resolved with the return value of the `fn` function.
	      *
	      */function timeout(fn,delay,invokeApply){if(!isFunction(fn)){invokeApply=delay;delay=fn;fn=noop;}var args=sliceArgs(arguments,3),skipApply=isDefined(invokeApply)&&!invokeApply,deferred=(skipApply?$$q:$q).defer(),promise=deferred.promise,timeoutId;timeoutId=$browser.defer(function(){try{deferred.resolve(fn.apply(null,args));}catch(e){deferred.reject(e);$exceptionHandler(e);}finally{delete deferreds[promise.$$timeoutId];}if(!skipApply)$rootScope.$apply();},delay);promise.$$timeoutId=timeoutId;deferreds[timeoutId]=deferred;return promise;}/**
	      * @ngdoc method
	      * @name $timeout#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`. As a result of this, the promise will be
	      * resolved with a rejection.
	      *
	      * @param {Promise=} promise Promise returned by the `$timeout` function.
	      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	      *   canceled.
	      */timeout.cancel=function(promise){if(promise&&promise.$$timeoutId in deferreds){// Timeout cancels should not report an unhandled promise.
	deferreds[promise.$$timeoutId].promise.catch(noop);deferreds[promise.$$timeoutId].reject('canceled');delete deferreds[promise.$$timeoutId];return $browser.defer.cancel(promise.$$timeoutId);}return false;};return timeout;}];}// NOTE:  The usage of window and document instead of $window and $document here is
	// deliberate.  This service depends on the specific behavior of anchor nodes created by the
	// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
	// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
	// doesn't know about mocked locations and resolves URLs to the real document - which is
	// exactly the behavior needed here.  There is little value is mocking these out for this
	// service.
	var urlParsingNode=window.document.createElement('a');var originUrl=urlResolve(window.location.href);/**
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */function urlResolve(url){var href=url;// Support: IE 9-11 only
	if(msie){// Normalize before parse.  Refer Implementation Notes on why this is
	// done in two steps on IE.
	urlParsingNode.setAttribute('href',href);href=urlParsingNode.href;}urlParsingNode.setAttribute('href',href);// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	return{href:urlParsingNode.href,protocol:urlParsingNode.protocol?urlParsingNode.protocol.replace(/:$/,''):'',host:urlParsingNode.host,search:urlParsingNode.search?urlParsingNode.search.replace(/^\?/,''):'',hash:urlParsingNode.hash?urlParsingNode.hash.replace(/^#/,''):'',hostname:urlParsingNode.hostname,port:urlParsingNode.port,pathname:urlParsingNode.pathname.charAt(0)==='/'?urlParsingNode.pathname:'/'+urlParsingNode.pathname};}/**
	 * Parse a request URL and determine whether this is a same-origin request as the application document.
	 *
	 * @param {string|object} requestUrl The url of the request as a string that will be resolved
	 * or a parsed URL object.
	 * @returns {boolean} Whether the request is for the same origin as the application document.
	 */function urlIsSameOrigin(requestUrl){var parsed=isString(requestUrl)?urlResolve(requestUrl):requestUrl;return parsed.protocol===originUrl.protocol&&parsed.host===originUrl.host;}/**
	 * @ngdoc service
	 * @name $window
	 * @this
	 *
	 * @description
	 * A reference to the browser's `window` object. While `window`
	 * is globally available in JavaScript, it causes testability problems, because
	 * it is a global variable. In angular we always refer to it through the
	 * `$window` service, so it may be overridden, removed or mocked for testing.
	 *
	 * Expressions, like the one defined for the `ngClick` directive in the example
	 * below, are evaluated with respect to the current scope.  Therefore, there is
	 * no risk of inadvertently coding in a dependency on a global value in such an
	 * expression.
	 *
	 * @example
	   <example module="windowExample" name="window-service">
	     <file name="index.html">
	       <script>
	         angular.module('windowExample', [])
	           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="text" ng-model="greeting" aria-label="greeting" />
	         <button ng-click="doGreeting(greeting)">ALERT</button>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	      it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
	     </file>
	   </example>
	 */function $WindowProvider(){this.$get=valueFn(window);}/**
	 * @name $$cookieReader
	 * @requires $document
	 *
	 * @description
	 * This is a private service for reading cookies used by $http and ngCookies
	 *
	 * @return {Object} a key/value map of the current cookies
	 */function $$CookieReader($document){var rawDocument=$document[0]||{};var lastCookies={};var lastCookieString='';function safeDecodeURIComponent(str){try{return decodeURIComponent(str);}catch(e){return str;}}return function(){var cookieArray,cookie,i,index,name;var currentCookieString=rawDocument.cookie||'';if(currentCookieString!==lastCookieString){lastCookieString=currentCookieString;cookieArray=lastCookieString.split('; ');lastCookies={};for(i=0;i<cookieArray.length;i++){cookie=cookieArray[i];index=cookie.indexOf('=');if(index>0){//ignore nameless cookies
	name=safeDecodeURIComponent(cookie.substring(0,index));// the first value that is seen for a cookie is the most
	// specific one.  values for the same cookie name that
	// follow are for less specific paths.
	if(isUndefined(lastCookies[name])){lastCookies[name]=safeDecodeURIComponent(cookie.substring(index+1));}}}}return lastCookies;};}$$CookieReader.$inject=['$document'];/** @this */function $$CookieReaderProvider(){this.$get=$$CookieReader;}/* global currencyFilter: true,
	 dateFilter: true,
	 filterFilter: true,
	 jsonFilter: true,
	 limitToFilter: true,
	 lowercaseFilter: true,
	 numberFilter: true,
	 orderByFilter: true,
	 uppercaseFilter: true,
	 *//**
	 * @ngdoc provider
	 * @name $filterProvider
	 * @description
	 *
	 * Filters are just functions which transform input to an output. However filters need to be
	 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
	 * annotated with dependencies and is responsible for creating a filter function.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	 * (`myapp_subsection_filterx`).
	 * </div>
	 *
	 * ```js
	 *   // Filter registration
	 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
	 * ```
	 *
	 * The filter function is registered with the `$injector` under the filter name suffix with
	 * `Filter`.
	 *
	 * ```js
	 *   it('should be the same instance', inject(
	 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
	 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
	 * ```
	 *
	 *
	 * For more information about how angular filters work, and how to create your own filters, see
	 * {@link guide/filter Filters} in the Angular Developer Guide.
	 *//**
	 * @ngdoc service
	 * @name $filter
	 * @kind function
	 * @description
	 * Filters are used for formatting data displayed to the user.
	 *
	 * They can be used in view templates, controllers or services.Angular comes
	 * with a collection of [built-in filters](api/ng/filter), but it is easy to
	 * define your own as well.
	 *
	 * The general syntax in templates is as follows:
	 *
	 * ```html
	 * {{ expression [| filter_name[:parameter_value] ... ] }}
	 * ```
	 *
	 * @param {String} name Name of the filter function to retrieve
	 * @return {Function} the filter function
	 * @example
	   <example name="$filter" module="filterExample">
	     <file name="index.html">
	       <div ng-controller="MainCtrl">
	        <h3>{{ originalText }}</h3>
	        <h3>{{ filteredText }}</h3>
	       </div>
	     </file>

	     <file name="script.js">
	      angular.module('filterExample', [])
	      .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
	     </file>
	   </example>
	  */$FilterProvider.$inject=['$provide'];/** @this */function $FilterProvider($provide){var suffix='Filter';/**
	   * @ngdoc method
	   * @name $filterProvider#register
	   * @param {string|Object} name Name of the filter function, or an object map of filters where
	   *    the keys are the filter names and the values are the filter factories.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	   *    (`myapp_subsection_filterx`).
	   *    </div>
	    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
	   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
	   *    of the registered filter instances.
	   */function register(name,factory){if(isObject(name)){var filters={};forEach(name,function(filter,key){filters[key]=register(key,filter);});return filters;}else{return $provide.factory(name+suffix,factory);}}this.register=register;this.$get=['$injector',function($injector){return function(name){return $injector.get(name+suffix);};}];////////////////////////////////////////
	/* global
	    currencyFilter: false,
	    dateFilter: false,
	    filterFilter: false,
	    jsonFilter: false,
	    limitToFilter: false,
	    lowercaseFilter: false,
	    numberFilter: false,
	    orderByFilter: false,
	    uppercaseFilter: false
	  */register('currency',currencyFilter);register('date',dateFilter);register('filter',filterFilter);register('json',jsonFilter);register('limitTo',limitToFilter);register('lowercase',lowercaseFilter);register('number',numberFilter);register('orderBy',orderByFilter);register('uppercase',uppercaseFilter);}/**
	 * @ngdoc filter
	 * @name filter
	 * @kind function
	 *
	 * @description
	 * Selects a subset of items from `array` and returns it as a new array.
	 *
	 * @param {Array} array The source array.
	 * @param {string|Object|function()} expression The predicate to be used for selecting items from
	 *   `array`.
	 *
	 *   Can be one of:
	 *
	 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
	 *     objects with string properties in `array` that match this string will be returned. This also
	 *     applies to nested object properties.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *
	 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
	 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
	 *     which have property `name` containing "M" and property `phone` containing "1". A special
	 *     property name (`$` by default) can be used (e.g. as in `{$: "text"}`) to accept a match
	 *     against any property of the object or its nested object properties. That's equivalent to the
	 *     simple substring match with a `string` as described above. The special property name can be
	 *     overwritten, using the `anyPropertyKey` parameter.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
	 *     not containing "M".
	 *
	 *     Note that a named property will match properties on the same level only, while the special
	 *     `$` property will match properties on the same level or deeper. E.g. an array item like
	 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
	 *     **will** be matched by `{$: 'John'}`.
	 *
	 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
	 *     The function is called for each element of the array, with the element, its index, and
	 *     the entire array itself as arguments.
	 *
	 *     The final result is an array of those elements that the predicate returned true for.
	 *
	 * @param {function(actual, expected)|true|false} [comparator] Comparator which is used in
	 *     determining if the expected value (from the filter expression) and actual value (from
	 *     the object in the array) should be considered a match.
	 *
	 *   Can be one of:
	 *
	 *   - `function(actual, expected)`:
	 *     The function will be given the object value and the predicate value to compare and
	 *     should return true if both values should be considered equal.
	 *
	 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
	 *     This is essentially strict comparison of expected and actual.
	 *
	 *   - `false`: A short hand for a function which will look for a substring match in a case
	 *     insensitive way. Primitive values are converted to strings. Objects are not compared against
	 *     primitives, unless they have a custom `toString` method (e.g. `Date` objects).
	 *
	 *
	 *   Defaults to `false`.
	 *
	 * @param {string} [anyPropertyKey] The special property name that matches against any property.
	 *     By default `$`.
	 *
	 * @example
	   <example name="filter-filter">
	     <file name="index.html">
	       <div ng-init="friends = [{name:'John', phone:'555-1276'},
	                                {name:'Mary', phone:'800-BIG-MARY'},
	                                {name:'Mike', phone:'555-4321'},
	                                {name:'Adam', phone:'555-5678'},
	                                {name:'Julie', phone:'555-8765'},
	                                {name:'Juliette', phone:'555-5678'}]"></div>

	       <label>Search: <input ng-model="searchText"></label>
	       <table id="searchTextResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friend in friends | filter:searchText">
	           <td>{{friend.name}}</td>
	           <td>{{friend.phone}}</td>
	         </tr>
	       </table>
	       <hr>
	       <label>Any: <input ng-model="search.$"></label> <br>
	       <label>Name only <input ng-model="search.name"></label><br>
	       <label>Phone only <input ng-model="search.phone"></label><br>
	       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
	       <table id="searchObjResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friendObj in friends | filter:search:strict">
	           <td>{{friendObj.name}}</td>
	           <td>{{friendObj.phone}}</td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };

	       it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });

	       it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
	       it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
	     </file>
	   </example>
	 */function filterFilter(){return function(array,expression,comparator,anyPropertyKey){if(!isArrayLike(array)){if(array==null){return array;}else{throw minErr('filter')('notarray','Expected array but received: {0}',array);}}anyPropertyKey=anyPropertyKey||'$';var expressionType=getTypeForFilter(expression);var predicateFn;var matchAgainstAnyProp;switch(expressionType){case'function':predicateFn=expression;break;case'boolean':case'null':case'number':case'string':matchAgainstAnyProp=true;// falls through
	case'object':predicateFn=createPredicateFn(expression,comparator,anyPropertyKey,matchAgainstAnyProp);break;default:return array;}return Array.prototype.filter.call(array,predicateFn);};}// Helper functions for `filterFilter`
	function createPredicateFn(expression,comparator,anyPropertyKey,matchAgainstAnyProp){var shouldMatchPrimitives=isObject(expression)&&anyPropertyKey in expression;var predicateFn;if(comparator===true){comparator=equals;}else if(!isFunction(comparator)){comparator=function comparator(actual,expected){if(isUndefined(actual)){// No substring matching against `undefined`
	return false;}if(actual===null||expected===null){// No substring matching against `null`; only match against `null`
	return actual===expected;}if(isObject(expected)||isObject(actual)&&!hasCustomToString(actual)){// Should not compare primitives against objects, unless they have custom `toString` method
	return false;}actual=lowercase(''+actual);expected=lowercase(''+expected);return actual.indexOf(expected)!==-1;};}predicateFn=function predicateFn(item){if(shouldMatchPrimitives&&!isObject(item)){return deepCompare(item,expression[anyPropertyKey],comparator,anyPropertyKey,false);}return deepCompare(item,expression,comparator,anyPropertyKey,matchAgainstAnyProp);};return predicateFn;}function deepCompare(actual,expected,comparator,anyPropertyKey,matchAgainstAnyProp,dontMatchWholeObject){var actualType=getTypeForFilter(actual);var expectedType=getTypeForFilter(expected);if(expectedType==='string'&&expected.charAt(0)==='!'){return!deepCompare(actual,expected.substring(1),comparator,anyPropertyKey,matchAgainstAnyProp);}else if(isArray(actual)){// In case `actual` is an array, consider it a match
	// if ANY of it's items matches `expected`
	return actual.some(function(item){return deepCompare(item,expected,comparator,anyPropertyKey,matchAgainstAnyProp);});}switch(actualType){case'object':var key;if(matchAgainstAnyProp){for(key in actual){if(key.charAt(0)!=='$'&&deepCompare(actual[key],expected,comparator,anyPropertyKey,true)){return true;}}return dontMatchWholeObject?false:deepCompare(actual,expected,comparator,anyPropertyKey,false);}else if(expectedType==='object'){for(key in expected){var expectedVal=expected[key];if(isFunction(expectedVal)||isUndefined(expectedVal)){continue;}var matchAnyProperty=key===anyPropertyKey;var actualVal=matchAnyProperty?actual:actual[key];if(!deepCompare(actualVal,expectedVal,comparator,anyPropertyKey,matchAnyProperty,matchAnyProperty)){return false;}}return true;}else{return comparator(actual,expected);}case'function':return false;default:return comparator(actual,expected);}}// Used for easily differentiating between `null` and actual `object`
	function getTypeForFilter(val){return val===null?'null':typeof val==='undefined'?'undefined':_typeof(val);}var MAX_DIGITS=22;var DECIMAL_SEP='.';var ZERO_CHAR='0';/**
	 * @ngdoc filter
	 * @name currency
	 * @kind function
	 *
	 * @description
	 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
	 * symbol for current locale is used.
	 *
	 * @param {number} amount Input to filter.
	 * @param {string=} symbol Currency symbol or identifier to be displayed.
	 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
	 * @returns {string} Formatted number.
	 *
	 *
	 * @example
	   <example module="currencyExample" name="currency-filter">
	     <file name="index.html">
	       <script>
	         angular.module('currencyExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="number" ng-model="amount" aria-label="amount"> <br>
	         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
	         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span><br>
	         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
	       it('should update', function() {
	         if (browser.params.browser === 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
	         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
	       });
	     </file>
	   </example>
	 */currencyFilter.$inject=['$locale'];function currencyFilter($locale){var formats=$locale.NUMBER_FORMATS;return function(amount,currencySymbol,fractionSize){if(isUndefined(currencySymbol)){currencySymbol=formats.CURRENCY_SYM;}if(isUndefined(fractionSize)){fractionSize=formats.PATTERNS[1].maxFrac;}// if null or undefined pass it through
	return amount==null?amount:formatNumber(amount,formats.PATTERNS[1],formats.GROUP_SEP,formats.DECIMAL_SEP,fractionSize).replace(/\u00A4/g,currencySymbol);};}/**
	 * @ngdoc filter
	 * @name number
	 * @kind function
	 *
	 * @description
	 * Formats a number as text.
	 *
	 * If the input is null or undefined, it will just be returned.
	 * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
	 * If the input is not a number an empty string is returned.
	 *
	 *
	 * @param {number|string} number Number to format.
	 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
	 * If this is not provided then the fraction size is computed from the current locale's number
	 * formatting pattern. In the case of the default locale, it will be 3.
	 * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
	 *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
	 *                   include "," group separators after each third digit).
	 *
	 * @example
	   <example module="numberFilterExample" name="number-filter">
	     <file name="index.html">
	       <script>
	         angular.module('numberFilterExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter number: <input ng-model='val'></label><br>
	         Default formatting: <span id='number-default'>{{val | number}}</span><br>
	         No fractions: <span>{{val | number:0}}</span><br>
	         Negative number: <span>{{-val | number:4}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });

	       it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
	     </file>
	   </example>
	 */numberFilter.$inject=['$locale'];function numberFilter($locale){var formats=$locale.NUMBER_FORMATS;return function(number,fractionSize){// if null or undefined pass it through
	return number==null?number:formatNumber(number,formats.PATTERNS[0],formats.GROUP_SEP,formats.DECIMAL_SEP,fractionSize);};}/**
	 * Parse a number (as a string) into three components that can be used
	 * for formatting the number.
	 *
	 * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
	 *
	 * @param  {string} numStr The number to parse
	 * @return {object} An object describing this number, containing the following keys:
	 *  - d : an array of digits containing leading zeros as necessary
	 *  - i : the number of the digits in `d` that are to the left of the decimal point
	 *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
	 *
	 */function parse(numStr){var exponent=0,digits,numberOfIntegerDigits;var i,j,zeros;// Decimal point?
	if((numberOfIntegerDigits=numStr.indexOf(DECIMAL_SEP))>-1){numStr=numStr.replace(DECIMAL_SEP,'');}// Exponential form?
	if((i=numStr.search(/e/i))>0){// Work out the exponent.
	if(numberOfIntegerDigits<0)numberOfIntegerDigits=i;numberOfIntegerDigits+=+numStr.slice(i+1);numStr=numStr.substring(0,i);}else if(numberOfIntegerDigits<0){// There was no decimal point or exponent so it is an integer.
	numberOfIntegerDigits=numStr.length;}// Count the number of leading zeros.
	for(i=0;numStr.charAt(i)===ZERO_CHAR;i++){/* empty */}if(i===(zeros=numStr.length)){// The digits are all zero.
	digits=[0];numberOfIntegerDigits=1;}else{// Count the number of trailing zeros
	zeros--;while(numStr.charAt(zeros)===ZERO_CHAR){zeros--;}// Trailing zeros are insignificant so ignore them
	numberOfIntegerDigits-=i;digits=[];// Convert string to array of digits without leading/trailing zeros.
	for(j=0;i<=zeros;i++,j++){digits[j]=+numStr.charAt(i);}}// If the number overflows the maximum allowed digits then use an exponent.
	if(numberOfIntegerDigits>MAX_DIGITS){digits=digits.splice(0,MAX_DIGITS-1);exponent=numberOfIntegerDigits-1;numberOfIntegerDigits=1;}return{d:digits,e:exponent,i:numberOfIntegerDigits};}/**
	 * Round the parsed number to the specified number of decimal places
	 * This function changed the parsedNumber in-place
	 */function roundNumber(parsedNumber,fractionSize,minFrac,maxFrac){var digits=parsedNumber.d;var fractionLen=digits.length-parsedNumber.i;// determine fractionSize if it is not specified; `+fractionSize` converts it to a number
	fractionSize=isUndefined(fractionSize)?Math.min(Math.max(minFrac,fractionLen),maxFrac):+fractionSize;// The index of the digit to where rounding is to occur
	var roundAt=fractionSize+parsedNumber.i;var digit=digits[roundAt];if(roundAt>0){// Drop fractional digits beyond `roundAt`
	digits.splice(Math.max(parsedNumber.i,roundAt));// Set non-fractional digits beyond `roundAt` to 0
	for(var j=roundAt;j<digits.length;j++){digits[j]=0;}}else{// We rounded to zero so reset the parsedNumber
	fractionLen=Math.max(0,fractionLen);parsedNumber.i=1;digits.length=Math.max(1,roundAt=fractionSize+1);digits[0]=0;for(var i=1;i<roundAt;i++){digits[i]=0;}}if(digit>=5){if(roundAt-1<0){for(var k=0;k>roundAt;k--){digits.unshift(0);parsedNumber.i++;}digits.unshift(1);parsedNumber.i++;}else{digits[roundAt-1]++;}}// Pad out with zeros to get the required fraction length
	for(;fractionLen<Math.max(0,fractionSize);fractionLen++){digits.push(0);}// Do any carrying, e.g. a digit was rounded up to 10
	var carry=digits.reduceRight(function(carry,d,i,digits){d=d+carry;digits[i]=d%10;return Math.floor(d/10);},0);if(carry){digits.unshift(carry);parsedNumber.i++;}}/**
	 * Format a number into a string
	 * @param  {number} number       The number to format
	 * @param  {{
	 *           minFrac, // the minimum number of digits required in the fraction part of the number
	 *           maxFrac, // the maximum number of digits required in the fraction part of the number
	 *           gSize,   // number of digits in each group of separated digits
	 *           lgSize,  // number of digits in the last group of digits before the decimal separator
	 *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
	 *           posPre,  // the string to go in front of a positive number
	 *           negSuf,  // the string to go after a negative number (e.g. `)`)
	 *           posSuf   // the string to go after a positive number
	 *         }} pattern
	 * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
	 * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
	 * @param  {[type]} fractionSize The size of the fractional part of the number
	 * @return {string}              The number formatted as a string
	 */function formatNumber(number,pattern,groupSep,decimalSep,fractionSize){if(!(isString(number)||isNumber(number))||isNaN(number))return'';var isInfinity=!isFinite(number);var isZero=false;var numStr=Math.abs(number)+'',formattedText='',parsedNumber;if(isInfinity){formattedText='\u221E';}else{parsedNumber=parse(numStr);roundNumber(parsedNumber,fractionSize,pattern.minFrac,pattern.maxFrac);var digits=parsedNumber.d;var integerLen=parsedNumber.i;var exponent=parsedNumber.e;var decimals=[];isZero=digits.reduce(function(isZero,d){return isZero&&!d;},true);// pad zeros for small numbers
	while(integerLen<0){digits.unshift(0);integerLen++;}// extract decimals digits
	if(integerLen>0){decimals=digits.splice(integerLen,digits.length);}else{decimals=digits;digits=[0];}// format the integer digits with grouping separators
	var groups=[];if(digits.length>=pattern.lgSize){groups.unshift(digits.splice(-pattern.lgSize,digits.length).join(''));}while(digits.length>pattern.gSize){groups.unshift(digits.splice(-pattern.gSize,digits.length).join(''));}if(digits.length){groups.unshift(digits.join(''));}formattedText=groups.join(groupSep);// append the decimal digits
	if(decimals.length){formattedText+=decimalSep+decimals.join('');}if(exponent){formattedText+='e+'+exponent;}}if(number<0&&!isZero){return pattern.negPre+formattedText+pattern.negSuf;}else{return pattern.posPre+formattedText+pattern.posSuf;}}function padNumber(num,digits,trim,negWrap){var neg='';if(num<0||negWrap&&num<=0){if(negWrap){num=-num+1;}else{num=-num;neg='-';}}num=''+num;while(num.length<digits){num=ZERO_CHAR+num;}if(trim){num=num.substr(num.length-digits);}return neg+num;}function dateGetter(name,size,offset,trim,negWrap){offset=offset||0;return function(date){var value=date['get'+name]();if(offset>0||value>-offset){value+=offset;}if(value===0&&offset===-12)value=12;return padNumber(value,size,trim,negWrap);};}function dateStrGetter(name,shortForm,standAlone){return function(date,formats){var value=date['get'+name]();var propPrefix=(standAlone?'STANDALONE':'')+(shortForm?'SHORT':'');var get=uppercase(propPrefix+name);return formats[get][value];};}function timeZoneGetter(date,formats,offset){var zone=-1*offset;var paddedZone=zone>=0?'+':'';paddedZone+=padNumber(Math[zone>0?'floor':'ceil'](zone/60),2)+padNumber(Math.abs(zone%60),2);return paddedZone;}function getFirstThursdayOfYear(year){// 0 = index of January
	var dayOfWeekOnFirst=new Date(year,0,1).getDay();// 4 = index of Thursday (+1 to account for 1st = 5)
	// 11 = index of *next* Thursday (+1 account for 1st = 12)
	return new Date(year,0,(dayOfWeekOnFirst<=4?5:12)-dayOfWeekOnFirst);}function getThursdayThisWeek(datetime){return new Date(datetime.getFullYear(),datetime.getMonth(),// 4 = index of Thursday
	datetime.getDate()+(4-datetime.getDay()));}function weekGetter(size){return function(date){var firstThurs=getFirstThursdayOfYear(date.getFullYear()),thisThurs=getThursdayThisWeek(date);var diff=+thisThurs-+firstThurs,result=1+Math.round(diff/6.048e8);// 6.048e8 ms per week
	return padNumber(result,size);};}function ampmGetter(date,formats){return date.getHours()<12?formats.AMPMS[0]:formats.AMPMS[1];}function eraGetter(date,formats){return date.getFullYear()<=0?formats.ERAS[0]:formats.ERAS[1];}function longEraGetter(date,formats){return date.getFullYear()<=0?formats.ERANAMES[0]:formats.ERANAMES[1];}var DATE_FORMATS={yyyy:dateGetter('FullYear',4,0,false,true),yy:dateGetter('FullYear',2,0,true,true),y:dateGetter('FullYear',1,0,false,true),MMMM:dateStrGetter('Month'),MMM:dateStrGetter('Month',true),MM:dateGetter('Month',2,1),M:dateGetter('Month',1,1),LLLL:dateStrGetter('Month',false,true),dd:dateGetter('Date',2),d:dateGetter('Date',1),HH:dateGetter('Hours',2),H:dateGetter('Hours',1),hh:dateGetter('Hours',2,-12),h:dateGetter('Hours',1,-12),mm:dateGetter('Minutes',2),m:dateGetter('Minutes',1),ss:dateGetter('Seconds',2),s:dateGetter('Seconds',1),// while ISO 8601 requires fractions to be prefixed with `.` or `,`
	// we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
	sss:dateGetter('Milliseconds',3),EEEE:dateStrGetter('Day'),EEE:dateStrGetter('Day',true),a:ampmGetter,Z:timeZoneGetter,ww:weekGetter(2),w:weekGetter(1),G:eraGetter,GG:eraGetter,GGG:eraGetter,GGGG:longEraGetter};var DATE_FORMATS_SPLIT=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,NUMBER_STRING=/^-?\d+$/;/**
	 * @ngdoc filter
	 * @name date
	 * @kind function
	 *
	 * @description
	 *   Formats `date` to a string based on the requested `format`.
	 *
	 *   `format` string can be composed of the following elements:
	 *
	 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
	 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
	 *   * `'MMMM'`: Month in year (January-December)
	 *   * `'MMM'`: Month in year (Jan-Dec)
	 *   * `'MM'`: Month in year, padded (01-12)
	 *   * `'M'`: Month in year (1-12)
	 *   * `'LLLL'`: Stand-alone month in year (January-December)
	 *   * `'dd'`: Day in month, padded (01-31)
	 *   * `'d'`: Day in month (1-31)
	 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
	 *   * `'EEE'`: Day in Week, (Sun-Sat)
	 *   * `'HH'`: Hour in day, padded (00-23)
	 *   * `'H'`: Hour in day (0-23)
	 *   * `'hh'`: Hour in AM/PM, padded (01-12)
	 *   * `'h'`: Hour in AM/PM, (1-12)
	 *   * `'mm'`: Minute in hour, padded (00-59)
	 *   * `'m'`: Minute in hour (0-59)
	 *   * `'ss'`: Second in minute, padded (00-59)
	 *   * `'s'`: Second in minute (0-59)
	 *   * `'sss'`: Millisecond in second, padded (000-999)
	 *   * `'a'`: AM/PM marker
	 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
	 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
	 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
	 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
	 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
	 *
	 *   `format` string can also be one of the following predefined
	 *   {@link guide/i18n localizable formats}:
	 *
	 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
	 *     (e.g. Sep 3, 2010 12:05:08 PM)
	 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
	 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
	 *     (e.g. Friday, September 3, 2010)
	 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
	 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
	 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
	 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
	 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
	 *
	 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
	 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
	 *   (e.g. `"h 'o''clock'"`).
	 *
	 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
	 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
	 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
	 *    specified in the string input, the time is considered to be in the local timezone.
	 * @param {string=} format Formatting rules (see Description). If not specified,
	 *    `mediumDate` is used.
	 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
	 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *    If not specified, the timezone of the browser will be used.
	 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
	 *
	 * @example
	   <example name="filter-date">
	     <file name="index.html">
	       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
	           <span>{{1288323623006 | date:'medium'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
	          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
	          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
	          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010-10-2\d \d{2}:\d{2}:\d{2} (-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
	     </file>
	   </example>
	 */dateFilter.$inject=['$locale'];function dateFilter($locale){var R_ISO8601_STR=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;// 1        2       3         4          5          6          7          8  9     10      11
	function jsonStringToDate(string){var match;if(match=string.match(R_ISO8601_STR)){var date=new Date(0),tzHour=0,tzMin=0,dateSetter=match[8]?date.setUTCFullYear:date.setFullYear,timeSetter=match[8]?date.setUTCHours:date.setHours;if(match[9]){tzHour=toInt(match[9]+match[10]);tzMin=toInt(match[9]+match[11]);}dateSetter.call(date,toInt(match[1]),toInt(match[2])-1,toInt(match[3]));var h=toInt(match[4]||0)-tzHour;var m=toInt(match[5]||0)-tzMin;var s=toInt(match[6]||0);var ms=Math.round(parseFloat('0.'+(match[7]||0))*1000);timeSetter.call(date,h,m,s,ms);return date;}return string;}return function(date,format,timezone){var text='',parts=[],fn,match;format=format||'mediumDate';format=$locale.DATETIME_FORMATS[format]||format;if(isString(date)){date=NUMBER_STRING.test(date)?toInt(date):jsonStringToDate(date);}if(isNumber(date)){date=new Date(date);}if(!isDate(date)||!isFinite(date.getTime())){return date;}while(format){match=DATE_FORMATS_SPLIT.exec(format);if(match){parts=concat(parts,match,1);format=parts.pop();}else{parts.push(format);format=null;}}var dateTimezoneOffset=date.getTimezoneOffset();if(timezone){dateTimezoneOffset=timezoneToOffset(timezone,dateTimezoneOffset);date=convertTimezoneToLocal(date,timezone,true);}forEach(parts,function(value){fn=DATE_FORMATS[value];text+=fn?fn(date,$locale.DATETIME_FORMATS,dateTimezoneOffset):value==='\'\''?'\'':value.replace(/(^'|'$)/g,'').replace(/''/g,'\'');});return text;};}/**
	 * @ngdoc filter
	 * @name json
	 * @kind function
	 *
	 * @description
	 *   Allows you to convert a JavaScript object into JSON string.
	 *
	 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
	 *   the binding is automatically converted to JSON.
	 *
	 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
	 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
	 * @returns {string} JSON string.
	 *
	 *
	 * @example
	   <example name="filter-json">
	     <file name="index.html">
	       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
	       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n {2}"name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n {4}"name": ?"value"\n}/);
	       });
	     </file>
	   </example>
	 *
	 */function jsonFilter(){return function(object,spacing){if(isUndefined(spacing)){spacing=2;}return toJson(object,spacing);};}/**
	 * @ngdoc filter
	 * @name lowercase
	 * @kind function
	 * @description
	 * Converts string to lowercase.
	 * @see angular.lowercase
	 */var lowercaseFilter=valueFn(lowercase);/**
	 * @ngdoc filter
	 * @name uppercase
	 * @kind function
	 * @description
	 * Converts string to uppercase.
	 * @see angular.uppercase
	 */var uppercaseFilter=valueFn(uppercase);/**
	 * @ngdoc filter
	 * @name limitTo
	 * @kind function
	 *
	 * @description
	 * Creates a new array or string containing only a specified number of elements. The elements are
	 * taken from either the beginning or the end of the source array, string or number, as specified by
	 * the value and sign (positive or negative) of `limit`. Other array-like objects are also supported
	 * (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input,
	 * it is converted to a string.
	 *
	 * @param {Array|ArrayLike|string|number} input - Array/array-like, string or number to be limited.
	 * @param {string|number} limit - The length of the returned array or string. If the `limit` number
	 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
	 *     If the number is negative, `limit` number  of items from the end of the source array/string
	 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
	 *     the input will be returned unchanged.
	 * @param {(string|number)=} begin - Index at which to begin limitation. As a negative index,
	 *     `begin` indicates an offset from the end of `input`. Defaults to `0`.
	 * @returns {Array|string} A new sub-array or substring of length `limit` or less if the input had
	 *     less than `limit` elements.
	 *
	 * @example
	   <example module="limitToExample" name="limit-to-filter">
	     <file name="index.html">
	       <script>
	         angular.module('limitToExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>
	            Limit {{numbers}} to:
	            <input type="number" step="1" ng-model="numLimit">
	         </label>
	         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
	         <label>
	            Limit {{letters}} to:
	            <input type="number" step="1" ng-model="letterLimit">
	         </label>
	         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
	         <label>
	            Limit {{longNumber}} to:
	            <input type="number" step="1" ng-model="longNumberLimit">
	         </label>
	         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var numLimitInput = element(by.model('numLimit'));
	       var letterLimitInput = element(by.model('letterLimit'));
	       var longNumberLimitInput = element(by.model('longNumberLimit'));
	       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
	       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
	       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

	       it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });

	       // There is a bug in safari and protractor that doesn't like the minus key
	       // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });

	       it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
	     </file>
	   </example>
	*/function limitToFilter(){return function(input,limit,begin){if(Math.abs(Number(limit))===Infinity){limit=Number(limit);}else{limit=toInt(limit);}if(isNumberNaN(limit))return input;if(isNumber(input))input=input.toString();if(!isArrayLike(input))return input;begin=!begin||isNaN(begin)?0:toInt(begin);begin=begin<0?Math.max(0,input.length+begin):begin;if(limit>=0){return sliceFn(input,begin,begin+limit);}else{if(begin===0){return sliceFn(input,limit,input.length);}else{return sliceFn(input,Math.max(0,begin+limit),begin);}}};}function sliceFn(input,begin,end){if(isString(input))return input.slice(begin,end);return slice.call(input,begin,end);}/**
	 * @ngdoc filter
	 * @name orderBy
	 * @kind function
	 *
	 * @description
	 * Returns an array containing the items from the specified `collection`, ordered by a `comparator`
	 * function based on the values computed using the `expression` predicate.
	 *
	 * For example, `[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'` would result in
	 * `[{id: 'bar'}, {id: 'foo'}]`.
	 *
	 * The `collection` can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray,
	 * String, etc).
	 *
	 * The `expression` can be a single predicate, or a list of predicates each serving as a tie-breaker
	 * for the preceding one. The `expression` is evaluated against each item and the output is used
	 * for comparing with other items.
	 *
	 * You can change the sorting order by setting `reverse` to `true`. By default, items are sorted in
	 * ascending order.
	 *
	 * The comparison is done using the `comparator` function. If none is specified, a default, built-in
	 * comparator is used (see below for details - in a nutshell, it compares numbers numerically and
	 * strings alphabetically).
	 *
	 * ### Under the hood
	 *
	 * Ordering the specified `collection` happens in two phases:
	 *
	 * 1. All items are passed through the predicate (or predicates), and the returned values are saved
	 *    along with their type (`string`, `number` etc). For example, an item `{label: 'foo'}`, passed
	 *    through a predicate that extracts the value of the `label` property, would be transformed to:
	 *    ```
	 *    {
	 *      value: 'foo',
	 *      type: 'string',
	 *      index: ...
	 *    }
	 *    ```
	 * 2. The comparator function is used to sort the items, based on the derived values, types and
	 *    indices.
	 *
	 * If you use a custom comparator, it will be called with pairs of objects of the form
	 * `{value: ..., type: '...', index: ...}` and is expected to return `0` if the objects are equal
	 * (as far as the comparator is concerned), `-1` if the 1st one should be ranked higher than the
	 * second, or `1` otherwise.
	 *
	 * In order to ensure that the sorting will be deterministic across platforms, if none of the
	 * specified predicates can distinguish between two items, `orderBy` will automatically introduce a
	 * dummy predicate that returns the item's index as `value`.
	 * (If you are using a custom comparator, make sure it can handle this predicate as well.)
	 *
	 * Finally, in an attempt to simplify things, if a predicate returns an object as the extracted
	 * value for an item, `orderBy` will try to convert that object to a primitive value, before passing
	 * it to the comparator. The following rules govern the conversion:
	 *
	 * 1. If the object has a `valueOf()` method that returns a primitive, its return value will be
	 *    used instead.<br />
	 *    (If the object has a `valueOf()` method that returns another object, then the returned object
	 *    will be used in subsequent steps.)
	 * 2. If the object has a custom `toString()` method (i.e. not the one inherited from `Object`) that
	 *    returns a primitive, its return value will be used instead.<br />
	 *    (If the object has a `toString()` method that returns another object, then the returned object
	 *    will be used in subsequent steps.)
	 * 3. No conversion; the object itself is used.
	 *
	 * ### The default comparator
	 *
	 * The default, built-in comparator should be sufficient for most usecases. In short, it compares
	 * numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to
	 * using their index in the original collection, and sorts values of different types by type.
	 *
	 * More specifically, it follows these steps to determine the relative order of items:
	 *
	 * 1. If the compared values are of different types, compare the types themselves alphabetically.
	 * 2. If both values are of type `string`, compare them alphabetically in a case- and
	 *    locale-insensitive way.
	 * 3. If both values are objects, compare their indices instead.
	 * 4. Otherwise, return:
	 *    -  `0`, if the values are equal (by strict equality comparison, i.e. using `===`).
	 *    - `-1`, if the 1st value is "less than" the 2nd value (compared using the `<` operator).
	 *    -  `1`, otherwise.
	 *
	 * **Note:** If you notice numbers not being sorted as expected, make sure they are actually being
	 *           saved as numbers and not strings.
	 * **Note:** For the purpose of sorting, `null` values are treated as the string `'null'` (i.e.
	 *           `type: 'string'`, `value: 'null'`). This may cause unexpected sort order relative to
	 *           other values.
	 *
	 * @param {Array|ArrayLike} collection - The collection (array or array-like object) to sort.
	 * @param {(Function|string|Array.<Function|string>)=} expression - A predicate (or list of
	 *    predicates) to be used by the comparator to determine the order of elements.
	 *
	 *    Can be one of:
	 *
	 *    - `Function`: A getter function. This function will be called with each item as argument and
	 *      the return value will be used for sorting.
	 *    - `string`: An Angular expression. This expression will be evaluated against each item and the
	 *      result will be used for sorting. For example, use `'label'` to sort by a property called
	 *      `label` or `'label.substring(0, 3)'` to sort by the first 3 characters of the `label`
	 *      property.<br />
	 *      (The result of a constant expression is interpreted as a property name to be used for
	 *      comparison. For example, use `'"special name"'` (note the extra pair of quotes) to sort by a
	 *      property called `special name`.)<br />
	 *      An expression can be optionally prefixed with `+` or `-` to control the sorting direction,
	 *      ascending or descending. For example, `'+label'` or `'-label'`. If no property is provided,
	 *      (e.g. `'+'` or `'-'`), the collection element itself is used in comparisons.
	 *    - `Array`: An array of function and/or string predicates. If a predicate cannot determine the
	 *      relative order of two items, the next predicate is used as a tie-breaker.
	 *
	 * **Note:** If the predicate is missing or empty then it defaults to `'+'`.
	 *
	 * @param {boolean=} reverse - If `true`, reverse the sorting order.
	 * @param {(Function)=} comparator - The comparator function used to determine the relative order of
	 *    value pairs. If omitted, the built-in comparator will be used.
	 *
	 * @returns {Array} - The sorted array.
	 *
	 *
	 * @example
	 * ### Ordering a table with `ngRepeat`
	 *
	 * The example below demonstrates a simple {@link ngRepeat ngRepeat}, where the data is sorted by
	 * age in descending order (expression is set to `'-age'`). The `comparator` is not set, which means
	 * it defaults to the built-in comparator.
	 *
	   <example name="orderBy-static" module="orderByExample1">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <table class="friends">
	           <tr>
	             <th>Name</th>
	             <th>Phone Number</th>
	             <th>Age</th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:'-age'">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample1', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }

	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var names = element.all(by.repeater('friends').column('friend.name'));

	       it('should sort friends by age in reverse order', function() {
	         expect(names.get(0).getText()).toBe('Adam');
	         expect(names.get(1).getText()).toBe('Julie');
	         expect(names.get(2).getText()).toBe('Mike');
	         expect(names.get(3).getText()).toBe('Mary');
	         expect(names.get(4).getText()).toBe('John');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Changing parameters dynamically
	 *
	 * All parameters can be changed dynamically. The next example shows how you can make the columns of
	 * a table sortable, by binding the `expression` and `reverse` parameters to scope properties.
	 *
	   <example name="orderBy-dynamic" module="orderByExample2">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="propertyName = null; reverse = false">Set to unsorted</button>
	         <hr/>
	         <table class="friends">
	           <tr>
	             <th>
	               <button ng-click="sortBy('name')">Name</button>
	               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('phone')">Phone Number</button>
	               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('age')">Age</button>
	               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:propertyName:reverse">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample2', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];

	           $scope.propertyName = 'age';
	           $scope.reverse = true;
	           $scope.friends = friends;

	           $scope.sortBy = function(propertyName) {
	             $scope.reverse = ($scope.propertyName === propertyName) ? !$scope.reverse : false;
	             $scope.propertyName = propertyName;
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }

	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }

	       .sortorder:after {
	         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var unsortButton = element(by.partialButtonText('unsorted'));
	       var nameHeader = element(by.partialButtonText('Name'));
	       var phoneHeader = element(by.partialButtonText('Phone'));
	       var ageHeader = element(by.partialButtonText('Age'));
	       var firstName = element(by.repeater('friends').column('friend.name').row(0));
	       var lastName = element(by.repeater('friends').column('friend.name').row(4));

	       it('should sort friends by some property, when clicking on the column header', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         phoneHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Mary');

	         nameHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('Mike');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	       });

	       it('should sort friends in reverse order, when clicking on the same column', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	       });

	       it('should restore the original order, when clicking "Set to unsorted"', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         unsortButton.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Using `orderBy` inside a controller
	 *
	 * It is also possible to call the `orderBy` filter manually, by injecting `orderByFilter`, and
	 * calling it with the desired parameters. (Alternatively, you could inject the `$filter` factory
	 * and retrieve the `orderBy` filter with `$filter('orderBy')`.)
	 *
	   <example name="orderBy-call-manually" module="orderByExample3">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="sortBy(null)">Set to unsorted</button>
	         <hr/>
	         <table class="friends">
	           <tr>
	             <th>
	               <button ng-click="sortBy('name')">Name</button>
	               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('phone')">Phone Number</button>
	               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('age')">Age</button>
	               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample3', [])
	         .controller('ExampleController', ['$scope', 'orderByFilter', function($scope, orderBy) {
	           var friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];

	           $scope.propertyName = 'age';
	           $scope.reverse = true;
	           $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);

	           $scope.sortBy = function(propertyName) {
	             $scope.reverse = (propertyName !== null && $scope.propertyName === propertyName)
	                 ? !$scope.reverse : false;
	             $scope.propertyName = propertyName;
	             $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }

	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }

	       .sortorder:after {
	         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var unsortButton = element(by.partialButtonText('unsorted'));
	       var nameHeader = element(by.partialButtonText('Name'));
	       var phoneHeader = element(by.partialButtonText('Phone'));
	       var ageHeader = element(by.partialButtonText('Age'));
	       var firstName = element(by.repeater('friends').column('friend.name').row(0));
	       var lastName = element(by.repeater('friends').column('friend.name').row(4));

	       it('should sort friends by some property, when clicking on the column header', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         phoneHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Mary');

	         nameHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('Mike');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	       });

	       it('should sort friends in reverse order, when clicking on the same column', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	       });

	       it('should restore the original order, when clicking "Set to unsorted"', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         unsortButton.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Using a custom comparator
	 *
	 * If you have very specific requirements about the way items are sorted, you can pass your own
	 * comparator function. For example, you might need to compare some strings in a locale-sensitive
	 * way. (When specifying a custom comparator, you also need to pass a value for the `reverse`
	 * argument - passing `false` retains the default sorting order, i.e. ascending.)
	 *
	   <example name="orderBy-custom-comparator" module="orderByExample4">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <div class="friends-container custom-comparator">
	           <h3>Locale-sensitive Comparator</h3>
	           <table class="friends">
	             <tr>
	               <th>Name</th>
	               <th>Favorite Letter</th>
	             </tr>
	             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter':false:localeSensitiveComparator">
	               <td>{{friend.name}}</td>
	               <td>{{friend.favoriteLetter}}</td>
	             </tr>
	           </table>
	         </div>
	         <div class="friends-container default-comparator">
	           <h3>Default Comparator</h3>
	           <table class="friends">
	             <tr>
	               <th>Name</th>
	               <th>Favorite Letter</th>
	             </tr>
	             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter'">
	               <td>{{friend.name}}</td>
	               <td>{{friend.favoriteLetter}}</td>
	             </tr>
	           </table>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample4', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends = [
	             {name: 'John',   favoriteLetter: 'Ä'},
	             {name: 'Mary',   favoriteLetter: 'Ü'},
	             {name: 'Mike',   favoriteLetter: 'Ö'},
	             {name: 'Adam',   favoriteLetter: 'H'},
	             {name: 'Julie',  favoriteLetter: 'Z'}
	           ];

	           $scope.localeSensitiveComparator = function(v1, v2) {
	             // If we don't get strings, just compare by index
	             if (v1.type !== 'string' || v2.type !== 'string') {
	               return (v1.index < v2.index) ? -1 : 1;
	             }

	             // Compare strings alphabetically, taking locale into account
	             return v1.value.localeCompare(v2.value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends-container {
	         display: inline-block;
	         margin: 0 30px;
	       }

	       .friends {
	         border-collapse: collapse;
	       }

	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var container = element(by.css('.custom-comparator'));
	       var names = container.all(by.repeater('friends').column('friend.name'));

	       it('should sort friends by favorite letter (in correct alphabetical order)', function() {
	         expect(names.get(0).getText()).toBe('John');
	         expect(names.get(1).getText()).toBe('Adam');
	         expect(names.get(2).getText()).toBe('Mike');
	         expect(names.get(3).getText()).toBe('Mary');
	         expect(names.get(4).getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 *
	 */orderByFilter.$inject=['$parse'];function orderByFilter($parse){return function(array,sortPredicate,reverseOrder,compareFn){if(array==null)return array;if(!isArrayLike(array)){throw minErr('orderBy')('notarray','Expected array but received: {0}',array);}if(!isArray(sortPredicate)){sortPredicate=[sortPredicate];}if(sortPredicate.length===0){sortPredicate=['+'];}var predicates=processPredicates(sortPredicate);var descending=reverseOrder?-1:1;// Define the `compare()` function. Use a default comparator if none is specified.
	var compare=isFunction(compareFn)?compareFn:defaultCompare;// The next three lines are a version of a Swartzian Transform idiom from Perl
	// (sometimes called the Decorate-Sort-Undecorate idiom)
	// See https://en.wikipedia.org/wiki/Schwartzian_transform
	var compareValues=Array.prototype.map.call(array,getComparisonObject);compareValues.sort(doComparison);array=compareValues.map(function(item){return item.value;});return array;function getComparisonObject(value,index){// NOTE: We are adding an extra `tieBreaker` value based on the element's index.
	// This will be used to keep the sort stable when none of the input predicates can
	// distinguish between two elements.
	return{value:value,tieBreaker:{value:index,type:'number',index:index},predicateValues:predicates.map(function(predicate){return getPredicateValue(predicate.get(value),index);})};}function doComparison(v1,v2){for(var i=0,ii=predicates.length;i<ii;i++){var result=compare(v1.predicateValues[i],v2.predicateValues[i]);if(result){return result*predicates[i].descending*descending;}}return compare(v1.tieBreaker,v2.tieBreaker)*descending;}};function processPredicates(sortPredicates){return sortPredicates.map(function(predicate){var descending=1,get=identity;if(isFunction(predicate)){get=predicate;}else if(isString(predicate)){if(predicate.charAt(0)==='+'||predicate.charAt(0)==='-'){descending=predicate.charAt(0)==='-'?-1:1;predicate=predicate.substring(1);}if(predicate!==''){get=$parse(predicate);if(get.constant){var key=get();get=function get(value){return value[key];};}}}return{get:get,descending:descending};});}function isPrimitive(value){switch(typeof value==='undefined'?'undefined':_typeof(value)){case'number':/* falls through */case'boolean':/* falls through */case'string':return true;default:return false;}}function objectValue(value){// If `valueOf` is a valid function use that
	if(isFunction(value.valueOf)){value=value.valueOf();if(isPrimitive(value))return value;}// If `toString` is a valid function and not the one from `Object.prototype` use that
	if(hasCustomToString(value)){value=value.toString();if(isPrimitive(value))return value;}return value;}function getPredicateValue(value,index){var type=typeof value==='undefined'?'undefined':_typeof(value);if(value===null){type='string';value='null';}else if(type==='object'){value=objectValue(value);}return{value:value,type:type,index:index};}function defaultCompare(v1,v2){var result=0;var type1=v1.type;var type2=v2.type;if(type1===type2){var value1=v1.value;var value2=v2.value;if(type1==='string'){// Compare strings case-insensitively
	value1=value1.toLowerCase();value2=value2.toLowerCase();}else if(type1==='object'){// For basic objects, use the position of the object
	// in the collection instead of the value
	if(isObject(value1))value1=v1.index;if(isObject(value2))value2=v2.index;}if(value1!==value2){result=value1<value2?-1:1;}}else{result=type1<type2?-1:1;}return result;}}function ngDirective(directive){if(isFunction(directive)){directive={link:directive};}directive.restrict=directive.restrict||'AC';return valueFn(directive);}/**
	 * @ngdoc directive
	 * @name a
	 * @restrict E
	 *
	 * @description
	 * Modifies the default behavior of the html a tag so that the default action is prevented when
	 * the href attribute is empty.
	 *
	 * For dynamically creating `href` attributes for a tags, see the {@link ng.ngHref `ngHref`} directive.
	 */var htmlAnchorDirective=valueFn({restrict:'E',compile:function compile(element,attr){if(!attr.href&&!attr.xlinkHref){return function(scope,element){// If the linked element is not an anchor tag anymore, do nothing
	if(element[0].nodeName.toLowerCase()!=='a')return;// SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	var href=toString.call(element.prop('href'))==='[object SVGAnimatedString]'?'xlink:href':'href';element.on('click',function(event){// if we have no href url, then don't navigate anywhere.
	if(!element.attr(href)){event.preventDefault();}});};}}});/**
	 * @ngdoc directive
	 * @name ngHref
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in an href attribute will
	 * make the link go to the wrong URL if the user clicks it before
	 * Angular has a chance to replace the `{{hash}}` markup with its
	 * value. Until Angular replaces the markup the link will be broken
	 * and will most likely return a 404 error. The `ngHref` directive
	 * solves this problem.
	 *
	 * The wrong way to write it:
	 * ```html
	 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * @element A
	 * @param {template} ngHref any string which can contain `{{}}` markup.
	 *
	 * @example
	 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
	 * in links and their different behaviors:
	    <example name="ng-href">
	      <file name="index.html">
	        <input ng-model="value" /><br />
	        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
	        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
	        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
	        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
	        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
	        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should execute ng-click but not reload when href without value', function() {
	          element(by.id('link-1')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
	          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when href empty string', function() {
	          element(by.id('link-2')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
	          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click and change url when ng-href specified', function() {
	          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

	          element(by.id('link-3')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.

	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/123$/);
	            });
	          }, 5000, 'page should navigate to /123');
	        });

	        it('should execute ng-click but not reload when href empty string and name specified', function() {
	          element(by.id('link-4')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
	          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when no href but name specified', function() {
	          element(by.id('link-5')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
	          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
	        });

	        it('should only change url when only ng-href', function() {
	          element(by.model('value')).clear();
	          element(by.model('value')).sendKeys('6');
	          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

	          element(by.id('link-6')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/6$/);
	            });
	          }, 5000, 'page should navigate to /6');
	        });
	      </file>
	    </example>
	 *//**
	 * @ngdoc directive
	 * @name ngSrc
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrc` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrc any string which can contain `{{}}` markup.
	 *//**
	 * @ngdoc directive
	 * @name ngSrcset
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrcset` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrcset any string which can contain `{{}}` markup.
	 *//**
	 * @ngdoc directive
	 * @name ngDisabled
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * This directive sets the `disabled` attribute on the element if the
	 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `disabled`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example name="ng-disabled">
	      <file name="index.html">
	        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
	        <button ng-model="button" ng-disabled="checked">Button</button>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle button', function() {
	          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
	 *     then the `disabled` attribute will be set on the element
	 *//**
	 * @ngdoc directive
	 * @name ngChecked
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
	 *
	 * Note that this directive should not be used together with {@link ngModel `ngModel`},
	 * as this can lead to unexpected behavior.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `checked`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example name="ng-checked">
	      <file name="index.html">
	        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
	        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should check both checkBoxes', function() {
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
	          element(by.model('master')).click();
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
	 *     then the `checked` attribute will be set on the element
	 *//**
	 * @ngdoc directive
	 * @name ngReadonly
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `readonly` attribute on the element, if the expression inside `ngReadonly` is truthy.
	 * Note that `readonly` applies only to `input` elements with specific types. [See the input docs on
	 * MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) for more information.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `readonly`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example name="ng-readonly">
	      <file name="index.html">
	        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
	        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle readonly attr', function() {
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
	 *     then special attribute "readonly" will be set on the element
	 *//**
	 * @ngdoc directive
	 * @name ngSelected
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `selected`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * <div class="alert alert-warning">
	 *   **Note:** `ngSelected` does not interact with the `select` and `ngModel` directives, it only
	 *   sets the `selected` attribute on the element. If you are using `ngModel` on the select, you
	 *   should not use `ngSelected` on the options, as `ngModel` will set the select value and
	 *   selected options.
	 * </div>
	 *
	 * @example
	    <example name="ng-selected">
	      <file name="index.html">
	        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
	        <select aria-label="ngSelected demo">
	          <option>Hello!</option>
	          <option id="greet" ng-selected="selected">Greetings!</option>
	        </select>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should select Greetings!', function() {
	          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
	          element(by.model('selected')).click();
	          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element OPTION
	 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
	 *     then special attribute "selected" will be set on the element
	 *//**
	 * @ngdoc directive
	 * @name ngOpen
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `open`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * ## A note about browser compatibility
	 *
	 * Edge, Firefox, and Internet Explorer do not support the `details` element, it is
	 * recommended to use {@link ng.ngShow} and {@link ng.ngHide} instead.
	 *
	 * @example
	     <example name="ng-open">
	       <file name="index.html">
	         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
	         <details id="details" ng-open="open">
	            <summary>Show/Hide me</summary>
	         </details>
	       </file>
	       <file name="protractor.js" type="protractor">
	         it('should toggle open', function() {
	           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
	           element(by.model('open')).click();
	           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
	         });
	       </file>
	     </example>
	 *
	 * @element DETAILS
	 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
	 *     then special attribute "open" will be set on the element
	 */var ngAttributeAliasDirectives={};// boolean attrs are evaluated
	forEach(BOOLEAN_ATTR,function(propName,attrName){// binding to multiple is not supported
	if(propName==='multiple')return;function defaultLinkFn(scope,element,attr){scope.$watch(attr[normalized],function ngBooleanAttrWatchAction(value){attr.$set(attrName,!!value);});}var normalized=directiveNormalize('ng-'+attrName);var linkFn=defaultLinkFn;if(propName==='checked'){linkFn=function linkFn(scope,element,attr){// ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
	if(attr.ngModel!==attr[normalized]){defaultLinkFn(scope,element,attr);}};}ngAttributeAliasDirectives[normalized]=function(){return{restrict:'A',priority:100,link:linkFn};};});// aliased input attrs are evaluated
	forEach(ALIASED_ATTR,function(htmlAttr,ngAttr){ngAttributeAliasDirectives[ngAttr]=function(){return{priority:100,link:function link(scope,element,attr){//special case ngPattern when a literal regular expression value
	//is used as the expression (this way we don't have to watch anything).
	if(ngAttr==='ngPattern'&&attr.ngPattern.charAt(0)==='/'){var match=attr.ngPattern.match(REGEX_STRING_REGEXP);if(match){attr.$set('ngPattern',new RegExp(match[1],match[2]));return;}}scope.$watch(attr[ngAttr],function ngAttrAliasWatchAction(value){attr.$set(ngAttr,value);});}};};});// ng-src, ng-srcset, ng-href are interpolated
	forEach(['src','srcset','href'],function(attrName){var normalized=directiveNormalize('ng-'+attrName);ngAttributeAliasDirectives[normalized]=function(){return{priority:99,// it needs to run after the attributes are interpolated
	link:function link(scope,element,attr){var propName=attrName,name=attrName;if(attrName==='href'&&toString.call(element.prop('href'))==='[object SVGAnimatedString]'){name='xlinkHref';attr.$attr[name]='xlink:href';propName=null;}attr.$observe(normalized,function(value){if(!value){if(attrName==='href'){attr.$set(name,null);}return;}attr.$set(name,value);// Support: IE 9-11 only
	// On IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
	// then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
	// to set the property as well to achieve the desired effect.
	// We use attr[attrName] value since $set can sanitize the url.
	if(msie&&propName)element.prop(propName,attr[name]);});}};};});/* global -nullFormCtrl, -PENDING_CLASS, -SUBMITTED_CLASS
	 */var nullFormCtrl={$addControl:noop,$$renameControl:nullFormRenameControl,$removeControl:noop,$setValidity:noop,$setDirty:noop,$setPristine:noop,$setSubmitted:noop},PENDING_CLASS='ng-pending',SUBMITTED_CLASS='ng-submitted';function nullFormRenameControl(control,name){control.$name=name;}/**
	 * @ngdoc type
	 * @name form.FormController
	 *
	 * @property {boolean} $pristine True if user has not interacted with the form yet.
	 * @property {boolean} $dirty True if user has already interacted with the form.
	 * @property {boolean} $valid True if all of the containing forms and controls are valid.
	 * @property {boolean} $invalid True if at least one containing control or form is invalid.
	 * @property {boolean} $pending True if at least one containing control or form is pending.
	 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
	 *
	 * @property {Object} $error Is an object hash, containing references to controls or
	 *  forms with failing validators, where:
	 *
	 *  - keys are validation tokens (error names),
	 *  - values are arrays of controls or forms that have a failing validator for given error name.
	 *
	 *  Built-in validation tokens:
	 *
	 *  - `email`
	 *  - `max`
	 *  - `maxlength`
	 *  - `min`
	 *  - `minlength`
	 *  - `number`
	 *  - `pattern`
	 *  - `required`
	 *  - `url`
	 *  - `date`
	 *  - `datetimelocal`
	 *  - `time`
	 *  - `week`
	 *  - `month`
	 *
	 * @description
	 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
	 * such as being valid/invalid or dirty/pristine.
	 *
	 * Each {@link ng.directive:form form} directive creates an instance
	 * of `FormController`.
	 *
	 *///asks for $scope to fool the BC controller module
	FormController.$inject=['$element','$attrs','$scope','$animate','$interpolate'];function FormController($element,$attrs,$scope,$animate,$interpolate){this.$$controls=[];// init state
	this.$error={};this.$$success={};this.$pending=undefined;this.$name=$interpolate($attrs.name||$attrs.ngForm||'')($scope);this.$dirty=false;this.$pristine=true;this.$valid=true;this.$invalid=false;this.$submitted=false;this.$$parentForm=nullFormCtrl;this.$$element=$element;this.$$animate=$animate;setupValidity(this);}FormController.prototype={/**
	   * @ngdoc method
	   * @name form.FormController#$rollbackViewValue
	   *
	   * @description
	   * Rollback all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is typically needed by the reset button of
	   * a form that uses `ng-model-options` to pend updates.
	   */$rollbackViewValue:function $rollbackViewValue(){forEach(this.$$controls,function(control){control.$rollbackViewValue();});},/**
	   * @ngdoc method
	   * @name form.FormController#$commitViewValue
	   *
	   * @description
	   * Commit all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */$commitViewValue:function $commitViewValue(){forEach(this.$$controls,function(control){control.$commitViewValue();});},/**
	   * @ngdoc method
	   * @name form.FormController#$addControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Register a control with the form. Input elements using ngModelController do this automatically
	   * when they are linked.
	   *
	   * Note that the current state of the control will not be reflected on the new parent form. This
	   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
	   * state.
	   *
	   * However, if the method is used programmatically, for example by adding dynamically created controls,
	   * or controls that have been previously removed without destroying their corresponding DOM element,
	   * it's the developers responsibility to make sure the current state propagates to the parent form.
	   *
	   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
	   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
	   */$addControl:function $addControl(control){// Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
	// and not added to the scope.  Now we throw an error.
	assertNotHasOwnProperty(control.$name,'input');this.$$controls.push(control);if(control.$name){this[control.$name]=control;}control.$$parentForm=this;},// Private API: rename a form control
	$$renameControl:function $$renameControl(control,newName){var oldName=control.$name;if(this[oldName]===control){delete this[oldName];}this[newName]=control;control.$name=newName;},/**
	   * @ngdoc method
	   * @name form.FormController#$removeControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Deregister a control from the form.
	   *
	   * Input elements using ngModelController do this automatically when they are destroyed.
	   *
	   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
	   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
	   * different from case to case. For example, removing the only `$dirty` control from a form may or
	   * may not mean that the form is still `$dirty`.
	   */$removeControl:function $removeControl(control){if(control.$name&&this[control.$name]===control){delete this[control.$name];}forEach(this.$pending,function(value,name){// eslint-disable-next-line no-invalid-this
	this.$setValidity(name,null,control);},this);forEach(this.$error,function(value,name){// eslint-disable-next-line no-invalid-this
	this.$setValidity(name,null,control);},this);forEach(this.$$success,function(value,name){// eslint-disable-next-line no-invalid-this
	this.$setValidity(name,null,control);},this);arrayRemove(this.$$controls,control);control.$$parentForm=nullFormCtrl;},/**
	   * @ngdoc method
	   * @name form.FormController#$setDirty
	   *
	   * @description
	   * Sets the form to a dirty state.
	   *
	   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
	   * state (ng-dirty class). This method will also propagate to parent forms.
	   */$setDirty:function $setDirty(){this.$$animate.removeClass(this.$$element,PRISTINE_CLASS);this.$$animate.addClass(this.$$element,DIRTY_CLASS);this.$dirty=true;this.$pristine=false;this.$$parentForm.$setDirty();},/**
	   * @ngdoc method
	   * @name form.FormController#$setPristine
	   *
	   * @description
	   * Sets the form to its pristine state.
	   *
	   * This method sets the form's `$pristine` state to true, the `$dirty` state to false, removes
	   * the `ng-dirty` class and adds the `ng-pristine` class. Additionally, it sets the `$submitted`
	   * state to false.
	   *
	   * This method will also propagate to all the controls contained in this form.
	   *
	   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
	   * saving or resetting it.
	   */$setPristine:function $setPristine(){this.$$animate.setClass(this.$$element,PRISTINE_CLASS,DIRTY_CLASS+' '+SUBMITTED_CLASS);this.$dirty=false;this.$pristine=true;this.$submitted=false;forEach(this.$$controls,function(control){control.$setPristine();});},/**
	   * @ngdoc method
	   * @name form.FormController#$setUntouched
	   *
	   * @description
	   * Sets the form to its untouched state.
	   *
	   * This method can be called to remove the 'ng-touched' class and set the form controls to their
	   * untouched state (ng-untouched class).
	   *
	   * Setting a form controls back to their untouched state is often useful when setting the form
	   * back to its pristine state.
	   */$setUntouched:function $setUntouched(){forEach(this.$$controls,function(control){control.$setUntouched();});},/**
	   * @ngdoc method
	   * @name form.FormController#$setSubmitted
	   *
	   * @description
	   * Sets the form to its submitted state.
	   */$setSubmitted:function $setSubmitted(){this.$$animate.addClass(this.$$element,SUBMITTED_CLASS);this.$submitted=true;this.$$parentForm.$setSubmitted();}};/**
	 * @ngdoc method
	 * @name form.FormController#$setValidity
	 *
	 * @description
	 * Sets the validity of a form control.
	 *
	 * This method will also propagate to parent forms.
	 */addSetValidityMethod({clazz:FormController,set:function set(object,property,controller){var list=object[property];if(!list){object[property]=[controller];}else{var index=list.indexOf(controller);if(index===-1){list.push(controller);}}},unset:function unset(object,property,controller){var list=object[property];if(!list){return;}arrayRemove(list,controller);if(list.length===0){delete object[property];}}});/**
	 * @ngdoc directive
	 * @name ngForm
	 * @restrict EAC
	 *
	 * @description
	 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
	 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
	 * sub-group of controls needs to be determined.
	 *
	 * Note: the purpose of `ngForm` is to group controls,
	 * but not to be a replacement for the `<form>` tag with all of its capabilities
	 * (e.g. posting to the server, ...).
	 *
	 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 *
	 *//**
	 * @ngdoc directive
	 * @name form
	 * @restrict E
	 *
	 * @description
	 * Directive that instantiates
	 * {@link form.FormController FormController}.
	 *
	 * If the `name` attribute is specified, the form controller is published onto the current scope under
	 * this name.
	 *
	 * # Alias: {@link ng.directive:ngForm `ngForm`}
	 *
	 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
	 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
	 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
	 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
	 * of controls needs to be determined.
	 *
	 * # CSS classes
	 *  - `ng-valid` is set if the form is valid.
	 *  - `ng-invalid` is set if the form is invalid.
	 *  - `ng-pending` is set if the form is pending.
	 *  - `ng-pristine` is set if the form is pristine.
	 *  - `ng-dirty` is set if the form is dirty.
	 *  - `ng-submitted` is set if the form was submitted.
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 *
	 * # Submitting a form and preventing the default action
	 *
	 * Since the role of forms in client-side Angular applications is different than in classical
	 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
	 * page reload that sends the data to the server. Instead some javascript logic should be triggered
	 * to handle the form submission in an application-specific way.
	 *
	 * For this reason, Angular prevents the default action (form submission to the server) unless the
	 * `<form>` element has an `action` attribute specified.
	 *
	 * You can use one of the following two ways to specify what javascript method should be called when
	 * a form is submitted:
	 *
	 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
	 * - {@link ng.directive:ngClick ngClick} directive on the first
	  *  button or input field of type submit (input[type=submit])
	 *
	 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
	 * or {@link ng.directive:ngClick ngClick} directives.
	 * This is because of the following form submission rules in the HTML specification:
	 *
	 * - If a form has only one input field then hitting enter in this field triggers form submit
	 * (`ngSubmit`)
	 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
	 * doesn't trigger submit
	 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
	 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
	 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
	 *
	 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
	 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * ## Animation Hooks
	 *
	 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
	 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
	 * other validations that are performed within the form. Animations in ngForm are similar to how
	 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
	 * as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style a form element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	    <example name="ng-form" deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
	      <file name="index.html">
	       <script>
	         angular.module('formExample', [])
	           .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
	       </script>
	       <style>
	        .my-form {
	          transition:all linear 0.5s;
	          background: transparent;
	        }
	        .my-form.ng-invalid {
	          background: red;
	        }
	       </style>
	       <form name="myForm" ng-controller="FormController" class="my-form">
	         userType: <input name="input" ng-model="userType" required>
	         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
	         <code>userType = {{userType}}</code><br>
	         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
	         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
	         <code>myForm.$valid = {{myForm.$valid}}</code><br>
	         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));

	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });

	        it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));

	          userInput.clear();
	          userInput.sendKeys('');

	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 *
	 * @param {string=} name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 */var formDirectiveFactory=function formDirectiveFactory(isNgForm){return['$timeout','$parse',function($timeout,$parse){var formDirective={name:'form',restrict:isNgForm?'EAC':'E',require:['form','^^?form'],//first is the form's own ctrl, second is an optional parent form
	controller:FormController,compile:function ngFormCompile(formElement,attr){// Setup initial state of the control
	formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);var nameAttr=attr.name?'name':isNgForm&&attr.ngForm?'ngForm':false;return{pre:function ngFormPreLink(scope,formElement,attr,ctrls){var controller=ctrls[0];// if `action` attr is not present on the form, prevent the default action (submission)
	if(!('action'in attr)){// we can't use jq events because if a form is destroyed during submission the default
	// action is not prevented. see #1238
	//
	// IE 9 is not affected because it doesn't fire a submit event and try to do a full
	// page reload if the form was destroyed by submission of the form via a click handler
	// on a button in the form. Looks like an IE9 specific bug.
	var handleFormSubmission=function handleFormSubmission(event){scope.$apply(function(){controller.$commitViewValue();controller.$setSubmitted();});event.preventDefault();};formElement[0].addEventListener('submit',handleFormSubmission);// unregister the preventDefault listener so that we don't not leak memory but in a
	// way that will achieve the prevention of the default action.
	formElement.on('$destroy',function(){$timeout(function(){formElement[0].removeEventListener('submit',handleFormSubmission);},0,false);});}var parentFormCtrl=ctrls[1]||controller.$$parentForm;parentFormCtrl.$addControl(controller);var setter=nameAttr?getSetter(controller.$name):noop;if(nameAttr){setter(scope,controller);attr.$observe(nameAttr,function(newValue){if(controller.$name===newValue)return;setter(scope,undefined);controller.$$parentForm.$$renameControl(controller,newValue);setter=getSetter(controller.$name);setter(scope,controller);});}formElement.on('$destroy',function(){controller.$$parentForm.$removeControl(controller);setter(scope,undefined);extend(controller,nullFormCtrl);//stop propagating child destruction handlers upwards
	});}};}};return formDirective;function getSetter(expression){if(expression===''){//create an assignable expression, so forms with an empty name can be renamed later
	return $parse('this[""]').assign;}return $parse(expression).assign||noop;}}];};var formDirective=formDirectiveFactory();var ngFormDirective=formDirectiveFactory(true);// helper methods
	function setupValidity(instance){instance.$$classCache={};instance.$$classCache[INVALID_CLASS]=!(instance.$$classCache[VALID_CLASS]=instance.$$element.hasClass(VALID_CLASS));}function addSetValidityMethod(context){var clazz=context.clazz,set=context.set,unset=context.unset;clazz.prototype.$setValidity=function(validationErrorKey,state,controller){if(isUndefined(state)){createAndSet(this,'$pending',validationErrorKey,controller);}else{unsetAndCleanup(this,'$pending',validationErrorKey,controller);}if(!isBoolean(state)){unset(this.$error,validationErrorKey,controller);unset(this.$$success,validationErrorKey,controller);}else{if(state){unset(this.$error,validationErrorKey,controller);set(this.$$success,validationErrorKey,controller);}else{set(this.$error,validationErrorKey,controller);unset(this.$$success,validationErrorKey,controller);}}if(this.$pending){cachedToggleClass(this,PENDING_CLASS,true);this.$valid=this.$invalid=undefined;toggleValidationCss(this,'',null);}else{cachedToggleClass(this,PENDING_CLASS,false);this.$valid=isObjectEmpty(this.$error);this.$invalid=!this.$valid;toggleValidationCss(this,'',this.$valid);}// re-read the state as the set/unset methods could have
	// combined state in this.$error[validationError] (used for forms),
	// where setting/unsetting only increments/decrements the value,
	// and does not replace it.
	var combinedState;if(this.$pending&&this.$pending[validationErrorKey]){combinedState=undefined;}else if(this.$error[validationErrorKey]){combinedState=false;}else if(this.$$success[validationErrorKey]){combinedState=true;}else{combinedState=null;}toggleValidationCss(this,validationErrorKey,combinedState);this.$$parentForm.$setValidity(validationErrorKey,combinedState,this);};function createAndSet(ctrl,name,value,controller){if(!ctrl[name]){ctrl[name]={};}set(ctrl[name],value,controller);}function unsetAndCleanup(ctrl,name,value,controller){if(ctrl[name]){unset(ctrl[name],value,controller);}if(isObjectEmpty(ctrl[name])){ctrl[name]=undefined;}}function cachedToggleClass(ctrl,className,switchValue){if(switchValue&&!ctrl.$$classCache[className]){ctrl.$$animate.addClass(ctrl.$$element,className);ctrl.$$classCache[className]=true;}else if(!switchValue&&ctrl.$$classCache[className]){ctrl.$$animate.removeClass(ctrl.$$element,className);ctrl.$$classCache[className]=false;}}function toggleValidationCss(ctrl,validationErrorKey,isValid){validationErrorKey=validationErrorKey?'-'+snake_case(validationErrorKey,'-'):'';cachedToggleClass(ctrl,VALID_CLASS+validationErrorKey,isValid===true);cachedToggleClass(ctrl,INVALID_CLASS+validationErrorKey,isValid===false);}}function isObjectEmpty(obj){if(obj){for(var prop in obj){if(obj.hasOwnProperty(prop)){return false;}}}return true;}/* global
	  VALID_CLASS: false,
	  INVALID_CLASS: false,
	  PRISTINE_CLASS: false,
	  DIRTY_CLASS: false,
	  ngModelMinErr: false
	*/// Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
	var ISO_DATE_REGEXP=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
	// Note: We are being more lenient, because browsers are too.
	//   1. Scheme
	//   2. Slashes
	//   3. Username
	//   4. Password
	//   5. Hostname
	//   6. Port
	//   7. Path
	//   8. Query
	//   9. Fragment
	//                 1111111111111111 222   333333    44444        55555555555555555555555     666     77777777     8888888     999
	var URL_REGEXP=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;// eslint-disable-next-line max-len
	var EMAIL_REGEXP=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;var NUMBER_REGEXP=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;var DATE_REGEXP=/^(\d{4,})-(\d{2})-(\d{2})$/;var DATETIMELOCAL_REGEXP=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;var WEEK_REGEXP=/^(\d{4,})-W(\d\d)$/;var MONTH_REGEXP=/^(\d{4,})-(\d\d)$/;var TIME_REGEXP=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;var PARTIAL_VALIDATION_EVENTS='keydown wheel mousedown';var PARTIAL_VALIDATION_TYPES=createMap();forEach('date,datetime-local,month,time,week'.split(','),function(type){PARTIAL_VALIDATION_TYPES[type]=true;});var inputType={/**
	   * @ngdoc input
	   * @name input[text]
	   *
	   * @description
	   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Adds `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	   *    This parameter is ignored for input[type=password] controls, which will never trim the
	   *    input.
	   *
	   * @example
	      <example name="text-input-directive" module="textInputExample">
	        <file name="index.html">
	         <script>
	           angular.module('textInputExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 text: 'guest',
	                 word: /^\s*\w*\s*$/
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Single word:
	             <input type="text" name="input" ng-model="example.text"
	                    ng-pattern="example.word" required ng-trim="false">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.pattern">
	               Single word only!</span>
	           </div>
	           <code>text = {{example.text}}</code><br/>
	           <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br/>
	           <code>myForm.input.$error = {{myForm.input.$error}}</code><br/>
	           <code>myForm.$valid = {{myForm.$valid}}</code><br/>
	           <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('example.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('guest');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');

	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if multi word', function() {
	            input.clear();
	            input.sendKeys('hello world');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */'text':textInputType,/**
	     * @ngdoc input
	     * @name input[date]
	     *
	     * @description
	     * Input with date validation and transformation. In browsers that do not yet support
	     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
	     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
	     * modern browsers do not yet support this input type, it is important to provide cues to users on the
	     * expected input format via a placeholder or label.
	     *
	     * The model must always be a Date object, otherwise Angular will throw an error.
	     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	     *
	     * The timezone to be used to read/write the `Date` instance in the model can be defined using
	     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	     *
	     * @param {string} ngModel Assignable angular expression to data-bind to.
	     * @param {string=} name Property name of the form under which the control is published.
	     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
	     *   constraint validation.
	     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
	     *   constraint validation.
	     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
	     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
	     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	     * @param {string=} required Sets `required` validation error key if the value is not entered.
	     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	     *    `required` when you want to data-bind to the `required` attribute.
	     * @param {string=} ngChange Angular expression to be executed when input changes due to user
	     *    interaction with the input element.
	     *
	     * @example
	     <example name="date-input-directive" module="dateInputExample">
	     <file name="index.html">
	       <script>
	          angular.module('dateInputExample', [])
	            .controller('DateController', ['$scope', function($scope) {
	              $scope.example = {
	                value: new Date(2013, 9, 22)
	              };
	            }]);
	       </script>
	       <form name="myForm" ng-controller="DateController as dateCtrl">
	          <label for="exampleInput">Pick a date in 2013:</label>
	          <input type="date" id="exampleInput" name="input" ng-model="example.value"
	              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
	          <div role="alert">
	            <span class="error" ng-show="myForm.input.$error.required">
	                Required!</span>
	            <span class="error" ng-show="myForm.input.$error.date">
	                Not a valid date!</span>
	           </div>
	           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	       </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
	        var valid = element(by.binding('myForm.input.$valid'));

	        // currently protractor/webdriver does not support
	        // sending keys to all known HTML5 input controls
	        // for various browsers (see https://github.com/angular/protractor/issues/562).
	        function setInput(val) {
	          // set the value of the element and force validation.
	          var scr = "var ipt = document.getElementById('exampleInput'); " +
	          "ipt.value = '" + val + "';" +
	          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	          browser.executeScript(scr);
	        }

	        it('should initialize to model', function() {
	          expect(value.getText()).toContain('2013-10-22');
	          expect(valid.getText()).toContain('myForm.input.$valid = true');
	        });

	        it('should be invalid if empty', function() {
	          setInput('');
	          expect(value.getText()).toEqual('value =');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });

	        it('should be invalid if over max', function() {
	          setInput('2015-01-01');
	          expect(value.getText()).toContain('');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	     </file>
	     </example>
	     */'date':createDateInputType('date',DATE_REGEXP,createDateParser(DATE_REGEXP,['yyyy','MM','dd']),'yyyy-MM-dd'),/**
	    * @ngdoc input
	    * @name input[datetime-local]
	    *
	    * @description
	    * Input with datetime validation and transformation. In browsers that do not yet support
	    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `min` will also add native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `max` will also add native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="datetimelocal-input-directive" module="dateExample">
	    <file name="index.html">
	      <script>
	        angular.module('dateExample', [])
	          .controller('DateController', ['$scope', function($scope) {
	            $scope.example = {
	              value: new Date(2010, 11, 28, 14, 57)
	            };
	          }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a date between in 2013:</label>
	        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.datetimelocal">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2010-12-28T14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-01-01T23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */'datetime-local':createDateInputType('datetimelocal',DATETIMELOCAL_REGEXP,createDateParser(DATETIMELOCAL_REGEXP,['yyyy','MM','dd','HH','mm','ss','sss']),'yyyy-MM-ddTHH:mm:ss.sss'),/**
	   * @ngdoc input
	   * @name input[time]
	   *
	   * @description
	   * Input with time validation and transformation. In browsers that do not yet support
	   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
	   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
	   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
	   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="time-input-directive" module="timeExample">
	   <file name="index.html">
	     <script>
	      angular.module('timeExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(1970, 0, 1, 14, 57, 0)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a time between 8am and 5pm:</label>
	        <input type="time" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.time">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */'time':createDateInputType('time',TIME_REGEXP,createDateParser(TIME_REGEXP,['HH','mm','ss','sss']),'HH:mm:ss.sss'),/**
	    * @ngdoc input
	    * @name input[week]
	    *
	    * @description
	    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
	    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * week format (yyyy-W##), for example: `2013-W02`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
	    *   native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
	    *   native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="week-input-directive" module="weekExample">
	    <file name="index.html">
	      <script>
	      angular.module('weekExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 0, 3)
	          };
	        }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label>Pick a date between in 2013:
	          <input id="exampleInput" type="week" name="input" ng-model="example.value"
	                 placeholder="YYYY-W##" min="2012-W32"
	                 max="2013-W52" required />
	        </label>
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.week">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-Www"'));
	      var valid = element(by.binding('myForm.input.$valid'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-W01');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-W01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */'week':createDateInputType('week',WEEK_REGEXP,weekParser,'yyyy-Www'),/**
	   * @ngdoc input
	   * @name input[month]
	   *
	   * @description
	   * Input with month validation and transformation. In browsers that do not yet support
	   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * month format (yyyy-MM), for example: `2009-01`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   * If the model is not set to the first of the month, the next view to model update will set it
	   * to the first of the month.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.

	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="month-input-directive" module="monthExample">
	   <file name="index.html">
	     <script>
	      angular.module('monthExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 9, 1)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	       <label for="exampleInput">Pick a month in 2013:</label>
	       <input id="exampleInput" type="month" name="input" ng-model="example.value"
	          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
	       <div role="alert">
	         <span class="error" ng-show="myForm.input.$error.required">
	            Required!</span>
	         <span class="error" ng-show="myForm.input.$error.month">
	            Not a valid month!</span>
	       </div>
	       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
	       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM"'));
	      var valid = element(by.binding('myForm.input.$valid'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-10');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */'month':createDateInputType('month',MONTH_REGEXP,createDateParser(MONTH_REGEXP,['yyyy','MM']),'yyyy-MM'),/**
	   * @ngdoc input
	   * @name input[number]
	   *
	   * @description
	   * Text input with number validation and transformation. Sets the `number` validation
	   * error if not a valid number.
	   *
	   * <div class="alert alert-warning">
	   * The model must always be of type `number` otherwise Angular will throw an error.
	   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
	   * error docs for more information and an example of how to convert your model if necessary.
	   * </div>
	   *
	   * ## Issues with HTML5 constraint validation
	   *
	   * In browsers that follow the
	   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
	   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
	   * If a non-number is entered in the input, the browser will report the value as an empty string,
	   * which means the view / model values in `ngModel` and subsequently the scope value
	   * will also be an empty string.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *    Can be interpolated.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *    Can be interpolated.
	   * @param {string=} ngMin Like `min`, sets the `min` validation error key if the value entered is less than `ngMin`,
	   *    but does not trigger HTML5 native validation. Takes an expression.
	   * @param {string=} ngMax Like `max`, sets the `max` validation error key if the value entered is greater than `ngMax`,
	   *    but does not trigger HTML5 native validation. Takes an expression.
	   * @param {string=} step Sets the `step` validation error key if the value entered does not fit the `step` constraint.
	   *    Can be interpolated.
	   * @param {string=} ngStep Like `step`, sets the `step` validation error key if the value entered does not fit the `ngStep` constraint,
	   *    but does not trigger HTML5 native validation. Takes an expression.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="number-input-directive" module="numberExample">
	        <file name="index.html">
	         <script>
	           angular.module('numberExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 value: 12
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Number:
	             <input type="number" name="input" ng-model="example.value"
	                    min="0" max="99" required>
	          </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.number">
	               Not valid number!</span>
	           </div>
	           <tt>value = {{example.value}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var value = element(by.binding('example.value'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.value'));

	          it('should initialize to model', function() {
	            expect(value.getText()).toContain('12');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if over max', function() {
	            input.clear();
	            input.sendKeys('123');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */'number':numberInputType,/**
	   * @ngdoc input
	   * @name input[url]
	   *
	   * @description
	   * Text input with URL validation. Sets the `url` validation error key if the content is not a
	   * valid URL.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
	   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
	   * the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="url-input-directive" module="urlExample">
	        <file name="index.html">
	         <script>
	           angular.module('urlExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.url = {
	                 text: 'http://google.com'
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>URL:
	             <input type="url" name="input" ng-model="url.text" required>
	           <label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.url">
	               Not valid url!</span>
	           </div>
	           <tt>text = {{url.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('url.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('url.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('http://google.com');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');

	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if not url', function() {
	            input.clear();
	            input.sendKeys('box');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */'url':urlInputType,/**
	   * @ngdoc input
	   * @name input[email]
	   *
	   * @description
	   * Text input with email validation. Sets the `email` validation error key if not a valid email
	   * address.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
	   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
	   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="email-input-directive" module="emailExample">
	        <file name="index.html">
	         <script>
	           angular.module('emailExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.email = {
	                 text: 'me@example.com'
	               };
	             }]);
	         </script>
	           <form name="myForm" ng-controller="ExampleController">
	             <label>Email:
	               <input type="email" name="input" ng-model="email.text" required>
	             </label>
	             <div role="alert">
	               <span class="error" ng-show="myForm.input.$error.required">
	                 Required!</span>
	               <span class="error" ng-show="myForm.input.$error.email">
	                 Not valid email!</span>
	             </div>
	             <tt>text = {{email.text}}</tt><br/>
	             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
	           </form>
	         </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('email.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('email.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('me@example.com');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if not email', function() {
	            input.clear();
	            input.sendKeys('xxx');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */'email':emailInputType,/**
	   * @ngdoc input
	   * @name input[radio]
	   *
	   * @description
	   * HTML radio button.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string} value The value to which the `ngModel` expression should be set when selected.
	   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
	   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
	   *    is selected. Should be used instead of the `value` attribute if you need
	   *    a non-string `ngModel` (`boolean`, `array`, ...).
	   *
	   * @example
	      <example name="radio-input-directive" module="radioExample">
	        <file name="index.html">
	         <script>
	           angular.module('radioExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.color = {
	                 name: 'blue'
	               };
	               $scope.specialValue = {
	                 "id": "12345",
	                 "value": "green"
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>
	             <input type="radio" ng-model="color.name" value="red">
	             Red
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" ng-value="specialValue">
	             Green
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" value="blue">
	             Blue
	           </label><br/>
	           <tt>color = {{color.name | json}}</tt><br/>
	          </form>
	          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var inputs = element.all(by.model('color.name'));
	            var color = element(by.binding('color.name'));

	            expect(color.getText()).toContain('blue');

	            inputs.get(0).click();
	            expect(color.getText()).toContain('red');

	            inputs.get(1).click();
	            expect(color.getText()).toContain('green');
	          });
	        </file>
	      </example>
	   */'radio':radioInputType,/**
	   * @ngdoc input
	   * @name input[range]
	   *
	   * @description
	   * Native range input with validation and transformation.
	   *
	   * The model for the range input must always be a `Number`.
	   *
	   * IE9 and other browsers that do not support the `range` type fall back
	   * to a text input without any default values for `min`, `max` and `step`. Model binding,
	   * validation and number parsing are nevertheless supported.
	   *
	   * Browsers that support range (latest Chrome, Safari, Firefox, Edge) treat `input[range]`
	   * in a way that never allows the input to hold an invalid value. That means:
	   * - any non-numerical value is set to `(max + min) / 2`.
	   * - any numerical value that is less than the current min val, or greater than the current max val
	   * is set to the min / max val respectively.
	   * - additionally, the current `step` is respected, so the nearest value that satisfies a step
	   * is used.
	   *
	   * See the [HTML Spec on input[type=range]](https://www.w3.org/TR/html5/forms.html#range-state-(type=range))
	   * for more info.
	   *
	   * This has the following consequences for Angular:
	   *
	   * Since the element value should always reflect the current model value, a range input
	   * will set the bound ngModel expression to the value that the browser has set for the
	   * input element. For example, in the following input `<input type="range" ng-model="model.value">`,
	   * if the application sets `model.value = null`, the browser will set the input to `'50'`.
	   * Angular will then set the model to `50`, to prevent input and model value being out of sync.
	   *
	   * That means the model for range will immediately be set to `50` after `ngModel` has been
	   * initialized. It also means a range input can never have the required error.
	   *
	   * This does not only affect changes to the model value, but also to the values of the `min`,
	   * `max`, and `step` attributes. When these change in a way that will cause the browser to modify
	   * the input value, Angular will also update the model value.
	   *
	   * Automatic value adjustment also means that a range input element can never have the `required`,
	   * `min`, or `max` errors.
	   *
	   * However, `step` is currently only fully implemented by Firefox. Other browsers have problems
	   * when the step value changes dynamically - they do not adjust the element value correctly, but
	   * instead may set the `stepMismatch` error. If that's the case, the Angular will set the `step`
	   * error on the input, and set the model to `undefined`.
	   *
	   * Note that `input[range]` is not compatible with`ngMax`, `ngMin`, and `ngStep`, because they do
	   * not set the `min` and `max` attributes, which means that the browser won't automatically adjust
	   * the input value based on their values, and will always assume min = 0, max = 100, and step = 1.
	   *
	   * @param {string}  ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation to ensure that the value entered is greater
	   *                  than `min`. Can be interpolated.
	   * @param {string=} max Sets the `max` validation to ensure that the value entered is less than `max`.
	   *                  Can be interpolated.
	   * @param {string=} step Sets the `step` validation to ensure that the value entered matches the `step`
	   *                  Can be interpolated.
	   * @param {string=} ngChange Angular expression to be executed when the ngModel value changes due
	   *                  to user interaction with the input element.
	   * @param {expression=} ngChecked If the expression is truthy, then the `checked` attribute will be set on the
	   *                      element. **Note** : `ngChecked` should not be used alongside `ngModel`.
	   *                      Checkout {@link ng.directive:ngChecked ngChecked} for usage.
	   *
	   * @example
	      <example name="range-input-directive" module="rangeExample">
	        <file name="index.html">
	          <script>
	            angular.module('rangeExample', [])
	              .controller('ExampleController', ['$scope', function($scope) {
	                $scope.value = 75;
	                $scope.min = 10;
	                $scope.max = 90;
	              }]);
	          </script>
	          <form name="myForm" ng-controller="ExampleController">

	            Model as range: <input type="range" name="range" ng-model="value" min="{{min}}"  max="{{max}}">
	            <hr>
	            Model as number: <input type="number" ng-model="value"><br>
	            Min: <input type="number" ng-model="min"><br>
	            Max: <input type="number" ng-model="max"><br>
	            value = <code>{{value}}</code><br/>
	            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
	            myForm.range.$error = <code>{{myForm.range.$error}}</code>
	          </form>
	        </file>
	      </example>

	   * ## Range Input with ngMin & ngMax attributes

	   * @example
	      <example name="range-input-directive-ng" module="rangeExample">
	        <file name="index.html">
	          <script>
	            angular.module('rangeExample', [])
	              .controller('ExampleController', ['$scope', function($scope) {
	                $scope.value = 75;
	                $scope.min = 10;
	                $scope.max = 90;
	              }]);
	          </script>
	          <form name="myForm" ng-controller="ExampleController">
	            Model as range: <input type="range" name="range" ng-model="value" ng-min="min" ng-max="max">
	            <hr>
	            Model as number: <input type="number" ng-model="value"><br>
	            Min: <input type="number" ng-model="min"><br>
	            Max: <input type="number" ng-model="max"><br>
	            value = <code>{{value}}</code><br/>
	            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
	            myForm.range.$error = <code>{{myForm.range.$error}}</code>
	          </form>
	        </file>
	      </example>

	   */'range':rangeInputType,/**
	   * @ngdoc input
	   * @name input[checkbox]
	   *
	   * @description
	   * HTML checkbox.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
	   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="checkbox-input-directive" module="checkboxExample">
	        <file name="index.html">
	         <script>
	           angular.module('checkboxExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.checkboxModel = {
	                value1 : true,
	                value2 : 'YES'
	              };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Value1:
	             <input type="checkbox" ng-model="checkboxModel.value1">
	           </label><br/>
	           <label>Value2:
	             <input type="checkbox" ng-model="checkboxModel.value2"
	                    ng-true-value="'YES'" ng-false-value="'NO'">
	            </label><br/>
	           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
	           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var value1 = element(by.binding('checkboxModel.value1'));
	            var value2 = element(by.binding('checkboxModel.value2'));

	            expect(value1.getText()).toContain('true');
	            expect(value2.getText()).toContain('YES');

	            element(by.model('checkboxModel.value1')).click();
	            element(by.model('checkboxModel.value2')).click();

	            expect(value1.getText()).toContain('false');
	            expect(value2.getText()).toContain('NO');
	          });
	        </file>
	      </example>
	   */'checkbox':checkboxInputType,'hidden':noop,'button':noop,'submit':noop,'reset':noop,'file':noop};function stringBasedInputType(ctrl){ctrl.$formatters.push(function(value){return ctrl.$isEmpty(value)?value:value.toString();});}function textInputType(scope,element,attr,ctrl,$sniffer,$browser){baseInputType(scope,element,attr,ctrl,$sniffer,$browser);stringBasedInputType(ctrl);}function baseInputType(scope,element,attr,ctrl,$sniffer,$browser){var type=lowercase(element[0].type);// In composition mode, users are still inputting intermediate text buffer,
	// hold the listener until composition is done.
	// More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
	if(!$sniffer.android){var composing=false;element.on('compositionstart',function(){composing=true;});element.on('compositionend',function(){composing=false;listener();});}var timeout;var listener=function listener(ev){if(timeout){$browser.defer.cancel(timeout);timeout=null;}if(composing)return;var value=element.val(),event=ev&&ev.type;// By default we will trim the value
	// If the attribute ng-trim exists we will avoid trimming
	// If input type is 'password', the value is never trimmed
	if(type!=='password'&&(!attr.ngTrim||attr.ngTrim!=='false')){value=trim(value);}// If a control is suffering from bad input (due to native validators), browsers discard its
	// value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
	// control's value is the same empty value twice in a row.
	if(ctrl.$viewValue!==value||value===''&&ctrl.$$hasNativeValidators){ctrl.$setViewValue(value,event);}};// if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
	// input event on backspace, delete or cut
	if($sniffer.hasEvent('input')){element.on('input',listener);}else{var deferListener=function deferListener(ev,input,origValue){if(!timeout){timeout=$browser.defer(function(){timeout=null;if(!input||input.value!==origValue){listener(ev);}});}};element.on('keydown',/** @this */function(event){var key=event.keyCode;// ignore
	//    command            modifiers                   arrows
	if(key===91||15<key&&key<19||37<=key&&key<=40)return;deferListener(event,this,this.value);});// if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
	if($sniffer.hasEvent('paste')){element.on('paste cut',deferListener);}}// if user paste into input using mouse on older browser
	// or form autocomplete on newer browser, we need "change" event to catch it
	element.on('change',listener);// Some native input types (date-family) have the ability to change validity without
	// firing any input/change events.
	// For these event types, when native validators are present and the browser supports the type,
	// check for validity changes on various DOM events.
	if(PARTIAL_VALIDATION_TYPES[type]&&ctrl.$$hasNativeValidators&&type===attr.type){element.on(PARTIAL_VALIDATION_EVENTS,/** @this */function(ev){if(!timeout){var validity=this[VALIDITY_STATE_PROPERTY];var origBadInput=validity.badInput;var origTypeMismatch=validity.typeMismatch;timeout=$browser.defer(function(){timeout=null;if(validity.badInput!==origBadInput||validity.typeMismatch!==origTypeMismatch){listener(ev);}});}});}ctrl.$render=function(){// Workaround for Firefox validation #12102.
	var value=ctrl.$isEmpty(ctrl.$viewValue)?'':ctrl.$viewValue;if(element.val()!==value){element.val(value);}};}function weekParser(isoWeek,existingDate){if(isDate(isoWeek)){return isoWeek;}if(isString(isoWeek)){WEEK_REGEXP.lastIndex=0;var parts=WEEK_REGEXP.exec(isoWeek);if(parts){var year=+parts[1],week=+parts[2],hours=0,minutes=0,seconds=0,milliseconds=0,firstThurs=getFirstThursdayOfYear(year),addDays=(week-1)*7;if(existingDate){hours=existingDate.getHours();minutes=existingDate.getMinutes();seconds=existingDate.getSeconds();milliseconds=existingDate.getMilliseconds();}return new Date(year,0,firstThurs.getDate()+addDays,hours,minutes,seconds,milliseconds);}}return NaN;}function createDateParser(regexp,mapping){return function(iso,date){var parts,map;if(isDate(iso)){return iso;}if(isString(iso)){// When a date is JSON'ified to wraps itself inside of an extra
	// set of double quotes. This makes the date parsing code unable
	// to match the date string and parse it as a date.
	if(iso.charAt(0)==='"'&&iso.charAt(iso.length-1)==='"'){iso=iso.substring(1,iso.length-1);}if(ISO_DATE_REGEXP.test(iso)){return new Date(iso);}regexp.lastIndex=0;parts=regexp.exec(iso);if(parts){parts.shift();if(date){map={yyyy:date.getFullYear(),MM:date.getMonth()+1,dd:date.getDate(),HH:date.getHours(),mm:date.getMinutes(),ss:date.getSeconds(),sss:date.getMilliseconds()/1000};}else{map={yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0};}forEach(parts,function(part,index){if(index<mapping.length){map[mapping[index]]=+part;}});return new Date(map.yyyy,map.MM-1,map.dd,map.HH,map.mm,map.ss||0,map.sss*1000||0);}}return NaN;};}function createDateInputType(type,regexp,parseDate,format){return function dynamicDateInputType(scope,element,attr,ctrl,$sniffer,$browser,$filter){badInputChecker(scope,element,attr,ctrl);baseInputType(scope,element,attr,ctrl,$sniffer,$browser);var timezone=ctrl&&ctrl.$options.getOption('timezone');var previousDate;ctrl.$$parserName=type;ctrl.$parsers.push(function(value){if(ctrl.$isEmpty(value))return null;if(regexp.test(value)){// Note: We cannot read ctrl.$modelValue, as there might be a different
	// parser/formatter in the processing chain so that the model
	// contains some different data format!
	var parsedDate=parseDate(value,previousDate);if(timezone){parsedDate=convertTimezoneToLocal(parsedDate,timezone);}return parsedDate;}return undefined;});ctrl.$formatters.push(function(value){if(value&&!isDate(value)){throw ngModelMinErr('datefmt','Expected `{0}` to be a date',value);}if(isValidDate(value)){previousDate=value;if(previousDate&&timezone){previousDate=convertTimezoneToLocal(previousDate,timezone,true);}return $filter('date')(value,format,timezone);}else{previousDate=null;return'';}});if(isDefined(attr.min)||attr.ngMin){var minVal;ctrl.$validators.min=function(value){return!isValidDate(value)||isUndefined(minVal)||parseDate(value)>=minVal;};attr.$observe('min',function(val){minVal=parseObservedDateValue(val);ctrl.$validate();});}if(isDefined(attr.max)||attr.ngMax){var maxVal;ctrl.$validators.max=function(value){return!isValidDate(value)||isUndefined(maxVal)||parseDate(value)<=maxVal;};attr.$observe('max',function(val){maxVal=parseObservedDateValue(val);ctrl.$validate();});}function isValidDate(value){// Invalid Date: getTime() returns NaN
	return value&&!(value.getTime&&value.getTime()!==value.getTime());}function parseObservedDateValue(val){return isDefined(val)&&!isDate(val)?parseDate(val)||undefined:val;}};}function badInputChecker(scope,element,attr,ctrl){var node=element[0];var nativeValidation=ctrl.$$hasNativeValidators=isObject(node.validity);if(nativeValidation){ctrl.$parsers.push(function(value){var validity=element.prop(VALIDITY_STATE_PROPERTY)||{};return validity.badInput||validity.typeMismatch?undefined:value;});}}function numberFormatterParser(ctrl){ctrl.$$parserName='number';ctrl.$parsers.push(function(value){if(ctrl.$isEmpty(value))return null;if(NUMBER_REGEXP.test(value))return parseFloat(value);return undefined;});ctrl.$formatters.push(function(value){if(!ctrl.$isEmpty(value)){if(!isNumber(value)){throw ngModelMinErr('numfmt','Expected `{0}` to be a number',value);}value=value.toString();}return value;});}function parseNumberAttrVal(val){if(isDefined(val)&&!isNumber(val)){val=parseFloat(val);}return!isNumberNaN(val)?val:undefined;}function isNumberInteger(num){// See http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#14794066
	// (minus the assumption that `num` is a number)
	// eslint-disable-next-line no-bitwise
	return(num|0)===num;}function countDecimals(num){var numString=num.toString();var decimalSymbolIndex=numString.indexOf('.');if(decimalSymbolIndex===-1){if(-1<num&&num<1){// It may be in the exponential notation format (`1e-X`)
	var match=/e-(\d+)$/.exec(numString);if(match){return Number(match[1]);}}return 0;}return numString.length-decimalSymbolIndex-1;}function isValidForStep(viewValue,stepBase,step){// At this point `stepBase` and `step` are expected to be non-NaN values
	// and `viewValue` is expected to be a valid stringified number.
	var value=Number(viewValue);// Due to limitations in Floating Point Arithmetic (e.g. `0.3 - 0.2 !== 0.1` or
	// `0.5 % 0.1 !== 0`), we need to convert all numbers to integers.
	if(!isNumberInteger(value)||!isNumberInteger(stepBase)||!isNumberInteger(step)){var decimalCount=Math.max(countDecimals(value),countDecimals(stepBase),countDecimals(step));var multiplier=Math.pow(10,decimalCount);value=value*multiplier;stepBase=stepBase*multiplier;step=step*multiplier;}return(value-stepBase)%step===0;}function numberInputType(scope,element,attr,ctrl,$sniffer,$browser){badInputChecker(scope,element,attr,ctrl);numberFormatterParser(ctrl);baseInputType(scope,element,attr,ctrl,$sniffer,$browser);var minVal;var maxVal;if(isDefined(attr.min)||attr.ngMin){ctrl.$validators.min=function(value){return ctrl.$isEmpty(value)||isUndefined(minVal)||value>=minVal;};attr.$observe('min',function(val){minVal=parseNumberAttrVal(val);// TODO(matsko): implement validateLater to reduce number of validations
	ctrl.$validate();});}if(isDefined(attr.max)||attr.ngMax){ctrl.$validators.max=function(value){return ctrl.$isEmpty(value)||isUndefined(maxVal)||value<=maxVal;};attr.$observe('max',function(val){maxVal=parseNumberAttrVal(val);// TODO(matsko): implement validateLater to reduce number of validations
	ctrl.$validate();});}if(isDefined(attr.step)||attr.ngStep){var stepVal;ctrl.$validators.step=function(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||isUndefined(stepVal)||isValidForStep(viewValue,minVal||0,stepVal);};attr.$observe('step',function(val){stepVal=parseNumberAttrVal(val);// TODO(matsko): implement validateLater to reduce number of validations
	ctrl.$validate();});}}function rangeInputType(scope,element,attr,ctrl,$sniffer,$browser){badInputChecker(scope,element,attr,ctrl);numberFormatterParser(ctrl);baseInputType(scope,element,attr,ctrl,$sniffer,$browser);var supportsRange=ctrl.$$hasNativeValidators&&element[0].type==='range',minVal=supportsRange?0:undefined,maxVal=supportsRange?100:undefined,stepVal=supportsRange?1:undefined,validity=element[0].validity,hasMinAttr=isDefined(attr.min),hasMaxAttr=isDefined(attr.max),hasStepAttr=isDefined(attr.step);var originalRender=ctrl.$render;ctrl.$render=supportsRange&&isDefined(validity.rangeUnderflow)&&isDefined(validity.rangeOverflow)?//Browsers that implement range will set these values automatically, but reading the adjusted values after
	//$render would cause the min / max validators to be applied with the wrong value
	function rangeRender(){originalRender();ctrl.$setViewValue(element.val());}:originalRender;if(hasMinAttr){ctrl.$validators.min=supportsRange?// Since all browsers set the input to a valid value, we don't need to check validity
	function noopMinValidator(){return true;}:// non-support browsers validate the min val
	function minValidator(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||isUndefined(minVal)||viewValue>=minVal;};setInitialValueAndObserver('min',minChange);}if(hasMaxAttr){ctrl.$validators.max=supportsRange?// Since all browsers set the input to a valid value, we don't need to check validity
	function noopMaxValidator(){return true;}:// non-support browsers validate the max val
	function maxValidator(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||isUndefined(maxVal)||viewValue<=maxVal;};setInitialValueAndObserver('max',maxChange);}if(hasStepAttr){ctrl.$validators.step=supportsRange?function nativeStepValidator(){// Currently, only FF implements the spec on step change correctly (i.e. adjusting the
	// input element value to a valid value). It's possible that other browsers set the stepMismatch
	// validity error instead, so we can at least report an error in that case.
	return!validity.stepMismatch;}:// ngStep doesn't set the setp attr, so the browser doesn't adjust the input value as setting step would
	function stepValidator(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||isUndefined(stepVal)||isValidForStep(viewValue,minVal||0,stepVal);};setInitialValueAndObserver('step',stepChange);}function setInitialValueAndObserver(htmlAttrName,changeFn){// interpolated attributes set the attribute value only after a digest, but we need the
	// attribute value when the input is first rendered, so that the browser can adjust the
	// input value based on the min/max value
	element.attr(htmlAttrName,attr[htmlAttrName]);attr.$observe(htmlAttrName,changeFn);}function minChange(val){minVal=parseNumberAttrVal(val);// ignore changes before model is initialized
	if(isNumberNaN(ctrl.$modelValue)){return;}if(supportsRange){var elVal=element.val();// IE11 doesn't set the el val correctly if the minVal is greater than the element value
	if(minVal>elVal){elVal=minVal;element.val(elVal);}ctrl.$setViewValue(elVal);}else{// TODO(matsko): implement validateLater to reduce number of validations
	ctrl.$validate();}}function maxChange(val){maxVal=parseNumberAttrVal(val);// ignore changes before model is initialized
	if(isNumberNaN(ctrl.$modelValue)){return;}if(supportsRange){var elVal=element.val();// IE11 doesn't set the el val correctly if the maxVal is less than the element value
	if(maxVal<elVal){element.val(maxVal);// IE11 and Chrome don't set the value to the minVal when max < min
	elVal=maxVal<minVal?minVal:maxVal;}ctrl.$setViewValue(elVal);}else{// TODO(matsko): implement validateLater to reduce number of validations
	ctrl.$validate();}}function stepChange(val){stepVal=parseNumberAttrVal(val);// ignore changes before model is initialized
	if(isNumberNaN(ctrl.$modelValue)){return;}// Some browsers don't adjust the input value correctly, but set the stepMismatch error
	if(supportsRange&&ctrl.$viewValue!==element.val()){ctrl.$setViewValue(element.val());}else{// TODO(matsko): implement validateLater to reduce number of validations
	ctrl.$validate();}}}function urlInputType(scope,element,attr,ctrl,$sniffer,$browser){// Note: no badInputChecker here by purpose as `url` is only a validation
	// in browsers, i.e. we can always read out input.value even if it is not valid!
	baseInputType(scope,element,attr,ctrl,$sniffer,$browser);stringBasedInputType(ctrl);ctrl.$$parserName='url';ctrl.$validators.url=function(modelValue,viewValue){var value=modelValue||viewValue;return ctrl.$isEmpty(value)||URL_REGEXP.test(value);};}function emailInputType(scope,element,attr,ctrl,$sniffer,$browser){// Note: no badInputChecker here by purpose as `url` is only a validation
	// in browsers, i.e. we can always read out input.value even if it is not valid!
	baseInputType(scope,element,attr,ctrl,$sniffer,$browser);stringBasedInputType(ctrl);ctrl.$$parserName='email';ctrl.$validators.email=function(modelValue,viewValue){var value=modelValue||viewValue;return ctrl.$isEmpty(value)||EMAIL_REGEXP.test(value);};}function radioInputType(scope,element,attr,ctrl){var doTrim=!attr.ngTrim||trim(attr.ngTrim)!=='false';// make the name unique, if not defined
	if(isUndefined(attr.name)){element.attr('name',nextUid());}var listener=function listener(ev){var value;if(element[0].checked){value=attr.value;if(doTrim){value=trim(value);}ctrl.$setViewValue(value,ev&&ev.type);}};element.on('click',listener);ctrl.$render=function(){var value=attr.value;if(doTrim){value=trim(value);}element[0].checked=value===ctrl.$viewValue;};attr.$observe('value',ctrl.$render);}function parseConstantExpr($parse,context,name,expression,fallback){var parseFn;if(isDefined(expression)){parseFn=$parse(expression);if(!parseFn.constant){throw ngModelMinErr('constexpr','Expected constant expression for `{0}`, but saw '+'`{1}`.',name,expression);}return parseFn(context);}return fallback;}function checkboxInputType(scope,element,attr,ctrl,$sniffer,$browser,$filter,$parse){var trueValue=parseConstantExpr($parse,scope,'ngTrueValue',attr.ngTrueValue,true);var falseValue=parseConstantExpr($parse,scope,'ngFalseValue',attr.ngFalseValue,false);var listener=function listener(ev){ctrl.$setViewValue(element[0].checked,ev&&ev.type);};element.on('click',listener);ctrl.$render=function(){element[0].checked=ctrl.$viewValue;};// Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
	// This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
	// it to a boolean.
	ctrl.$isEmpty=function(value){return value===false;};ctrl.$formatters.push(function(value){return equals(value,trueValue);});ctrl.$parsers.push(function(value){return value?trueValue:falseValue;});}/**
	 * @ngdoc directive
	 * @name textarea
	 * @restrict E
	 *
	 * @description
	 * HTML textarea element control with angular data-binding. The data-binding and validation
	 * properties of this element are exactly the same as those of the
	 * {@link ng.directive:input input element}.
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *
	 * @knownIssue
	 *
	 * When specifying the `placeholder` attribute of `<textarea>`, Internet Explorer will temporarily
	 * insert the placeholder value as the textarea's content. If the placeholder value contains
	 * interpolation (`{{ ... }}`), an error will be logged in the console when Angular tries to update
	 * the value of the by-then-removed text node. This doesn't affect the functionality of the
	 * textarea, but can be undesirable.
	 *
	 * You can work around this Internet Explorer issue by using `ng-attr-placeholder` instead of
	 * `placeholder` on textareas, whenever you need interpolation in the placeholder value. You can
	 * find more details on `ngAttr` in the
	 * [Interpolation](guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes) section of the
	 * Developer Guide.
	 *//**
	 * @ngdoc directive
	 * @name input
	 * @restrict E
	 *
	 * @description
	 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
	 * input state control, and validation.
	 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Not every feature offered is available for all input types.
	 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
	 * </div>
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {boolean=} ngRequired Sets `required` attribute if set to true
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *    This parameter is ignored for input[type=password] controls, which will never trim the
	 *    input.
	 *
	 * @example
	    <example name="input-directive" module="inputExample">
	      <file name="index.html">
	       <script>
	          angular.module('inputExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.user = {name: 'guest', last: 'visitor'};
	            }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <form name="myForm">
	           <label>
	              User name:
	              <input type="text" name="userName" ng-model="user.name" required>
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.userName.$error.required">
	              Required!</span>
	           </div>
	           <label>
	              Last name:
	              <input type="text" name="lastName" ng-model="user.last"
	              ng-minlength="3" ng-maxlength="10">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.lastName.$error.minlength">
	               Too short!</span>
	             <span class="error" ng-show="myForm.lastName.$error.maxlength">
	               Too long!</span>
	           </div>
	         </form>
	         <hr>
	         <tt>user = {{user}}</tt><br/>
	         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
	         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
	         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
	         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
	         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
	         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
	       </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var user = element(by.exactBinding('user'));
	        var userNameValid = element(by.binding('myForm.userName.$valid'));
	        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
	        var lastNameError = element(by.binding('myForm.lastName.$error'));
	        var formValid = element(by.binding('myForm.$valid'));
	        var userNameInput = element(by.model('user.name'));
	        var userLastInput = element(by.model('user.last'));

	        it('should initialize to model', function() {
	          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
	          expect(userNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if empty when required', function() {
	          userNameInput.clear();
	          userNameInput.sendKeys('');

	          expect(user.getText()).toContain('{"last":"visitor"}');
	          expect(userNameValid.getText()).toContain('false');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be valid if empty when min length is set', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('');

	          expect(user.getText()).toContain('{"name":"guest","last":""}');
	          expect(lastNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if less than required min length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('xx');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('minlength');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be invalid if longer than max length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('some ridiculously long name');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('maxlength');
	          expect(formValid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 */var inputDirective=['$browser','$sniffer','$filter','$parse',function($browser,$sniffer,$filter,$parse){return{restrict:'E',require:['?ngModel'],link:{pre:function pre(scope,element,attr,ctrls){if(ctrls[0]){(inputType[lowercase(attr.type)]||inputType.text)(scope,element,attr,ctrls[0],$sniffer,$browser,$filter,$parse);}}}};}];var CONSTANT_VALUE_REGEXP=/^(true|false|\d+)$/;/**
	 * @ngdoc directive
	 * @name ngValue
	 *
	 * @description
	 * Binds the given expression to the value of the element.
	 *
	 * It is mainly used on {@link input[radio] `input[radio]`} and option elements,
	 * so that when the element is selected, the {@link ngModel `ngModel`} of that element (or its
	 * {@link select `select`} parent element) is set to the bound value. It is especially useful
	 * for dynamically generated lists using {@link ngRepeat `ngRepeat`}, as shown below.
	 *
	 * It can also be used to achieve one-way binding of a given expression to an input element
	 * such as an `input[text]` or a `textarea`, when that element does not use ngModel.
	 *
	 * @element input
	 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
	 * and `value` property of the element.
	 *
	 * @example
	    <example name="ngValue-directive" module="valueExample">
	      <file name="index.html">
	       <script>
	          angular.module('valueExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.names = ['pizza', 'unicorns', 'robots'];
	              $scope.my = { favorite: 'unicorns' };
	            }]);
	       </script>
	        <form ng-controller="ExampleController">
	          <h2>Which is your favorite?</h2>
	            <label ng-repeat="name in names" for="{{name}}">
	              {{name}}
	              <input type="radio"
	                     ng-model="my.favorite"
	                     ng-value="name"
	                     id="{{name}}"
	                     name="favorite">
	            </label>
	          <div>You chose {{my.favorite}}</div>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var favorite = element(by.binding('my.favorite'));

	        it('should initialize to model', function() {
	          expect(favorite.getText()).toContain('unicorns');
	        });
	        it('should bind the values to the inputs', function() {
	          element.all(by.model('my.favorite')).get(0).click();
	          expect(favorite.getText()).toContain('pizza');
	        });
	      </file>
	    </example>
	 */var ngValueDirective=function ngValueDirective(){/**
	   *  inputs use the value attribute as their default value if the value property is not set.
	   *  Once the value property has been set (by adding input), it will not react to changes to
	   *  the value attribute anymore. Setting both attribute and property fixes this behavior, and
	   *  makes it possible to use ngValue as a sort of one-way bind.
	   */function updateElementValue(element,attr,value){element.prop('value',value);attr.$set('value',value);}return{restrict:'A',priority:100,compile:function compile(tpl,tplAttr){if(CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)){return function ngValueConstantLink(scope,elm,attr){var value=scope.$eval(attr.ngValue);updateElementValue(elm,attr,value);};}else{return function ngValueLink(scope,elm,attr){scope.$watch(attr.ngValue,function valueWatchAction(value){updateElementValue(elm,attr,value);});};}}};};/**
	 * @ngdoc directive
	 * @name ngBind
	 * @restrict AC
	 *
	 * @description
	 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
	 * with the value of a given expression, and to update the text content when the value of that
	 * expression changes.
	 *
	 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
	 * `{{ expression }}` which is similar but less verbose.
	 *
	 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
	 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
	 * element attribute, it makes the bindings invisible to the user while the page is loading.
	 *
	 * An alternative solution to this problem would be using the
	 * {@link ng.directive:ngCloak ngCloak} directive.
	 *
	 *
	 * @element ANY
	 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
	   <example module="bindExample" name="ng-bind">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.name = 'Whirled';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter name: <input type="text" ng-model="name"></label><br>
	         Hello <span ng-bind="name"></span>!
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var nameInput = element(by.model('name'));

	         expect(element(by.binding('name')).getText()).toBe('Whirled');
	         nameInput.clear();
	         nameInput.sendKeys('world');
	         expect(element(by.binding('name')).getText()).toBe('world');
	       });
	     </file>
	   </example>
	 */var ngBindDirective=['$compile',function($compile){return{restrict:'AC',compile:function ngBindCompile(templateElement){$compile.$$addBindingClass(templateElement);return function ngBindLink(scope,element,attr){$compile.$$addBindingInfo(element,attr.ngBind);element=element[0];scope.$watch(attr.ngBind,function ngBindWatchAction(value){element.textContent=stringify(value);});};}};}];/**
	 * @ngdoc directive
	 * @name ngBindTemplate
	 *
	 * @description
	 * The `ngBindTemplate` directive specifies that the element
	 * text content should be replaced with the interpolation of the template
	 * in the `ngBindTemplate` attribute.
	 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
	 * expressions. This directive is needed since some HTML elements
	 * (such as TITLE and OPTION) cannot contain SPAN elements.
	 *
	 * @element ANY
	 * @param {string} ngBindTemplate template of form
	 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
	 *
	 * @example
	 * Try it here: enter text in text box and watch the greeting change.
	   <example module="bindExample" name="ng-bind-template">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.salutation = 'Hello';
	             $scope.name = 'World';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
	        <label>Name: <input type="text" ng-model="name"></label><br>
	        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var salutationElem = element(by.binding('salutation'));
	         var salutationInput = element(by.model('salutation'));
	         var nameInput = element(by.model('name'));

	         expect(salutationElem.getText()).toBe('Hello World!');

	         salutationInput.clear();
	         salutationInput.sendKeys('Greetings');
	         nameInput.clear();
	         nameInput.sendKeys('user');

	         expect(salutationElem.getText()).toBe('Greetings user!');
	       });
	     </file>
	   </example>
	 */var ngBindTemplateDirective=['$interpolate','$compile',function($interpolate,$compile){return{compile:function ngBindTemplateCompile(templateElement){$compile.$$addBindingClass(templateElement);return function ngBindTemplateLink(scope,element,attr){var interpolateFn=$interpolate(element.attr(attr.$attr.ngBindTemplate));$compile.$$addBindingInfo(element,interpolateFn.expressions);element=element[0];attr.$observe('ngBindTemplate',function(value){element.textContent=isUndefined(value)?'':value;});};}};}];/**
	 * @ngdoc directive
	 * @name ngBindHtml
	 *
	 * @description
	 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
	 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
	 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
	 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
	 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
	 *
	 * You may also bypass sanitization for values you know are safe. To do so, bind to
	 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
	 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
	 *
	 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
	 * will have an exception (instead of an exploit.)
	 *
	 * @element ANY
	 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
	 *
	 * @example

	   <example module="bindHtmlExample" deps="angular-sanitize.js" name="ng-bind-html">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	        <p ng-bind-html="myHTML"></p>
	       </div>
	     </file>

	     <file name="script.js">
	       angular.module('bindHtmlExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.myHTML =
	              'I am an <code>HTML</code>string with ' +
	              '<a href="#">links!</a> and other <em>stuff</em>';
	         }]);
	     </file>

	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind-html', function() {
	         expect(element(by.binding('myHTML')).getText()).toBe(
	             'I am an HTMLstring with links! and other stuff');
	       });
	     </file>
	   </example>
	 */var ngBindHtmlDirective=['$sce','$parse','$compile',function($sce,$parse,$compile){return{restrict:'A',compile:function ngBindHtmlCompile(tElement,tAttrs){var ngBindHtmlGetter=$parse(tAttrs.ngBindHtml);var ngBindHtmlWatch=$parse(tAttrs.ngBindHtml,function sceValueOf(val){// Unwrap the value to compare the actual inner safe value, not the wrapper object.
	return $sce.valueOf(val);});$compile.$$addBindingClass(tElement);return function ngBindHtmlLink(scope,element,attr){$compile.$$addBindingInfo(element,attr.ngBindHtml);scope.$watch(ngBindHtmlWatch,function ngBindHtmlWatchAction(){// The watched value is the unwrapped value. To avoid re-escaping, use the direct getter.
	var value=ngBindHtmlGetter(scope);element.html($sce.getTrustedHtml(value)||'');});};}};}];/**
	 * @ngdoc directive
	 * @name ngChange
	 *
	 * @description
	 * Evaluate the given expression when the user changes the input.
	 * The expression is evaluated immediately, unlike the JavaScript onchange event
	 * which only triggers at the end of a change (usually, when the user leaves the
	 * form element or presses the return key).
	 *
	 * The `ngChange` expression is only evaluated when a change in the input value causes
	 * a new value to be committed to the model.
	 *
	 * It will not be evaluated:
	 * * if the value returned from the `$parsers` transformation pipeline has not changed
	 * * if the input has continued to be invalid since the model will stay `null`
	 * * if the model is changed programmatically and not by a change to the input value
	 *
	 *
	 * Note, this directive requires `ngModel` to be present.
	 *
	 * @element input
	 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
	 * in input value.
	 *
	 * @example
	 * <example name="ngChange-directive" module="changeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('changeExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.counter = 0;
	 *           $scope.change = function() {
	 *             $scope.counter++;
	 *           };
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
	 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
	 *       <label for="ng-change-example2">Confirmed</label><br />
	 *       <tt>debug = {{confirmed}}</tt><br/>
	 *       <tt>counter = {{counter}}</tt><br/>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var counter = element(by.binding('counter'));
	 *     var debug = element(by.binding('confirmed'));
	 *
	 *     it('should evaluate the expression if changing from view', function() {
	 *       expect(counter.getText()).toContain('0');
	 *
	 *       element(by.id('ng-change-example1')).click();
	 *
	 *       expect(counter.getText()).toContain('1');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *
	 *     it('should not evaluate the expression if changing from model', function() {
	 *       element(by.id('ng-change-example2')).click();

	 *       expect(counter.getText()).toContain('0');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *   </file>
	 * </example>
	 */var ngChangeDirective=valueFn({restrict:'A',require:'ngModel',link:function link(scope,element,attr,ctrl){ctrl.$viewChangeListeners.push(function(){scope.$eval(attr.ngChange);});}});/* exported
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective
	*/function classDirective(name,selector){name='ngClass'+name;return['$animate',function($animate){return{restrict:'AC',link:function link(scope,element,attr){var oldVal;scope.$watch(attr[name],ngClassWatchAction,true);attr.$observe('class',function(value){ngClassWatchAction(scope.$eval(attr[name]));});if(name!=='ngClass'){scope.$watch('$index',function($index,old$index){/* eslint-disable no-bitwise */var mod=$index&1;if(mod!==(old$index&1)){var classes=arrayClasses(scope.$eval(attr[name]));if(mod===selector){addClasses(classes);}else{removeClasses(classes);}}/* eslint-enable */});}function addClasses(classes){var newClasses=digestClassCounts(classes,1);attr.$addClass(newClasses);}function removeClasses(classes){var newClasses=digestClassCounts(classes,-1);attr.$removeClass(newClasses);}function digestClassCounts(classes,count){// Use createMap() to prevent class assumptions involving property
	// names in Object.prototype
	var classCounts=element.data('$classCounts')||createMap();var classesToUpdate=[];forEach(classes,function(className){if(count>0||classCounts[className]){classCounts[className]=(classCounts[className]||0)+count;if(classCounts[className]===+(count>0)){classesToUpdate.push(className);}}});element.data('$classCounts',classCounts);return classesToUpdate.join(' ');}function updateClasses(oldClasses,newClasses){var toAdd=arrayDifference(newClasses,oldClasses);var toRemove=arrayDifference(oldClasses,newClasses);toAdd=digestClassCounts(toAdd,1);toRemove=digestClassCounts(toRemove,-1);if(toAdd&&toAdd.length){$animate.addClass(element,toAdd);}if(toRemove&&toRemove.length){$animate.removeClass(element,toRemove);}}function ngClassWatchAction(newVal){// eslint-disable-next-line no-bitwise
	if(selector===true||(scope.$index&1)===selector){var newClasses=arrayClasses(newVal||[]);if(!oldVal){addClasses(newClasses);}else if(!equals(newVal,oldVal)){var oldClasses=arrayClasses(oldVal);updateClasses(oldClasses,newClasses);}}if(isArray(newVal)){oldVal=newVal.map(function(v){return shallowCopy(v);});}else{oldVal=shallowCopy(newVal);}}}};function arrayDifference(tokens1,tokens2){var values=[];outer:for(var i=0;i<tokens1.length;i++){var token=tokens1[i];for(var j=0;j<tokens2.length;j++){if(token===tokens2[j])continue outer;}values.push(token);}return values;}function arrayClasses(classVal){var classes=[];if(isArray(classVal)){forEach(classVal,function(v){classes=classes.concat(arrayClasses(v));});return classes;}else if(isString(classVal)){return classVal.split(' ');}else if(isObject(classVal)){forEach(classVal,function(v,k){if(v){classes=classes.concat(k.split(' '));}});return classes;}return classVal;}}];}/**
	 * @ngdoc directive
	 * @name ngClass
	 * @restrict AC
	 *
	 * @description
	 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
	 * an expression that represents all classes to be added.
	 *
	 * The directive operates in three different ways, depending on which of three types the expression
	 * evaluates to:
	 *
	 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
	 * names.
	 *
	 * 2. If the expression evaluates to an object, then for each key-value pair of the
	 * object with a truthy value the corresponding key is used as a class name.
	 *
	 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
	 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
	 * to give you more control over what CSS classes appear. See the code below for an example of this.
	 *
	 *
	 * The directive won't add duplicate classes if a particular class was already set.
	 *
	 * When the expression changes, the previously added classes are removed and only then are the
	 * new classes added.
	 *
	 * @knownIssue
	 * You should not use {@link guide/interpolation interpolation} in the value of the `class`
	 * attribute, when using the `ngClass` directive on the same element.
	 * See {@link guide/interpolation#known-issues here} for more info.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
	 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
	 *
	 * @element ANY
	 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class
	 *   names, an array, or a map of class names to boolean values. In the case of a map, the
	 *   names of the properties whose values are truthy will be added as css classes to the
	 *   element.
	 *
	 * @example Example that demonstrates basic bindings via ngClass directive.
	   <example name="ng-class">
	     <file name="index.html">
	       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
	       <label>
	          <input type="checkbox" ng-model="deleted">
	          deleted (apply "strike" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="important">
	          important (apply "bold" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="error">
	          error (apply "has-error" class)
	       </label>
	       <hr>
	       <p ng-class="style">Using String Syntax</p>
	       <input type="text" ng-model="style"
	              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
	       <hr>
	       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
	       <input ng-model="style1"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
	       <input ng-model="style2"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
	       <input ng-model="style3"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
	       <hr>
	       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
	       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
	       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
	     </file>
	     <file name="style.css">
	       .strike {
	           text-decoration: line-through;
	       }
	       .bold {
	           font-weight: bold;
	       }
	       .red {
	           color: red;
	       }
	       .has-error {
	           color: red;
	           background-color: yellow;
	       }
	       .orange {
	           color: orange;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var ps = element.all(by.css('p'));

	       it('should let you toggle the class', function() {

	         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
	         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);

	         element(by.model('important')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/bold/);

	         element(by.model('error')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
	       });

	       it('should let you toggle string example', function() {
	         expect(ps.get(1).getAttribute('class')).toBe('');
	         element(by.model('style')).clear();
	         element(by.model('style')).sendKeys('red');
	         expect(ps.get(1).getAttribute('class')).toBe('red');
	       });

	       it('array example should have 3 classes', function() {
	         expect(ps.get(2).getAttribute('class')).toBe('');
	         element(by.model('style1')).sendKeys('bold');
	         element(by.model('style2')).sendKeys('strike');
	         element(by.model('style3')).sendKeys('red');
	         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
	       });

	       it('array with map example should have 2 classes', function() {
	         expect(ps.last().getAttribute('class')).toBe('');
	         element(by.model('style4')).sendKeys('bold');
	         element(by.model('warning')).click();
	         expect(ps.last().getAttribute('class')).toBe('bold orange');
	       });
	     </file>
	   </example>

	   ## Animations

	   The example below demonstrates how to perform animations using ngClass.

	   <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-class">
	     <file name="index.html">
	      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
	      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
	      <br>
	      <span class="base-class" ng-class="myVar">Sample Text</span>
	     </file>
	     <file name="style.css">
	       .base-class {
	         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	       }

	       .base-class.my-class {
	         color: red;
	         font-size:3em;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class', function() {
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);

	         element(by.id('setbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).
	           toMatch(/my-class/);

	         element(by.id('clearbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	       });
	     </file>
	   </example>


	   ## ngClass and pre-existing CSS3 Transitions/Animations
	   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
	   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
	   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
	   to view the step by step details of {@link $animate#addClass $animate.addClass} and
	   {@link $animate#removeClass $animate.removeClass}.
	 */var ngClassDirective=classDirective('',true);/**
	 * @ngdoc directive
	 * @name ngClassOdd
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example name="ng-class-odd">
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}}
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */var ngClassOddDirective=classDirective('Odd',0);/**
	 * @ngdoc directive
	 * @name ngClassEven
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
	 *   result of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example name="ng-class-even">
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}} &nbsp; &nbsp; &nbsp;
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */var ngClassEvenDirective=classDirective('Even',1);/**
	 * @ngdoc directive
	 * @name ngCloak
	 * @restrict AC
	 *
	 * @description
	 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
	 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
	 * directive to avoid the undesirable flicker effect caused by the html template display.
	 *
	 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
	 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
	 * of the browser view.
	 *
	 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
	 * `angular.min.js`.
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```css
	 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
	 *   display: none !important;
	 * }
	 * ```
	 *
	 * When this css rule is loaded by the browser, all html elements (including their children) that
	 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
	 * during the compilation of the template it deletes the `ngCloak` element attribute, making
	 * the compiled element visible.
	 *
	 * For the best result, the `angular.js` script must be loaded in the head section of the html
	 * document; alternatively, the css rule above must be included in the external stylesheet of the
	 * application.
	 *
	 * @element ANY
	 *
	 * @example
	   <example name="ng-cloak">
	     <file name="index.html">
	        <div id="template1" ng-cloak>{{ 'hello' }}</div>
	        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should remove the template directive and css class', function() {
	         expect($('#template1').getAttribute('ng-cloak')).
	           toBeNull();
	         expect($('#template2').getAttribute('ng-cloak')).
	           toBeNull();
	       });
	     </file>
	   </example>
	 *
	 */var ngCloakDirective=ngDirective({compile:function compile(element,attr){attr.$set('ngCloak',undefined);element.removeClass('ng-cloak');}});/**
	 * @ngdoc directive
	 * @name ngController
	 *
	 * @description
	 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
	 * supports the principles behind the Model-View-Controller design pattern.
	 *
	 * MVC components in angular:
	 *
	 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
	 *   are accessed through bindings.
	 * * View — The template (HTML with data bindings) that is rendered into the View.
	 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
	 *   logic behind the application to decorate the scope with functions and values
	 *
	 * Note that you can also attach controllers to the DOM by declaring it in a route definition
	 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
	 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
	 * and executed twice.
	 *
	 * @element ANY
	 * @scope
	 * @priority 500
	 * @param {expression} ngController Name of a constructor function registered with the current
	 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
	 * that on the current scope evaluates to a constructor function.
	 *
	 * The controller instance can be published into a scope property by specifying
	 * `ng-controller="as propertyName"`.
	 *
	 * If the current `$controllerProvider` is configured to use globals (via
	 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
	 * also be the name of a globally accessible constructor function (deprecated, not recommended).
	 *
	 * @example
	 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
	 * greeting are methods declared on the controller (see source tab). These methods can
	 * easily be called from the angular markup. Any changes to the data are automatically reflected
	 * in the View without the need for a manual update.
	 *
	 * Two different declaration styles are included below:
	 *
	 * * one binds methods and properties directly onto the controller using `this`:
	 * `ng-controller="SettingsController1 as settings"`
	 * * one injects `$scope` into the controller:
	 * `ng-controller="SettingsController2"`
	 *
	 * The second option is more common in the Angular community, and is generally used in boilerplates
	 * and in this guide. However, there are advantages to binding properties directly to the controller
	 * and avoiding scope.
	 *
	 * * Using `controller as` makes it obvious which controller you are accessing in the template when
	 * multiple controllers apply to an element.
	 * * If you are writing your controllers as classes you have easier access to the properties and
	 * methods, which will appear on the scope, from inside the controller code.
	 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
	 * inheritance masking primitives.
	 *
	 * This example demonstrates the `controller as` syntax.
	 *
	 * <example name="ngControllerAs" module="controllerAsExample">
	 *   <file name="index.html">
	 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
	 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
	 *      <button ng-click="settings.greet()">greet</button><br/>
	 *      Contact:
	 *      <ul>
	 *        <li ng-repeat="contact in settings.contacts">
	 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
	 *             <option>phone</option>
	 *             <option>email</option>
	 *          </select>
	 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *          <button ng-click="settings.clearContact(contact)">clear</button>
	 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
	 *        </li>
	 *        <li><button ng-click="settings.addContact()">add</button></li>
	 *     </ul>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('controllerAsExample', [])
	 *      .controller('SettingsController1', SettingsController1);
	 *
	 *    function SettingsController1() {
	 *      this.name = 'John Smith';
	 *      this.contacts = [
	 *        {type: 'phone', value: '408 555 1212'},
	 *        {type: 'email', value: 'john.smith@example.org'}
	 *      ];
	 *    }
	 *
	 *    SettingsController1.prototype.greet = function() {
	 *      alert(this.name);
	 *    };
	 *
	 *    SettingsController1.prototype.addContact = function() {
	 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
	 *    };
	 *
	 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
	 *     var index = this.contacts.indexOf(contactToRemove);
	 *      this.contacts.splice(index, 1);
	 *    };
	 *
	 *    SettingsController1.prototype.clearContact = function(contact) {
	 *      contact.type = 'phone';
	 *      contact.value = '';
	 *    };
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should check controller as', function() {
	 *       var container = element(by.id('ctrl-as-exmpl'));
	 *         expect(container.element(by.model('settings.name'))
	 *           .getAttribute('value')).toBe('John Smith');
	 *
	 *       var firstRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(0));
	 *       var secondRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(1));
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('408 555 1212');
	 *
	 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('john.smith@example.org');
	 *
	 *       firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('');
	 *
	 *       container.element(by.buttonText('add')).click();
	 *
	 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
	 *           .element(by.model('contact.value'))
	 *           .getAttribute('value'))
	 *           .toBe('yourname@example.org');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * This example demonstrates the "attach to `$scope`" style of controller.
	 *
	 * <example name="ngController" module="controllerExample">
	 *  <file name="index.html">
	 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
	 *     <label>Name: <input type="text" ng-model="name"/></label>
	 *     <button ng-click="greet()">greet</button><br/>
	 *     Contact:
	 *     <ul>
	 *       <li ng-repeat="contact in contacts">
	 *         <select ng-model="contact.type" id="select_{{$index}}">
	 *            <option>phone</option>
	 *            <option>email</option>
	 *         </select>
	 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *         <button ng-click="clearContact(contact)">clear</button>
	 *         <button ng-click="removeContact(contact)">X</button>
	 *       </li>
	 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
	 *    </ul>
	 *   </div>
	 *  </file>
	 *  <file name="app.js">
	 *   angular.module('controllerExample', [])
	 *     .controller('SettingsController2', ['$scope', SettingsController2]);
	 *
	 *   function SettingsController2($scope) {
	 *     $scope.name = 'John Smith';
	 *     $scope.contacts = [
	 *       {type:'phone', value:'408 555 1212'},
	 *       {type:'email', value:'john.smith@example.org'}
	 *     ];
	 *
	 *     $scope.greet = function() {
	 *       alert($scope.name);
	 *     };
	 *
	 *     $scope.addContact = function() {
	 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
	 *     };
	 *
	 *     $scope.removeContact = function(contactToRemove) {
	 *       var index = $scope.contacts.indexOf(contactToRemove);
	 *       $scope.contacts.splice(index, 1);
	 *     };
	 *
	 *     $scope.clearContact = function(contact) {
	 *       contact.type = 'phone';
	 *       contact.value = '';
	 *     };
	 *   }
	 *  </file>
	 *  <file name="protractor.js" type="protractor">
	 *    it('should check controller', function() {
	 *      var container = element(by.id('ctrl-exmpl'));
	 *
	 *      expect(container.element(by.model('name'))
	 *          .getAttribute('value')).toBe('John Smith');
	 *
	 *      var firstRepeat =
	 *          container.element(by.repeater('contact in contacts').row(0));
	 *      var secondRepeat =
	 *          container.element(by.repeater('contact in contacts').row(1));
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('408 555 1212');
	 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('john.smith@example.org');
	 *
	 *      firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('');
	 *
	 *      container.element(by.buttonText('add')).click();
	 *
	 *      expect(container.element(by.repeater('contact in contacts').row(2))
	 *          .element(by.model('contact.value'))
	 *          .getAttribute('value'))
	 *          .toBe('yourname@example.org');
	 *    });
	 *  </file>
	 *</example>

	 */var ngControllerDirective=[function(){return{restrict:'A',scope:true,controller:'@',priority:500};}];/**
	 * @ngdoc directive
	 * @name ngCsp
	 *
	 * @restrict A
	 * @element ANY
	 * @description
	 *
	 * Angular has some features that can conflict with certain restrictions that are applied when using
	 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
	 *
	 * If you intend to implement CSP with these rules then you must tell Angular not to use these
	 * features.
	 *
	 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
	 *
	 *
	 * The following default rules in CSP affect Angular:
	 *
	 * * The use of `eval()`, `Function(string)` and similar functions to dynamically create and execute
	 * code from strings is forbidden. Angular makes use of this in the {@link $parse} service to
	 * provide a 30% increase in the speed of evaluating Angular expressions. (This CSP rule can be
	 * disabled with the CSP keyword `unsafe-eval`, but it is generally not recommended as it would
	 * weaken the protections offered by CSP.)
	 *
	 * * The use of inline resources, such as inline `<script>` and `<style>` elements, are forbidden.
	 * This prevents apps from injecting custom styles directly into the document. Angular makes use of
	 * this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}). To make these
	 * directives work when a CSP rule is blocking inline styles, you must link to the `angular-csp.css`
	 * in your HTML manually. (This CSP rule can be disabled with the CSP keyword `unsafe-inline`, but
	 * it is generally not recommended as it would weaken the protections offered by CSP.)
	 *
	 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking dynamic code
	 * creation from strings (e.g., `unsafe-eval` not specified in CSP header) and automatically
	 * deactivates this feature in the {@link $parse} service. This autodetection, however, triggers a
	 * CSP error to be logged in the console:
	 *
	 * ```
	 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
	 * script in the following Content Security Policy directive: "default-src 'self'". Note that
	 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
	 * ```
	 *
	 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
	 * directive on an element of the HTML document that appears before the `<script>` tag that loads
	 * the `angular.js` file.
	 *
	 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
	 *
	 * You can specify which of the CSP related Angular features should be deactivated by providing
	 * a value for the `ng-csp` attribute. The options are as follows:
	 *
	 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
	 *
	 * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings
	 *
	 * You can use these values in the following combinations:
	 *
	 *
	 * * No declaration means that Angular will assume that you can do inline styles, but it will do
	 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous
	 * versions of Angular.
	 *
	 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
	 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous
	 * versions of Angular.
	 *
	 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can
	 * inject inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
	 *
	 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
	 * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
	 *
	 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
	 * styles nor use eval, which is the same as an empty: ng-csp.
	 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
	 *
	 * @example
	 * This example shows how to apply the `ngCsp` directive to the `html` tag.
	   ```html
	     <!doctype html>
	     <html ng-app ng-csp>
	     ...
	     ...
	     </html>
	   ```
	  * @example
	      <!-- Note: the `.csp` suffix in the example name triggers CSP mode in our http server! -->
	      <example name="example.csp" module="cspExample" ng-csp="true">
	        <file name="index.html">
	          <div ng-controller="MainController as ctrl">
	            <div>
	              <button ng-click="ctrl.inc()" id="inc">Increment</button>
	              <span id="counter">
	                {{ctrl.counter}}
	              </span>
	            </div>

	            <div>
	              <button ng-click="ctrl.evil()" id="evil">Evil</button>
	              <span id="evilError">
	                {{ctrl.evilError}}
	              </span>
	            </div>
	          </div>
	        </file>
	        <file name="script.js">
	           angular.module('cspExample', [])
	             .controller('MainController', function MainController() {
	                this.counter = 0;
	                this.inc = function() {
	                  this.counter++;
	                };
	                this.evil = function() {
	                  try {
	                    eval('1+2'); // eslint-disable-line no-eval
	                  } catch (e) {
	                    this.evilError = e.message;
	                  }
	                };
	              });
	        </file>
	        <file name="protractor.js" type="protractor">
	          var util, webdriver;

	          var incBtn = element(by.id('inc'));
	          var counter = element(by.id('counter'));
	          var evilBtn = element(by.id('evil'));
	          var evilError = element(by.id('evilError'));

	          function getAndClearSevereErrors() {
	            return browser.manage().logs().get('browser').then(function(browserLog) {
	              return browserLog.filter(function(logEntry) {
	                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
	              });
	            });
	          }

	          function clearErrors() {
	            getAndClearSevereErrors();
	          }

	          function expectNoErrors() {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              expect(filteredLog.length).toEqual(0);
	              if (filteredLog.length) {
	                console.log('browser console errors: ' + util.inspect(filteredLog));
	              }
	            });
	          }

	          function expectError(regex) {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              var found = false;
	              filteredLog.forEach(function(log) {
	                if (log.message.match(regex)) {
	                  found = true;
	                }
	              });
	              if (!found) {
	                throw new Error('expected an error that matches ' + regex);
	              }
	            });
	          }

	          beforeEach(function() {
	            util = require('util');
	            webdriver = require('selenium-webdriver');
	          });

	          // For now, we only test on Chrome,
	          // as Safari does not load the page with Protractor's injected scripts,
	          // and Firefox webdriver always disables content security policy (#6358)
	          if (browser.params.browser !== 'chrome') {
	            return;
	          }

	          it('should not report errors when the page is loaded', function() {
	            // clear errors so we are not dependent on previous tests
	            clearErrors();
	            // Need to reload the page as the page is already loaded when
	            // we come here
	            browser.driver.getCurrentUrl().then(function(url) {
	              browser.get(url);
	            });
	            expectNoErrors();
	          });

	          it('should evaluate expressions', function() {
	            expect(counter.getText()).toEqual('0');
	            incBtn.click();
	            expect(counter.getText()).toEqual('1');
	            expectNoErrors();
	          });

	          it('should throw and report an error when using "eval"', function() {
	            evilBtn.click();
	            expect(evilError.getText()).toMatch(/Content Security Policy/);
	            expectError(/Content Security Policy/);
	          });
	        </file>
	      </example>
	  */// `ngCsp` is not implemented as a proper directive any more, because we need it be processed while
	// we bootstrap the app (before `$parse` is instantiated). For this reason, we just have the `csp()`
	// fn that looks for the `ng-csp` attribute anywhere in the current doc.
	/**
	 * @ngdoc directive
	 * @name ngClick
	 *
	 * @description
	 * The ngClick directive allows you to specify custom behavior when
	 * an element is clicked.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
	 * click. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-click">
	     <file name="index.html">
	      <button ng-click="count = count + 1" ng-init="count=0">
	        Increment
	      </button>
	      <span>
	        count: {{count}}
	      </span>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-click', function() {
	         expect(element(by.binding('count')).getText()).toMatch('0');
	         element(by.css('button')).click();
	         expect(element(by.binding('count')).getText()).toMatch('1');
	       });
	     </file>
	   </example>
	 *//*
	 * A collection of directives that allows creation of custom event handlers that are defined as
	 * angular expressions and are compiled and executed within the current scope.
	 */var ngEventDirectives={};// For events that might fire synchronously during DOM manipulation
	// we need to execute their event handlers asynchronously using $evalAsync,
	// so that they are not executed in an inconsistent state.
	var forceAsyncEvents={'blur':true,'focus':true};forEach('click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),function(eventName){var directiveName=directiveNormalize('ng-'+eventName);ngEventDirectives[directiveName]=['$parse','$rootScope',function($parse,$rootScope){return{restrict:'A',compile:function compile($element,attr){// We expose the powerful $event object on the scope that provides access to the Window,
	// etc. that isn't protected by the fast paths in $parse.  We explicitly request better
	// checks at the cost of speed since event handler expressions are not executed as
	// frequently as regular change detection.
	var fn=$parse(attr[directiveName],/* interceptorFn */null,/* expensiveChecks */true);return function ngEventHandler(scope,element){element.on(eventName,function(event){var callback=function callback(){fn(scope,{$event:event});};if(forceAsyncEvents[eventName]&&$rootScope.$$phase){scope.$evalAsync(callback);}else{scope.$apply(callback);}});};}};}];});/**
	 * @ngdoc directive
	 * @name ngDblclick
	 *
	 * @description
	 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
	 * a dblclick. (The Event object is available as `$event`)
	 *
	 * @example
	   <example name="ng-dblclick">
	     <file name="index.html">
	      <button ng-dblclick="count = count + 1" ng-init="count=0">
	        Increment (on double click)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngMousedown
	 *
	 * @description
	 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
	 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mousedown">
	     <file name="index.html">
	      <button ng-mousedown="count = count + 1" ng-init="count=0">
	        Increment (on mouse down)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngMouseup
	 *
	 * @description
	 * Specify custom behavior on mouseup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
	 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseup">
	     <file name="index.html">
	      <button ng-mouseup="count = count + 1" ng-init="count=0">
	        Increment (on mouse up)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngMouseover
	 *
	 * @description
	 * Specify custom behavior on mouseover event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
	 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseover">
	     <file name="index.html">
	      <button ng-mouseover="count = count + 1" ng-init="count=0">
	        Increment (when mouse is over)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngMouseenter
	 *
	 * @description
	 * Specify custom behavior on mouseenter event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
	 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseenter">
	     <file name="index.html">
	      <button ng-mouseenter="count = count + 1" ng-init="count=0">
	        Increment (when mouse enters)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngMouseleave
	 *
	 * @description
	 * Specify custom behavior on mouseleave event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
	 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseleave">
	     <file name="index.html">
	      <button ng-mouseleave="count = count + 1" ng-init="count=0">
	        Increment (when mouse leaves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngMousemove
	 *
	 * @description
	 * Specify custom behavior on mousemove event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
	 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mousemove">
	     <file name="index.html">
	      <button ng-mousemove="count = count + 1" ng-init="count=0">
	        Increment (when mouse moves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngKeydown
	 *
	 * @description
	 * Specify custom behavior on keydown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
	 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example name="ng-keydown">
	     <file name="index.html">
	      <input ng-keydown="count = count + 1" ng-init="count=0">
	      key down count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngKeyup
	 *
	 * @description
	 * Specify custom behavior on keyup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
	 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example name="ng-keyup">
	     <file name="index.html">
	       <p>Typing in the input box below updates the key count</p>
	       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

	       <p>Typing in the input box below updates the keycode</p>
	       <input ng-keyup="event=$event">
	       <p>event keyCode: {{ event.keyCode }}</p>
	       <p>event altKey: {{ event.altKey }}</p>
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngKeypress
	 *
	 * @description
	 * Specify custom behavior on keypress event.
	 *
	 * @element ANY
	 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
	 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
	 * and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example name="ng-keypress">
	     <file name="index.html">
	      <input ng-keypress="count = count + 1" ng-init="count=0">
	      key press count: {{count}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngSubmit
	 *
	 * @description
	 * Enables binding angular expressions to onsubmit events.
	 *
	 * Additionally it prevents the default action (which for form means sending the request to the
	 * server and reloading the current page), but only if the form does not contain `action`,
	 * `data-action`, or `x-action` attributes.
	 *
	 * <div class="alert alert-warning">
	 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
	 * `ngSubmit` handlers together. See the
	 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
	 * for a detailed discussion of when `ngSubmit` may be triggered.
	 * </div>
	 *
	 * @element form
	 * @priority 0
	 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
	 * ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example module="submitExample" name="ng-submit">
	     <file name="index.html">
	      <script>
	        angular.module('submitExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
	      </script>
	      <form ng-submit="submit()" ng-controller="ExampleController">
	        Enter text and hit enter:
	        <input type="text" ng-model="text" name="text" />
	        <input type="submit" id="submit" value="Submit" />
	        <pre>list={{list}}</pre>
	      </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
	       it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngFocus
	 *
	 * @description
	 * Specify custom behavior on focus event.
	 *
	 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
	 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 *//**
	 * @ngdoc directive
	 * @name ngBlur
	 *
	 * @description
	 * Specify custom behavior on blur event.
	 *
	 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
	 * an element has lost focus.
	 *
	 * Note: As the `blur` event is executed synchronously also during DOM manipulations
	 * (e.g. removing a focussed input),
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
	 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 *//**
	 * @ngdoc directive
	 * @name ngCopy
	 *
	 * @description
	 * Specify custom behavior on copy event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
	 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-copy">
	     <file name="index.html">
	      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
	      copied: {{copied}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngCut
	 *
	 * @description
	 * Specify custom behavior on cut event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
	 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-cut">
	     <file name="index.html">
	      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
	      cut: {{cut}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngPaste
	 *
	 * @description
	 * Specify custom behavior on paste event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
	 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-paste">
	     <file name="index.html">
	      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
	      pasted: {{paste}}
	     </file>
	   </example>
	 *//**
	 * @ngdoc directive
	 * @name ngIf
	 * @restrict A
	 * @multiElement
	 *
	 * @description
	 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
	 * {expression}. If the expression assigned to `ngIf` evaluates to a false
	 * value then the element is removed from the DOM, otherwise a clone of the
	 * element is reinserted into the DOM.
	 *
	 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
	 * element in the DOM rather than changing its visibility via the `display` css property.  A common
	 * case when this difference is significant is when using css selectors that rely on an element's
	 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
	 *
	 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
	 * is created when the element is restored.  The scope created within `ngIf` inherits from
	 * its parent scope using
	 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
	 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
	 * a javascript primitive defined in the parent scope. In this case any modifications made to the
	 * variable within the child scope will override (hide) the value in the parent scope.
	 *
	 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
	 * is if an element's class attribute is directly modified after it's compiled, using something like
	 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
	 * the added class will be lost because the original compiled state is used to regenerate the element.
	 *
	 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
	 * and `leave` effects.
	 *
	 * @animations
	 * | Animation                        | Occurs                               |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
	 * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
	 *
	 * @element ANY
	 * @scope
	 * @priority 600
	 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
	 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
	 *     element is added to the DOM tree.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-if">
	    <file name="index.html">
	      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
	      Show when checked:
	      <span ng-if="checked" class="animate-if">
	        This is removed when the checkbox is unchecked.
	      </span>
	    </file>
	    <file name="animations.css">
	      .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }

	      .animate-if.ng-enter, .animate-if.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }

	      .animate-if.ng-enter,
	      .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }

	      .animate-if.ng-leave,
	      .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
	    </file>
	  </example>
	 */var ngIfDirective=['$animate','$compile',function($animate,$compile){return{multiElement:true,transclude:'element',priority:600,terminal:true,restrict:'A',$$tlb:true,link:function link($scope,$element,$attr,ctrl,$transclude){var block,childScope,previousElements;$scope.$watch($attr.ngIf,function ngIfWatchAction(value){if(value){if(!childScope){$transclude(function(clone,newScope){childScope=newScope;clone[clone.length++]=$compile.$$createComment('end ngIf',$attr.ngIf);// Note: We only need the first/last node of the cloned nodes.
	// However, we need to keep the reference to the jqlite wrapper as it might be changed later
	// by a directive with templateUrl when its template arrives.
	block={clone:clone};$animate.enter(clone,$element.parent(),$element);});}}else{if(previousElements){previousElements.remove();previousElements=null;}if(childScope){childScope.$destroy();childScope=null;}if(block){previousElements=getBlockNodes(block.clone);$animate.leave(previousElements).done(function(response){if(response!==false)previousElements=null;});block=null;}}});}};}];/**
	 * @ngdoc directive
	 * @name ngInclude
	 * @restrict ECA
	 *
	 * @description
	 * Fetches, compiles and includes an external HTML fragment.
	 *
	 * By default, the template URL is restricted to the same domain and protocol as the
	 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
	 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
	 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
	 * ng.$sce Strict Contextual Escaping}.
	 *
	 * In addition, the browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy may further restrict whether the template is successfully loaded.
	 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
	 * access on some browsers.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |
	 * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |
	 *
	 * The enter and leave animation occur concurrently.
	 *
	 * @scope
	 * @priority 400
	 *
	 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
	 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
	 * @param {string=} onload Expression to evaluate when a new partial is loaded.
	 *                  <div class="alert alert-warning">
	 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
	 *                  a function with the name on the window element, which will usually throw a
	 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
	 *                  different form that {@link guide/directive#normalization matches} `onload`.
	 *                  </div>
	   *
	 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
	 *                  $anchorScroll} to scroll the viewport after the content is loaded.
	 *
	 *                  - If the attribute is not set, disable scrolling.
	 *                  - If the attribute is set without value, enable scrolling.
	 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
	 *
	 * @example
	  <example module="includeExample" deps="angular-animate.js" animations="true" name="ng-include">
	    <file name="index.html">
	     <div ng-controller="ExampleController">
	       <select ng-model="template" ng-options="t.name for t in templates">
	        <option value="">(blank)</option>
	       </select>
	       url of the template: <code>{{template.url}}</code>
	       <hr/>
	       <div class="slide-animate-container">
	         <div class="slide-animate" ng-include="template.url"></div>
	       </div>
	     </div>
	    </file>
	    <file name="script.js">
	      angular.module('includeExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.templates =
	            [{ name: 'template1.html', url: 'template1.html'},
	             { name: 'template2.html', url: 'template2.html'}];
	          $scope.template = $scope.templates[0];
	        }]);
	     </file>
	    <file name="template1.html">
	      Content of template1.html
	    </file>
	    <file name="template2.html">
	      Content of template2.html
	    </file>
	    <file name="animations.css">
	      .slide-animate-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .slide-animate {
	        padding:10px;
	      }

	      .slide-animate.ng-enter, .slide-animate.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	        display:block;
	        padding:10px;
	      }

	      .slide-animate.ng-enter {
	        top:-50px;
	      }
	      .slide-animate.ng-enter.ng-enter-active {
	        top:0;
	      }

	      .slide-animate.ng-leave {
	        top:0;
	      }
	      .slide-animate.ng-leave.ng-leave-active {
	        top:50px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var templateSelect = element(by.model('template'));
	      var includeElem = element(by.css('[ng-include]'));

	      it('should load template1.html', function() {
	        expect(includeElem.getText()).toMatch(/Content of template1.html/);
	      });

	      it('should load template2.html', function() {
	        if (browser.params.browser === 'firefox') {
	          // Firefox can't handle using selects
	          // See https://github.com/angular/protractor/issues/480
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(2).click();
	        expect(includeElem.getText()).toMatch(/Content of template2.html/);
	      });

	      it('should change to blank', function() {
	        if (browser.params.browser === 'firefox') {
	          // Firefox can't handle using selects
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(0).click();
	        expect(includeElem.isPresent()).toBe(false);
	      });
	    </file>
	  </example>
	 *//**
	 * @ngdoc event
	 * @name ngInclude#$includeContentRequested
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted every time the ngInclude content is requested.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 *//**
	 * @ngdoc event
	 * @name ngInclude#$includeContentLoaded
	 * @eventType emit on the current ngInclude scope
	 * @description
	 * Emitted every time the ngInclude content is reloaded.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 *//**
	 * @ngdoc event
	 * @name ngInclude#$includeContentError
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */var ngIncludeDirective=['$templateRequest','$anchorScroll','$animate',function($templateRequest,$anchorScroll,$animate){return{restrict:'ECA',priority:400,terminal:true,transclude:'element',controller:angular.noop,compile:function compile(element,attr){var srcExp=attr.ngInclude||attr.src,onloadExp=attr.onload||'',autoScrollExp=attr.autoscroll;return function(scope,$element,$attr,ctrl,$transclude){var changeCounter=0,currentScope,previousElement,currentElement;var cleanupLastIncludeContent=function cleanupLastIncludeContent(){if(previousElement){previousElement.remove();previousElement=null;}if(currentScope){currentScope.$destroy();currentScope=null;}if(currentElement){$animate.leave(currentElement).done(function(response){if(response!==false)previousElement=null;});previousElement=currentElement;currentElement=null;}};scope.$watch(srcExp,function ngIncludeWatchAction(src){var afterAnimation=function afterAnimation(response){if(response!==false&&isDefined(autoScrollExp)&&(!autoScrollExp||scope.$eval(autoScrollExp))){$anchorScroll();}};var thisChangeId=++changeCounter;if(src){//set the 2nd param to true to ignore the template request error so that the inner
	//contents and scope can be cleaned up.
	$templateRequest(src,true).then(function(response){if(scope.$$destroyed)return;if(thisChangeId!==changeCounter)return;var newScope=scope.$new();ctrl.template=response;// Note: This will also link all children of ng-include that were contained in the original
	// html. If that content contains controllers, ... they could pollute/change the scope.
	// However, using ng-include on an element with additional content does not make sense...
	// Note: We can't remove them in the cloneAttchFn of $transclude as that
	// function is called before linking the content, which would apply child
	// directives to non existing elements.
	var clone=$transclude(newScope,function(clone){cleanupLastIncludeContent();$animate.enter(clone,null,$element).done(afterAnimation);});currentScope=newScope;currentElement=clone;currentScope.$emit('$includeContentLoaded',src);scope.$eval(onloadExp);},function(){if(scope.$$destroyed)return;if(thisChangeId===changeCounter){cleanupLastIncludeContent();scope.$emit('$includeContentError',src);}});scope.$emit('$includeContentRequested',src);}else{cleanupLastIncludeContent();ctrl.template=null;}});};}};}];// This directive is called during the $transclude call of the first `ngInclude` directive.
	// It will replace and compile the content of the element with the loaded template.
	// We need this directive so that the element content is already filled when
	// the link function of another directive on the same element as ngInclude
	// is called.
	var ngIncludeFillContentDirective=['$compile',function($compile){return{restrict:'ECA',priority:-400,require:'ngInclude',link:function link(scope,$element,$attr,ctrl){if(toString.call($element[0]).match(/SVG/)){// WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
	// support innerHTML, so detect this here and try to generate the contents
	// specially.
	$element.empty();$compile(jqLiteBuildFragment(ctrl.template,window.document).childNodes)(scope,function namespaceAdaptedClone(clone){$element.append(clone);},{futureParentElement:$element});return;}$element.html(ctrl.template);$compile($element.contents())(scope);}};}];/**
	 * @ngdoc directive
	 * @name ngInit
	 * @restrict AC
	 *
	 * @description
	 * The `ngInit` directive allows you to evaluate an expression in the
	 * current scope.
	 *
	 * <div class="alert alert-danger">
	 * This directive can be abused to add unnecessary amounts of logic into your templates.
	 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
	 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
	 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
	 * rather than `ngInit` to initialize values on a scope.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
	 * sure you have parentheses to ensure correct operator precedence:
	 * <pre class="prettyprint">
	 * `<div ng-init="test1 = ($index | toString)"></div>`
	 * </pre>
	 * </div>
	 *
	 * @priority 450
	 *
	 * @element ANY
	 * @param {expression} ngInit {@link guide/expression Expression} to eval.
	 *
	 * @example
	   <example module="initExample" name="ng-init">
	     <file name="index.html">
	   <script>
	     angular.module('initExample', [])
	       .controller('ExampleController', ['$scope', function($scope) {
	         $scope.list = [['a', 'b'], ['c', 'd']];
	       }]);
	   </script>
	   <div ng-controller="ExampleController">
	     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
	       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
	          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
	       </div>
	     </div>
	   </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should alias index positions', function() {
	         var elements = element.all(by.css('.example-init'));
	         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
	         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
	         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
	         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
	       });
	     </file>
	   </example>
	 */var ngInitDirective=ngDirective({priority:450,compile:function compile(){return{pre:function pre(scope,element,attrs){scope.$eval(attrs.ngInit);}};}});/**
	 * @ngdoc directive
	 * @name ngList
	 *
	 * @description
	 * Text input that converts between a delimited string and an array of strings. The default
	 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
	 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
	 *
	 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
	 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
	 *   list item is respected. This implies that the user of the directive is responsible for
	 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
	 *   tab or newline character.
	 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
	 *   when joining the list items back together) and whitespace around each list item is stripped
	 *   before it is added to the model.
	 *
	 * ### Example with Validation
	 *
	 * <example name="ngList-directive" module="listExample">
	 *   <file name="app.js">
	 *      angular.module('listExample', [])
	 *        .controller('ExampleController', ['$scope', function($scope) {
	 *          $scope.names = ['morpheus', 'neo', 'trinity'];
	 *        }]);
	 *   </file>
	 *   <file name="index.html">
	 *    <form name="myForm" ng-controller="ExampleController">
	 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
	 *      <span role="alert">
	 *        <span class="error" ng-show="myForm.namesInput.$error.required">
	 *        Required!</span>
	 *      </span>
	 *      <br>
	 *      <tt>names = {{names}}</tt><br/>
	 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
	 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
	 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	 *     </form>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var listInput = element(by.model('names'));
	 *     var names = element(by.exactBinding('names'));
	 *     var valid = element(by.binding('myForm.namesInput.$valid'));
	 *     var error = element(by.css('span.error'));
	 *
	 *     it('should initialize to model', function() {
	 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
	 *       expect(valid.getText()).toContain('true');
	 *       expect(error.getCssValue('display')).toBe('none');
	 *     });
	 *
	 *     it('should be invalid if empty', function() {
	 *       listInput.clear();
	 *       listInput.sendKeys('');
	 *
	 *       expect(names.getText()).toContain('');
	 *       expect(valid.getText()).toContain('false');
	 *       expect(error.getCssValue('display')).not.toBe('none');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * ### Example - splitting on newline
	 * <example name="ngList-directive-newlines">
	 *   <file name="index.html">
	 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
	 *    <pre>{{ list | json }}</pre>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it("should split the text by newlines", function() {
	 *       var listInput = element(by.model('list'));
	 *       var output = element(by.binding('list | json'));
	 *       listInput.sendKeys('abc\ndef\nghi');
	 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * @element input
	 * @param {string=} ngList optional delimiter that should be used to split the value.
	 */var ngListDirective=function ngListDirective(){return{restrict:'A',priority:100,require:'ngModel',link:function link(scope,element,attr,ctrl){var ngList=attr.ngList||', ';var trimValues=attr.ngTrim!=='false';var separator=trimValues?trim(ngList):ngList;var parse=function parse(viewValue){// If the viewValue is invalid (say required but empty) it will be `undefined`
	if(isUndefined(viewValue))return;var list=[];if(viewValue){forEach(viewValue.split(separator),function(value){if(value)list.push(trimValues?trim(value):value);});}return list;};ctrl.$parsers.push(parse);ctrl.$formatters.push(function(value){if(isArray(value)){return value.join(ngList);}return undefined;});// Override the standard $isEmpty because an empty array means the input is empty.
	ctrl.$isEmpty=function(value){return!value||!value.length;};}};};/* global VALID_CLASS: true,
	  INVALID_CLASS: true,
	  PRISTINE_CLASS: true,
	  DIRTY_CLASS: true,
	  UNTOUCHED_CLASS: true,
	  TOUCHED_CLASS: true,
	  PENDING_CLASS: true,
	  addSetValidityMethod: true,
	  setupValidity: true,
	  defaultModelOptions: false
	*/var VALID_CLASS='ng-valid',INVALID_CLASS='ng-invalid',PRISTINE_CLASS='ng-pristine',DIRTY_CLASS='ng-dirty',UNTOUCHED_CLASS='ng-untouched',TOUCHED_CLASS='ng-touched',EMPTY_CLASS='ng-empty',NOT_EMPTY_CLASS='ng-not-empty';var ngModelMinErr=minErr('ngModel');/**
	 * @ngdoc type
	 * @name ngModel.NgModelController
	 *
	 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
	 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
	 * is set.
	 * @property {*} $modelValue The value in the model that the control is bound to.
	 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
	       the control reads value from the DOM. The functions are called in array order, each passing
	       its return value through to the next. The last return value is forwarded to the
	       {@link ngModel.NgModelController#$validators `$validators`} collection.

	Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
	`$viewValue`}.

	Returning `undefined` from a parser means a parse error occurred. In that case,
	no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
	will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
	is set to `true`. The parse error is stored in `ngModel.$error.parse`.

	 *
	 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
	       the model value changes. The functions are called in reverse array order, each passing the value through to the
	       next. The last return value is used as the actual DOM value.
	       Used to format / convert values for display in the control.
	 * ```js
	 * function formatter(value) {
	 *   if (value) {
	 *     return value.toUpperCase();
	 *   }
	 * }
	 * ngModel.$formatters.push(formatter);
	 * ```
	 *
	 * @property {Object.<string, function>} $validators A collection of validators that are applied
	 *      whenever the model value changes. The key value within the object refers to the name of the
	 *      validator while the function refers to the validation operation. The validation operation is
	 *      provided with the model value as an argument and must return a true or false value depending
	 *      on the response of that validation.
	 *
	 * ```js
	 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *   return /[0-9]+/.test(value) &&
	 *          /[a-z]+/.test(value) &&
	 *          /[A-Z]+/.test(value) &&
	 *          /\W+/.test(value);
	 * };
	 * ```
	 *
	 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
	 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
	 *      is expected to return a promise when it is run during the model validation process. Once the promise
	 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
	 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
	 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
	 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
	 *      will only run once all synchronous validators have passed.
	 *
	 * Please note that if $http is used then it is important that the server returns a success HTTP response code
	 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
	 *
	 * ```js
	 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *
	 *   // Lookup user by username
	 *   return $http.get('/api/users/' + value).
	 *      then(function resolved() {
	 *        //username exists, this means validation fails
	 *        return $q.reject('exists');
	 *      }, function rejected() {
	 *        //username does not exist, therefore this validation passes
	 *        return true;
	 *      });
	 * };
	 * ```
	 *
	 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
	 *     view value has changed. It is called with no arguments, and its return value is ignored.
	 *     This can be used in place of additional $watches against the model value.
	 *
	 * @property {Object} $error An object hash with all failing validator ids as keys.
	 * @property {Object} $pending An object hash with all pending validator ids as keys.
	 *
	 * @property {boolean} $untouched True if control has not lost focus yet.
	 * @property {boolean} $touched True if control has lost focus.
	 * @property {boolean} $pristine True if user has not interacted with the control yet.
	 * @property {boolean} $dirty True if user has already interacted with the control.
	 * @property {boolean} $valid True if there is no error.
	 * @property {boolean} $invalid True if at least one error on the control.
	 * @property {string} $name The name attribute of the control.
	 *
	 * @description
	 *
	 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
	 * The controller contains services for data-binding, validation, CSS updates, and value formatting
	 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
	 * listening to DOM events.
	 * Such DOM related logic should be provided by other directives which make use of
	 * `NgModelController` for data-binding to control elements.
	 * Angular provides this DOM logic for most {@link input `input`} elements.
	 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
	 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
	 *
	 * @example
	 * ### Custom Control Example
	 * This example shows how to use `NgModelController` with a custom control to achieve
	 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
	 * collaborate together to achieve the desired result.
	 *
	 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
	 * contents be edited in place by the user.
	 *
	 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
	 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
	 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
	 * that content using the `$sce` service.
	 *
	 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
	    <file name="style.css">
	      [contenteditable] {
	        border: 1px solid black;
	        background-color: white;
	        min-height: 20px;
	      }

	      .ng-invalid {
	        border: 1px solid red;
	      }

	    </file>
	    <file name="script.js">
	      angular.module('customControl', ['ngSanitize']).
	        directive('contenteditable', ['$sce', function($sce) {
	          return {
	            restrict: 'A', // only activate on element attribute
	            require: '?ngModel', // get a hold of NgModelController
	            link: function(scope, element, attrs, ngModel) {
	              if (!ngModel) return; // do nothing if no ng-model

	              // Specify how UI should be updated
	              ngModel.$render = function() {
	                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
	              };

	              // Listen for change events to enable binding
	              element.on('blur keyup change', function() {
	                scope.$evalAsync(read);
	              });
	              read(); // initialize

	              // Write data to the model
	              function read() {
	                var html = element.html();
	                // When we clear the content editable the browser leaves a <br> behind
	                // If strip-br attribute is provided then we strip this out
	                if (attrs.stripBr && html === '<br>') {
	                  html = '';
	                }
	                ngModel.$setViewValue(html);
	              }
	            }
	          };
	        }]);
	    </file>
	    <file name="index.html">
	      <form name="myForm">
	       <div contenteditable
	            name="myWidget" ng-model="userContent"
	            strip-br="true"
	            required>Change me!</div>
	        <span ng-show="myForm.myWidget.$error.required">Required!</span>
	       <hr>
	       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	    it('should data-bind and become invalid', function() {
	      if (browser.params.browser === 'safari' || browser.params.browser === 'firefox') {
	        // SafariDriver can't handle contenteditable
	        // and Firefox driver can't clear contenteditables very well
	        return;
	      }
	      var contentEditable = element(by.css('[contenteditable]'));
	      var content = 'Change me!';

	      expect(contentEditable.getText()).toEqual(content);

	      contentEditable.clear();
	      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
	      expect(contentEditable.getText()).toEqual('');
	      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
	    });
	    </file>
	 * </example>
	 *
	 *
	 */NgModelController.$inject=['$scope','$exceptionHandler','$attrs','$element','$parse','$animate','$timeout','$q','$interpolate'];function NgModelController($scope,$exceptionHandler,$attr,$element,$parse,$animate,$timeout,$q,$interpolate){this.$viewValue=Number.NaN;this.$modelValue=Number.NaN;this.$$rawModelValue=undefined;// stores the parsed modelValue / model set from scope regardless of validity.
	this.$validators={};this.$asyncValidators={};this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$untouched=true;this.$touched=false;this.$pristine=true;this.$dirty=false;this.$valid=true;this.$invalid=false;this.$error={};// keep invalid keys here
	this.$$success={};// keep valid keys here
	this.$pending=undefined;// keep pending keys here
	this.$name=$interpolate($attr.name||'',false)($scope);this.$$parentForm=nullFormCtrl;this.$options=defaultModelOptions;this.$$parsedNgModel=$parse($attr.ngModel);this.$$parsedNgModelAssign=this.$$parsedNgModel.assign;this.$$ngModelGet=this.$$parsedNgModel;this.$$ngModelSet=this.$$parsedNgModelAssign;this.$$pendingDebounce=null;this.$$parserValid=undefined;this.$$currentValidationRunId=0;this.$$scope=$scope;this.$$attr=$attr;this.$$element=$element;this.$$animate=$animate;this.$$timeout=$timeout;this.$$parse=$parse;this.$$q=$q;this.$$exceptionHandler=$exceptionHandler;setupValidity(this);setupModelWatcher(this);}NgModelController.prototype={$$initGetterSetters:function $$initGetterSetters(){if(this.$options.getOption('getterSetter')){var invokeModelGetter=this.$$parse(this.$$attr.ngModel+'()'),invokeModelSetter=this.$$parse(this.$$attr.ngModel+'($$$p)');this.$$ngModelGet=function($scope){var modelValue=this.$$parsedNgModel($scope);if(isFunction(modelValue)){modelValue=invokeModelGetter($scope);}return modelValue;};this.$$ngModelSet=function($scope,newValue){if(isFunction(this.$$parsedNgModel($scope))){invokeModelSetter($scope,{$$$p:newValue});}else{this.$$parsedNgModelAssign($scope,newValue);}};}else if(!this.$$parsedNgModel.assign){throw ngModelMinErr('nonassign','Expression \'{0}\' is non-assignable. Element: {1}',this.$$attr.ngModel,startingTag(this.$$element));}},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$render
	   *
	   * @description
	   * Called when the view needs to be updated. It is expected that the user of the ng-model
	   * directive will implement this method.
	   *
	   * The `$render()` method is invoked in the following situations:
	   *
	   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
	   *   committed value then `$render()` is called to update the input control.
	   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
	   *   the `$viewValue` are different from last time.
	   *
	   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
	   * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
	   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
	   * invoked if you only change a property on the objects.
	   */$render:noop,/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$isEmpty
	   *
	   * @description
	   * This is called when we need to determine if the value of an input is empty.
	   *
	   * For instance, the required directive does this to work out if the input has data or not.
	   *
	   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
	   *
	   * You can override this for input directives whose concept of being empty is different from the
	   * default. The `checkboxInputType` directive does this because in its case a value of `false`
	   * implies empty.
	   *
	   * @param {*} value The value of the input to check for emptiness.
	   * @returns {boolean} True if `value` is "empty".
	   */$isEmpty:function $isEmpty(value){// eslint-disable-next-line no-self-compare
	return isUndefined(value)||value===''||value===null||value!==value;},$$updateEmptyClasses:function $$updateEmptyClasses(value){if(this.$isEmpty(value)){this.$$animate.removeClass(this.$$element,NOT_EMPTY_CLASS);this.$$animate.addClass(this.$$element,EMPTY_CLASS);}else{this.$$animate.removeClass(this.$$element,EMPTY_CLASS);this.$$animate.addClass(this.$$element,NOT_EMPTY_CLASS);}},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setPristine
	   *
	   * @description
	   * Sets the control to its pristine state.
	   *
	   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
	   * state (`ng-pristine` class). A model is considered to be pristine when the control
	   * has not been changed from when first compiled.
	   */$setPristine:function $setPristine(){this.$dirty=false;this.$pristine=true;this.$$animate.removeClass(this.$$element,DIRTY_CLASS);this.$$animate.addClass(this.$$element,PRISTINE_CLASS);},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setDirty
	   *
	   * @description
	   * Sets the control to its dirty state.
	   *
	   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
	   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
	   * from when first compiled.
	   */$setDirty:function $setDirty(){this.$dirty=true;this.$pristine=false;this.$$animate.removeClass(this.$$element,PRISTINE_CLASS);this.$$animate.addClass(this.$$element,DIRTY_CLASS);this.$$parentForm.$setDirty();},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setUntouched
	   *
	   * @description
	   * Sets the control to its untouched state.
	   *
	   * This method can be called to remove the `ng-touched` class and set the control to its
	   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
	   * by default, however this function can be used to restore that state if the model has
	   * already been touched by the user.
	   */$setUntouched:function $setUntouched(){this.$touched=false;this.$untouched=true;this.$$animate.setClass(this.$$element,UNTOUCHED_CLASS,TOUCHED_CLASS);},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setTouched
	   *
	   * @description
	   * Sets the control to its touched state.
	   *
	   * This method can be called to remove the `ng-untouched` class and set the control to its
	   * touched state (`ng-touched` class). A model is considered to be touched when the user has
	   * first focused the control element and then shifted focus away from the control (blur event).
	   */$setTouched:function $setTouched(){this.$touched=true;this.$untouched=false;this.$$animate.setClass(this.$$element,TOUCHED_CLASS,UNTOUCHED_CLASS);},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$rollbackViewValue
	   *
	   * @description
	   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
	   * which may be caused by a pending debounced event or because the input is waiting for some
	   * future event.
	   *
	   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
	   * depend on special events such as `blur`, there can be a period when the `$viewValue` is out of
	   * sync with the ngModel's `$modelValue`.
	   *
	   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
	   * and reset the input to the last committed view value.
	   *
	   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
	   * programmatically before these debounced/future events have resolved/occurred, because Angular's
	   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
	   *
	   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
	   * input which may have such events pending. This is important in order to make sure that the
	   * input field will be updated with the new model value and any pending operations are cancelled.
	   *
	   * <example name="ng-model-cancel-update" module="cancel-update-example">
	   *   <file name="app.js">
	   *     angular.module('cancel-update-example', [])
	   *
	   *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.model = {value1: '', value2: ''};
	   *
	   *       $scope.setEmpty = function(e, value, rollback) {
	   *         if (e.keyCode === 27) {
	   *           e.preventDefault();
	   *           if (rollback) {
	   *             $scope.myForm[value].$rollbackViewValue();
	   *           }
	   *           $scope.model[value] = '';
	   *         }
	   *       };
	   *     }]);
	   *   </file>
	   *   <file name="index.html">
	   *     <div ng-controller="CancelUpdateController">
	   *       <p>Both of these inputs are only updated if they are blurred. Hitting escape should
	   *       empty them. Follow these steps and observe the difference:</p>
	   *       <ol>
	   *         <li>Type something in the input. You will see that the model is not yet updated</li>
	   *         <li>Press the Escape key.
	   *           <ol>
	   *             <li> In the first example, nothing happens, because the model is already '', and no
	   *             update is detected. If you blur the input, the model will be set to the current view.
	   *             </li>
	   *             <li> In the second example, the pending update is cancelled, and the input is set back
	   *             to the last committed view value (''). Blurring the input does nothing.
	   *             </li>
	   *           </ol>
	   *         </li>
	   *       </ol>
	   *
	   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
	   *         <div>
	   *           <p id="inputDescription1">Without $rollbackViewValue():</p>
	   *           <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
	   *                  ng-keydown="setEmpty($event, 'value1')">
	   *           value1: "{{ model.value1 }}"
	   *         </div>
	   *
	   *         <div>
	   *           <p id="inputDescription2">With $rollbackViewValue():</p>
	   *           <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
	   *                  ng-keydown="setEmpty($event, 'value2', true)">
	   *           value2: "{{ model.value2 }}"
	   *         </div>
	   *       </form>
	   *     </div>
	   *   </file>
	       <file name="style.css">
	          div {
	            display: table-cell;
	          }
	          div:nth-child(1) {
	            padding-right: 30px;
	          }

	        </file>
	   * </example>
	   */$rollbackViewValue:function $rollbackViewValue(){this.$$timeout.cancel(this.$$pendingDebounce);this.$viewValue=this.$$lastCommittedViewValue;this.$render();},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$validate
	   *
	   * @description
	   * Runs each of the registered validators (first synchronous validators and then
	   * asynchronous validators).
	   * If the validity changes to invalid, the model will be set to `undefined`,
	   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
	   * If the validity changes to valid, it will set the model to the last available valid
	   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
	   */$validate:function $validate(){// ignore $validate before model is initialized
	if(isNumberNaN(this.$modelValue)){return;}var viewValue=this.$$lastCommittedViewValue;// Note: we use the $$rawModelValue as $modelValue might have been
	// set to undefined during a view -> model update that found validation
	// errors. We can't parse the view here, since that could change
	// the model although neither viewValue nor the model on the scope changed
	var modelValue=this.$$rawModelValue;var prevValid=this.$valid;var prevModelValue=this.$modelValue;var allowInvalid=this.$options.getOption('allowInvalid');var that=this;this.$$runValidators(modelValue,viewValue,function(allValid){// If there was no change in validity, don't update the model
	// This prevents changing an invalid modelValue to undefined
	if(!allowInvalid&&prevValid!==allValid){// Note: Don't check this.$valid here, as we could have
	// external validators (e.g. calculated on the server),
	// that just call $setValidity and need the model value
	// to calculate their validity.
	that.$modelValue=allValid?modelValue:undefined;if(that.$modelValue!==prevModelValue){that.$$writeModelToScope();}}});},$$runValidators:function $$runValidators(modelValue,viewValue,doneCallback){this.$$currentValidationRunId++;var localValidationRunId=this.$$currentValidationRunId;var that=this;// check parser error
	if(!processParseErrors()){validationDone(false);return;}if(!processSyncValidators()){validationDone(false);return;}processAsyncValidators();function processParseErrors(){var errorKey=that.$$parserName||'parse';if(isUndefined(that.$$parserValid)){setValidity(errorKey,null);}else{if(!that.$$parserValid){forEach(that.$validators,function(v,name){setValidity(name,null);});forEach(that.$asyncValidators,function(v,name){setValidity(name,null);});}// Set the parse error last, to prevent unsetting it, should a $validators key == parserName
	setValidity(errorKey,that.$$parserValid);return that.$$parserValid;}return true;}function processSyncValidators(){var syncValidatorsValid=true;forEach(that.$validators,function(validator,name){var result=Boolean(validator(modelValue,viewValue));syncValidatorsValid=syncValidatorsValid&&result;setValidity(name,result);});if(!syncValidatorsValid){forEach(that.$asyncValidators,function(v,name){setValidity(name,null);});return false;}return true;}function processAsyncValidators(){var validatorPromises=[];var allValid=true;forEach(that.$asyncValidators,function(validator,name){var promise=validator(modelValue,viewValue);if(!isPromiseLike(promise)){throw ngModelMinErr('nopromise','Expected asynchronous validator to return a promise but got \'{0}\' instead.',promise);}setValidity(name,undefined);validatorPromises.push(promise.then(function(){setValidity(name,true);},function(){allValid=false;setValidity(name,false);}));});if(!validatorPromises.length){validationDone(true);}else{that.$$q.all(validatorPromises).then(function(){validationDone(allValid);},noop);}}function setValidity(name,isValid){if(localValidationRunId===that.$$currentValidationRunId){that.$setValidity(name,isValid);}}function validationDone(allValid){if(localValidationRunId===that.$$currentValidationRunId){doneCallback(allValid);}}},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$commitViewValue
	   *
	   * @description
	   * Commit a pending update to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */$commitViewValue:function $commitViewValue(){var viewValue=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce);// If the view value has not changed then we should just exit, except in the case where there is
	// a native validator on the element. In this case the validation state may have changed even though
	// the viewValue has stayed empty.
	if(this.$$lastCommittedViewValue===viewValue&&(viewValue!==''||!this.$$hasNativeValidators)){return;}this.$$updateEmptyClasses(viewValue);this.$$lastCommittedViewValue=viewValue;// change to dirty
	if(this.$pristine){this.$setDirty();}this.$$parseAndValidate();},$$parseAndValidate:function $$parseAndValidate(){var viewValue=this.$$lastCommittedViewValue;var modelValue=viewValue;var that=this;this.$$parserValid=isUndefined(modelValue)?undefined:true;if(this.$$parserValid){for(var i=0;i<this.$parsers.length;i++){modelValue=this.$parsers[i](modelValue);if(isUndefined(modelValue)){this.$$parserValid=false;break;}}}if(isNumberNaN(this.$modelValue)){// this.$modelValue has not been touched yet...
	this.$modelValue=this.$$ngModelGet(this.$$scope);}var prevModelValue=this.$modelValue;var allowInvalid=this.$options.getOption('allowInvalid');this.$$rawModelValue=modelValue;if(allowInvalid){this.$modelValue=modelValue;writeToModelIfNeeded();}// Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
	// This can happen if e.g. $setViewValue is called from inside a parser
	this.$$runValidators(modelValue,this.$$lastCommittedViewValue,function(allValid){if(!allowInvalid){// Note: Don't check this.$valid here, as we could have
	// external validators (e.g. calculated on the server),
	// that just call $setValidity and need the model value
	// to calculate their validity.
	that.$modelValue=allValid?modelValue:undefined;writeToModelIfNeeded();}});function writeToModelIfNeeded(){if(that.$modelValue!==prevModelValue){that.$$writeModelToScope();}}},$$writeModelToScope:function $$writeModelToScope(){this.$$ngModelSet(this.$$scope,this.$modelValue);forEach(this.$viewChangeListeners,function(listener){try{listener();}catch(e){// eslint-disable-next-line no-invalid-this
	this.$$exceptionHandler(e);}},this);},/**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setViewValue
	   *
	   * @description
	   * Update the view value.
	   *
	   * This method should be called when a control wants to change the view value; typically,
	   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
	   * directive calls it when the value of the input changes and {@link ng.directive:select select}
	   * calls it when an option is selected.
	   *
	   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
	   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
	   * value sent directly for processing, finally to be applied to `$modelValue` and then the
	   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
	   * in the `$viewChangeListeners` list, are called.
	   *
	   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
	   * and the `default` trigger is not listed, all those actions will remain pending until one of the
	   * `updateOn` events is triggered on the DOM element.
	   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
	   * directive is used with a custom debounce for this particular event.
	   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
	   * is specified, once the timer runs out.
	   *
	   * When used with standard inputs, the view value will always be a string (which is in some cases
	   * parsed into another type, such as a `Date` object for `input[date]`.)
	   * However, custom controls might also pass objects to this method. In this case, we should make
	   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
	   * perform a deep watch of objects, it only looks for a change of identity. If you only change
	   * the property of the object then ngModel will not realize that the object has changed and
	   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
	   * not change properties of the copy once it has been passed to `$setViewValue`.
	   * Otherwise you may cause the model value on the scope to change incorrectly.
	   *
	   * <div class="alert alert-info">
	   * In any case, the value passed to the method should always reflect the current value
	   * of the control. For example, if you are calling `$setViewValue` for an input element,
	   * you should pass the input DOM value. Otherwise, the control and the scope model become
	   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
	   * the control's DOM value in any way. If we want to change the control's DOM value
	   * programmatically, we should update the `ngModel` scope expression. Its new value will be
	   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
	   * to update the DOM, and finally call `$validate` on it.
	   * </div>
	   *
	   * @param {*} value value from the view.
	   * @param {string} trigger Event that triggered the update.
	   */$setViewValue:function $setViewValue(value,trigger){this.$viewValue=value;if(this.$options.getOption('updateOnDefault')){this.$$debounceViewValueCommit(trigger);}},$$debounceViewValueCommit:function $$debounceViewValueCommit(trigger){var debounceDelay=this.$options.getOption('debounce');if(isNumber(debounceDelay[trigger])){debounceDelay=debounceDelay[trigger];}else if(isNumber(debounceDelay['default'])){debounceDelay=debounceDelay['default'];}this.$$timeout.cancel(this.$$pendingDebounce);var that=this;if(debounceDelay>0){// this fails if debounceDelay is an object
	this.$$pendingDebounce=this.$$timeout(function(){that.$commitViewValue();},debounceDelay);}else if(this.$$scope.$root.$$phase){this.$commitViewValue();}else{this.$$scope.$apply(function(){that.$commitViewValue();});}}};function setupModelWatcher(ctrl){// model -> value
	// Note: we cannot use a normal scope.$watch as we want to detect the following:
	// 1. scope value is 'a'
	// 2. user enters 'b'
	// 3. ng-change kicks in and reverts scope value to 'a'
	//    -> scope value did not change since the last digest as
	//       ng-change executes in apply phase
	// 4. view should be changed back to 'a'
	ctrl.$$scope.$watch(function ngModelWatch(){var modelValue=ctrl.$$ngModelGet(ctrl.$$scope);// if scope model value and ngModel value are out of sync
	// TODO(perf): why not move this to the action fn?
	if(modelValue!==ctrl.$modelValue&&(// checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
	// eslint-disable-next-line no-self-compare
	ctrl.$modelValue===ctrl.$modelValue||modelValue===modelValue)){ctrl.$modelValue=ctrl.$$rawModelValue=modelValue;ctrl.$$parserValid=undefined;var formatters=ctrl.$formatters,idx=formatters.length;var viewValue=modelValue;while(idx--){viewValue=formatters[idx](viewValue);}if(ctrl.$viewValue!==viewValue){ctrl.$$updateEmptyClasses(viewValue);ctrl.$viewValue=ctrl.$$lastCommittedViewValue=viewValue;ctrl.$render();// It is possible that model and view value have been updated during render
	ctrl.$$runValidators(ctrl.$modelValue,ctrl.$viewValue,noop);}}return modelValue;});}/**
	 * @ngdoc method
	 * @name ngModel.NgModelController#$setValidity
	 *
	 * @description
	 * Change the validity state, and notify the form.
	 *
	 * This method can be called within $parsers/$formatters or a custom validation implementation.
	 * However, in most cases it should be sufficient to use the `ngModel.$validators` and
	 * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
	 *
	 * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
	 *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
	 *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
	 *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
	 *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
	 *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
	 * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
	 *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
	 *                          Skipped is used by Angular when validators do not run because of parse errors and
	 *                          when `$asyncValidators` do not run because any of the `$validators` failed.
	 */addSetValidityMethod({clazz:NgModelController,set:function set(object,property){object[property]=true;},unset:function unset(object,property){delete object[property];}});/**
	 * @ngdoc directive
	 * @name ngModel
	 *
	 * @element input
	 * @priority 1
	 *
	 * @description
	 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
	 * property on the scope using {@link ngModel.NgModelController NgModelController},
	 * which is created and exposed by this directive.
	 *
	 * `ngModel` is responsible for:
	 *
	 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
	 *   require.
	 * - Providing validation behavior (i.e. required, number, email, url).
	 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
	 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
	 *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
	 * - Registering the control with its parent {@link ng.directive:form form}.
	 *
	 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
	 * current scope. If the property doesn't already exist on this scope, it will be created
	 * implicitly and added to the scope.
	 *
	 * For best practices on using `ngModel`, see:
	 *
	 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
	 *
	 * For basic examples, how to use `ngModel`, see:
	 *
	 *  - {@link ng.directive:input input}
	 *    - {@link input[text] text}
	 *    - {@link input[checkbox] checkbox}
	 *    - {@link input[radio] radio}
	 *    - {@link input[number] number}
	 *    - {@link input[email] email}
	 *    - {@link input[url] url}
	 *    - {@link input[date] date}
	 *    - {@link input[datetime-local] datetime-local}
	 *    - {@link input[time] time}
	 *    - {@link input[month] month}
	 *    - {@link input[week] week}
	 *  - {@link ng.directive:select select}
	 *  - {@link ng.directive:textarea textarea}
	 *
	 * # Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
	 * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
	 *
	 * The model must be assigned an entirely new object or collection before a re-rendering will occur.
	 *
	 * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
	 * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
	 * if the select is given the `multiple` attribute.
	 *
	 * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
	 * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
	 * not trigger a re-rendering of the model.
	 *
	 * # CSS classes
	 * The following CSS classes are added and removed on the associated input/select/textarea element
	 * depending on the validity of the model.
	 *
	 *  - `ng-valid`: the model is valid
	 *  - `ng-invalid`: the model is invalid
	 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
	 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
	 *  - `ng-pristine`: the control hasn't been interacted with yet
	 *  - `ng-dirty`: the control has been interacted with
	 *  - `ng-touched`: the control has been blurred
	 *  - `ng-untouched`: the control hasn't been blurred
	 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
	 *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
	 *     by the {@link ngModel.NgModelController#$isEmpty} method
	 *  - `ng-not-empty`: the view contains a non-empty value
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 * ## Animation Hooks
	 *
	 * Animations within models are triggered when any of the associated CSS classes are added and removed
	 * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
	 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
	 * The animations that are triggered within ngModel are similar to how they work in ngClass and
	 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style an input element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-input {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-input.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample" name="ng-model">
	     <file name="index.html">
	       <script>
	        angular.module('inputExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.val = '1';
	          }]);
	       </script>
	       <style>
	         .my-input {
	           transition:all linear 0.5s;
	           background: transparent;
	         }
	         .my-input.ng-invalid {
	           color:white;
	           background: red;
	         }
	       </style>
	       <p id="inputDescription">
	        Update input to see transitions when valid/invalid.
	        Integer is a valid value.
	       </p>
	       <form name="testForm" ng-controller="ExampleController">
	         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
	                aria-describedby="inputDescription" />
	       </form>
	     </file>
	 * </example>
	 *
	 * ## Binding to a getter/setter
	 *
	 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
	 * function that returns a representation of the model when called with zero arguments, and sets
	 * the internal state of a model when called with an argument. It's sometimes useful to use this
	 * for models that have an internal representation that's different from what the model exposes
	 * to the view.
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
	 * frequently than other parts of your code.
	 * </div>
	 *
	 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
	 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
	 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
	 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
	 *
	 * The following example shows how to use `ngModel` with a getter/setter:
	 *
	 * @example
	 * <example name="ngModel-getter-setter" module="getterSetterExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <form name="userForm">
	           <label>Name:
	             <input type="text" name="userName"
	                    ng-model="user.name"
	                    ng-model-options="{ getterSetter: true }" />
	           </label>
	         </form>
	         <pre>user.name = <span ng-bind="user.name()"></span></pre>
	       </div>
	     </file>
	     <file name="app.js">
	       angular.module('getterSetterExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var _name = 'Brian';
	           $scope.user = {
	             name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	             }
	           };
	         }]);
	     </file>
	 * </example>
	 */var ngModelDirective=['$rootScope',function($rootScope){return{restrict:'A',require:['ngModel','^?form','^?ngModelOptions'],controller:NgModelController,// Prelink needs to run before any input directive
	// so that we can set the NgModelOptions in NgModelController
	// before anyone else uses it.
	priority:1,compile:function ngModelCompile(element){// Setup initial state of the control
	element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);return{pre:function ngModelPreLink(scope,element,attr,ctrls){var modelCtrl=ctrls[0],formCtrl=ctrls[1]||modelCtrl.$$parentForm,optionsCtrl=ctrls[2];if(optionsCtrl){modelCtrl.$options=optionsCtrl.$options;}modelCtrl.$$initGetterSetters();// notify others, especially parent forms
	formCtrl.$addControl(modelCtrl);attr.$observe('name',function(newValue){if(modelCtrl.$name!==newValue){modelCtrl.$$parentForm.$$renameControl(modelCtrl,newValue);}});scope.$on('$destroy',function(){modelCtrl.$$parentForm.$removeControl(modelCtrl);});},post:function ngModelPostLink(scope,element,attr,ctrls){var modelCtrl=ctrls[0];if(modelCtrl.$options.getOption('updateOn')){element.on(modelCtrl.$options.getOption('updateOn'),function(ev){modelCtrl.$$debounceViewValueCommit(ev&&ev.type);});}function setTouched(){modelCtrl.$setTouched();}element.on('blur',function(){if(modelCtrl.$touched)return;if($rootScope.$$phase){scope.$evalAsync(setTouched);}else{scope.$apply(setTouched);}});}};}};}];/* exported defaultModelOptions */var defaultModelOptions;var DEFAULT_REGEXP=/(\s+|^)default(\s+|$)/;/**
	 * @ngdoc type
	 * @name ModelOptions
	 * @description
	 * A container for the options set by the {@link ngModelOptions} directive
	 */function ModelOptions(options){this.$$options=options;}ModelOptions.prototype={/**
	   * @ngdoc method
	   * @name ModelOptions#getOption
	   * @param {string} name the name of the option to retrieve
	   * @returns {*} the value of the option
	   * @description
	   * Returns the value of the given option
	   */getOption:function getOption(name){return this.$$options[name];},/**
	   * @ngdoc method
	   * @name ModelOptions#createChild
	   * @param {Object} options a hash of options for the new child that will override the parent's options
	   * @return {ModelOptions} a new `ModelOptions` object initialized with the given options.
	   */createChild:function createChild(options){var inheritAll=false;// make a shallow copy
	options=extend({},options);// Inherit options from the parent if specified by the value `"$inherit"`
	forEach(options,/* @this */function(option,key){if(option==='$inherit'){if(key==='*'){inheritAll=true;}else{options[key]=this.$$options[key];// `updateOn` is special so we must also inherit the `updateOnDefault` option
	if(key==='updateOn'){options.updateOnDefault=this.$$options.updateOnDefault;}}}else{if(key==='updateOn'){// If the `updateOn` property contains the `default` event then we have to remove
	// it from the event list and set the `updateOnDefault` flag.
	options.updateOnDefault=false;options[key]=trim(option.replace(DEFAULT_REGEXP,function(){options.updateOnDefault=true;return' ';}));}}},this);if(inheritAll){// We have a property of the form: `"*": "$inherit"`
	delete options['*'];defaults(options,this.$$options);}// Finally add in any missing defaults
	defaults(options,defaultModelOptions.$$options);return new ModelOptions(options);}};defaultModelOptions=new ModelOptions({updateOn:'',updateOnDefault:true,debounce:0,getterSetter:false,allowInvalid:false,timezone:null});/**
	 * @ngdoc directive
	 * @name ngModelOptions
	 *
	 * @description
	 * This directive allows you to modify the behaviour of {@link ngModel} directives within your
	 * application. You can specify an `ngModelOptions` directive on any element. All {@link ngModel}
	 * directives will use the options of their nearest `ngModelOptions` ancestor.
	 *
	 * The `ngModelOptions` settings are found by evaluating the value of the attribute directive as
	 * an Angular expression. This expression should evaluate to an object, whose properties contain
	 * the settings. For example: `<div "ng-model-options"="{ debounce: 100 }"`.
	 *
	 * ## Inheriting Options
	 *
	 * You can specify that an `ngModelOptions` setting should be inherited from a parent `ngModelOptions`
	 * directive by giving it the value of `"$inherit"`.
	 * Then it will inherit that setting from the first `ngModelOptions` directive found by traversing up the
	 * DOM tree. If there is no ancestor element containing an `ngModelOptions` directive then default settings
	 * will be used.
	 *
	 * For example given the following fragment of HTML
	 *
	 *
	 * ```html
	 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
	 *   <form ng-model-options="{ updateOn: 'blur', allowInvalid: '$inherit' }">
	 *     <input ng-model-options="{ updateOn: 'default', allowInvalid: '$inherit' }" />
	 *   </form>
	 * </div>
	 * ```
	 *
	 * the `input` element will have the following settings
	 *
	 * ```js
	 * { allowInvalid: true, updateOn: 'default', debounce: 0 }
	 * ```
	 *
	 * Notice that the `debounce` setting was not inherited and used the default value instead.
	 *
	 * You can specify that all undefined settings are automatically inherited from an ancestor by
	 * including a property with key of `"*"` and value of `"$inherit"`.
	 *
	 * For example given the following fragment of HTML
	 *
	 *
	 * ```html
	 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
	 *   <form ng-model-options="{ updateOn: 'blur', "*": '$inherit' }">
	 *     <input ng-model-options="{ updateOn: 'default', "*": '$inherit' }" />
	 *   </form>
	 * </div>
	 * ```
	 *
	 * the `input` element will have the following settings
	 *
	 * ```js
	 * { allowInvalid: true, updateOn: 'default', debounce: 200 }
	 * ```
	 *
	 * Notice that the `debounce` setting now inherits the value from the outer `<div>` element.
	 *
	 * If you are creating a reusable component then you should be careful when using `"*": "$inherit"`
	 * since you may inadvertently inherit a setting in the future that changes the behavior of your component.
	 *
	 *
	 * ## Triggering and debouncing model updates
	 *
	 * The `updateOn` and `debounce` properties allow you to specify a custom list of events that will
	 * trigger a model update and/or a debouncing delay so that the actual update only takes place when
	 * a timer expires; this timer will be reset after another change takes place.
	 *
	 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
	 * be different from the value in the actual model. This means that if you update the model you
	 * should also invoke {@link ngModel.NgModelController#$rollbackViewValue} on the relevant input field in
	 * order to make sure it is synchronized with the model and that any debounced action is canceled.
	 *
	 * The easiest way to reference the control's {@link ngModel.NgModelController#$rollbackViewValue}
	 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
	 * important because `form` controllers are published to the related scope under the name in their
	 * `name` attribute.
	 *
	 * Any pending changes will take place immediately when an enclosing form is submitted via the
	 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * The following example shows how to override immediate updates. Changes on the inputs within the
	 * form will update the model only when the control loses focus (blur event). If `escape` key is
	 * pressed while the input field is focused, the value is reset to the value in the current model.
	 *
	 * <example name="ngModelOptions-directive-blur" module="optionsExample">
	 *   <file name="index.html">
	 *     <div ng-controller="ExampleController">
	 *       <form name="userForm">
	 *         <label>
	 *           Name:
	 *           <input type="text" name="userName"
	 *                  ng-model="user.name"
	 *                  ng-model-options="{ updateOn: 'blur' }"
	 *                  ng-keyup="cancel($event)" />
	 *         </label><br />
	 *         <label>
	 *           Other data:
	 *           <input type="text" ng-model="user.data" />
	 *         </label><br />
	 *       </form>
	 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('optionsExample', [])
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.user = { name: 'say', data: '' };
	 *
	 *         $scope.cancel = function(e) {
	 *           if (e.keyCode === 27) {
	 *             $scope.userForm.userName.$rollbackViewValue();
	 *           }
	 *         };
	 *       }]);
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var model = element(by.binding('user.name'));
	 *     var input = element(by.model('user.name'));
	 *     var other = element(by.model('user.data'));
	 *
	 *     it('should allow custom events', function() {
	 *       input.sendKeys(' hello');
	 *       input.click();
	 *       expect(model.getText()).toEqual('say');
	 *       other.click();
	 *       expect(model.getText()).toEqual('say hello');
	 *     });
	 *
	 *     it('should $rollbackViewValue when model changes', function() {
	 *       input.sendKeys(' hello');
	 *       expect(input.getAttribute('value')).toEqual('say hello');
	 *       input.sendKeys(protractor.Key.ESCAPE);
	 *       expect(input.getAttribute('value')).toEqual('say');
	 *       other.click();
	 *       expect(model.getText()).toEqual('say');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * The next example shows how to debounce model changes. Model will be updated only 1 sec after last change.
	 * If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.
	 *
	 * <example name="ngModelOptions-directive-debounce" module="optionsExample">
	 *   <file name="index.html">
	 *     <div ng-controller="ExampleController">
	 *       <form name="userForm">
	 *         Name:
	 *         <input type="text" name="userName"
	 *                ng-model="user.name"
	 *                ng-model-options="{ debounce: 1000 }" />
	 *         <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />
	 *       </form>
	 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('optionsExample', [])
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.user = { name: 'say' };
	 *       }]);
	 *   </file>
	 * </example>
	 *
	 * ## Model updates and validation
	 *
	 * The default behaviour in `ngModel` is that the model value is set to `undefined` when the
	 * validation determines that the value is invalid. By setting the `allowInvalid` property to true,
	 * the model will still be updated even if the value is invalid.
	 *
	 *
	 * ## Connecting to the scope
	 *
	 * By setting the `getterSetter` property to true you are telling ngModel that the `ngModel` expression
	 * on the scope refers to a "getter/setter" function rather than the value itself.
	 *
	 * The following example shows how to bind to getter/setters:
	 *
	 * <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
	 *   <file name="index.html">
	 *     <div ng-controller="ExampleController">
	 *       <form name="userForm">
	 *         <label>
	 *           Name:
	 *           <input type="text" name="userName"
	 *                  ng-model="user.name"
	 *                  ng-model-options="{ getterSetter: true }" />
	 *         </label>
	 *       </form>
	 *       <pre>user.name = <span ng-bind="user.name()"></span></pre>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('getterSetterExample', [])
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         var _name = 'Brian';
	 *         $scope.user = {
	 *           name: function(newName) {
	 *             return angular.isDefined(newName) ? (_name = newName) : _name;
	 *           }
	 *         };
	 *       }]);
	 *   </file>
	 * </example>
	 *
	 *
	 * ## Specifying timezones
	 *
	 * You can specify the timezone that date/time input directives expect by providing its name in the
	 * `timezone` property.
	 *
	 * @param {Object} ngModelOptions options to apply to {@link ngModel} directives on this element and
	 *   and its descendents. Valid keys are:
	 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
	 *     events using an space delimited list. There is a special event called `default` that
	 *     matches the default events belonging to the control.
	 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
	 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
	 *     custom value for each event. For example:
	 *     ```
	 *     ng-model-options="{
	 *       updateOn: 'default blur',
	 *       debounce: { 'default': 500, 'blur': 0 }
	 *     }"
	 *     ```
	 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
	 *     not validate correctly instead of the default behavior of setting the model to undefined.
	 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
	 *     `ngModel` as getters/setters.
	 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
	 *     `<input type="date" />`, `<input type="time" />`, ... . It understands UTC/GMT and the
	 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *     If not specified, the timezone of the browser will be used.
	 *
	 */var ngModelOptionsDirective=function ngModelOptionsDirective(){return{restrict:'A',// ngModelOptions needs to run before ngModel and input directives
	priority:10,require:['ngModelOptions','?^^ngModelOptions'],controller:function NgModelOptionsController(){},link:{pre:function ngModelOptionsPreLinkFn(scope,element,attrs,ctrls){var optionsCtrl=ctrls[0];var parentOptions=ctrls[1]?ctrls[1].$options:defaultModelOptions;optionsCtrl.$options=parentOptions.createChild(scope.$eval(attrs.ngModelOptions));}}};};// shallow copy over values from `src` that are not already specified on `dst`
	function defaults(dst,src){forEach(src,function(value,key){if(!isDefined(dst[key])){dst[key]=value;}});}/**
	 * @ngdoc directive
	 * @name ngNonBindable
	 * @restrict AC
	 * @priority 1000
	 *
	 * @description
	 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * @element ANY
	 *
	 * @example
	 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
	 * but the one wrapped in `ngNonBindable` is left alone.
	 *
	 * @example
	    <example name="ng-non-bindable">
	      <file name="index.html">
	        <div>Normal: {{1 + 2}}</div>
	        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
	      </file>
	      <file name="protractor.js" type="protractor">
	       it('should check ng-non-bindable', function() {
	         expect(element(by.binding('1 + 2')).getText()).toContain('3');
	         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
	       });
	      </file>
	    </example>
	 */var ngNonBindableDirective=ngDirective({terminal:true,priority:1000});/* exported ngOptionsDirective *//* global jqLiteRemove */var ngOptionsMinErr=minErr('ngOptions');/**
	 * @ngdoc directive
	 * @name ngOptions
	 * @restrict A
	 *
	 * @description
	 *
	 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
	 * elements for the `<select>` element using the array or object obtained by evaluating the
	 * `ngOptions` comprehension expression.
	 *
	 * In many cases, {@link ng.directive:ngRepeat ngRepeat} can be used on `<option>` elements instead of
	 * `ngOptions` to achieve a similar result. However, `ngOptions` provides some benefits:
	 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression
	 * - reduced memory consumption by not creating a new scope for each repeated instance
	 * - increased render speed by creating the options in a documentFragment instead of individually
	 *
	 * When an item in the `<select>` menu is selected, the array element or object property
	 * represented by the selected option will be bound to the model identified by the `ngModel`
	 * directive.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding the select to a model that is an object or a collection.
	 *
	 * One issue occurs if you want to preselect an option. For example, if you set
	 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
	 * because the objects are not identical. So by default, you should always reference the item in your collection
	 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
	 *
	 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
	 * of the item not by reference, but by the result of the `track by` expression. For example, if your
	 * collection items have an id property, you would `track by item.id`.
	 *
	 * A different issue with objects or collections is that ngModel won't detect if an object property or
	 * a collection item changes. For that reason, `ngOptions` additionally watches the model using
	 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
	 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
	 * has not changed identity, but only a property on the object or an item in the collection changes.
	 *
	 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
	 * if the model is an array). This means that changing a property deeper than the first level inside the
	 * object/collection will not trigger a re-rendering.
	 *
	 * ## `select` **`as`**
	 *
	 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
	 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
	 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
	 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
	 *
	 *
	 * ### `select` **`as`** and **`track by`**
	 *
	 * <div class="alert alert-warning">
	 * Be careful when using `select` **`as`** and **`track by`** in the same expression.
	 * </div>
	 *
	 * Given this array of items on the $scope:
	 *
	 * ```js
	 * $scope.items = [{
	 *   id: 1,
	 *   label: 'aLabel',
	 *   subItem: { name: 'aSubItem' }
	 * }, {
	 *   id: 2,
	 *   label: 'bLabel',
	 *   subItem: { name: 'bSubItem' }
	 * }];
	 * ```
	 *
	 * This will work:
	 *
	 * ```html
	 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0];
	 * ```
	 *
	 * but this will not work:
	 *
	 * ```html
	 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0].subItem;
	 * ```
	 *
	 * In both examples, the **`track by`** expression is applied successfully to each `item` in the
	 * `items` array. Because the selected option has been set programmatically in the controller, the
	 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
	 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
	 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
	 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
	 * is not matched against any `<option>` and the `<select>` appears as having no selected value.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required The control is considered valid only if value is entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {comprehension_expression=} ngOptions in one of the following forms:
	 *
	 *   * for array data sources:
	 *     * `label` **`for`** `value` **`in`** `array`
	 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
	 *        (for including a filter with `track by`)
	 *   * for object data sources:
	 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`group by`** `group`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`disable when`** `disable`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *
	 * Where:
	 *
	 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
	 *   * `value`: local variable which will refer to each item in the `array` or each property value
	 *      of `object` during iteration.
	 *   * `key`: local variable which will refer to a property name in `object` during iteration.
	 *   * `label`: The result of this expression will be the label for `<option>` element. The
	 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
	 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
	 *      element. If not specified, `select` expression will default to `value`.
	 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
	 *      DOM element.
	 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
	 *      element. Return `true` to disable.
	 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
	 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
	 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
	 *      even when the options are recreated (e.g. reloaded from the server).
	 *
	 * @example
	    <example module="selectExample" name="select">
	      <file name="index.html">
	        <script>
	        angular.module('selectExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.colors = [
	              {name:'black', shade:'dark'},
	              {name:'white', shade:'light', notAnOption: true},
	              {name:'red', shade:'dark'},
	              {name:'blue', shade:'dark', notAnOption: true},
	              {name:'yellow', shade:'light', notAnOption: false}
	            ];
	            $scope.myColor = $scope.colors[2]; // red
	          }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <ul>
	            <li ng-repeat="color in colors">
	              <label>Name: <input ng-model="color.name"></label>
	              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
	              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
	            </li>
	            <li>
	              <button ng-click="colors.push({})">add</button>
	            </li>
	          </ul>
	          <hr/>
	          <label>Color (null not allowed):
	            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
	          </label><br/>
	          <label>Color (null allowed):
	          <span  class="nullable">
	            <select ng-model="myColor" ng-options="color.name for color in colors">
	              <option value="">-- choose color --</option>
	            </select>
	          </span></label><br/>

	          <label>Color grouped by shade:
	            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
	            </select>
	          </label><br/>

	          <label>Color grouped by shade, with some disabled:
	            <select ng-model="myColor"
	                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
	            </select>
	          </label><br/>



	          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
	          <br/>
	          <hr/>
	          Currently selected: {{ {selected_color:myColor} }}
	          <div style="border:solid 1px black; height:20px"
	               ng-style="{'background-color':myColor.name}">
	          </div>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	         it('should check ng-options', function() {
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
	           element.all(by.model('myColor')).first().click();
	           element.all(by.css('select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
	           element(by.css('.nullable select[ng-model="myColor"]')).click();
	           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
	         });
	      </file>
	    </example>
	 *//* eslint-disable max-len *///                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555000000000666666666666600000007777777777777000000000000000888888888800000000000000000009999999999
	var NG_OPTIONS_REGEXP=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;// 1: value expression (valueFn)
	// 2: label expression (displayFn)
	// 3: group by expression (groupByFn)
	// 4: disable when expression (disableWhenFn)
	// 5: array item variable name
	// 6: object item key variable name
	// 7: object item value variable name
	// 8: collection expression
	// 9: track by expression
	/* eslint-enable */var ngOptionsDirective=['$compile','$document','$parse',function($compile,$document,$parse){function parseOptionsExpression(optionsExp,selectElement,scope){var match=optionsExp.match(NG_OPTIONS_REGEXP);if(!match){throw ngOptionsMinErr('iexp','Expected expression in form of '+'\'_select_ (as _label_)? for (_key_,)?_value_ in _collection_\''+' but got \'{0}\'. Element: {1}',optionsExp,startingTag(selectElement));}// Extract the parts from the ngOptions expression
	// The variable name for the value of the item in the collection
	var valueName=match[5]||match[7];// The variable name for the key of the item in the collection
	var keyName=match[6];// An expression that generates the viewValue for an option if there is a label expression
	var selectAs=/ as /.test(match[0])&&match[1];// An expression that is used to track the id of each object in the options collection
	var trackBy=match[9];// An expression that generates the viewValue for an option if there is no label expression
	var valueFn=$parse(match[2]?match[1]:valueName);var selectAsFn=selectAs&&$parse(selectAs);var viewValueFn=selectAsFn||valueFn;var trackByFn=trackBy&&$parse(trackBy);// Get the value by which we are going to track the option
	// if we have a trackFn then use that (passing scope and locals)
	// otherwise just hash the given viewValue
	var getTrackByValueFn=trackBy?function(value,locals){return trackByFn(scope,locals);}:function getHashOfValue(value){return hashKey(value);};var getTrackByValue=function getTrackByValue(value,key){return getTrackByValueFn(value,getLocals(value,key));};var displayFn=$parse(match[2]||match[1]);var groupByFn=$parse(match[3]||'');var disableWhenFn=$parse(match[4]||'');var valuesFn=$parse(match[8]);var locals={};var getLocals=keyName?function(value,key){locals[keyName]=key;locals[valueName]=value;return locals;}:function(value){locals[valueName]=value;return locals;};function Option(selectValue,viewValue,label,group,disabled){this.selectValue=selectValue;this.viewValue=viewValue;this.label=label;this.group=group;this.disabled=disabled;}function getOptionValuesKeys(optionValues){var optionValuesKeys;if(!keyName&&isArrayLike(optionValues)){optionValuesKeys=optionValues;}else{// if object, extract keys, in enumeration order, unsorted
	optionValuesKeys=[];for(var itemKey in optionValues){if(optionValues.hasOwnProperty(itemKey)&&itemKey.charAt(0)!=='$'){optionValuesKeys.push(itemKey);}}}return optionValuesKeys;}return{trackBy:trackBy,getTrackByValue:getTrackByValue,getWatchables:$parse(valuesFn,function(optionValues){// Create a collection of things that we would like to watch (watchedArray)
	// so that they can all be watched using a single $watchCollection
	// that only runs the handler once if anything changes
	var watchedArray=[];optionValues=optionValues||[];var optionValuesKeys=getOptionValuesKeys(optionValues);var optionValuesLength=optionValuesKeys.length;for(var index=0;index<optionValuesLength;index++){var key=optionValues===optionValuesKeys?index:optionValuesKeys[index];var value=optionValues[key];var locals=getLocals(value,key);var selectValue=getTrackByValueFn(value,locals);watchedArray.push(selectValue);// Only need to watch the displayFn if there is a specific label expression
	if(match[2]||match[1]){var label=displayFn(scope,locals);watchedArray.push(label);}// Only need to watch the disableWhenFn if there is a specific disable expression
	if(match[4]){var disableWhen=disableWhenFn(scope,locals);watchedArray.push(disableWhen);}}return watchedArray;}),getOptions:function getOptions(){var optionItems=[];var selectValueMap={};// The option values were already computed in the `getWatchables` fn,
	// which must have been called to trigger `getOptions`
	var optionValues=valuesFn(scope)||[];var optionValuesKeys=getOptionValuesKeys(optionValues);var optionValuesLength=optionValuesKeys.length;for(var index=0;index<optionValuesLength;index++){var key=optionValues===optionValuesKeys?index:optionValuesKeys[index];var value=optionValues[key];var locals=getLocals(value,key);var viewValue=viewValueFn(scope,locals);var selectValue=getTrackByValueFn(viewValue,locals);var label=displayFn(scope,locals);var group=groupByFn(scope,locals);var disabled=disableWhenFn(scope,locals);var optionItem=new Option(selectValue,viewValue,label,group,disabled);optionItems.push(optionItem);selectValueMap[selectValue]=optionItem;}return{items:optionItems,selectValueMap:selectValueMap,getOptionFromViewValue:function getOptionFromViewValue(value){return selectValueMap[getTrackByValue(value)];},getViewValueFromOption:function getViewValueFromOption(option){// If the viewValue could be an object that may be mutated by the application,
	// we need to make a copy and not return the reference to the value on the option.
	return trackBy?copy(option.viewValue):option.viewValue;}};}};}// we can't just jqLite('<option>') since jqLite is not smart enough
	// to create it in <select> and IE barfs otherwise.
	var optionTemplate=window.document.createElement('option'),optGroupTemplate=window.document.createElement('optgroup');function ngOptionsPostLink(scope,selectElement,attr,ctrls){var selectCtrl=ctrls[0];var ngModelCtrl=ctrls[1];var multiple=attr.multiple;// The emptyOption allows the application developer to provide their own custom "empty"
	// option when the viewValue does not match any of the option values.
	for(var i=0,children=selectElement.children(),ii=children.length;i<ii;i++){if(children[i].value===''){selectCtrl.hasEmptyOption=true;selectCtrl.emptyOption=children.eq(i);break;}}var providedEmptyOption=!!selectCtrl.emptyOption;var unknownOption=jqLite(optionTemplate.cloneNode(false));unknownOption.val('?');var options;var ngOptions=parseOptionsExpression(attr.ngOptions,selectElement,scope);// This stores the newly created options before they are appended to the select.
	// Since the contents are removed from the fragment when it is appended,
	// we only need to create it once.
	var listFragment=$document[0].createDocumentFragment();// Overwrite the implementation. ngOptions doesn't use hashes
	selectCtrl.generateUnknownOptionValue=function(val){return'?';};// Update the controller methods for multiple selectable options
	if(!multiple){selectCtrl.writeValue=function writeNgOptionsValue(value){var selectedOption=options.selectValueMap[selectElement.val()];var option=options.getOptionFromViewValue(value);// Make sure to remove the selected attribute from the previously selected option
	// Otherwise, screen readers might get confused
	if(selectedOption)selectedOption.element.removeAttribute('selected');if(option){// Don't update the option when it is already selected.
	// For example, the browser will select the first option by default. In that case,
	// most properties are set automatically - except the `selected` attribute, which we
	// set always
	if(selectElement[0].value!==option.selectValue){selectCtrl.removeUnknownOption();selectCtrl.unselectEmptyOption();selectElement[0].value=option.selectValue;option.element.selected=true;}option.element.setAttribute('selected','selected');}else{if(providedEmptyOption){selectCtrl.selectEmptyOption();}else if(selectCtrl.unknownOption.parent().length){selectCtrl.updateUnknownOption(value);}else{selectCtrl.renderUnknownOption(value);}}};selectCtrl.readValue=function readNgOptionsValue(){var selectedOption=options.selectValueMap[selectElement.val()];if(selectedOption&&!selectedOption.disabled){selectCtrl.unselectEmptyOption();selectCtrl.removeUnknownOption();return options.getViewValueFromOption(selectedOption);}return null;};// If we are using `track by` then we must watch the tracked value on the model
	// since ngModel only watches for object identity change
	// FIXME: When a user selects an option, this watch will fire needlessly
	if(ngOptions.trackBy){scope.$watch(function(){return ngOptions.getTrackByValue(ngModelCtrl.$viewValue);},function(){ngModelCtrl.$render();});}}else{selectCtrl.writeValue=function writeNgOptionsMultiple(value){options.items.forEach(function(option){option.element.selected=false;});if(value){value.forEach(function(item){var option=options.getOptionFromViewValue(item);if(option)option.element.selected=true;});}};selectCtrl.readValue=function readNgOptionsMultiple(){var selectedValues=selectElement.val()||[],selections=[];forEach(selectedValues,function(value){var option=options.selectValueMap[value];if(option&&!option.disabled)selections.push(options.getViewValueFromOption(option));});return selections;};// If we are using `track by` then we must watch these tracked values on the model
	// since ngModel only watches for object identity change
	if(ngOptions.trackBy){scope.$watchCollection(function(){if(isArray(ngModelCtrl.$viewValue)){return ngModelCtrl.$viewValue.map(function(value){return ngOptions.getTrackByValue(value);});}},function(){ngModelCtrl.$render();});}}if(providedEmptyOption){// we need to remove it before calling selectElement.empty() because otherwise IE will
	// remove the label from the element. wtf?
	selectCtrl.emptyOption.remove();// compile the element since there might be bindings in it
	$compile(selectCtrl.emptyOption)(scope);if(selectCtrl.emptyOption[0].nodeType===NODE_TYPE_COMMENT){// This means the empty option has currently no actual DOM node, probably because
	// it has been modified by a transclusion directive.
	selectCtrl.hasEmptyOption=false;// Redefine the registerOption function, which will catch
	// options that are added by ngIf etc. (rendering of the node is async because of
	// lazy transclusion)
	selectCtrl.registerOption=function(optionScope,optionEl){if(optionEl.val()===''){selectCtrl.hasEmptyOption=true;selectCtrl.emptyOption=optionEl;selectCtrl.emptyOption.removeClass('ng-scope');// This ensures the new empty option is selected if previously no option was selected
	ngModelCtrl.$render();optionEl.on('$destroy',function(){selectCtrl.hasEmptyOption=false;selectCtrl.emptyOption=undefined;});}};}else{// remove the class, which is added automatically because we recompile the element and it
	// becomes the compilation root
	selectCtrl.emptyOption.removeClass('ng-scope');}}selectElement.empty();// We need to do this here to ensure that the options object is defined
	// when we first hit it in writeNgOptionsValue
	updateOptions();// We will re-render the option elements if the option values or labels change
	scope.$watchCollection(ngOptions.getWatchables,updateOptions);// ------------------------------------------------------------------ //
	function addOptionElement(option,parent){var optionElement=optionTemplate.cloneNode(false);parent.appendChild(optionElement);updateOptionElement(option,optionElement);}function updateOptionElement(option,element){option.element=element;element.disabled=option.disabled;// NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
	// selects in certain circumstances when multiple selects are next to each other and display
	// the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
	// See https://github.com/angular/angular.js/issues/11314 for more info.
	// This is unfortunately untestable with unit / e2e tests
	if(option.label!==element.label){element.label=option.label;element.textContent=option.label;}element.value=option.selectValue;}function updateOptions(){var previousValue=options&&selectCtrl.readValue();// We must remove all current options, but cannot simply set innerHTML = null
	// since the providedEmptyOption might have an ngIf on it that inserts comments which we
	// must preserve.
	// Instead, iterate over the current option elements and remove them or their optgroup
	// parents
	if(options){for(var i=options.items.length-1;i>=0;i--){var option=options.items[i];if(isDefined(option.group)){jqLiteRemove(option.element.parentNode);}else{jqLiteRemove(option.element);}}}options=ngOptions.getOptions();var groupElementMap={};// Ensure that the empty option is always there if it was explicitly provided
	if(providedEmptyOption){selectElement.prepend(selectCtrl.emptyOption);}options.items.forEach(function addOption(option){var groupElement;if(isDefined(option.group)){// This option is to live in a group
	// See if we have already created this group
	groupElement=groupElementMap[option.group];if(!groupElement){groupElement=optGroupTemplate.cloneNode(false);listFragment.appendChild(groupElement);// Update the label on the group element
	// "null" is special cased because of Safari
	groupElement.label=option.group===null?'null':option.group;// Store it for use later
	groupElementMap[option.group]=groupElement;}addOptionElement(option,groupElement);}else{// This option is not in a group
	addOptionElement(option,listFragment);}});selectElement[0].appendChild(listFragment);ngModelCtrl.$render();// Check to see if the value has changed due to the update to the options
	if(!ngModelCtrl.$isEmpty(previousValue)){var nextValue=selectCtrl.readValue();var isNotPrimitive=ngOptions.trackBy||multiple;if(isNotPrimitive?!equals(previousValue,nextValue):previousValue!==nextValue){ngModelCtrl.$setViewValue(nextValue);ngModelCtrl.$render();}}}}return{restrict:'A',terminal:true,require:['select','ngModel'],link:{pre:function ngOptionsPreLink(scope,selectElement,attr,ctrls){// Deactivate the SelectController.register method to prevent
	// option directives from accidentally registering themselves
	// (and unwanted $destroy handlers etc.)
	ctrls[0].registerOption=noop;},post:ngOptionsPostLink}};}];/**
	 * @ngdoc directive
	 * @name ngPluralize
	 * @restrict EA
	 *
	 * @description
	 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
	 * These rules are bundled with angular.js, but can be overridden
	 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
	 * by specifying the mappings between
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * and the strings to be displayed.
	 *
	 * # Plural categories and explicit number rules
	 * There are two
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * in Angular's default en-US locale: "one" and "other".
	 *
	 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
	 * any number that is not 1), an explicit number rule can only match one number. For example, the
	 * explicit number rule for "3" matches the number 3. There are examples of plural categories
	 * and explicit number rules throughout the rest of this documentation.
	 *
	 * # Configuring ngPluralize
	 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
	 * You can also provide an optional attribute, `offset`.
	 *
	 * The value of the `count` attribute can be either a string or an {@link guide/expression
	 * Angular expression}; these are evaluated on the current scope for its bound value.
	 *
	 * The `when` attribute specifies the mappings between plural categories and the actual
	 * string to be displayed. The value of the attribute should be a JSON object.
	 *
	 * The following example shows how to configure ngPluralize:
	 *
	 * ```html
	 * <ng-pluralize count="personCount"
	                 when="{'0': 'Nobody is viewing.',
	 *                      'one': '1 person is viewing.',
	 *                      'other': '{} people are viewing.'}">
	 * </ng-pluralize>
	 *```
	 *
	 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
	 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
	 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
	 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
	 * show "a dozen people are viewing".
	 *
	 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
	 * into pluralized strings. In the previous example, Angular will replace `{}` with
	 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
	 * for <span ng-non-bindable>{{numberExpression}}</span>.
	 *
	 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
	 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
	 *
	 * # Configuring ngPluralize with offset
	 * The `offset` attribute allows further customization of pluralized text, which can result in
	 * a better user experience. For example, instead of the message "4 people are viewing this document",
	 * you might display "John, Kate and 2 others are viewing this document".
	 * The offset attribute allows you to offset a number by any desired value.
	 * Let's take a look at an example:
	 *
	 * ```html
	 * <ng-pluralize count="personCount" offset=2
	 *               when="{'0': 'Nobody is viewing.',
	 *                      '1': '{{person1}} is viewing.',
	 *                      '2': '{{person1}} and {{person2}} are viewing.',
	 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
	 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	 * </ng-pluralize>
	 * ```
	 *
	 * Notice that we are still using two plural categories(one, other), but we added
	 * three explicit number rules 0, 1 and 2.
	 * When one person, perhaps John, views the document, "John is viewing" will be shown.
	 * When three people view the document, no explicit number rule is found, so
	 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
	 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
	 * is shown.
	 *
	 * Note that when you specify offsets, you must provide explicit number rules for
	 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
	 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
	 * plural categories "one" and "other".
	 *
	 * @param {string|expression} count The variable to be bound to.
	 * @param {string} when The mapping between plural category to its corresponding strings.
	 * @param {number=} offset Offset to deduct from the total number.
	 *
	 * @example
	    <example module="pluralizeExample" name="ng-pluralize">
	      <file name="index.html">
	        <script>
	          angular.module('pluralizeExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.person1 = 'Igor';
	              $scope.person2 = 'Misko';
	              $scope.personCount = 1;
	            }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
	          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
	          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

	          <!--- Example with simple pluralization rules for en locale --->
	          Without Offset:
	          <ng-pluralize count="personCount"
	                        when="{'0': 'Nobody is viewing.',
	                               'one': '1 person is viewing.',
	                               'other': '{} people are viewing.'}">
	          </ng-pluralize><br>

	          <!--- Example with offset --->
	          With Offset(2):
	          <ng-pluralize count="personCount" offset=2
	                        when="{'0': 'Nobody is viewing.',
	                               '1': '{{person1}} is viewing.',
	                               '2': '{{person1}} and {{person2}} are viewing.',
	                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
	                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	          </ng-pluralize>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should show correct pluralized string', function() {
	          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var countInput = element(by.model('personCount'));

	          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
	          expect(withOffset.getText()).toEqual('Igor is viewing.');

	          countInput.clear();
	          countInput.sendKeys('0');

	          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
	          expect(withOffset.getText()).toEqual('Nobody is viewing.');

	          countInput.clear();
	          countInput.sendKeys('2');

	          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

	          countInput.clear();
	          countInput.sendKeys('3');

	          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

	          countInput.clear();
	          countInput.sendKeys('4');

	          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
	        });
	        it('should show data-bound names', function() {
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var personCount = element(by.model('personCount'));
	          var person1 = element(by.model('person1'));
	          var person2 = element(by.model('person2'));
	          personCount.clear();
	          personCount.sendKeys('4');
	          person1.clear();
	          person1.sendKeys('Di');
	          person2.clear();
	          person2.sendKeys('Vojta');
	          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
	        });
	      </file>
	    </example>
	 */var ngPluralizeDirective=['$locale','$interpolate','$log',function($locale,$interpolate,$log){var BRACE=/{}/g,IS_WHEN=/^when(Minus)?(.+)$/;return{link:function link(scope,element,attr){var numberExp=attr.count,whenExp=attr.$attr.when&&element.attr(attr.$attr.when),// we have {{}} in attrs
	offset=attr.offset||0,whens=scope.$eval(whenExp)||{},whensExpFns={},startSymbol=$interpolate.startSymbol(),endSymbol=$interpolate.endSymbol(),braceReplacement=startSymbol+numberExp+'-'+offset+endSymbol,watchRemover=angular.noop,lastCount;forEach(attr,function(expression,attributeName){var tmpMatch=IS_WHEN.exec(attributeName);if(tmpMatch){var whenKey=(tmpMatch[1]?'-':'')+lowercase(tmpMatch[2]);whens[whenKey]=element.attr(attr.$attr[attributeName]);}});forEach(whens,function(expression,key){whensExpFns[key]=$interpolate(expression.replace(BRACE,braceReplacement));});scope.$watch(numberExp,function ngPluralizeWatchAction(newVal){var count=parseFloat(newVal);var countIsNaN=isNumberNaN(count);if(!countIsNaN&&!(count in whens)){// If an explicit number rule such as 1, 2, 3... is defined, just use it.
	// Otherwise, check it against pluralization rules in $locale service.
	count=$locale.pluralCat(count-offset);}// If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
	// In JS `NaN !== NaN`, so we have to explicitly check.
	if(count!==lastCount&&!(countIsNaN&&isNumberNaN(lastCount))){watchRemover();var whenExpFn=whensExpFns[count];if(isUndefined(whenExpFn)){if(newVal!=null){$log.debug('ngPluralize: no rule defined for \''+count+'\' in '+whenExp);}watchRemover=noop;updateElementText();}else{watchRemover=scope.$watch(whenExpFn,updateElementText);}lastCount=count;}});function updateElementText(newText){element.text(newText||'');}}};}];/* exported ngRepeatDirective *//**
	 * @ngdoc directive
	 * @name ngRepeat
	 * @multiElement
	 *
	 * @description
	 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
	 * instance gets its own scope, where the given loop variable is set to the current collection item,
	 * and `$index` is set to the item index or key.
	 *
	 * Special properties are exposed on the local scope of each template instance, including:
	 *
	 * | Variable  | Type            | Details                                                                     |
	 * |-----------|-----------------|-----------------------------------------------------------------------------|
	 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
	 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
	 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
	 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
	 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
	 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
	 *
	 * <div class="alert alert-info">
	 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
	 *   This may be useful when, for instance, nesting ngRepeats.
	 * </div>
	 *
	 *
	 * # Iterating over object properties
	 *
	 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
	 * syntax:
	 *
	 * ```js
	 * <div ng-repeat="(key, value) in myObj"> ... </div>
	 * ```
	 *
	 * However, there are a few limitations compared to array iteration:
	 *
	 * - The JavaScript specification does not define the order of keys
	 *   returned for an object, so Angular relies on the order returned by the browser
	 *   when running `for key in myObj`. Browsers generally follow the strategy of providing
	 *   keys in the order in which they were defined, although there are exceptions when keys are deleted
	 *   and reinstated. See the
	 *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
	 *
	 * - `ngRepeat` will silently *ignore* object keys starting with `$`, because
	 *   it's a prefix used by Angular for public (`$`) and private (`$$`) properties.
	 *
	 * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with
	 *   objects, and will throw an error if used with one.
	 *
	 * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array
	 * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could
	 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
	 * or implement a `$watch` on the object yourself.
	 *
	 *
	 * # Tracking and Duplicates
	 *
	 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
	 * the collection. When a change happens, `ngRepeat` then makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * To minimize creation of DOM elements, `ngRepeat` uses a function
	 * to "keep track" of all items in the collection and their corresponding DOM elements.
	 * For example, if an item is added to the collection, `ngRepeat` will know that all other items
	 * already have DOM elements, and will not re-render them.
	 *
	 * The default tracking function (which tracks items by their identity) does not allow
	 * duplicate items in arrays. This is because when there are duplicates, it is not possible
	 * to maintain a one-to-one mapping between collection items and DOM elements.
	 *
	 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
	 * with your own using the `track by` expression.
	 *
	 * For example, you may track items by the index of each item in the collection, using the
	 * special scope property `$index`:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * You may also use arbitrary expressions in `track by`, including references to custom functions
	 * on the scope:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-success">
	 * If you are working with objects that have a unique identifier property, you should track
	 * by this identifier instead of the object instance. Should you reload your data later, `ngRepeat`
	 * will not have to rebuild the DOM elements for items it has already rendered, even if the
	 * JavaScript objects in the collection have been substituted for new ones. For large collections,
	 * this significantly improves rendering performance. If you don't have a unique identifier,
	 * `track by $index` can also provide a performance boost.
	 * </div>
	 *
	 * ```html
	 *    <div ng-repeat="model in collection track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 * Avoid using `track by $index` when the repeated template contains
	 * {@link guide/expression#one-time-binding one-time bindings}. In such cases, the `nth` DOM
	 * element will always be matched with the `nth` item of the array, so the bindings on that element
	 * will not be updated even when the corresponding item changes, essentially causing the view to get
	 * out-of-sync with the underlying data.
	 * </div>
	 *
	 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
	 * `$id` function, which tracks items by their identity:
	 * ```html
	 *    <div ng-repeat="obj in collection track by $id(obj)">
	 *      {{obj.prop}}
	 *    </div>
	 * ```
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 * **Note:** `track by` must always be the last expression:
	 * </div>
	 * ```
	 *    <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 *
	 * # Special repeat start and end points
	 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
	 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
	 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
	 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
	 *
	 * The example below makes use of this feature:
	 * ```html
	 *   <header ng-repeat-start="item in items">
	 *     Header {{ item }}
	 *   </header>
	 *   <div class="body">
	 *     Body {{ item }}
	 *   </div>
	 *   <footer ng-repeat-end>
	 *     Footer {{ item }}
	 *   </footer>
	 * ```
	 *
	 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
	 * ```html
	 *   <header>
	 *     Header A
	 *   </header>
	 *   <div class="body">
	 *     Body A
	 *   </div>
	 *   <footer>
	 *     Footer A
	 *   </footer>
	 *   <header>
	 *     Header B
	 *   </header>
	 *   <div class="body">
	 *     Body B
	 *   </div>
	 *   <footer>
	 *     Footer B
	 *   </footer>
	 * ```
	 *
	 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
	 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |
	 * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |
	 * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |
	 *
	 * See the example below for defining CSS animations with ngRepeat.
	 *
	 * @element ANY
	 * @scope
	 * @priority 1000
	 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
	 *   formats are currently supported:
	 *
	 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
	 *     is a scope expression giving the collection to enumerate.
	 *
	 *     For example: `album in artist.albums`.
	 *
	 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
	 *     and `expression` is the scope expression giving the collection to enumerate.
	 *
	 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
	 *
	 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
	 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
	 *     is specified, ng-repeat associates elements by identity. It is an error to have
	 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
	 *     mapped to the same DOM element, which is not possible.)
	 *
	 *     Note that the tracking expression must come last, after any filters, and the alias expression.
	 *
	 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
	 *     will be associated by item identity in the array.
	 *
	 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
	 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
	 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
	 *     element in the same way in the DOM.
	 *
	 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
	 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
	 *     property is same.
	 *
	 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
	 *     to items in conjunction with a tracking expression.
	 *
	 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
	 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
	 *     when a filter is active on the repeater, but the filtered result set is empty.
	 *
	 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
	 *     the items have been processed through the filter.
	 *
	 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
	 *     (and not as operator, inside an expression).
	 *
	 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
	 *
	 * @example
	 * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
	 * results by name or by age. New (entering) and removed (leaving) items are animated.
	  <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true" name="ng-repeat">
	    <file name="index.html">
	      <div ng-controller="repeatController">
	        I have {{friends.length}} friends. They are:
	        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
	        <ul class="example-animate-container">
	          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
	            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
	          </li>
	          <li class="animate-repeat" ng-if="results.length === 0">
	            <strong>No results found...</strong>
	          </li>
	        </ul>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
	        $scope.friends = [
	          {name:'John', age:25, gender:'boy'},
	          {name:'Jessie', age:30, gender:'girl'},
	          {name:'Johanna', age:28, gender:'girl'},
	          {name:'Joy', age:15, gender:'girl'},
	          {name:'Mary', age:28, gender:'girl'},
	          {name:'Peter', age:95, gender:'boy'},
	          {name:'Sebastian', age:50, gender:'boy'},
	          {name:'Erika', age:27, gender:'girl'},
	          {name:'Patrick', age:40, gender:'boy'},
	          {name:'Samantha', age:60, gender:'girl'}
	        ];
	      });
	    </file>
	    <file name="animations.css">
	      .example-animate-container {
	        background:white;
	        border:1px solid black;
	        list-style:none;
	        margin:0;
	        padding:0 10px;
	      }

	      .animate-repeat {
	        line-height:30px;
	        list-style:none;
	        box-sizing:border-box;
	      }

	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter,
	      .animate-repeat.ng-leave {
	        transition:all linear 0.5s;
	      }

	      .animate-repeat.ng-leave.ng-leave-active,
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter {
	        opacity:0;
	        max-height:0;
	      }

	      .animate-repeat.ng-leave,
	      .animate-repeat.ng-move.ng-move-active,
	      .animate-repeat.ng-enter.ng-enter-active {
	        opacity:1;
	        max-height:30px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var friends = element.all(by.repeater('friend in friends'));

	      it('should render initial data set', function() {
	        expect(friends.count()).toBe(10);
	        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
	        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
	        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
	        expect(element(by.binding('friends.length')).getText())
	            .toMatch("I have 10 friends. They are:");
	      });

	       it('should update repeater when filter predicate changes', function() {
	         expect(friends.count()).toBe(10);

	         element(by.model('q')).sendKeys('ma');

	         expect(friends.count()).toBe(2);
	         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
	         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
	       });
	      </file>
	    </example>
	 */var ngRepeatDirective=['$parse','$animate','$compile',function($parse,$animate,$compile){var NG_REMOVED='$$NG_REMOVED';var ngRepeatMinErr=minErr('ngRepeat');var updateScope=function updateScope(scope,index,valueIdentifier,value,keyIdentifier,key,arrayLength){// TODO(perf): generate setters to shave off ~40ms or 1-1.5%
	scope[valueIdentifier]=value;if(keyIdentifier)scope[keyIdentifier]=key;scope.$index=index;scope.$first=index===0;scope.$last=index===arrayLength-1;scope.$middle=!(scope.$first||scope.$last);// eslint-disable-next-line no-bitwise
	scope.$odd=!(scope.$even=(index&1)===0);};var getBlockStart=function getBlockStart(block){return block.clone[0];};var getBlockEnd=function getBlockEnd(block){return block.clone[block.clone.length-1];};return{restrict:'A',multiElement:true,transclude:'element',priority:1000,terminal:true,$$tlb:true,compile:function ngRepeatCompile($element,$attr){var expression=$attr.ngRepeat;var ngRepeatEndComment=$compile.$$createComment('end ngRepeat',expression);var match=expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!match){throw ngRepeatMinErr('iexp','Expected expression in form of \'_item_ in _collection_[ track by _id_]\' but got \'{0}\'.',expression);}var lhs=match[1];var rhs=match[2];var aliasAs=match[3];var trackByExp=match[4];match=lhs.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/);if(!match){throw ngRepeatMinErr('iidexp','\'_item_\' in \'_item_ in _collection_\' should be an identifier or \'(_key_, _value_)\' expression, but got \'{0}\'.',lhs);}var valueIdentifier=match[3]||match[1];var keyIdentifier=match[2];if(aliasAs&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))){throw ngRepeatMinErr('badident','alias \'{0}\' is invalid --- must be a valid JS identifier which is not a reserved name.',aliasAs);}var trackByExpGetter,trackByIdExpFn,trackByIdArrayFn,trackByIdObjFn;var hashFnLocals={$id:hashKey};if(trackByExp){trackByExpGetter=$parse(trackByExp);}else{trackByIdArrayFn=function trackByIdArrayFn(key,value){return hashKey(value);};trackByIdObjFn=function trackByIdObjFn(key){return key;};}return function ngRepeatLink($scope,$element,$attr,ctrl,$transclude){if(trackByExpGetter){trackByIdExpFn=function trackByIdExpFn(key,value,index){// assign key, value, and $index to the locals so that they can be used in hash functions
	if(keyIdentifier)hashFnLocals[keyIdentifier]=key;hashFnLocals[valueIdentifier]=value;hashFnLocals.$index=index;return trackByExpGetter($scope,hashFnLocals);};}// Store a list of elements from previous run. This is a hash where key is the item from the
	// iterator, and the value is objects with following properties.
	//   - scope: bound scope
	//   - element: previous element.
	//   - index: position
	//
	// We are using no-proto object so that we don't need to guard against inherited props via
	// hasOwnProperty.
	var lastBlockMap=createMap();//watch props
	$scope.$watchCollection(rhs,function ngRepeatAction(collection){var index,length,previousNode=$element[0],// node that cloned nodes should be inserted after
	// initialized to the comment node anchor
	nextNode,// Same as lastBlockMap but it has the current state. It will become the
	// lastBlockMap on the next iteration.
	nextBlockMap=createMap(),collectionLength,key,value,// key/value of iteration
	trackById,trackByIdFn,collectionKeys,block,// last object information {scope, element, id}
	nextBlockOrder,elementsToRemove;if(aliasAs){$scope[aliasAs]=collection;}if(isArrayLike(collection)){collectionKeys=collection;trackByIdFn=trackByIdExpFn||trackByIdArrayFn;}else{trackByIdFn=trackByIdExpFn||trackByIdObjFn;// if object, extract keys, in enumeration order, unsorted
	collectionKeys=[];for(var itemKey in collection){if(hasOwnProperty.call(collection,itemKey)&&itemKey.charAt(0)!=='$'){collectionKeys.push(itemKey);}}}collectionLength=collectionKeys.length;nextBlockOrder=new Array(collectionLength);// locate existing items
	for(index=0;index<collectionLength;index++){key=collection===collectionKeys?index:collectionKeys[index];value=collection[key];trackById=trackByIdFn(key,value,index);if(lastBlockMap[trackById]){// found previously seen block
	block=lastBlockMap[trackById];delete lastBlockMap[trackById];nextBlockMap[trackById]=block;nextBlockOrder[index]=block;}else if(nextBlockMap[trackById]){// if collision detected. restore lastBlockMap and throw an error
	forEach(nextBlockOrder,function(block){if(block&&block.scope)lastBlockMap[block.id]=block;});throw ngRepeatMinErr('dupes','Duplicates in a repeater are not allowed. Use \'track by\' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}',expression,trackById,value);}else{// new never before seen block
	nextBlockOrder[index]={id:trackById,scope:undefined,clone:undefined};nextBlockMap[trackById]=true;}}// remove leftover items
	for(var blockKey in lastBlockMap){block=lastBlockMap[blockKey];elementsToRemove=getBlockNodes(block.clone);$animate.leave(elementsToRemove);if(elementsToRemove[0].parentNode){// if the element was not removed yet because of pending animation, mark it as deleted
	// so that we can ignore it later
	for(index=0,length=elementsToRemove.length;index<length;index++){elementsToRemove[index][NG_REMOVED]=true;}}block.scope.$destroy();}// we are not using forEach for perf reasons (trying to avoid #call)
	for(index=0;index<collectionLength;index++){key=collection===collectionKeys?index:collectionKeys[index];value=collection[key];block=nextBlockOrder[index];if(block.scope){// if we have already seen this object, then we need to reuse the
	// associated scope/element
	nextNode=previousNode;// skip nodes that are already pending removal via leave animation
	do{nextNode=nextNode.nextSibling;}while(nextNode&&nextNode[NG_REMOVED]);if(getBlockStart(block)!==nextNode){// existing item which got moved
	$animate.move(getBlockNodes(block.clone),null,previousNode);}previousNode=getBlockEnd(block);updateScope(block.scope,index,valueIdentifier,value,keyIdentifier,key,collectionLength);}else{// new item which we don't know about
	$transclude(function ngRepeatTransclude(clone,scope){block.scope=scope;// http://jsperf.com/clone-vs-createcomment
	var endNode=ngRepeatEndComment.cloneNode(false);clone[clone.length++]=endNode;$animate.enter(clone,null,previousNode);previousNode=endNode;// Note: We only need the first/last node of the cloned nodes.
	// However, we need to keep the reference to the jqlite wrapper as it might be changed later
	// by a directive with templateUrl when its template arrives.
	block.clone=clone;nextBlockMap[block.id]=block;updateScope(block.scope,index,valueIdentifier,value,keyIdentifier,key,collectionLength);});}}lastBlockMap=nextBlockMap;});};}};}];var NG_HIDE_CLASS='ng-hide';var NG_HIDE_IN_PROGRESS_CLASS='ng-hide-animate';/**
	 * @ngdoc directive
	 * @name ngShow
	 * @multiElement
	 *
	 * @description
	 * The `ngShow` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
	 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is visible) -->
	 * <div ng-show="myValue"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is hidden) -->
	 * <div ng-show="myValue" class="ng-hide"></div>
	 * ```
	 *
	 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
	 * with extra animation classes that can be added.
	 *
	 * ```css
	 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngShow`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass except that
	 * you must also include the !important flag to override the display property
	 * so that you can perform an animation when the element is hidden during the time of the animation.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   /&#42; this is required as of 1.3x to properly
	 *      apply all styling in a show/hide animation &#42;/
	 *   transition: 0s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add-active,
	 * .my-element.ng-hide-remove-active {
	 *   /&#42; the transition is defined in the active class &#42;/
	 *   transition: 1s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngShow` expression evaluates to a truthy value and just before contents are set to visible |
	 *
	 * @element ANY
	 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
	 *     then the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-show">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-show" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-show" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-show {
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {
	        transition: all linear 0.5s;
	      }

	      .animate-show.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */var ngShowDirective=['$animate',function($animate){return{restrict:'A',multiElement:true,link:function link(scope,element,attr){scope.$watch(attr.ngShow,function ngShowWatchAction(value){// we're adding a temporary, animation-specific class for ng-hide since this way
	// we can control when the element is actually displayed on screen without having
	// to have a global/greedy CSS selector that breaks when other animations are run.
	// Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
	$animate[value?'removeClass':'addClass'](element,NG_HIDE_CLASS,{tempClasses:NG_HIDE_IN_PROGRESS_CLASS});});}};}];/**
	 * @ngdoc directive
	 * @name ngHide
	 * @multiElement
	 *
	 * @description
	 * The `ngHide` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
	 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is hidden) -->
	 * <div ng-hide="myValue" class="ng-hide"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is visible) -->
	 * <div ng-hide="myValue"></div>
	 * ```
	 *
	 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class in CSS:
	 *
	 * ```css
	 * .ng-hide {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngHide`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
	 * CSS class is added and removed for you instead of your own CSS class.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: 0.5s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible |
	 *
	 *
	 * @element ANY
	 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
	 *     the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-hide">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-hide" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-hide" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-hide {
	        transition: all linear 0.5s;
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-hide.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */var ngHideDirective=['$animate',function($animate){return{restrict:'A',multiElement:true,link:function link(scope,element,attr){scope.$watch(attr.ngHide,function ngHideWatchAction(value){// The comment inside of the ngShowDirective explains why we add and
	// remove a temporary class for the show/hide animation
	$animate[value?'addClass':'removeClass'](element,NG_HIDE_CLASS,{tempClasses:NG_HIDE_IN_PROGRESS_CLASS});});}};}];/**
	 * @ngdoc directive
	 * @name ngStyle
	 * @restrict AC
	 *
	 * @description
	 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
	 *
	 * @knownIssue
	 * You should not use {@link guide/interpolation interpolation} in the value of the `style`
	 * attribute, when using the `ngStyle` directive on the same element.
	 * See {@link guide/interpolation#known-issues here} for more info.
	 *
	 * @element ANY
	 * @param {expression} ngStyle
	 *
	 * {@link guide/expression Expression} which evals to an
	 * object whose keys are CSS style names and values are corresponding values for those CSS
	 * keys.
	 *
	 * Since some CSS style names are not valid keys for an object, they must be quoted.
	 * See the 'background-color' style in the example below.
	 *
	 * @example
	   <example name="ng-style">
	     <file name="index.html">
	        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
	        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
	        <input type="button" value="clear" ng-click="myStyle={}">
	        <br/>
	        <span ng-style="myStyle">Sample Text</span>
	        <pre>myStyle={{myStyle}}</pre>
	     </file>
	     <file name="style.css">
	       span {
	         color: black;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var colorSpan = element(by.css('span'));

	       it('should check ng-style', function() {
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	         element(by.css('input[value=\'set color\']')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
	         element(by.css('input[value=clear]')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	       });
	     </file>
	   </example>
	 */var ngStyleDirective=ngDirective(function(scope,element,attr){scope.$watch(attr.ngStyle,function ngStyleWatchAction(newStyles,oldStyles){if(oldStyles&&newStyles!==oldStyles){forEach(oldStyles,function(val,style){element.css(style,'');});}if(newStyles)element.css(newStyles);},true);});/**
	 * @ngdoc directive
	 * @name ngSwitch
	 * @restrict EA
	 *
	 * @description
	 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
	 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
	 * as specified in the template.
	 *
	 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
	 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
	 * matches the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`on="..."` attribute**
	 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
	 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
	 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
	 * attribute is displayed.
	 *
	 * <div class="alert alert-info">
	 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
	 * as literal string values to match against.
	 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
	 * value of the expression `$scope.someVal`.
	 * </div>

	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |
	 * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |
	 *
	 * @usage
	 *
	 * ```
	 * <ANY ng-switch="expression">
	 *   <ANY ng-switch-when="matchValue1">...</ANY>
	 *   <ANY ng-switch-when="matchValue2">...</ANY>
	 *   <ANY ng-switch-default>...</ANY>
	 * </ANY>
	 * ```
	 *
	 *
	 * @scope
	 * @priority 1200
	 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
	 * On child elements add:
	 *
	 * * `ngSwitchWhen`: the case statement to match against. If match then this
	 *   case will be displayed. If the same match appears multiple times, all the
	 *   elements will be displayed. It is possible to associate multiple values to
	 *   the same `ngSwitchWhen` by defining the optional attribute
	 *   `ngSwitchWhenSeparator`. The separator will be used to split the value of
	 *   the `ngSwitchWhen` attribute into multiple tokens, and the element will show
	 *   if any of the `ngSwitch` evaluates to any of these tokens.
	 * * `ngSwitchDefault`: the default case when no other case match. If there
	 *   are multiple default cases, all of them will be displayed when no other
	 *   case match.
	 *
	 *
	 * @example
	  <example module="switchExample" deps="angular-animate.js" animations="true" name="ng-switch">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <select ng-model="selection" ng-options="item for item in items">
	        </select>
	        <code>selection={{selection}}</code>
	        <hr/>
	        <div class="animate-switch-container"
	          ng-switch on="selection">
	            <div class="animate-switch" ng-switch-when="settings|options" ng-switch-when-separator="|">Settings Div</div>
	            <div class="animate-switch" ng-switch-when="home">Home Span</div>
	            <div class="animate-switch" ng-switch-default>default</div>
	        </div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('switchExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.items = ['settings', 'home', 'options', 'other'];
	          $scope.selection = $scope.items[0];
	        }]);
	    </file>
	    <file name="animations.css">
	      .animate-switch-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .animate-switch {
	        padding:10px;
	      }

	      .animate-switch.ng-animate {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	      }

	      .animate-switch.ng-leave.ng-leave-active,
	      .animate-switch.ng-enter {
	        top:-50px;
	      }
	      .animate-switch.ng-leave,
	      .animate-switch.ng-enter.ng-enter-active {
	        top:0;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var switchElem = element(by.css('[ng-switch]'));
	      var select = element(by.model('selection'));

	      it('should start in settings', function() {
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should change to home', function() {
	        select.all(by.css('option')).get(1).click();
	        expect(switchElem.getText()).toMatch(/Home Span/);
	      });
	      it('should change to settings via "options"', function() {
	        select.all(by.css('option')).get(2).click();
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should select default', function() {
	        select.all(by.css('option')).get(3).click();
	        expect(switchElem.getText()).toMatch(/default/);
	      });
	    </file>
	  </example>
	 */var ngSwitchDirective=['$animate','$compile',function($animate,$compile){return{require:'ngSwitch',// asks for $scope to fool the BC controller module
	controller:['$scope',function NgSwitchController(){this.cases={};}],link:function link(scope,element,attr,ngSwitchController){var watchExpr=attr.ngSwitch||attr.on,selectedTranscludes=[],selectedElements=[],previousLeaveAnimations=[],selectedScopes=[];var spliceFactory=function spliceFactory(array,index){return function(response){if(response!==false)array.splice(index,1);};};scope.$watch(watchExpr,function ngSwitchWatchAction(value){var i,ii;// Start with the last, in case the array is modified during the loop
	while(previousLeaveAnimations.length){$animate.cancel(previousLeaveAnimations.pop());}for(i=0,ii=selectedScopes.length;i<ii;++i){var selected=getBlockNodes(selectedElements[i].clone);selectedScopes[i].$destroy();var runner=previousLeaveAnimations[i]=$animate.leave(selected);runner.done(spliceFactory(previousLeaveAnimations,i));}selectedElements.length=0;selectedScopes.length=0;if(selectedTranscludes=ngSwitchController.cases['!'+value]||ngSwitchController.cases['?']){forEach(selectedTranscludes,function(selectedTransclude){selectedTransclude.transclude(function(caseElement,selectedScope){selectedScopes.push(selectedScope);var anchor=selectedTransclude.element;caseElement[caseElement.length++]=$compile.$$createComment('end ngSwitchWhen');var block={clone:caseElement};selectedElements.push(block);$animate.enter(caseElement,anchor.parent(),anchor);});});}});}};}];var ngSwitchWhenDirective=ngDirective({transclude:'element',priority:1200,require:'^ngSwitch',multiElement:true,link:function link(scope,element,attrs,ctrl,$transclude){var cases=attrs.ngSwitchWhen.split(attrs.ngSwitchWhenSeparator).sort().filter(// Filter duplicate cases
	function(element,index,array){return array[index-1]!==element;});forEach(cases,function(whenCase){ctrl.cases['!'+whenCase]=ctrl.cases['!'+whenCase]||[];ctrl.cases['!'+whenCase].push({transclude:$transclude,element:element});});}});var ngSwitchDefaultDirective=ngDirective({transclude:'element',priority:1200,require:'^ngSwitch',multiElement:true,link:function link(scope,element,attr,ctrl,$transclude){ctrl.cases['?']=ctrl.cases['?']||[];ctrl.cases['?'].push({transclude:$transclude,element:element});}});/**
	 * @ngdoc directive
	 * @name ngTransclude
	 * @restrict EAC
	 *
	 * @description
	 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
	 *
	 * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
	 * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
	 *
	 * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
	 * content of this element will be removed before the transcluded content is inserted.
	 * If the transcluded content is empty (or only whitespace), the existing content is left intact. This lets you provide fallback
	 * content in the case that no transcluded content is provided.
	 *
	 * @element ANY
	 *
	 * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
	 *                                               or its value is the same as the name of the attribute then the default slot is used.
	 *
	 * @example
	 * ### Basic transclusion
	 * This example demonstrates basic transclusion of content into a component directive.
	 * <example name="simpleTranscludeExample" module="transcludeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('transcludeExample', [])
	 *        .directive('pane', function(){
	 *           return {
	 *             restrict: 'E',
	 *             transclude: true,
	 *             scope: { title:'@' },
	 *             template: '<div style="border: 1px solid black;">' +
	 *                         '<div style="background-color: gray">{{title}}</div>' +
	 *                         '<ng-transclude></ng-transclude>' +
	 *                       '</div>'
	 *           };
	 *       })
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.title = 'Lorem Ipsum';
	 *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *       }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input ng-model="title" aria-label="title"> <br/>
	 *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *       <pane title="{{title}}"><span>{{text}}</span></pane>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *      });
	 *   </file>
	 * </example>
	 *
	 * @example
	 * ### Transclude fallback content
	 * This example shows how to use `NgTransclude` with fallback content, that
	 * is displayed if no transcluded content is provided.
	 *
	 * <example module="transcludeFallbackContentExample" name="ng-transclude">
	 * <file name="index.html">
	 * <script>
	 * angular.module('transcludeFallbackContentExample', [])
	 * .directive('myButton', function(){
	 *             return {
	 *               restrict: 'E',
	 *               transclude: true,
	 *               scope: true,
	 *               template: '<button style="cursor: pointer;">' +
	 *                           '<ng-transclude>' +
	 *                             '<b style="color: red;">Button1</b>' +
	 *                           '</ng-transclude>' +
	 *                         '</button>'
	 *             };
	 *         });
	 * </script>
	 * <!-- fallback button content -->
	 * <my-button id="fallback"></my-button>
	 * <!-- modified button content -->
	 * <my-button id="modified">
	 *   <i style="color: green;">Button2</i>
	 * </my-button>
	 * </file>
	 * <file name="protractor.js" type="protractor">
	 * it('should have different transclude element content', function() {
	 *          expect(element(by.id('fallback')).getText()).toBe('Button1');
	 *          expect(element(by.id('modified')).getText()).toBe('Button2');
	 *        });
	 * </file>
	 * </example>
	 *
	 * @example
	 * ### Multi-slot transclusion
	 * This example demonstrates using multi-slot transclusion in a component directive.
	 * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
	 *   <file name="index.html">
	 *    <style>
	 *      .title, .footer {
	 *        background-color: gray
	 *      }
	 *    </style>
	 *    <div ng-controller="ExampleController">
	 *      <input ng-model="title" aria-label="title"> <br/>
	 *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *      <pane>
	 *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
	 *        <pane-body><p>{{text}}</p></pane-body>
	 *      </pane>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('multiSlotTranscludeExample', [])
	 *     .directive('pane', function() {
	 *        return {
	 *          restrict: 'E',
	 *          transclude: {
	 *            'title': '?paneTitle',
	 *            'body': 'paneBody',
	 *            'footer': '?paneFooter'
	 *          },
	 *          template: '<div style="border: 1px solid black;">' +
	 *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
	 *                      '<div ng-transclude="body"></div>' +
	 *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
	 *                    '</div>'
	 *        };
	 *    })
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.title = 'Lorem Ipsum';
	 *      $scope.link = 'https://google.com';
	 *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *    }]);
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded the title and the body', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
	 *      });
	 *   </file>
	 * </example>
	 */var ngTranscludeMinErr=minErr('ngTransclude');var ngTranscludeDirective=['$compile',function($compile){return{restrict:'EAC',terminal:true,compile:function ngTranscludeCompile(tElement){// Remove and cache any original content to act as a fallback
	var fallbackLinkFn=$compile(tElement.contents());tElement.empty();return function ngTranscludePostLink($scope,$element,$attrs,controller,$transclude){if(!$transclude){throw ngTranscludeMinErr('orphan','Illegal use of ngTransclude directive in the template! '+'No parent directive that requires a transclusion found. '+'Element: {0}',startingTag($element));}// If the attribute is of the form: `ng-transclude="ng-transclude"` then treat it like the default
	if($attrs.ngTransclude===$attrs.$attr.ngTransclude){$attrs.ngTransclude='';}var slotName=$attrs.ngTransclude||$attrs.ngTranscludeSlot;// If the slot is required and no transclusion content is provided then this call will throw an error
	$transclude(ngTranscludeCloneAttachFn,null,slotName);// If the slot is optional and no transclusion content is provided then use the fallback content
	if(slotName&&!$transclude.isSlotFilled(slotName)){useFallbackContent();}function ngTranscludeCloneAttachFn(clone,transcludedScope){if(clone.length&&notWhitespace(clone)){$element.append(clone);}else{useFallbackContent();// There is nothing linked against the transcluded scope since no content was available,
	// so it should be safe to clean up the generated scope.
	transcludedScope.$destroy();}}function useFallbackContent(){// Since this is the fallback content rather than the transcluded content,
	// we link against the scope of this directive rather than the transcluded scope
	fallbackLinkFn($scope,function(clone){$element.append(clone);});}function notWhitespace(nodes){for(var i=0,ii=nodes.length;i<ii;i++){var node=nodes[i];if(node.nodeType!==NODE_TYPE_TEXT||node.nodeValue.trim()){return true;}}}};}};}];/**
	 * @ngdoc directive
	 * @name script
	 * @restrict E
	 *
	 * @description
	 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
	 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
	 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
	 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
	 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
	 *
	 * @param {string} type Must be set to `'text/ng-template'`.
	 * @param {string} id Cache name of the template.
	 *
	 * @example
	  <example  name="script-tag">
	    <file name="index.html">
	      <script type="text/ng-template" id="/tpl.html">
	        Content of the template.
	      </script>

	      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
	      <div id="tpl-content" ng-include src="currentTpl"></div>
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should load template defined inside script tag', function() {
	        element(by.css('#tpl-link')).click();
	        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
	      });
	    </file>
	  </example>
	 */var scriptDirective=['$templateCache',function($templateCache){return{restrict:'E',terminal:true,compile:function compile(element,attr){if(attr.type==='text/ng-template'){var templateUrl=attr.id,text=element[0].text;$templateCache.put(templateUrl,text);}}};}];/* exported selectDirective, optionDirective */var noopNgModelController={$setViewValue:noop,$render:noop};/**
	 * @ngdoc type
	 * @name  select.SelectController
	 * @description
	 * The controller for the `<select>` directive. This provides support for reading
	 * and writing the selected value(s) of the control and also coordinates dynamically
	 * added `<option>` elements, perhaps by an `ngRepeat` directive.
	 */var SelectController=['$element','$scope',/** @this */function($element,$scope){var self=this,optionsMap=new HashMap();self.selectValueMap={};// Keys are the hashed values, values the original values
	// If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
	self.ngModelCtrl=noopNgModelController;self.multiple=false;// The "unknown" option is one that is prepended to the list if the viewValue
	// does not match any of the options. When it is rendered the value of the unknown
	// option is '? XXX ?' where XXX is the hashKey of the value that is not known.
	//
	// We can't just jqLite('<option>') since jqLite is not smart enough
	// to create it in <select> and IE barfs otherwise.
	self.unknownOption=jqLite(window.document.createElement('option'));// The empty option is an option with the value '' that te application developer can
	// provide inside the select. When the model changes to a value that doesn't match an option,
	// it is selected - so if an empty option is provided, no unknown option is generated.
	// However, the empty option is not removed when the model matches an option. It is always selectable
	// and indicates that a "null" selection has been made.
	self.hasEmptyOption=false;self.emptyOption=undefined;self.renderUnknownOption=function(val){var unknownVal=self.generateUnknownOptionValue(val);self.unknownOption.val(unknownVal);$element.prepend(self.unknownOption);setOptionAsSelected(self.unknownOption);$element.val(unknownVal);};self.updateUnknownOption=function(val){var unknownVal=self.generateUnknownOptionValue(val);self.unknownOption.val(unknownVal);setOptionAsSelected(self.unknownOption);$element.val(unknownVal);};self.generateUnknownOptionValue=function(val){return'? '+hashKey(val)+' ?';};self.removeUnknownOption=function(){if(self.unknownOption.parent())self.unknownOption.remove();};self.selectEmptyOption=function(){if(self.emptyOption){$element.val('');setOptionAsSelected(self.emptyOption);}};self.unselectEmptyOption=function(){if(self.hasEmptyOption){self.emptyOption.removeAttr('selected');}};$scope.$on('$destroy',function(){// disable unknown option so that we don't do work when the whole select is being destroyed
	self.renderUnknownOption=noop;});// Read the value of the select control, the implementation of this changes depending
	// upon whether the select can have multiple values and whether ngOptions is at work.
	self.readValue=function readSingleValue(){var val=$element.val();// ngValue added option values are stored in the selectValueMap, normal interpolations are not
	var realVal=val in self.selectValueMap?self.selectValueMap[val]:val;if(self.hasOption(realVal)){return realVal;}return null;};// Write the value to the select control, the implementation of this changes depending
	// upon whether the select can have multiple values and whether ngOptions is at work.
	self.writeValue=function writeSingleValue(value){// Make sure to remove the selected attribute from the previously selected option
	// Otherwise, screen readers might get confused
	var currentlySelectedOption=$element[0].options[$element[0].selectedIndex];if(currentlySelectedOption)currentlySelectedOption.removeAttribute('selected');if(self.hasOption(value)){self.removeUnknownOption();var hashedVal=hashKey(value);$element.val(hashedVal in self.selectValueMap?hashedVal:value);// Set selected attribute and property on selected option for screen readers
	var selectedOption=$element[0].options[$element[0].selectedIndex];setOptionAsSelected(jqLite(selectedOption));}else{if(value==null&&self.emptyOption){self.removeUnknownOption();self.selectEmptyOption();}else if(self.unknownOption.parent().length){self.updateUnknownOption(value);}else{self.renderUnknownOption(value);}}};// Tell the select control that an option, with the given value, has been added
	self.addOption=function(value,element){// Skip comment nodes, as they only pollute the `optionsMap`
	if(element[0].nodeType===NODE_TYPE_COMMENT)return;assertNotHasOwnProperty(value,'"option value"');if(value===''){self.hasEmptyOption=true;self.emptyOption=element;}var count=optionsMap.get(value)||0;optionsMap.put(value,count+1);// Only render at the end of a digest. This improves render performance when many options
	// are added during a digest and ensures all relevant options are correctly marked as selected
	scheduleRender();};// Tell the select control that an option, with the given value, has been removed
	self.removeOption=function(value){var count=optionsMap.get(value);if(count){if(count===1){optionsMap.remove(value);if(value===''){self.hasEmptyOption=false;self.emptyOption=undefined;}}else{optionsMap.put(value,count-1);}}};// Check whether the select control has an option matching the given value
	self.hasOption=function(value){return!!optionsMap.get(value);};var renderScheduled=false;function scheduleRender(){if(renderScheduled)return;renderScheduled=true;$scope.$$postDigest(function(){renderScheduled=false;self.ngModelCtrl.$render();});}var updateScheduled=false;function scheduleViewValueUpdate(renderAfter){if(updateScheduled)return;updateScheduled=true;$scope.$$postDigest(function(){if($scope.$$destroyed)return;updateScheduled=false;self.ngModelCtrl.$setViewValue(self.readValue());if(renderAfter)self.ngModelCtrl.$render();});}self.registerOption=function(optionScope,optionElement,optionAttrs,interpolateValueFn,interpolateTextFn){if(optionAttrs.$attr.ngValue){// The value attribute is set by ngValue
	var oldVal,hashedVal=NaN;optionAttrs.$observe('value',function valueAttributeObserveAction(newVal){var removal;var previouslySelected=optionElement.prop('selected');if(isDefined(hashedVal)){self.removeOption(oldVal);delete self.selectValueMap[hashedVal];removal=true;}hashedVal=hashKey(newVal);oldVal=newVal;self.selectValueMap[hashedVal]=newVal;self.addOption(newVal,optionElement);// Set the attribute directly instead of using optionAttrs.$set - this stops the observer
	// from firing a second time. Other $observers on value will also get the result of the
	// ngValue expression, not the hashed value
	optionElement.attr('value',hashedVal);if(removal&&previouslySelected){scheduleViewValueUpdate();}});}else if(interpolateValueFn){// The value attribute is interpolated
	optionAttrs.$observe('value',function valueAttributeObserveAction(newVal){// This method is overwritten in ngOptions and has side-effects!
	self.readValue();var removal;var previouslySelected=optionElement.prop('selected');if(isDefined(oldVal)){self.removeOption(oldVal);removal=true;}oldVal=newVal;self.addOption(newVal,optionElement);if(removal&&previouslySelected){scheduleViewValueUpdate();}});}else if(interpolateTextFn){// The text content is interpolated
	optionScope.$watch(interpolateTextFn,function interpolateWatchAction(newVal,oldVal){optionAttrs.$set('value',newVal);var previouslySelected=optionElement.prop('selected');if(oldVal!==newVal){self.removeOption(oldVal);}self.addOption(newVal,optionElement);if(oldVal&&previouslySelected){scheduleViewValueUpdate();}});}else{// The value attribute is static
	self.addOption(optionAttrs.value,optionElement);}optionAttrs.$observe('disabled',function(newVal){// Since model updates will also select disabled options (like ngOptions),
	// we only have to handle options becoming disabled, not enabled
	if(newVal==='true'||newVal&&optionElement.prop('selected')){if(self.multiple){scheduleViewValueUpdate(true);}else{self.ngModelCtrl.$setViewValue(null);self.ngModelCtrl.$render();}}});optionElement.on('$destroy',function(){var currentValue=self.readValue();var removeValue=optionAttrs.value;self.removeOption(removeValue);self.ngModelCtrl.$render();if(self.multiple&&currentValue&&currentValue.indexOf(removeValue)!==-1||currentValue===removeValue){// When multiple (selected) options are destroyed at the same time, we don't want
	// to run a model update for each of them. Instead, run a single update in the $$postDigest
	scheduleViewValueUpdate(true);}});};function setOptionAsSelected(optionEl){optionEl.prop('selected',true);// needed for IE
	optionEl.attr('selected',true);}}];/**
	 * @ngdoc directive
	 * @name select
	 * @restrict E
	 *
	 * @description
	 * HTML `select` element with angular data-binding.
	 *
	 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
	 * between the scope and the `<select>` control (including setting default values).
	 * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
	 * {@link ngOptions `ngOptions`} directives.
	 *
	 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
	 * to the model identified by the `ngModel` directive. With static or repeated options, this is
	 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
	 * Value and textContent can be interpolated.
	 *
	 * ## Matching model and option values
	 *
	 * In general, the match between the model and an option is evaluated by strictly comparing the model
	 * value against the value of the available options.
	 *
	 * If you are setting the option value with the option's `value` attribute, or textContent, the
	 * value will always be a `string` which means that the model value must also be a string.
	 * Otherwise the `select` directive cannot match them correctly.
	 *
	 * To bind the model to a non-string value, you can use one of the following strategies:
	 * - the {@link ng.ngOptions `ngOptions`} directive
	 *   ({@link ng.select#using-select-with-ngoptions-and-setting-a-default-value})
	 * - the {@link ng.ngValue `ngValue`} directive, which allows arbitrary expressions to be
	 *   option values ({@link ng.select#using-ngvalue-to-bind-the-model-to-an-array-of-objects Example})
	 * - model $parsers / $formatters to convert the string value
	 *   ({@link ng.select#binding-select-to-a-non-string-value-via-ngmodel-parsing-formatting Example})
	 *
	 * If the viewValue of `ngModel` does not match any of the options, then the control
	 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Choosing between `ngRepeat` and `ngOptions`
	 *
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
	 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits:
	 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression
	 * - reduced memory consumption by not creating a new scope for each repeated instance
	 * - increased render speed by creating the options in a documentFragment instead of individually
	 *
	 * Specifically, select with repeated options slows down significantly starting at 2000 options in
	 * Chrome and Internet Explorer / Edge.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} multiple Allows multiple options to be selected. The selected values will be
	 *     bound to the model as an array.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds required attribute and required validation constraint to
	 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
	 * when you want to data-bind to the required attribute.
	 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
	 *    interaction with the select element.
	 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
	 * set on the model on selection. See {@link ngOptions `ngOptions`}.
	 *
	 * @example
	 * ### Simple `select` elements with static options
	 *
	 * <example name="static-select" module="staticSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="singleSelect"> Single select: </label><br>
	 *     <select name="singleSelect" ng-model="data.singleSelect">
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *
	 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
	 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
	 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
	 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
	 *     <tt>singleSelect = {{data.singleSelect}}</tt>
	 *
	 *     <hr>
	 *     <label for="multipleSelect"> Multiple select: </label><br>
	 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *       <option value="option-3">Option 3</option>
	 *     </select><br>
	 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
	 *   </form>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('staticSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       singleSelect: null,
	 *       multipleSelect: [],
	 *       option1: 'option-1'
	 *      };
	 *
	 *      $scope.forceUnknownOption = function() {
	 *        $scope.data.singleSelect = 'nonsense';
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngRepeat` to generate `select` options
	 * <example name="select-ngrepeat" module="ngrepeatSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="repeatSelect"> Repeat select: </label>
	 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.model">
	 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <tt>model = {{data.model}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngrepeatSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       model: null,
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ]
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngValue` to bind the model to an array of objects
	 * <example name="select-ngvalue" module="ngvalueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="ngvalueselect"> ngvalue select: </label>
	 *     <select size="6" name="ngvalueselect" ng-model="data.model" multiple>
	 *       <option ng-repeat="option in data.availableOptions" ng-value="option.value">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <pre>model = {{data.model | json}}</pre><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngvalueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       model: null,
	 *       availableOptions: [
	           {value: 'myString', name: 'string'},
	           {value: 1, name: 'integer'},
	           {value: true, name: 'boolean'},
	           {value: null, name: 'null'},
	           {value: {prop: 'value'}, name: 'object'},
	           {value: ['a'], name: 'array'}
	 *       ]
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `select` with `ngOptions` and setting a default value
	 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
	 *
	 * <example name="select-with-default-values" module="defaultValueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="mySelect">Make a choice:</label>
	 *     <select name="mySelect" id="mySelect"
	 *       ng-options="option.name for option in data.availableOptions track by option.id"
	 *       ng-model="data.selectedOption"></select>
	 *   </form>
	 *   <hr>
	 *   <tt>option = {{data.selectedOption}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('defaultValueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
	 *       };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
	 *
	 * <example name="select-with-non-string-options" module="nonStringSelect">
	 *   <file name="index.html">
	 *     <select ng-model="model.id" convert-to-number>
	 *       <option value="0">Zero</option>
	 *       <option value="1">One</option>
	 *       <option value="2">Two</option>
	 *     </select>
	 *     {{ model }}
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('nonStringSelect', [])
	 *       .run(function($rootScope) {
	 *         $rootScope.model = { id: 2 };
	 *       })
	 *       .directive('convertToNumber', function() {
	 *         return {
	 *           require: 'ngModel',
	 *           link: function(scope, element, attrs, ngModel) {
	 *             ngModel.$parsers.push(function(val) {
	 *               return parseInt(val, 10);
	 *             });
	 *             ngModel.$formatters.push(function(val) {
	 *               return '' + val;
	 *             });
	 *           }
	 *         };
	 *       });
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should initialize to model', function() {
	 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
	 *     });
	 *   </file>
	 * </example>
	 *
	 */var selectDirective=function selectDirective(){return{restrict:'E',require:['select','?ngModel'],controller:SelectController,priority:1,link:{pre:selectPreLink,post:selectPostLink}};function selectPreLink(scope,element,attr,ctrls){var selectCtrl=ctrls[0];var ngModelCtrl=ctrls[1];// if ngModel is not defined, we don't need to do anything but set the registerOption
	// function to noop, so options don't get added internally
	if(!ngModelCtrl){selectCtrl.registerOption=noop;return;}selectCtrl.ngModelCtrl=ngModelCtrl;// When the selected item(s) changes we delegate getting the value of the select control
	// to the `readValue` method, which can be changed if the select can have multiple
	// selected values or if the options are being generated by `ngOptions`
	element.on('change',function(){selectCtrl.removeUnknownOption();scope.$apply(function(){ngModelCtrl.$setViewValue(selectCtrl.readValue());});});// If the select allows multiple values then we need to modify how we read and write
	// values from and to the control; also what it means for the value to be empty and
	// we have to add an extra watch since ngModel doesn't work well with arrays - it
	// doesn't trigger rendering if only an item in the array changes.
	if(attr.multiple){selectCtrl.multiple=true;// Read value now needs to check each option to see if it is selected
	selectCtrl.readValue=function readMultipleValue(){var array=[];forEach(element.find('option'),function(option){if(option.selected&&!option.disabled){var val=option.value;array.push(val in selectCtrl.selectValueMap?selectCtrl.selectValueMap[val]:val);}});return array;};// Write value now needs to set the selected property of each matching option
	selectCtrl.writeValue=function writeMultipleValue(value){var items=new HashMap(value);forEach(element.find('option'),function(option){option.selected=isDefined(items.get(option.value))||isDefined(items.get(selectCtrl.selectValueMap[option.value]));});};// we have to do it on each watch since ngModel watches reference, but
	// we need to work of an array, so we need to see if anything was inserted/removed
	var lastView,lastViewRef=NaN;scope.$watch(function selectMultipleWatch(){if(lastViewRef===ngModelCtrl.$viewValue&&!equals(lastView,ngModelCtrl.$viewValue)){lastView=shallowCopy(ngModelCtrl.$viewValue);ngModelCtrl.$render();}lastViewRef=ngModelCtrl.$viewValue;});// If we are a multiple select then value is now a collection
	// so the meaning of $isEmpty changes
	ngModelCtrl.$isEmpty=function(value){return!value||value.length===0;};}}function selectPostLink(scope,element,attrs,ctrls){// if ngModel is not defined, we don't need to do anything
	var ngModelCtrl=ctrls[1];if(!ngModelCtrl)return;var selectCtrl=ctrls[0];// We delegate rendering to the `writeValue` method, which can be changed
	// if the select can have multiple selected values or if the options are being
	// generated by `ngOptions`.
	// This must be done in the postLink fn to prevent $render to be called before
	// all nodes have been linked correctly.
	ngModelCtrl.$render=function(){selectCtrl.writeValue(ngModelCtrl.$viewValue);};}};// The option directive is purely designed to communicate the existence (or lack of)
	// of dynamically created (and destroyed) option elements to their containing select
	// directive via its controller.
	var optionDirective=['$interpolate',function($interpolate){return{restrict:'E',priority:100,compile:function compile(element,attr){var interpolateValueFn,interpolateTextFn;if(isDefined(attr.ngValue)){// Will be handled by registerOption
	}else if(isDefined(attr.value)){// If the value attribute is defined, check if it contains an interpolation
	interpolateValueFn=$interpolate(attr.value,true);}else{// If the value attribute is not defined then we fall back to the
	// text content of the option element, which may be interpolated
	interpolateTextFn=$interpolate(element.text(),true);if(!interpolateTextFn){attr.$set('value',element.text());}}return function(scope,element,attr){// This is an optimization over using ^^ since we don't want to have to search
	// all the way to the root of the DOM for every single option element
	var selectCtrlName='$selectController',parent=element.parent(),selectCtrl=parent.data(selectCtrlName)||parent.parent().data(selectCtrlName);// in case we are in optgroup
	if(selectCtrl){selectCtrl.registerOption(scope,element,attr,interpolateValueFn,interpolateTextFn);}};}};}];/**
	 * @ngdoc directive
	 * @name ngRequired
	 * @restrict A
	 *
	 * @description
	 *
	 * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
	 * applied to custom controls.
	 *
	 * The directive sets the `required` attribute on the element if the Angular expression inside
	 * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
	 * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
	 * for more info.
	 *
	 * The validator will set the `required` error key to true if the `required` attribute is set and
	 * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
	 * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
	 * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
	 * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
	 *
	 * @example
	 * <example name="ngRequiredDirective" module="ngRequiredExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngRequiredExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.required = true;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="required">Toggle required: </label>
	 *         <input type="checkbox" ng-model="required" id="required" />
	 *         <br>
	 *         <label for="input">This input must be filled if `required` is true: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
	 *         <hr>
	 *         required error set? = <code>{{form.input.$error.required}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var required = element(by.binding('form.input.$error.required'));
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should set the required error', function() {
	         expect(required.getText()).toContain('true');

	         input.sendKeys('123');
	         expect(required.getText()).not.toContain('true');
	         expect(model.getText()).toContain('123');
	       });
	 *   </file>
	 * </example>
	 */var requiredDirective=function requiredDirective(){return{restrict:'A',require:'?ngModel',link:function link(scope,elm,attr,ctrl){if(!ctrl)return;attr.required=true;// force truthy in case we are on non input element
	ctrl.$validators.required=function(modelValue,viewValue){return!attr.required||!ctrl.$isEmpty(viewValue);};attr.$observe('required',function(){ctrl.$validate();});}};};/**
	 * @ngdoc directive
	 * @name ngPattern
	 *
	 * @description
	 *
	 * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * does not match a RegExp which is obtained by evaluating the Angular expression given in the
	 * `ngPattern` attribute value:
	 * * If the expression evaluates to a RegExp object, then this is used directly.
	 * * If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
	 * in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
	 *
	 * <div class="alert alert-info">
	 * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 * start at the index of the last search's match, thus not taking the whole input value into
	 * account.
	 * </div>
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
	 *     not available.
	 *   </li>
	 *   <li>
	 *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngPatternDirective" module="ngPatternExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngPatternExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.regex = '\\d+';
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="regex">Set a pattern (regex string): </label>
	 *         <input type="text" ng-model="regex" id="regex" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current pattern: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should validate the input with the default pattern', function() {
	         input.sendKeys('aaa');
	         expect(model.getText()).not.toContain('aaa');

	         input.clear().then(function() {
	           input.sendKeys('123');
	           expect(model.getText()).toContain('123');
	         });
	       });
	 *   </file>
	 * </example>
	 */var patternDirective=function patternDirective(){return{restrict:'A',require:'?ngModel',link:function link(scope,elm,attr,ctrl){if(!ctrl)return;var regexp,patternExp=attr.ngPattern||attr.pattern;attr.$observe('pattern',function(regex){if(isString(regex)&&regex.length>0){regex=new RegExp('^'+regex+'$');}if(regex&&!regex.test){throw minErr('ngPattern')('noregexp','Expected {0} to be a RegExp but was {1}. Element: {2}',patternExp,regex,startingTag(elm));}regexp=regex||undefined;ctrl.$validate();});ctrl.$validators.pattern=function(modelValue,viewValue){// HTML5 pattern constraint validates the input value, so we validate the viewValue
	return ctrl.$isEmpty(viewValue)||isUndefined(regexp)||regexp.test(viewValue);};}};};/**
	 * @ngdoc directive
	 * @name ngMaxlength
	 *
	 * @description
	 *
	 * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is longer than the integer obtained by evaluating the Angular expression given in the
	 * `ngMaxlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMaxlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.maxlength = 5;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="maxlength">Set a maxlength: </label>
	 *         <input type="number" ng-model="maxlength" id="maxlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current maxlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should validate the input with the default maxlength', function() {
	         input.sendKeys('abcdef');
	         expect(model.getText()).not.toContain('abcdef');

	         input.clear().then(function() {
	           input.sendKeys('abcde');
	           expect(model.getText()).toContain('abcde');
	         });
	       });
	 *   </file>
	 * </example>
	 */var maxlengthDirective=function maxlengthDirective(){return{restrict:'A',require:'?ngModel',link:function link(scope,elm,attr,ctrl){if(!ctrl)return;var maxlength=-1;attr.$observe('maxlength',function(value){var intVal=toInt(value);maxlength=isNumberNaN(intVal)?-1:intVal;ctrl.$validate();});ctrl.$validators.maxlength=function(modelValue,viewValue){return maxlength<0||ctrl.$isEmpty(viewValue)||viewValue.length<=maxlength;};}};};/**
	 * @ngdoc directive
	 * @name ngMinlength
	 *
	 * @description
	 *
	 * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is shorter than the integer obtained by evaluating the Angular expression given in the
	 * `ngMinlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMinlength` value must be an expression, while the `minlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMinlengthDirective" module="ngMinlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMinlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.minlength = 3;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="minlength">Set a minlength: </label>
	 *         <input type="number" ng-model="minlength" id="minlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current minlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should validate the input with the default minlength', function() {
	         input.sendKeys('ab');
	         expect(model.getText()).not.toContain('ab');

	         input.sendKeys('abc');
	         expect(model.getText()).toContain('abc');
	       });
	 *   </file>
	 * </example>
	 */var minlengthDirective=function minlengthDirective(){return{restrict:'A',require:'?ngModel',link:function link(scope,elm,attr,ctrl){if(!ctrl)return;var minlength=0;attr.$observe('minlength',function(value){minlength=toInt(value)||0;ctrl.$validate();});ctrl.$validators.minlength=function(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||viewValue.length>=minlength;};}};};if(window.angular.bootstrap){// AngularJS is already loaded, so we can return here...
	if(window.console){console.log('WARNING: Tried to load angular more than once.');}return;}// try to bind to jquery now so that one can write jqLite(fn)
	// but we will rebind on bootstrap again.
	bindJQuery();publishExternalAPI(angular);angular.module("ngLocale",[],["$provide",function($provide){var PLURAL_CATEGORY={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};function getDecimals(n){n=n+'';var i=n.indexOf('.');return i==-1?0:n.length-i-1;}function getVF(n,opt_precision){var v=opt_precision;if(undefined===v){v=Math.min(getDecimals(n),3);}var base=Math.pow(10,v);var f=(n*base|0)%base;return{v:v,f:f};}$provide.value("$locale",{"DATETIME_FORMATS":{"AMPMS":["AM","PM"],"DAY":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"ERANAMES":["Before Christ","Anno Domini"],"ERAS":["BC","AD"],"FIRSTDAYOFWEEK":6,"MONTH":["January","February","March","April","May","June","July","August","September","October","November","December"],"SHORTDAY":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"SHORTMONTH":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"STANDALONEMONTH":["January","February","March","April","May","June","July","August","September","October","November","December"],"WEEKENDRANGE":[5,6],"fullDate":"EEEE, MMMM d, y","longDate":"MMMM d, y","medium":"MMM d, y h:mm:ss a","mediumDate":"MMM d, y","mediumTime":"h:mm:ss a","short":"M/d/yy h:mm a","shortDate":"M/d/yy","shortTime":"h:mm a"},"NUMBER_FORMATS":{"CURRENCY_SYM":"$","DECIMAL_SEP":".","GROUP_SEP":",","PATTERNS":[{"gSize":3,"lgSize":3,"maxFrac":3,"minFrac":0,"minInt":1,"negPre":"-","negSuf":"","posPre":"","posSuf":""},{"gSize":3,"lgSize":3,"maxFrac":2,"minFrac":2,"minInt":1,"negPre":'-\xA4',"negSuf":"","posPre":'\xA4',"posSuf":""}]},"id":"en-us","localeID":"en_US","pluralCat":function pluralCat(n,opt_precision){var i=n|0;var vf=getVF(n,opt_precision);if(i==1&&vf.v==0){return PLURAL_CATEGORY.ONE;}return PLURAL_CATEGORY.OTHER;}});}]);jqLite(function(){angularInit(window.document,bootstrap);});})(window);!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*!
	 * jQuery JavaScript Library v2.2.4
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-05-20T17:23Z
	 */

	(function (global, factory) {

		if (( false ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ? factory(global, true) : function (w) {
				if (!w.document) {
					throw new Error("jQuery requires a window with a document");
				}
				return factory(w);
			};
		} else {
			factory(global);
		}

		// Pass this if window is not defined yet
	})(typeof window !== "undefined" ? window : undefined, function (window, noGlobal) {

		// Support: Firefox 18+
		// Can't be in strict mode, several libs including ASP.NET trace
		// the stack via arguments.caller.callee and Firefox dies if
		// you try to trace through "use strict" call chains. (#13335)
		//"use strict";
		var arr = [];

		var document = window.document;

		var _slice = arr.slice;

		var concat = arr.concat;

		var push = arr.push;

		var indexOf = arr.indexOf;

		var class2type = {};

		var toString = class2type.toString;

		var hasOwn = class2type.hasOwnProperty;

		var support = {};

		var version = "2.2.4",


		// Define a local copy of jQuery
		jQuery = function jQuery(selector, context) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init(selector, context);
		},


		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		    rdashAlpha = /-([\da-z])/gi,


		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function fcamelCase(all, letter) {
			return letter.toUpperCase();
		};

		jQuery.fn = jQuery.prototype = {

			// The current version of jQuery being used
			jquery: version,

			constructor: jQuery,

			// Start with an empty selector
			selector: "",

			// The default length of a jQuery object is 0
			length: 0,

			toArray: function toArray() {
				return _slice.call(this);
			},

			// Get the Nth element in the matched element set OR
			// Get the whole matched element set as a clean array
			get: function get(num) {
				return num != null ?

				// Return just the one element from the set
				num < 0 ? this[num + this.length] : this[num] :

				// Return all the elements in a clean array
				_slice.call(this);
			},

			// Take an array of elements and push it onto the stack
			// (returning the new matched element set)
			pushStack: function pushStack(elems) {

				// Build a new jQuery matched element set
				var ret = jQuery.merge(this.constructor(), elems);

				// Add the old object onto the stack (as a reference)
				ret.prevObject = this;
				ret.context = this.context;

				// Return the newly-formed element set
				return ret;
			},

			// Execute a callback for every element in the matched set.
			each: function each(callback) {
				return jQuery.each(this, callback);
			},

			map: function map(callback) {
				return this.pushStack(jQuery.map(this, function (elem, i) {
					return callback.call(elem, i, elem);
				}));
			},

			slice: function slice() {
				return this.pushStack(_slice.apply(this, arguments));
			},

			first: function first() {
				return this.eq(0);
			},

			last: function last() {
				return this.eq(-1);
			},

			eq: function eq(i) {
				var len = this.length,
				    j = +i + (i < 0 ? len : 0);
				return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
			},

			end: function end() {
				return this.prevObject || this.constructor();
			},

			// For internal use only.
			// Behaves like an Array's method, not like a jQuery method.
			push: push,
			sort: arr.sort,
			splice: arr.splice
		};

		jQuery.extend = jQuery.fn.extend = function () {
			var options,
			    name,
			    src,
			    copy,
			    copyIsArray,
			    clone,
			    target = arguments[0] || {},
			    i = 1,
			    length = arguments.length,
			    deep = false;

			// Handle a deep copy situation
			if (typeof target === "boolean") {
				deep = target;

				// Skip the boolean and the target
				target = arguments[i] || {};
				i++;
			}

			// Handle case when target is a string or something (possible in deep copy)
			if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !jQuery.isFunction(target)) {
				target = {};
			}

			// Extend jQuery itself if only one argument is passed
			if (i === length) {
				target = this;
				i--;
			}

			for (; i < length; i++) {

				// Only deal with non-null/undefined values
				if ((options = arguments[i]) != null) {

					// Extend the base object
					for (name in options) {
						src = target[name];
						copy = options[name];

						// Prevent never-ending loop
						if (target === copy) {
							continue;
						}

						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {

							if (copyIsArray) {
								copyIsArray = false;
								clone = src && jQuery.isArray(src) ? src : [];
							} else {
								clone = src && jQuery.isPlainObject(src) ? src : {};
							}

							// Never move original objects, clone them
							target[name] = jQuery.extend(deep, clone, copy);

							// Don't bring in undefined values
						} else if (copy !== undefined) {
							target[name] = copy;
						}
					}
				}
			}

			// Return the modified object
			return target;
		};

		jQuery.extend({

			// Unique for each copy of jQuery on the page
			expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

			// Assume jQuery is ready without the ready module
			isReady: true,

			error: function error(msg) {
				throw new Error(msg);
			},

			noop: function noop() {},

			isFunction: function isFunction(obj) {
				return jQuery.type(obj) === "function";
			},

			isArray: Array.isArray,

			isWindow: function isWindow(obj) {
				return obj != null && obj === obj.window;
			},

			isNumeric: function isNumeric(obj) {

				// parseFloat NaNs numeric-cast false positives (null|true|false|"")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				// adding 1 corrects loss of precision from parseFloat (#15100)
				var realStringObj = obj && obj.toString();
				return !jQuery.isArray(obj) && realStringObj - parseFloat(realStringObj) + 1 >= 0;
			},

			isPlainObject: function isPlainObject(obj) {
				var key;

				// Not plain objects:
				// - Any object or value whose internal [[Class]] property is not "[object Object]"
				// - DOM nodes
				// - window
				if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
					return false;
				}

				// Not own constructor property must be Object
				if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype || {}, "isPrototypeOf")) {
					return false;
				}

				// Own properties are enumerated firstly, so to speed up,
				// if last one is own, then all properties are own
				for (key in obj) {}

				return key === undefined || hasOwn.call(obj, key);
			},

			isEmptyObject: function isEmptyObject(obj) {
				var name;
				for (name in obj) {
					return false;
				}
				return true;
			},

			type: function type(obj) {
				if (obj == null) {
					return obj + "";
				}

				// Support: Android<4.0, iOS<6 (functionish RegExp)
				return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
			},

			// Evaluates a script in a global context
			globalEval: function globalEval(code) {
				var script,
				    indirect = eval;

				code = jQuery.trim(code);

				if (code) {

					// If the code includes a valid, prologue position
					// strict mode pragma, execute code by injecting a
					// script tag into the document.
					if (code.indexOf("use strict") === 1) {
						script = document.createElement("script");
						script.text = code;
						document.head.appendChild(script).parentNode.removeChild(script);
					} else {

						// Otherwise, avoid the DOM node creation, insertion
						// and removal by using an indirect global eval

						indirect(code);
					}
				}
			},

			// Convert dashed to camelCase; used by the css and data modules
			// Support: IE9-11+
			// Microsoft forgot to hump their vendor prefix (#9572)
			camelCase: function camelCase(string) {
				return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
			},

			nodeName: function nodeName(elem, name) {
				return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
			},

			each: function each(obj, callback) {
				var length,
				    i = 0;

				if (isArrayLike(obj)) {
					length = obj.length;
					for (; i < length; i++) {
						if (callback.call(obj[i], i, obj[i]) === false) {
							break;
						}
					}
				} else {
					for (i in obj) {
						if (callback.call(obj[i], i, obj[i]) === false) {
							break;
						}
					}
				}

				return obj;
			},

			// Support: Android<4.1
			trim: function trim(text) {
				return text == null ? "" : (text + "").replace(rtrim, "");
			},

			// results is for internal usage only
			makeArray: function makeArray(arr, results) {
				var ret = results || [];

				if (arr != null) {
					if (isArrayLike(Object(arr))) {
						jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
					} else {
						push.call(ret, arr);
					}
				}

				return ret;
			},

			inArray: function inArray(elem, arr, i) {
				return arr == null ? -1 : indexOf.call(arr, elem, i);
			},

			merge: function merge(first, second) {
				var len = +second.length,
				    j = 0,
				    i = first.length;

				for (; j < len; j++) {
					first[i++] = second[j];
				}

				first.length = i;

				return first;
			},

			grep: function grep(elems, callback, invert) {
				var callbackInverse,
				    matches = [],
				    i = 0,
				    length = elems.length,
				    callbackExpect = !invert;

				// Go through the array, only saving the items
				// that pass the validator function
				for (; i < length; i++) {
					callbackInverse = !callback(elems[i], i);
					if (callbackInverse !== callbackExpect) {
						matches.push(elems[i]);
					}
				}

				return matches;
			},

			// arg is for internal usage only
			map: function map(elems, callback, arg) {
				var length,
				    value,
				    i = 0,
				    ret = [];

				// Go through the array, translating each of the items to their new values
				if (isArrayLike(elems)) {
					length = elems.length;
					for (; i < length; i++) {
						value = callback(elems[i], i, arg);

						if (value != null) {
							ret.push(value);
						}
					}

					// Go through every key on the object,
				} else {
					for (i in elems) {
						value = callback(elems[i], i, arg);

						if (value != null) {
							ret.push(value);
						}
					}
				}

				// Flatten any nested arrays
				return concat.apply([], ret);
			},

			// A global GUID counter for objects
			guid: 1,

			// Bind a function to a context, optionally partially applying any
			// arguments.
			proxy: function proxy(fn, context) {
				var tmp, args, proxy;

				if (typeof context === "string") {
					tmp = fn[context];
					context = fn;
					fn = tmp;
				}

				// Quick check to determine if target is callable, in the spec
				// this throws a TypeError, but we will just return undefined.
				if (!jQuery.isFunction(fn)) {
					return undefined;
				}

				// Simulated bind
				args = _slice.call(arguments, 2);
				proxy = function proxy() {
					return fn.apply(context || this, args.concat(_slice.call(arguments)));
				};

				// Set the guid of unique handler to the same of original handler, so it can be removed
				proxy.guid = fn.guid = fn.guid || jQuery.guid++;

				return proxy;
			},

			now: Date.now,

			// jQuery.support is not used in Core but other projects attach their
			// properties to it so it needs to exist.
			support: support
		});

		// JSHint would error on this code due to the Symbol not being defined in ES5.
		// Defining this global in .jshintrc would create a danger of using the global
		// unguarded in another place, it seems safer to just disable JSHint for these
		// three lines.
		/* jshint ignore: start */
		if (typeof Symbol === "function") {
			jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
		}
		/* jshint ignore: end */

		// Populate the class2type map
		jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
			class2type["[object " + name + "]"] = name.toLowerCase();
		});

		function isArrayLike(obj) {

			// Support: iOS 8.2 (not reproducible in simulator)
			// `in` check used to prevent JIT error (gh-2145)
			// hasOwn isn't used here due to false negatives
			// regarding Nodelist length in IE
			var length = !!obj && "length" in obj && obj.length,
			    type = jQuery.type(obj);

			if (type === "function" || jQuery.isWindow(obj)) {
				return false;
			}

			return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
		}
		var Sizzle =
		/*!
	  * Sizzle CSS Selector Engine v2.2.1
	  * http://sizzlejs.com/
	  *
	  * Copyright jQuery Foundation and other contributors
	  * Released under the MIT license
	  * http://jquery.org/license
	  *
	  * Date: 2015-10-17
	  */
		function (window) {

			var i,
			    support,
			    Expr,
			    getText,
			    isXML,
			    tokenize,
			    compile,
			    select,
			    outermostContext,
			    sortInput,
			    hasDuplicate,


			// Local document vars
			setDocument,
			    document,
			    docElem,
			    documentIsHTML,
			    rbuggyQSA,
			    rbuggyMatches,
			    matches,
			    contains,


			// Instance-specific data
			expando = "sizzle" + 1 * new Date(),
			    preferredDoc = window.document,
			    dirruns = 0,
			    done = 0,
			    classCache = createCache(),
			    tokenCache = createCache(),
			    compilerCache = createCache(),
			    sortOrder = function sortOrder(a, b) {
				if (a === b) {
					hasDuplicate = true;
				}
				return 0;
			},


			// General-purpose constants
			MAX_NEGATIVE = 1 << 31,


			// Instance methods
			hasOwn = {}.hasOwnProperty,
			    arr = [],
			    pop = arr.pop,
			    push_native = arr.push,
			    push = arr.push,
			    slice = arr.slice,

			// Use a stripped-down indexOf as it's faster than native
			// http://jsperf.com/thor-indexof-vs-for/5
			indexOf = function indexOf(list, elem) {
				var i = 0,
				    len = list.length;
				for (; i < len; i++) {
					if (list[i] === elem) {
						return i;
					}
				}
				return -1;
			},
			    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


			// Regular expressions

			// http://www.w3.org/TR/css3-selectors/#whitespace
			whitespace = "[\\x20\\t\\r\\n\\f]",


			// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
			identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",


			// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
			attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
			    pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" + ")\\)|)",


			// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
			rwhitespace = new RegExp(whitespace + "+", "g"),
			    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
			    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
			    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
			    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
			    rpseudo = new RegExp(pseudos),
			    ridentifier = new RegExp("^" + identifier + "$"),
			    matchExpr = {
				"ID": new RegExp("^#(" + identifier + ")"),
				"CLASS": new RegExp("^\\.(" + identifier + ")"),
				"TAG": new RegExp("^(" + identifier + "|[*])"),
				"ATTR": new RegExp("^" + attributes),
				"PSEUDO": new RegExp("^" + pseudos),
				"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
				"bool": new RegExp("^(?:" + booleans + ")$", "i"),
				// For use in libraries implementing .is()
				// We use this for POS matching in `select`
				"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
			},
			    rinputs = /^(?:input|select|textarea|button)$/i,
			    rheader = /^h\d$/i,
			    rnative = /^[^{]+\{\s*\[native \w/,


			// Easily-parseable/retrievable ID or TAG or CLASS selectors
			rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
			    rsibling = /[+~]/,
			    rescape = /'|\\/g,


			// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
			runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
			    funescape = function funescape(_, escaped, escapedWhitespace) {
				var high = "0x" + escaped - 0x10000;
				// NaN means non-codepoint
				// Support: Firefox<24
				// Workaround erroneous numeric interpretation of +"0x"
				return high !== high || escapedWhitespace ? escaped : high < 0 ?
				// BMP codepoint
				String.fromCharCode(high + 0x10000) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
			},


			// Used for iframes
			// See setDocument()
			// Removing the function wrapper causes a "Permission Denied"
			// error in IE
			unloadHandler = function unloadHandler() {
				setDocument();
			};

			// Optimize for push.apply( _, NodeList )
			try {
				push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
				// Support: Android<4.0
				// Detect silently failing push.apply
				arr[preferredDoc.childNodes.length].nodeType;
			} catch (e) {
				push = { apply: arr.length ?

					// Leverage slice if possible
					function (target, els) {
						push_native.apply(target, slice.call(els));
					} :

					// Support: IE<9
					// Otherwise append directly
					function (target, els) {
						var j = target.length,
						    i = 0;
						// Can't trust NodeList.length
						while (target[j++] = els[i++]) {}
						target.length = j - 1;
					}
				};
			}

			function Sizzle(selector, context, results, seed) {
				var m,
				    i,
				    elem,
				    nid,
				    nidselect,
				    match,
				    groups,
				    newSelector,
				    newContext = context && context.ownerDocument,


				// nodeType defaults to 9, since context defaults to document
				nodeType = context ? context.nodeType : 9;

				results = results || [];

				// Return early from calls with invalid selector or context
				if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

					return results;
				}

				// Try to shortcut find operations (as opposed to filters) in HTML documents
				if (!seed) {

					if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
						setDocument(context);
					}
					context = context || document;

					if (documentIsHTML) {

						// If the selector is sufficiently simple, try using a "get*By*" DOM method
						// (excepting DocumentFragment context, where the methods don't exist)
						if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

							// ID selector
							if (m = match[1]) {

								// Document context
								if (nodeType === 9) {
									if (elem = context.getElementById(m)) {

										// Support: IE, Opera, Webkit
										// TODO: identify versions
										// getElementById can match elements by name instead of ID
										if (elem.id === m) {
											results.push(elem);
											return results;
										}
									} else {
										return results;
									}

									// Element context
								} else {

									// Support: IE, Opera, Webkit
									// TODO: identify versions
									// getElementById can match elements by name instead of ID
									if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

										results.push(elem);
										return results;
									}
								}

								// Type selector
							} else if (match[2]) {
								push.apply(results, context.getElementsByTagName(selector));
								return results;

								// Class selector
							} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

								push.apply(results, context.getElementsByClassName(m));
								return results;
							}
						}

						// Take advantage of querySelectorAll
						if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {

							if (nodeType !== 1) {
								newContext = context;
								newSelector = selector;

								// qSA looks outside Element context, which is not what we want
								// Thanks to Andrew Dupont for this workaround technique
								// Support: IE <=8
								// Exclude object elements
							} else if (context.nodeName.toLowerCase() !== "object") {

								// Capture the context ID, setting it first if necessary
								if (nid = context.getAttribute("id")) {
									nid = nid.replace(rescape, "\\$&");
								} else {
									context.setAttribute("id", nid = expando);
								}

								// Prefix every selector in the list
								groups = tokenize(selector);
								i = groups.length;
								nidselect = ridentifier.test(nid) ? "#" + nid : "[id='" + nid + "']";
								while (i--) {
									groups[i] = nidselect + " " + toSelector(groups[i]);
								}
								newSelector = groups.join(",");

								// Expand context for sibling selectors
								newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
							}

							if (newSelector) {
								try {
									push.apply(results, newContext.querySelectorAll(newSelector));
									return results;
								} catch (qsaError) {} finally {
									if (nid === expando) {
										context.removeAttribute("id");
									}
								}
							}
						}
					}
				}

				// All others
				return select(selector.replace(rtrim, "$1"), context, results, seed);
			}

			/**
	   * Create key-value caches of limited size
	   * @returns {function(string, object)} Returns the Object data after storing it on itself with
	   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	   *	deleting the oldest entry
	   */
			function createCache() {
				var keys = [];

				function cache(key, value) {
					// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
					if (keys.push(key + " ") > Expr.cacheLength) {
						// Only keep the most recent entries
						delete cache[keys.shift()];
					}
					return cache[key + " "] = value;
				}
				return cache;
			}

			/**
	   * Mark a function for special use by Sizzle
	   * @param {Function} fn The function to mark
	   */
			function markFunction(fn) {
				fn[expando] = true;
				return fn;
			}

			/**
	   * Support testing using an element
	   * @param {Function} fn Passed the created div and expects a boolean result
	   */
			function assert(fn) {
				var div = document.createElement("div");

				try {
					return !!fn(div);
				} catch (e) {
					return false;
				} finally {
					// Remove from its parent by default
					if (div.parentNode) {
						div.parentNode.removeChild(div);
					}
					// release memory in IE
					div = null;
				}
			}

			/**
	   * Adds the same handler for all of the specified attrs
	   * @param {String} attrs Pipe-separated list of attributes
	   * @param {Function} handler The method that will be applied
	   */
			function addHandle(attrs, handler) {
				var arr = attrs.split("|"),
				    i = arr.length;

				while (i--) {
					Expr.attrHandle[arr[i]] = handler;
				}
			}

			/**
	   * Checks document order of two siblings
	   * @param {Element} a
	   * @param {Element} b
	   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	   */
			function siblingCheck(a, b) {
				var cur = b && a,
				    diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

				// Use IE sourceIndex if available on both nodes
				if (diff) {
					return diff;
				}

				// Check if b follows a
				if (cur) {
					while (cur = cur.nextSibling) {
						if (cur === b) {
							return -1;
						}
					}
				}

				return a ? 1 : -1;
			}

			/**
	   * Returns a function to use in pseudos for input types
	   * @param {String} type
	   */
			function createInputPseudo(type) {
				return function (elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === type;
				};
			}

			/**
	   * Returns a function to use in pseudos for buttons
	   * @param {String} type
	   */
			function createButtonPseudo(type) {
				return function (elem) {
					var name = elem.nodeName.toLowerCase();
					return (name === "input" || name === "button") && elem.type === type;
				};
			}

			/**
	   * Returns a function to use in pseudos for positionals
	   * @param {Function} fn
	   */
			function createPositionalPseudo(fn) {
				return markFunction(function (argument) {
					argument = +argument;
					return markFunction(function (seed, matches) {
						var j,
						    matchIndexes = fn([], seed.length, argument),
						    i = matchIndexes.length;

						// Match elements found at the specified indexes
						while (i--) {
							if (seed[j = matchIndexes[i]]) {
								seed[j] = !(matches[j] = seed[j]);
							}
						}
					});
				});
			}

			/**
	   * Checks a node for validity as a Sizzle context
	   * @param {Element|Object=} context
	   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	   */
			function testContext(context) {
				return context && typeof context.getElementsByTagName !== "undefined" && context;
			}

			// Expose support vars for convenience
			support = Sizzle.support = {};

			/**
	   * Detects XML nodes
	   * @param {Element|Object} elem An element or a document
	   * @returns {Boolean} True iff elem is a non-HTML XML node
	   */
			isXML = Sizzle.isXML = function (elem) {
				// documentElement is verified for cases where it doesn't yet exist
				// (such as loading iframes in IE - #4833)
				var documentElement = elem && (elem.ownerDocument || elem).documentElement;
				return documentElement ? documentElement.nodeName !== "HTML" : false;
			};

			/**
	   * Sets document-related variables once based on the current document
	   * @param {Element|Object} [doc] An element or document object to use to set the document
	   * @returns {Object} Returns the current document
	   */
			setDocument = Sizzle.setDocument = function (node) {
				var hasCompare,
				    parent,
				    doc = node ? node.ownerDocument || node : preferredDoc;

				// Return early if doc is invalid or already selected
				if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
					return document;
				}

				// Update global variables
				document = doc;
				docElem = document.documentElement;
				documentIsHTML = !isXML(document);

				// Support: IE 9-11, Edge
				// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
				if ((parent = document.defaultView) && parent.top !== parent) {
					// Support: IE 11
					if (parent.addEventListener) {
						parent.addEventListener("unload", unloadHandler, false);

						// Support: IE 9 - 10 only
					} else if (parent.attachEvent) {
						parent.attachEvent("onunload", unloadHandler);
					}
				}

				/* Attributes
	   ---------------------------------------------------------------------- */

				// Support: IE<8
				// Verify that getAttribute really returns attributes and not properties
				// (excepting IE8 booleans)
				support.attributes = assert(function (div) {
					div.className = "i";
					return !div.getAttribute("className");
				});

				/* getElement(s)By*
	   ---------------------------------------------------------------------- */

				// Check if getElementsByTagName("*") returns only elements
				support.getElementsByTagName = assert(function (div) {
					div.appendChild(document.createComment(""));
					return !div.getElementsByTagName("*").length;
				});

				// Support: IE<9
				support.getElementsByClassName = rnative.test(document.getElementsByClassName);

				// Support: IE<10
				// Check if getElementById returns elements by name
				// The broken getElementById methods don't pick up programatically-set names,
				// so use a roundabout getElementsByName test
				support.getById = assert(function (div) {
					docElem.appendChild(div).id = expando;
					return !document.getElementsByName || !document.getElementsByName(expando).length;
				});

				// ID find and filter
				if (support.getById) {
					Expr.find["ID"] = function (id, context) {
						if (typeof context.getElementById !== "undefined" && documentIsHTML) {
							var m = context.getElementById(id);
							return m ? [m] : [];
						}
					};
					Expr.filter["ID"] = function (id) {
						var attrId = id.replace(runescape, funescape);
						return function (elem) {
							return elem.getAttribute("id") === attrId;
						};
					};
				} else {
					// Support: IE6/7
					// getElementById is not reliable as a find shortcut
					delete Expr.find["ID"];

					Expr.filter["ID"] = function (id) {
						var attrId = id.replace(runescape, funescape);
						return function (elem) {
							var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
							return node && node.value === attrId;
						};
					};
				}

				// Tag
				Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
					if (typeof context.getElementsByTagName !== "undefined") {
						return context.getElementsByTagName(tag);

						// DocumentFragment nodes don't have gEBTN
					} else if (support.qsa) {
						return context.querySelectorAll(tag);
					}
				} : function (tag, context) {
					var elem,
					    tmp = [],
					    i = 0,

					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName(tag);

					// Filter out possible comments
					if (tag === "*") {
						while (elem = results[i++]) {
							if (elem.nodeType === 1) {
								tmp.push(elem);
							}
						}

						return tmp;
					}
					return results;
				};

				// Class
				Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
					if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
						return context.getElementsByClassName(className);
					}
				};

				/* QSA/matchesSelector
	   ---------------------------------------------------------------------- */

				// QSA and matchesSelector support

				// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
				rbuggyMatches = [];

				// qSa(:focus) reports false when true (Chrome 21)
				// We allow this because of a bug in IE8/9 that throws an error
				// whenever `document.activeElement` is accessed on an iframe
				// So, we allow :focus to pass through QSA all the time to avoid the IE error
				// See http://bugs.jquery.com/ticket/13378
				rbuggyQSA = [];

				if (support.qsa = rnative.test(document.querySelectorAll)) {
					// Build QSA regex
					// Regex strategy adopted from Diego Perini
					assert(function (div) {
						// Select is set to empty string on purpose
						// This is to test IE's treatment of not explicitly
						// setting a boolean content attribute,
						// since its presence should be enough
						// http://bugs.jquery.com/ticket/12359
						docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

						// Support: IE8, Opera 11-12.16
						// Nothing should be selected when empty strings follow ^= or $= or *=
						// The test attribute must be unknown in Opera but "safe" for WinRT
						// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
						if (div.querySelectorAll("[msallowcapture^='']").length) {
							rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
						}

						// Support: IE8
						// Boolean attributes and "value" are not treated correctly
						if (!div.querySelectorAll("[selected]").length) {
							rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
						}

						// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
						if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
							rbuggyQSA.push("~=");
						}

						// Webkit/Opera - :checked should return selected option elements
						// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
						// IE8 throws error here and will not see later tests
						if (!div.querySelectorAll(":checked").length) {
							rbuggyQSA.push(":checked");
						}

						// Support: Safari 8+, iOS 8+
						// https://bugs.webkit.org/show_bug.cgi?id=136851
						// In-page `selector#id sibing-combinator selector` fails
						if (!div.querySelectorAll("a#" + expando + "+*").length) {
							rbuggyQSA.push(".#.+[+~]");
						}
					});

					assert(function (div) {
						// Support: Windows 8 Native Apps
						// The type and name attributes are restricted during .innerHTML assignment
						var input = document.createElement("input");
						input.setAttribute("type", "hidden");
						div.appendChild(input).setAttribute("name", "D");

						// Support: IE8
						// Enforce case-sensitivity of name attribute
						if (div.querySelectorAll("[name=d]").length) {
							rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
						}

						// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
						// IE8 throws error here and will not see later tests
						if (!div.querySelectorAll(":enabled").length) {
							rbuggyQSA.push(":enabled", ":disabled");
						}

						// Opera 10-11 does not throw on post-comma invalid pseudos
						div.querySelectorAll("*,:x");
						rbuggyQSA.push(",.*:");
					});
				}

				if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

					assert(function (div) {
						// Check to see if it's possible to do matchesSelector
						// on a disconnected node (IE 9)
						support.disconnectedMatch = matches.call(div, "div");

						// This should fail with an exception
						// Gecko does not error, returns false instead
						matches.call(div, "[s!='']:x");
						rbuggyMatches.push("!=", pseudos);
					});
				}

				rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
				rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

				/* Contains
	   ---------------------------------------------------------------------- */
				hasCompare = rnative.test(docElem.compareDocumentPosition);

				// Element contains another
				// Purposefully self-exclusive
				// As in, an element does not contain itself
				contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
					var adown = a.nodeType === 9 ? a.documentElement : a,
					    bup = b && b.parentNode;
					return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
				} : function (a, b) {
					if (b) {
						while (b = b.parentNode) {
							if (b === a) {
								return true;
							}
						}
					}
					return false;
				};

				/* Sorting
	   ---------------------------------------------------------------------- */

				// Document order sorting
				sortOrder = hasCompare ? function (a, b) {

					// Flag for duplicate removal
					if (a === b) {
						hasDuplicate = true;
						return 0;
					}

					// Sort on method existence if only one input has compareDocumentPosition
					var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
					if (compare) {
						return compare;
					}

					// Calculate position if both inputs belong to the same document
					compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

					// Otherwise we know they are disconnected
					1;

					// Disconnected nodes
					if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

						// Choose the first element that is related to our preferred document
						if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
							return -1;
						}
						if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
							return 1;
						}

						// Maintain original order
						return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
					}

					return compare & 4 ? -1 : 1;
				} : function (a, b) {
					// Exit early if the nodes are identical
					if (a === b) {
						hasDuplicate = true;
						return 0;
					}

					var cur,
					    i = 0,
					    aup = a.parentNode,
					    bup = b.parentNode,
					    ap = [a],
					    bp = [b];

					// Parentless nodes are either documents or disconnected
					if (!aup || !bup) {
						return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

						// If the nodes are siblings, we can do a quick check
					} else if (aup === bup) {
						return siblingCheck(a, b);
					}

					// Otherwise we need full lists of their ancestors for comparison
					cur = a;
					while (cur = cur.parentNode) {
						ap.unshift(cur);
					}
					cur = b;
					while (cur = cur.parentNode) {
						bp.unshift(cur);
					}

					// Walk down the tree looking for a discrepancy
					while (ap[i] === bp[i]) {
						i++;
					}

					return i ?
					// Do a sibling check if the nodes have a common ancestor
					siblingCheck(ap[i], bp[i]) :

					// Otherwise nodes in our document sort first
					ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
				};

				return document;
			};

			Sizzle.matches = function (expr, elements) {
				return Sizzle(expr, null, null, elements);
			};

			Sizzle.matchesSelector = function (elem, expr) {
				// Set document vars if needed
				if ((elem.ownerDocument || elem) !== document) {
					setDocument(elem);
				}

				// Make sure that attribute selectors are quoted
				expr = expr.replace(rattributeQuotes, "='$1']");

				if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

					try {
						var ret = matches.call(elem, expr);

						// IE 9's matchesSelector returns false on disconnected nodes
						if (ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11) {
							return ret;
						}
					} catch (e) {}
				}

				return Sizzle(expr, document, null, [elem]).length > 0;
			};

			Sizzle.contains = function (context, elem) {
				// Set document vars if needed
				if ((context.ownerDocument || context) !== document) {
					setDocument(context);
				}
				return contains(context, elem);
			};

			Sizzle.attr = function (elem, name) {
				// Set document vars if needed
				if ((elem.ownerDocument || elem) !== document) {
					setDocument(elem);
				}

				var fn = Expr.attrHandle[name.toLowerCase()],

				// Don't get fooled by Object.prototype properties (jQuery #13807)
				val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

				return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
			};

			Sizzle.error = function (msg) {
				throw new Error("Syntax error, unrecognized expression: " + msg);
			};

			/**
	   * Document sorting and removing duplicates
	   * @param {ArrayLike} results
	   */
			Sizzle.uniqueSort = function (results) {
				var elem,
				    duplicates = [],
				    j = 0,
				    i = 0;

				// Unless we *know* we can detect duplicates, assume their presence
				hasDuplicate = !support.detectDuplicates;
				sortInput = !support.sortStable && results.slice(0);
				results.sort(sortOrder);

				if (hasDuplicate) {
					while (elem = results[i++]) {
						if (elem === results[i]) {
							j = duplicates.push(i);
						}
					}
					while (j--) {
						results.splice(duplicates[j], 1);
					}
				}

				// Clear input after sorting to release objects
				// See https://github.com/jquery/sizzle/pull/225
				sortInput = null;

				return results;
			};

			/**
	   * Utility function for retrieving the text value of an array of DOM nodes
	   * @param {Array|Element} elem
	   */
			getText = Sizzle.getText = function (elem) {
				var node,
				    ret = "",
				    i = 0,
				    nodeType = elem.nodeType;

				if (!nodeType) {
					// If no nodeType, this is expected to be an array
					while (node = elem[i++]) {
						// Do not traverse comment nodes
						ret += getText(node);
					}
				} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
					// Use textContent for elements
					// innerText usage removed for consistency of new lines (jQuery #11153)
					if (typeof elem.textContent === "string") {
						return elem.textContent;
					} else {
						// Traverse its children
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							ret += getText(elem);
						}
					}
				} else if (nodeType === 3 || nodeType === 4) {
					return elem.nodeValue;
				}
				// Do not include comment or processing instruction nodes

				return ret;
			};

			Expr = Sizzle.selectors = {

				// Can be adjusted by the user
				cacheLength: 50,

				createPseudo: markFunction,

				match: matchExpr,

				attrHandle: {},

				find: {},

				relative: {
					">": { dir: "parentNode", first: true },
					" ": { dir: "parentNode" },
					"+": { dir: "previousSibling", first: true },
					"~": { dir: "previousSibling" }
				},

				preFilter: {
					"ATTR": function ATTR(match) {
						match[1] = match[1].replace(runescape, funescape);

						// Move the given value to match[3] whether quoted or unquoted
						match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

						if (match[2] === "~=") {
							match[3] = " " + match[3] + " ";
						}

						return match.slice(0, 4);
					},

					"CHILD": function CHILD(match) {
						/* matches from matchExpr["CHILD"]
	     	1 type (only|nth|...)
	     	2 what (child|of-type)
	     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
	     	4 xn-component of xn+y argument ([+-]?\d*n|)
	     	5 sign of xn-component
	     	6 x of xn-component
	     	7 sign of y-component
	     	8 y of y-component
	     */
						match[1] = match[1].toLowerCase();

						if (match[1].slice(0, 3) === "nth") {
							// nth-* requires argument
							if (!match[3]) {
								Sizzle.error(match[0]);
							}

							// numeric x and y parameters for Expr.filter.CHILD
							// remember that false/true cast respectively to 0/1
							match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
							match[5] = +(match[7] + match[8] || match[3] === "odd");

							// other types prohibit arguments
						} else if (match[3]) {
							Sizzle.error(match[0]);
						}

						return match;
					},

					"PSEUDO": function PSEUDO(match) {
						var excess,
						    unquoted = !match[6] && match[2];

						if (matchExpr["CHILD"].test(match[0])) {
							return null;
						}

						// Accept quoted arguments as-is
						if (match[3]) {
							match[2] = match[4] || match[5] || "";

							// Strip excess characters from unquoted arguments
						} else if (unquoted && rpseudo.test(unquoted) && (
						// Get excess from tokenize (recursively)
						excess = tokenize(unquoted, true)) && (
						// advance to the next closing parenthesis
						excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

							// excess is a negative index
							match[0] = match[0].slice(0, excess);
							match[2] = unquoted.slice(0, excess);
						}

						// Return only captures needed by the pseudo filter method (type and argument)
						return match.slice(0, 3);
					}
				},

				filter: {

					"TAG": function TAG(nodeNameSelector) {
						var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
						return nodeNameSelector === "*" ? function () {
							return true;
						} : function (elem) {
							return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
						};
					},

					"CLASS": function CLASS(className) {
						var pattern = classCache[className + " "];

						return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
							return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
						});
					},

					"ATTR": function ATTR(name, operator, check) {
						return function (elem) {
							var result = Sizzle.attr(elem, name);

							if (result == null) {
								return operator === "!=";
							}
							if (!operator) {
								return true;
							}

							result += "";

							return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
						};
					},

					"CHILD": function CHILD(type, what, argument, first, last) {
						var simple = type.slice(0, 3) !== "nth",
						    forward = type.slice(-4) !== "last",
						    ofType = what === "of-type";

						return first === 1 && last === 0 ?

						// Shortcut for :nth-*(n)
						function (elem) {
							return !!elem.parentNode;
						} : function (elem, context, xml) {
							var cache,
							    uniqueCache,
							    outerCache,
							    node,
							    nodeIndex,
							    start,
							    dir = simple !== forward ? "nextSibling" : "previousSibling",
							    parent = elem.parentNode,
							    name = ofType && elem.nodeName.toLowerCase(),
							    useCache = !xml && !ofType,
							    diff = false;

							if (parent) {

								// :(first|last|only)-(child|of-type)
								if (simple) {
									while (dir) {
										node = elem;
										while (node = node[dir]) {
											if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

												return false;
											}
										}
										// Reverse direction for :only-* (if we haven't yet done so)
										start = dir = type === "only" && !start && "nextSibling";
									}
									return true;
								}

								start = [forward ? parent.firstChild : parent.lastChild];

								// non-xml :nth-child(...) stores cache data on `parent`
								if (forward && useCache) {

									// Seek `elem` from a previously-cached index

									// ...in a gzip-friendly way
									node = parent;
									outerCache = node[expando] || (node[expando] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

									cache = uniqueCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = nodeIndex && cache[2];
									node = nodeIndex && parent.childNodes[nodeIndex];

									while (node = ++nodeIndex && node && node[dir] || (

									// Fallback to seeking `elem` from the start
									diff = nodeIndex = 0) || start.pop()) {

										// When found, cache indexes on `parent` and break
										if (node.nodeType === 1 && ++diff && node === elem) {
											uniqueCache[type] = [dirruns, nodeIndex, diff];
											break;
										}
									}
								} else {
									// Use previously-cached element index if available
									if (useCache) {
										// ...in a gzip-friendly way
										node = elem;
										outerCache = node[expando] || (node[expando] = {});

										// Support: IE <9 only
										// Defend against cloned attroperties (jQuery gh-1709)
										uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

										cache = uniqueCache[type] || [];
										nodeIndex = cache[0] === dirruns && cache[1];
										diff = nodeIndex;
									}

									// xml :nth-child(...)
									// or :nth-last-child(...) or :nth(-last)?-of-type(...)
									if (diff === false) {
										// Use the same loop as above to seek `elem` from the start
										while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

											if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

												// Cache the index of each encountered element
												if (useCache) {
													outerCache = node[expando] || (node[expando] = {});

													// Support: IE <9 only
													// Defend against cloned attroperties (jQuery gh-1709)
													uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

													uniqueCache[type] = [dirruns, diff];
												}

												if (node === elem) {
													break;
												}
											}
										}
									}
								}

								// Incorporate the offset, then check against cycle size
								diff -= last;
								return diff === first || diff % first === 0 && diff / first >= 0;
							}
						};
					},

					"PSEUDO": function PSEUDO(pseudo, argument) {
						// pseudo-class names are case-insensitive
						// http://www.w3.org/TR/selectors/#pseudo-classes
						// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
						// Remember that setFilters inherits from pseudos
						var args,
						    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

						// The user may use createPseudo to indicate that
						// arguments are needed to create the filter function
						// just as Sizzle does
						if (fn[expando]) {
							return fn(argument);
						}

						// But maintain support for old signatures
						if (fn.length > 1) {
							args = [pseudo, pseudo, "", argument];
							return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
								var idx,
								    matched = fn(seed, argument),
								    i = matched.length;
								while (i--) {
									idx = indexOf(seed, matched[i]);
									seed[idx] = !(matches[idx] = matched[i]);
								}
							}) : function (elem) {
								return fn(elem, 0, args);
							};
						}

						return fn;
					}
				},

				pseudos: {
					// Potentially complex pseudos
					"not": markFunction(function (selector) {
						// Trim the selector passed to compile
						// to avoid treating leading and trailing
						// spaces as combinators
						var input = [],
						    results = [],
						    matcher = compile(selector.replace(rtrim, "$1"));

						return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
							var elem,
							    unmatched = matcher(seed, null, xml, []),
							    i = seed.length;

							// Match elements unmatched by `matcher`
							while (i--) {
								if (elem = unmatched[i]) {
									seed[i] = !(matches[i] = elem);
								}
							}
						}) : function (elem, context, xml) {
							input[0] = elem;
							matcher(input, null, xml, results);
							// Don't keep the element (issue #299)
							input[0] = null;
							return !results.pop();
						};
					}),

					"has": markFunction(function (selector) {
						return function (elem) {
							return Sizzle(selector, elem).length > 0;
						};
					}),

					"contains": markFunction(function (text) {
						text = text.replace(runescape, funescape);
						return function (elem) {
							return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
						};
					}),

					// "Whether an element is represented by a :lang() selector
					// is based solely on the element's language value
					// being equal to the identifier C,
					// or beginning with the identifier C immediately followed by "-".
					// The matching of C against the element's language value is performed case-insensitively.
					// The identifier C does not have to be a valid language name."
					// http://www.w3.org/TR/selectors/#lang-pseudo
					"lang": markFunction(function (lang) {
						// lang value must be a valid identifier
						if (!ridentifier.test(lang || "")) {
							Sizzle.error("unsupported lang: " + lang);
						}
						lang = lang.replace(runescape, funescape).toLowerCase();
						return function (elem) {
							var elemLang;
							do {
								if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

									elemLang = elemLang.toLowerCase();
									return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
								}
							} while ((elem = elem.parentNode) && elem.nodeType === 1);
							return false;
						};
					}),

					// Miscellaneous
					"target": function target(elem) {
						var hash = window.location && window.location.hash;
						return hash && hash.slice(1) === elem.id;
					},

					"root": function root(elem) {
						return elem === docElem;
					},

					"focus": function focus(elem) {
						return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
					},

					// Boolean properties
					"enabled": function enabled(elem) {
						return elem.disabled === false;
					},

					"disabled": function disabled(elem) {
						return elem.disabled === true;
					},

					"checked": function checked(elem) {
						// In CSS3, :checked should return both checked and selected elements
						// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
						var nodeName = elem.nodeName.toLowerCase();
						return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
					},

					"selected": function selected(elem) {
						// Accessing this property makes selected-by-default
						// options in Safari work properly
						if (elem.parentNode) {
							elem.parentNode.selectedIndex;
						}

						return elem.selected === true;
					},

					// Contents
					"empty": function empty(elem) {
						// http://www.w3.org/TR/selectors/#empty-pseudo
						// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
						//   but not by others (comment: 8; processing instruction: 7; etc.)
						// nodeType < 6 works because attributes (2) do not appear as children
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							if (elem.nodeType < 6) {
								return false;
							}
						}
						return true;
					},

					"parent": function parent(elem) {
						return !Expr.pseudos["empty"](elem);
					},

					// Element/input types
					"header": function header(elem) {
						return rheader.test(elem.nodeName);
					},

					"input": function input(elem) {
						return rinputs.test(elem.nodeName);
					},

					"button": function button(elem) {
						var name = elem.nodeName.toLowerCase();
						return name === "input" && elem.type === "button" || name === "button";
					},

					"text": function text(elem) {
						var attr;
						return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

						// Support: IE<8
						// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
						(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
					},

					// Position-in-collection
					"first": createPositionalPseudo(function () {
						return [0];
					}),

					"last": createPositionalPseudo(function (matchIndexes, length) {
						return [length - 1];
					}),

					"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
						return [argument < 0 ? argument + length : argument];
					}),

					"even": createPositionalPseudo(function (matchIndexes, length) {
						var i = 0;
						for (; i < length; i += 2) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"odd": createPositionalPseudo(function (matchIndexes, length) {
						var i = 1;
						for (; i < length; i += 2) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
						var i = argument < 0 ? argument + length : argument;
						for (; --i >= 0;) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
						var i = argument < 0 ? argument + length : argument;
						for (; ++i < length;) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					})
				}
			};

			Expr.pseudos["nth"] = Expr.pseudos["eq"];

			// Add button/input type pseudos
			for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
				Expr.pseudos[i] = createInputPseudo(i);
			}
			for (i in { submit: true, reset: true }) {
				Expr.pseudos[i] = createButtonPseudo(i);
			}

			// Easy API for creating new setFilters
			function setFilters() {}
			setFilters.prototype = Expr.filters = Expr.pseudos;
			Expr.setFilters = new setFilters();

			tokenize = Sizzle.tokenize = function (selector, parseOnly) {
				var matched,
				    match,
				    tokens,
				    type,
				    soFar,
				    groups,
				    preFilters,
				    cached = tokenCache[selector + " "];

				if (cached) {
					return parseOnly ? 0 : cached.slice(0);
				}

				soFar = selector;
				groups = [];
				preFilters = Expr.preFilter;

				while (soFar) {

					// Comma and first run
					if (!matched || (match = rcomma.exec(soFar))) {
						if (match) {
							// Don't consume trailing commas as valid
							soFar = soFar.slice(match[0].length) || soFar;
						}
						groups.push(tokens = []);
					}

					matched = false;

					// Combinators
					if (match = rcombinators.exec(soFar)) {
						matched = match.shift();
						tokens.push({
							value: matched,
							// Cast descendant combinators to space
							type: match[0].replace(rtrim, " ")
						});
						soFar = soFar.slice(matched.length);
					}

					// Filters
					for (type in Expr.filter) {
						if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
							matched = match.shift();
							tokens.push({
								value: matched,
								type: type,
								matches: match
							});
							soFar = soFar.slice(matched.length);
						}
					}

					if (!matched) {
						break;
					}
				}

				// Return the length of the invalid excess
				// if we're just parsing
				// Otherwise, throw an error or return tokens
				return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
				// Cache the tokens
				tokenCache(selector, groups).slice(0);
			};

			function toSelector(tokens) {
				var i = 0,
				    len = tokens.length,
				    selector = "";
				for (; i < len; i++) {
					selector += tokens[i].value;
				}
				return selector;
			}

			function addCombinator(matcher, combinator, base) {
				var dir = combinator.dir,
				    checkNonElements = base && dir === "parentNode",
				    doneName = done++;

				return combinator.first ?
				// Check against closest ancestor/preceding element
				function (elem, context, xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							return matcher(elem, context, xml);
						}
					}
				} :

				// Check against all ancestor/preceding elements
				function (elem, context, xml) {
					var oldCache,
					    uniqueCache,
					    outerCache,
					    newCache = [dirruns, doneName];

					// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
					if (xml) {
						while (elem = elem[dir]) {
							if (elem.nodeType === 1 || checkNonElements) {
								if (matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					} else {
						while (elem = elem[dir]) {
							if (elem.nodeType === 1 || checkNonElements) {
								outerCache = elem[expando] || (elem[expando] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

								if ((oldCache = uniqueCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

									// Assign to newCache so results back-propagate to previous elements
									return newCache[2] = oldCache[2];
								} else {
									// Reuse newcache so results back-propagate to previous elements
									uniqueCache[dir] = newCache;

									// A match means we're done; a fail means we have to keep checking
									if (newCache[2] = matcher(elem, context, xml)) {
										return true;
									}
								}
							}
						}
					}
				};
			}

			function elementMatcher(matchers) {
				return matchers.length > 1 ? function (elem, context, xml) {
					var i = matchers.length;
					while (i--) {
						if (!matchers[i](elem, context, xml)) {
							return false;
						}
					}
					return true;
				} : matchers[0];
			}

			function multipleContexts(selector, contexts, results) {
				var i = 0,
				    len = contexts.length;
				for (; i < len; i++) {
					Sizzle(selector, contexts[i], results);
				}
				return results;
			}

			function condense(unmatched, map, filter, context, xml) {
				var elem,
				    newUnmatched = [],
				    i = 0,
				    len = unmatched.length,
				    mapped = map != null;

				for (; i < len; i++) {
					if (elem = unmatched[i]) {
						if (!filter || filter(elem, context, xml)) {
							newUnmatched.push(elem);
							if (mapped) {
								map.push(i);
							}
						}
					}
				}

				return newUnmatched;
			}

			function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
				if (postFilter && !postFilter[expando]) {
					postFilter = setMatcher(postFilter);
				}
				if (postFinder && !postFinder[expando]) {
					postFinder = setMatcher(postFinder, postSelector);
				}
				return markFunction(function (seed, results, context, xml) {
					var temp,
					    i,
					    elem,
					    preMap = [],
					    postMap = [],
					    preexisting = results.length,


					// Get initial elements from seed or context
					elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


					// Prefilter to get matcher input, preserving a map for seed-results synchronization
					matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
					    matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || (seed ? preFilter : preexisting || postFilter) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results : matcherIn;

					// Find primary matches
					if (matcher) {
						matcher(matcherIn, matcherOut, context, xml);
					}

					// Apply postFilter
					if (postFilter) {
						temp = condense(matcherOut, postMap);
						postFilter(temp, [], context, xml);

						// Un-match failing elements by moving them back to matcherIn
						i = temp.length;
						while (i--) {
							if (elem = temp[i]) {
								matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
							}
						}
					}

					if (seed) {
						if (postFinder || preFilter) {
							if (postFinder) {
								// Get the final matcherOut by condensing this intermediate into postFinder contexts
								temp = [];
								i = matcherOut.length;
								while (i--) {
									if (elem = matcherOut[i]) {
										// Restore matcherIn since elem is not yet a final match
										temp.push(matcherIn[i] = elem);
									}
								}
								postFinder(null, matcherOut = [], temp, xml);
							}

							// Move matched elements from seed to results to keep them synchronized
							i = matcherOut.length;
							while (i--) {
								if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

									seed[temp] = !(results[temp] = elem);
								}
							}
						}

						// Add elements to results, through postFinder if defined
					} else {
						matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
						if (postFinder) {
							postFinder(null, results, matcherOut, xml);
						} else {
							push.apply(results, matcherOut);
						}
					}
				});
			}

			function matcherFromTokens(tokens) {
				var checkContext,
				    matcher,
				    j,
				    len = tokens.length,
				    leadingRelative = Expr.relative[tokens[0].type],
				    implicitRelative = leadingRelative || Expr.relative[" "],
				    i = leadingRelative ? 1 : 0,


				// The foundational matcher ensures that elements are reachable from top-level context(s)
				matchContext = addCombinator(function (elem) {
					return elem === checkContext;
				}, implicitRelative, true),
				    matchAnyContext = addCombinator(function (elem) {
					return indexOf(checkContext, elem) > -1;
				}, implicitRelative, true),
				    matchers = [function (elem, context, xml) {
					var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
					// Avoid hanging onto element (issue #299)
					checkContext = null;
					return ret;
				}];

				for (; i < len; i++) {
					if (matcher = Expr.relative[tokens[i].type]) {
						matchers = [addCombinator(elementMatcher(matchers), matcher)];
					} else {
						matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

						// Return special upon seeing a positional matcher
						if (matcher[expando]) {
							// Find the next relative operator (if any) for proper handling
							j = ++i;
							for (; j < len; j++) {
								if (Expr.relative[tokens[j].type]) {
									break;
								}
							}
							return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
						}
						matchers.push(matcher);
					}
				}

				return elementMatcher(matchers);
			}

			function matcherFromGroupMatchers(elementMatchers, setMatchers) {
				var bySet = setMatchers.length > 0,
				    byElement = elementMatchers.length > 0,
				    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
					var elem,
					    j,
					    matcher,
					    matchedCount = 0,
					    i = "0",
					    unmatched = seed && [],
					    setMatched = [],
					    contextBackup = outermostContext,

					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]("*", outermost),

					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
					    len = elems.length;

					if (outermost) {
						outermostContext = context === document || context || outermost;
					}

					// Add elements passing elementMatchers directly to results
					// Support: IE<9, Safari
					// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
					for (; i !== len && (elem = elems[i]) != null; i++) {
						if (byElement && elem) {
							j = 0;
							if (!context && elem.ownerDocument !== document) {
								setDocument(elem);
								xml = !documentIsHTML;
							}
							while (matcher = elementMatchers[j++]) {
								if (matcher(elem, context || document, xml)) {
									results.push(elem);
									break;
								}
							}
							if (outermost) {
								dirruns = dirrunsUnique;
							}
						}

						// Track unmatched elements for set filters
						if (bySet) {
							// They will have gone through all possible matchers
							if (elem = !matcher && elem) {
								matchedCount--;
							}

							// Lengthen the array for every element, matched or not
							if (seed) {
								unmatched.push(elem);
							}
						}
					}

					// `i` is now the count of elements visited above, and adding it to `matchedCount`
					// makes the latter nonnegative.
					matchedCount += i;

					// Apply set filters to unmatched elements
					// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
					// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
					// no element matchers and no seed.
					// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
					// case, which will result in a "00" `matchedCount` that differs from `i` but is also
					// numerically zero.
					if (bySet && i !== matchedCount) {
						j = 0;
						while (matcher = setMatchers[j++]) {
							matcher(unmatched, setMatched, context, xml);
						}

						if (seed) {
							// Reintegrate element matches to eliminate the need for sorting
							if (matchedCount > 0) {
								while (i--) {
									if (!(unmatched[i] || setMatched[i])) {
										setMatched[i] = pop.call(results);
									}
								}
							}

							// Discard index placeholder values to get only actual matches
							setMatched = condense(setMatched);
						}

						// Add matches to results
						push.apply(results, setMatched);

						// Seedless set matches succeeding multiple successful matchers stipulate sorting
						if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

							Sizzle.uniqueSort(results);
						}
					}

					// Override manipulation of globals by nested matchers
					if (outermost) {
						dirruns = dirrunsUnique;
						outermostContext = contextBackup;
					}

					return unmatched;
				};

				return bySet ? markFunction(superMatcher) : superMatcher;
			}

			compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
				var i,
				    setMatchers = [],
				    elementMatchers = [],
				    cached = compilerCache[selector + " "];

				if (!cached) {
					// Generate a function of recursive functions that can be used to check each element
					if (!match) {
						match = tokenize(selector);
					}
					i = match.length;
					while (i--) {
						cached = matcherFromTokens(match[i]);
						if (cached[expando]) {
							setMatchers.push(cached);
						} else {
							elementMatchers.push(cached);
						}
					}

					// Cache the compiled function
					cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

					// Save selector and tokenization
					cached.selector = selector;
				}
				return cached;
			};

			/**
	   * A low-level selection function that works with Sizzle's compiled
	   *  selector functions
	   * @param {String|Function} selector A selector or a pre-compiled
	   *  selector function built with Sizzle.compile
	   * @param {Element} context
	   * @param {Array} [results]
	   * @param {Array} [seed] A set of elements to match against
	   */
			select = Sizzle.select = function (selector, context, results, seed) {
				var i,
				    tokens,
				    token,
				    type,
				    find,
				    compiled = typeof selector === "function" && selector,
				    match = !seed && tokenize(selector = compiled.selector || selector);

				results = results || [];

				// Try to minimize operations if there is only one selector in the list and no seed
				// (the latter of which guarantees us context)
				if (match.length === 1) {

					// Reduce context if the leading compound selector is an ID
					tokens = match[0] = match[0].slice(0);
					if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

						context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
						if (!context) {
							return results;

							// Precompiled matchers will still verify ancestry, so step up a level
						} else if (compiled) {
							context = context.parentNode;
						}

						selector = selector.slice(tokens.shift().value.length);
					}

					// Fetch a seed set for right-to-left matching
					i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
					while (i--) {
						token = tokens[i];

						// Abort if we hit a combinator
						if (Expr.relative[type = token.type]) {
							break;
						}
						if (find = Expr.find[type]) {
							// Search, expanding context for leading sibling combinators
							if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

								// If seed is empty or no tokens remain, we can return early
								tokens.splice(i, 1);
								selector = seed.length && toSelector(tokens);
								if (!selector) {
									push.apply(results, seed);
									return results;
								}

								break;
							}
						}
					}
				}

				// Compile and execute a filtering function if one is not provided
				// Provide `match` to avoid retokenization if we modified the selector above
				(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
				return results;
			};

			// One-time assignments

			// Sort stability
			support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

			// Support: Chrome 14-35+
			// Always assume duplicates if they aren't passed to the comparison function
			support.detectDuplicates = !!hasDuplicate;

			// Initialize against the default document
			setDocument();

			// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
			// Detached nodes confoundingly follow *each other*
			support.sortDetached = assert(function (div1) {
				// Should return 1, but returns 4 (following)
				return div1.compareDocumentPosition(document.createElement("div")) & 1;
			});

			// Support: IE<8
			// Prevent attribute/property "interpolation"
			// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
			if (!assert(function (div) {
				div.innerHTML = "<a href='#'></a>";
				return div.firstChild.getAttribute("href") === "#";
			})) {
				addHandle("type|href|height|width", function (elem, name, isXML) {
					if (!isXML) {
						return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
					}
				});
			}

			// Support: IE<9
			// Use defaultValue in place of getAttribute("value")
			if (!support.attributes || !assert(function (div) {
				div.innerHTML = "<input/>";
				div.firstChild.setAttribute("value", "");
				return div.firstChild.getAttribute("value") === "";
			})) {
				addHandle("value", function (elem, name, isXML) {
					if (!isXML && elem.nodeName.toLowerCase() === "input") {
						return elem.defaultValue;
					}
				});
			}

			// Support: IE<9
			// Use getAttributeNode to fetch booleans when getAttribute lies
			if (!assert(function (div) {
				return div.getAttribute("disabled") == null;
			})) {
				addHandle(booleans, function (elem, name, isXML) {
					var val;
					if (!isXML) {
						return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
					}
				});
			}

			return Sizzle;
		}(window);

		jQuery.find = Sizzle;
		jQuery.expr = Sizzle.selectors;
		jQuery.expr[":"] = jQuery.expr.pseudos;
		jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
		jQuery.text = Sizzle.getText;
		jQuery.isXMLDoc = Sizzle.isXML;
		jQuery.contains = Sizzle.contains;

		var dir = function dir(elem, _dir, until) {
			var matched = [],
			    truncate = until !== undefined;

			while ((elem = elem[_dir]) && elem.nodeType !== 9) {
				if (elem.nodeType === 1) {
					if (truncate && jQuery(elem).is(until)) {
						break;
					}
					matched.push(elem);
				}
			}
			return matched;
		};

		var _siblings = function _siblings(n, elem) {
			var matched = [];

			for (; n; n = n.nextSibling) {
				if (n.nodeType === 1 && n !== elem) {
					matched.push(n);
				}
			}

			return matched;
		};

		var rneedsContext = jQuery.expr.match.needsContext;

		var rsingleTag = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;

		var risSimple = /^.[^:#\[\.,]*$/;

		// Implement the identical functionality for filter and not
		function winnow(elements, qualifier, not) {
			if (jQuery.isFunction(qualifier)) {
				return jQuery.grep(elements, function (elem, i) {
					/* jshint -W018 */
					return !!qualifier.call(elem, i, elem) !== not;
				});
			}

			if (qualifier.nodeType) {
				return jQuery.grep(elements, function (elem) {
					return elem === qualifier !== not;
				});
			}

			if (typeof qualifier === "string") {
				if (risSimple.test(qualifier)) {
					return jQuery.filter(qualifier, elements, not);
				}

				qualifier = jQuery.filter(qualifier, elements);
			}

			return jQuery.grep(elements, function (elem) {
				return indexOf.call(qualifier, elem) > -1 !== not;
			});
		}

		jQuery.filter = function (expr, elems, not) {
			var elem = elems[0];

			if (not) {
				expr = ":not(" + expr + ")";
			}

			return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
				return elem.nodeType === 1;
			}));
		};

		jQuery.fn.extend({
			find: function find(selector) {
				var i,
				    len = this.length,
				    ret = [],
				    self = this;

				if (typeof selector !== "string") {
					return this.pushStack(jQuery(selector).filter(function () {
						for (i = 0; i < len; i++) {
							if (jQuery.contains(self[i], this)) {
								return true;
							}
						}
					}));
				}

				for (i = 0; i < len; i++) {
					jQuery.find(selector, self[i], ret);
				}

				// Needed because $( selector, context ) becomes $( context ).find( selector )
				ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
				ret.selector = this.selector ? this.selector + " " + selector : selector;
				return ret;
			},
			filter: function filter(selector) {
				return this.pushStack(winnow(this, selector || [], false));
			},
			not: function not(selector) {
				return this.pushStack(winnow(this, selector || [], true));
			},
			is: function is(selector) {
				return !!winnow(this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
			}
		});

		// Initialize a jQuery object


		// A central reference to the root jQuery(document)
		var rootjQuery,


		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
		    init = jQuery.fn.init = function (selector, context, root) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if (!selector) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if (typeof selector === "string") {
				if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [null, selector, null];
				} else {
					match = rquickExpr.exec(selector);
				}

				// Match html or make sure no context is specified for #id
				if (match && (match[1] || !context)) {

					// HANDLE: $(html) -> $(array)
					if (match[1]) {
						context = context instanceof jQuery ? context[0] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

						// HANDLE: $(html, props)
						if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
							for (match in context) {

								// Properties of context are called as methods if possible
								if (jQuery.isFunction(this[match])) {
									this[match](context[match]);

									// ...and otherwise set as attributes
								} else {
									this.attr(match, context[match]);
								}
							}
						}

						return this;

						// HANDLE: $(#id)
					} else {
						elem = document.getElementById(match[2]);

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if (elem && elem.parentNode) {

							// Inject the element directly into the jQuery object
							this.length = 1;
							this[0] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

					// HANDLE: $(expr, $(...))
				} else if (!context || context.jquery) {
					return (context || root).find(selector);

					// HANDLE: $(expr, context)
					// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor(context).find(selector);
				}

				// HANDLE: $(DOMElement)
			} else if (selector.nodeType) {
				this.context = this[0] = selector;
				this.length = 1;
				return this;

				// HANDLE: $(function)
				// Shortcut for document ready
			} else if (jQuery.isFunction(selector)) {
				return root.ready !== undefined ? root.ready(selector) :

				// Execute immediately if ready is not present
				selector(jQuery);
			}

			if (selector.selector !== undefined) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray(selector, this);
		};

		// Give the init function the jQuery prototype for later instantiation
		init.prototype = jQuery.fn;

		// Initialize central reference
		rootjQuery = jQuery(document);

		var rparentsprev = /^(?:parents|prev(?:Until|All))/,


		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

		jQuery.fn.extend({
			has: function has(target) {
				var targets = jQuery(target, this),
				    l = targets.length;

				return this.filter(function () {
					var i = 0;
					for (; i < l; i++) {
						if (jQuery.contains(this, targets[i])) {
							return true;
						}
					}
				});
			},

			closest: function closest(selectors, context) {
				var cur,
				    i = 0,
				    l = this.length,
				    matched = [],
				    pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;

				for (; i < l; i++) {
					for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

						// Always skip document fragments
						if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

							matched.push(cur);
							break;
						}
					}
				}

				return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
			},

			// Determine the position of an element within the set
			index: function index(elem) {

				// No argument, return index in parent
				if (!elem) {
					return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
				}

				// Index in selector
				if (typeof elem === "string") {
					return indexOf.call(jQuery(elem), this[0]);
				}

				// Locate the position of the desired element
				return indexOf.call(this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[0] : elem);
			},

			add: function add(selector, context) {
				return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
			},

			addBack: function addBack(selector) {
				return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
			}
		});

		function sibling(cur, dir) {
			while ((cur = cur[dir]) && cur.nodeType !== 1) {}
			return cur;
		}

		jQuery.each({
			parent: function parent(elem) {
				var parent = elem.parentNode;
				return parent && parent.nodeType !== 11 ? parent : null;
			},
			parents: function parents(elem) {
				return dir(elem, "parentNode");
			},
			parentsUntil: function parentsUntil(elem, i, until) {
				return dir(elem, "parentNode", until);
			},
			next: function next(elem) {
				return sibling(elem, "nextSibling");
			},
			prev: function prev(elem) {
				return sibling(elem, "previousSibling");
			},
			nextAll: function nextAll(elem) {
				return dir(elem, "nextSibling");
			},
			prevAll: function prevAll(elem) {
				return dir(elem, "previousSibling");
			},
			nextUntil: function nextUntil(elem, i, until) {
				return dir(elem, "nextSibling", until);
			},
			prevUntil: function prevUntil(elem, i, until) {
				return dir(elem, "previousSibling", until);
			},
			siblings: function siblings(elem) {
				return _siblings((elem.parentNode || {}).firstChild, elem);
			},
			children: function children(elem) {
				return _siblings(elem.firstChild);
			},
			contents: function contents(elem) {
				return elem.contentDocument || jQuery.merge([], elem.childNodes);
			}
		}, function (name, fn) {
			jQuery.fn[name] = function (until, selector) {
				var matched = jQuery.map(this, fn, until);

				if (name.slice(-5) !== "Until") {
					selector = until;
				}

				if (selector && typeof selector === "string") {
					matched = jQuery.filter(selector, matched);
				}

				if (this.length > 1) {

					// Remove duplicates
					if (!guaranteedUnique[name]) {
						jQuery.uniqueSort(matched);
					}

					// Reverse order for parents* and prev-derivatives
					if (rparentsprev.test(name)) {
						matched.reverse();
					}
				}

				return this.pushStack(matched);
			};
		});
		var rnotwhite = /\S+/g;

		// Convert String-formatted options into Object-formatted ones
		function createOptions(options) {
			var object = {};
			jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
				object[flag] = true;
			});
			return object;
		}

		/*
	  * Create a callback list using the following parameters:
	  *
	  *	options: an optional list of space-separated options that will change how
	  *			the callback list behaves or a more traditional option object
	  *
	  * By default a callback list will act like an event callback list and can be
	  * "fired" multiple times.
	  *
	  * Possible options:
	  *
	  *	once:			will ensure the callback list can only be fired once (like a Deferred)
	  *
	  *	memory:			will keep track of previous values and will call any callback added
	  *					after the list has been fired right away with the latest "memorized"
	  *					values (like a Deferred)
	  *
	  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	  *
	  *	stopOnFalse:	interrupt callings when a callback returns false
	  *
	  */
		jQuery.Callbacks = function (options) {

			// Convert options from String-formatted to Object-formatted if needed
			// (we check in cache first)
			options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

			var // Flag to know if list is currently firing
			firing,


			// Last fire value for non-forgettable lists
			memory,


			// Flag to know if list was already fired
			_fired,


			// Flag to prevent firing
			_locked,


			// Actual callback list
			list = [],


			// Queue of execution data for repeatable lists
			queue = [],


			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,


			// Fire callbacks
			fire = function fire() {

				// Enforce single-firing
				_locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				_fired = firing = true;
				for (; queue.length; firingIndex = -1) {
					memory = queue.shift();
					while (++firingIndex < list.length) {

						// Run callback and check for early termination
						if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if (!options.memory) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if (_locked) {

					// Keep an empty list if we have data for future add calls
					if (memory) {
						list = [];

						// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},


			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function add() {
					if (list) {

						// If we have memory from a past run, we should fire after adding
						if (memory && !firing) {
							firingIndex = list.length - 1;
							queue.push(memory);
						}

						(function add(args) {
							jQuery.each(args, function (_, arg) {
								if (jQuery.isFunction(arg)) {
									if (!options.unique || !self.has(arg)) {
										list.push(arg);
									}
								} else if (arg && arg.length && jQuery.type(arg) !== "string") {

									// Inspect recursively
									add(arg);
								}
							});
						})(arguments);

						if (memory && !firing) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function remove() {
					jQuery.each(arguments, function (_, arg) {
						var index;
						while ((index = jQuery.inArray(arg, list, index)) > -1) {
							list.splice(index, 1);

							// Handle firing indexes
							if (index <= firingIndex) {
								firingIndex--;
							}
						}
					});
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function has(fn) {
					return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function empty() {
					if (list) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function disable() {
					_locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function disabled() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function lock() {
					_locked = queue = [];
					if (!memory) {
						list = memory = "";
					}
					return this;
				},
				locked: function locked() {
					return !!_locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function fireWith(context, args) {
					if (!_locked) {
						args = args || [];
						args = [context, args.slice ? args.slice() : args];
						queue.push(args);
						if (!firing) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function fire() {
					self.fireWith(this, arguments);
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function fired() {
					return !!_fired;
				}
			};

			return self;
		};

		jQuery.extend({

			Deferred: function Deferred(func) {
				var tuples = [

				// action, add listener, listener list, final state
				["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
				    _state = "pending",
				    _promise = {
					state: function state() {
						return _state;
					},
					always: function always() {
						deferred.done(arguments).fail(arguments);
						return this;
					},
					then: function then() /* fnDone, fnFail, fnProgress */{
						var fns = arguments;
						return jQuery.Deferred(function (newDefer) {
							jQuery.each(tuples, function (i, tuple) {
								var fn = jQuery.isFunction(fns[i]) && fns[i];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[tuple[1]](function () {
									var returned = fn && fn.apply(this, arguments);
									if (returned && jQuery.isFunction(returned.promise)) {
										returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
									} else {
										newDefer[tuple[0] + "With"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);
									}
								});
							});
							fns = null;
						}).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function promise(obj) {
						return obj != null ? jQuery.extend(obj, _promise) : _promise;
					}
				},
				    deferred = {};

				// Keep pipe for back-compat
				_promise.pipe = _promise.then;

				// Add list-specific methods
				jQuery.each(tuples, function (i, tuple) {
					var list = tuple[2],
					    stateString = tuple[3];

					// promise[ done | fail | progress ] = list.add
					_promise[tuple[1]] = list.add;

					// Handle state
					if (stateString) {
						list.add(function () {

							// state = [ resolved | rejected ]
							_state = stateString;

							// [ reject_list | resolve_list ].disable; progress_list.lock
						}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
					}

					// deferred[ resolve | reject | notify ]
					deferred[tuple[0]] = function () {
						deferred[tuple[0] + "With"](this === deferred ? _promise : this, arguments);
						return this;
					};
					deferred[tuple[0] + "With"] = list.fireWith;
				});

				// Make the deferred a promise
				_promise.promise(deferred);

				// Call given func if any
				if (func) {
					func.call(deferred, deferred);
				}

				// All done!
				return deferred;
			},

			// Deferred helper
			when: function when(subordinate /* , ..., subordinateN */) {
				var i = 0,
				    resolveValues = _slice.call(arguments),
				    length = resolveValues.length,


				// the count of uncompleted subordinates
				remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,


				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),


				// Update function for both resolve and progress values
				updateFunc = function updateFunc(i, contexts, values) {
					return function (value) {
						contexts[i] = this;
						values[i] = arguments.length > 1 ? _slice.call(arguments) : value;
						if (values === progressValues) {
							deferred.notifyWith(contexts, values);
						} else if (! --remaining) {
							deferred.resolveWith(contexts, values);
						}
					};
				},
				    progressValues,
				    progressContexts,
				    resolveContexts;

				// Add listeners to Deferred subordinates; treat others as resolved
				if (length > 1) {
					progressValues = new Array(length);
					progressContexts = new Array(length);
					resolveContexts = new Array(length);
					for (; i < length; i++) {
						if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
							resolveValues[i].promise().progress(updateFunc(i, progressContexts, progressValues)).done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject);
						} else {
							--remaining;
						}
					}
				}

				// If we're not waiting on anything, resolve the master
				if (!remaining) {
					deferred.resolveWith(resolveContexts, resolveValues);
				}

				return deferred.promise();
			}
		});

		// The deferred used on DOM ready
		var readyList;

		jQuery.fn.ready = function (fn) {

			// Add the callback
			jQuery.ready.promise().done(fn);

			return this;
		};

		jQuery.extend({

			// Is the DOM ready to be used? Set to true once it occurs.
			isReady: false,

			// A counter to track how many items to wait for before
			// the ready event fires. See #6781
			readyWait: 1,

			// Hold (or release) the ready event
			holdReady: function holdReady(hold) {
				if (hold) {
					jQuery.readyWait++;
				} else {
					jQuery.ready(true);
				}
			},

			// Handle when the DOM is ready
			ready: function ready(wait) {

				// Abort if there are pending holds or we're already ready
				if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
					return;
				}

				// Remember that the DOM is ready
				jQuery.isReady = true;

				// If a normal DOM Ready event fired, decrement, and wait if need be
				if (wait !== true && --jQuery.readyWait > 0) {
					return;
				}

				// If there are functions bound, to execute
				readyList.resolveWith(document, [jQuery]);

				// Trigger any bound ready events
				if (jQuery.fn.triggerHandler) {
					jQuery(document).triggerHandler("ready");
					jQuery(document).off("ready");
				}
			}
		});

		/**
	  * The ready event handler and self cleanup method
	  */
		function completed() {
			document.removeEventListener("DOMContentLoaded", completed);
			window.removeEventListener("load", completed);
			jQuery.ready();
		}

		jQuery.ready.promise = function (obj) {
			if (!readyList) {

				readyList = jQuery.Deferred();

				// Catch cases where $(document).ready() is called
				// after the browser event has already occurred.
				// Support: IE9-10 only
				// Older IE sometimes signals "interactive" too soon
				if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

					// Handle it asynchronously to allow scripts the opportunity to delay ready
					window.setTimeout(jQuery.ready);
				} else {

					// Use the handy event callback
					document.addEventListener("DOMContentLoaded", completed);

					// A fallback to window.onload, that will always work
					window.addEventListener("load", completed);
				}
			}
			return readyList.promise(obj);
		};

		// Kick off the DOM ready check even if the user does not
		jQuery.ready.promise();

		// Multifunctional method to get and set values of a collection
		// The value/s can optionally be executed if it's a function
		var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
			var i = 0,
			    len = elems.length,
			    bulk = key == null;

			// Sets many values
			if (jQuery.type(key) === "object") {
				chainable = true;
				for (i in key) {
					access(elems, fn, i, key[i], true, emptyGet, raw);
				}

				// Sets one value
			} else if (value !== undefined) {
				chainable = true;

				if (!jQuery.isFunction(value)) {
					raw = true;
				}

				if (bulk) {

					// Bulk operations run against the entire set
					if (raw) {
						fn.call(elems, value);
						fn = null;

						// ...except when executing function values
					} else {
						bulk = fn;
						fn = function fn(elem, key, value) {
							return bulk.call(jQuery(elem), value);
						};
					}
				}

				if (fn) {
					for (; i < len; i++) {
						fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
					}
				}
			}

			return chainable ? elems :

			// Gets
			bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
		};
		var acceptData = function acceptData(owner) {

			// Accepts only:
			//  - Node
			//    - Node.ELEMENT_NODE
			//    - Node.DOCUMENT_NODE
			//  - Object
			//    - Any
			/* jshint -W018 */
			return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
		};

		function Data() {
			this.expando = jQuery.expando + Data.uid++;
		}

		Data.uid = 1;

		Data.prototype = {

			register: function register(owner, initial) {
				var value = initial || {};

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if (owner.nodeType) {
					owner[this.expando] = value;

					// Otherwise secure it in a non-enumerable, non-writable property
					// configurability must be true to allow the property to be
					// deleted with the delete operator
				} else {
					Object.defineProperty(owner, this.expando, {
						value: value,
						writable: true,
						configurable: true
					});
				}
				return owner[this.expando];
			},
			cache: function cache(owner) {

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if (!acceptData(owner)) {
					return {};
				}

				// Check if the owner object already has a cache
				var value = owner[this.expando];

				// If not, create one
				if (!value) {
					value = {};

					// We can accept data for non-element nodes in modern browsers,
					// but we should not, see #8335.
					// Always return an empty object.
					if (acceptData(owner)) {

						// If it is a node unlikely to be stringify-ed or looped over
						// use plain assignment
						if (owner.nodeType) {
							owner[this.expando] = value;

							// Otherwise secure it in a non-enumerable property
							// configurable must be true to allow the property to be
							// deleted when data is removed
						} else {
							Object.defineProperty(owner, this.expando, {
								value: value,
								configurable: true
							});
						}
					}
				}

				return value;
			},
			set: function set(owner, data, value) {
				var prop,
				    cache = this.cache(owner);

				// Handle: [ owner, key, value ] args
				if (typeof data === "string") {
					cache[data] = value;

					// Handle: [ owner, { properties } ] args
				} else {

					// Copy the properties one-by-one to the cache object
					for (prop in data) {
						cache[prop] = data[prop];
					}
				}
				return cache;
			},
			get: function get(owner, key) {
				return key === undefined ? this.cache(owner) : owner[this.expando] && owner[this.expando][key];
			},
			access: function access(owner, key, value) {
				var stored;

				// In cases where either:
				//
				//   1. No key was specified
				//   2. A string key was specified, but no value provided
				//
				// Take the "read" path and allow the get method to determine
				// which value to return, respectively either:
				//
				//   1. The entire cache object
				//   2. The data stored at the key
				//
				if (key === undefined || key && typeof key === "string" && value === undefined) {

					stored = this.get(owner, key);

					return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
				}

				// When the key is not a string, or both a key and value
				// are specified, set or extend (existing objects) with either:
				//
				//   1. An object of properties
				//   2. A key and value
				//
				this.set(owner, key, value);

				// Since the "set" path can have two possible entry points
				// return the expected data based on which path was taken[*]
				return value !== undefined ? value : key;
			},
			remove: function remove(owner, key) {
				var i,
				    name,
				    camel,
				    cache = owner[this.expando];

				if (cache === undefined) {
					return;
				}

				if (key === undefined) {
					this.register(owner);
				} else {

					// Support array or space separated string of keys
					if (jQuery.isArray(key)) {

						// If "name" is an array of keys...
						// When data is initially created, via ("key", "val") signature,
						// keys will be converted to camelCase.
						// Since there is no way to tell _how_ a key was added, remove
						// both plain key and camelCase key. #12786
						// This will only penalize the array argument path.
						name = key.concat(key.map(jQuery.camelCase));
					} else {
						camel = jQuery.camelCase(key);

						// Try the string as a key before any manipulation
						if (key in cache) {
							name = [key, camel];
						} else {

							// If a key with the spaces exists, use it.
							// Otherwise, create an array by matching non-whitespace
							name = camel;
							name = name in cache ? [name] : name.match(rnotwhite) || [];
						}
					}

					i = name.length;

					while (i--) {
						delete cache[name[i]];
					}
				}

				// Remove the expando if there's no more data
				if (key === undefined || jQuery.isEmptyObject(cache)) {

					// Support: Chrome <= 35-45+
					// Webkit & Blink performance suffers when deleting properties
					// from DOM nodes, so set to undefined instead
					// https://code.google.com/p/chromium/issues/detail?id=378607
					if (owner.nodeType) {
						owner[this.expando] = undefined;
					} else {
						delete owner[this.expando];
					}
				}
			},
			hasData: function hasData(owner) {
				var cache = owner[this.expando];
				return cache !== undefined && !jQuery.isEmptyObject(cache);
			}
		};
		var dataPriv = new Data();

		var dataUser = new Data();

		//	Implementation Summary
		//
		//	1. Enforce API surface and semantic compatibility with 1.9.x branch
		//	2. Improve the module's maintainability by reducing the storage
		//		paths to a single mechanism.
		//	3. Use the same single mechanism to support "private" and "user" data.
		//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
		//	5. Avoid exposing implementation details on user objects (eg. expando properties)
		//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

		var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		    rmultiDash = /[A-Z]/g;

		function dataAttr(elem, key, data) {
			var name;

			// If nothing was found internally, try to fetch any
			// data from the HTML5 data-* attribute
			if (data === undefined && elem.nodeType === 1) {
				name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
				data = elem.getAttribute(name);

				if (typeof data === "string") {
					try {
						data = data === "true" ? true : data === "false" ? false : data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
					} catch (e) {}

					// Make sure we set the data so it isn't changed later
					dataUser.set(elem, key, data);
				} else {
					data = undefined;
				}
			}
			return data;
		}

		jQuery.extend({
			hasData: function hasData(elem) {
				return dataUser.hasData(elem) || dataPriv.hasData(elem);
			},

			data: function data(elem, name, _data) {
				return dataUser.access(elem, name, _data);
			},

			removeData: function removeData(elem, name) {
				dataUser.remove(elem, name);
			},

			// TODO: Now that all calls to _data and _removeData have been replaced
			// with direct calls to dataPriv methods, these can be deprecated.
			_data: function _data(elem, name, data) {
				return dataPriv.access(elem, name, data);
			},

			_removeData: function _removeData(elem, name) {
				dataPriv.remove(elem, name);
			}
		});

		jQuery.fn.extend({
			data: function data(key, value) {
				var i,
				    name,
				    data,
				    elem = this[0],
				    attrs = elem && elem.attributes;

				// Gets all values
				if (key === undefined) {
					if (this.length) {
						data = dataUser.get(elem);

						if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
							i = attrs.length;
							while (i--) {

								// Support: IE11+
								// The attrs elements can be null (#14894)
								if (attrs[i]) {
									name = attrs[i].name;
									if (name.indexOf("data-") === 0) {
										name = jQuery.camelCase(name.slice(5));
										dataAttr(elem, name, data[name]);
									}
								}
							}
							dataPriv.set(elem, "hasDataAttrs", true);
						}
					}

					return data;
				}

				// Sets multiple values
				if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
					return this.each(function () {
						dataUser.set(this, key);
					});
				}

				return access(this, function (value) {
					var data, camelKey;

					// The calling jQuery object (element matches) is not empty
					// (and therefore has an element appears at this[ 0 ]) and the
					// `value` parameter was not undefined. An empty jQuery object
					// will result in `undefined` for elem = this[ 0 ] which will
					// throw an exception if an attempt to read a data cache is made.
					if (elem && value === undefined) {

						// Attempt to get data from the cache
						// with the key as-is
						data = dataUser.get(elem, key) ||

						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get(elem, key.replace(rmultiDash, "-$&").toLowerCase());

						if (data !== undefined) {
							return data;
						}

						camelKey = jQuery.camelCase(key);

						// Attempt to get data from the cache
						// with the key camelized
						data = dataUser.get(elem, camelKey);
						if (data !== undefined) {
							return data;
						}

						// Attempt to "discover" the data in
						// HTML5 custom data-* attrs
						data = dataAttr(elem, camelKey, undefined);
						if (data !== undefined) {
							return data;
						}

						// We tried really hard, but the data doesn't exist.
						return;
					}

					// Set the data...
					camelKey = jQuery.camelCase(key);
					this.each(function () {

						// First, attempt to store a copy or reference of any
						// data that might've been store with a camelCased key.
						var data = dataUser.get(this, camelKey);

						// For HTML5 data-* attribute interop, we have to
						// store property names with dashes in a camelCase form.
						// This might not apply to all properties...*
						dataUser.set(this, camelKey, value);

						// *... In the case of properties that might _actually_
						// have dashes, we need to also store a copy of that
						// unchanged property.
						if (key.indexOf("-") > -1 && data !== undefined) {
							dataUser.set(this, key, value);
						}
					});
				}, null, value, arguments.length > 1, null, true);
			},

			removeData: function removeData(key) {
				return this.each(function () {
					dataUser.remove(this, key);
				});
			}
		});

		jQuery.extend({
			queue: function queue(elem, type, data) {
				var queue;

				if (elem) {
					type = (type || "fx") + "queue";
					queue = dataPriv.get(elem, type);

					// Speed up dequeue by getting out quickly if this is just a lookup
					if (data) {
						if (!queue || jQuery.isArray(data)) {
							queue = dataPriv.access(elem, type, jQuery.makeArray(data));
						} else {
							queue.push(data);
						}
					}
					return queue || [];
				}
			},

			dequeue: function dequeue(elem, type) {
				type = type || "fx";

				var queue = jQuery.queue(elem, type),
				    startLength = queue.length,
				    fn = queue.shift(),
				    hooks = jQuery._queueHooks(elem, type),
				    next = function next() {
					jQuery.dequeue(elem, type);
				};

				// If the fx queue is dequeued, always remove the progress sentinel
				if (fn === "inprogress") {
					fn = queue.shift();
					startLength--;
				}

				if (fn) {

					// Add a progress sentinel to prevent the fx queue from being
					// automatically dequeued
					if (type === "fx") {
						queue.unshift("inprogress");
					}

					// Clear up the last queue stop function
					delete hooks.stop;
					fn.call(elem, next, hooks);
				}

				if (!startLength && hooks) {
					hooks.empty.fire();
				}
			},

			// Not public - generate a queueHooks object, or return the current one
			_queueHooks: function _queueHooks(elem, type) {
				var key = type + "queueHooks";
				return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
					empty: jQuery.Callbacks("once memory").add(function () {
						dataPriv.remove(elem, [type + "queue", key]);
					})
				});
			}
		});

		jQuery.fn.extend({
			queue: function queue(type, data) {
				var setter = 2;

				if (typeof type !== "string") {
					data = type;
					type = "fx";
					setter--;
				}

				if (arguments.length < setter) {
					return jQuery.queue(this[0], type);
				}

				return data === undefined ? this : this.each(function () {
					var queue = jQuery.queue(this, type, data);

					// Ensure a hooks for this queue
					jQuery._queueHooks(this, type);

					if (type === "fx" && queue[0] !== "inprogress") {
						jQuery.dequeue(this, type);
					}
				});
			},
			dequeue: function dequeue(type) {
				return this.each(function () {
					jQuery.dequeue(this, type);
				});
			},
			clearQueue: function clearQueue(type) {
				return this.queue(type || "fx", []);
			},

			// Get a promise resolved when queues of a certain type
			// are emptied (fx is the type by default)
			promise: function promise(type, obj) {
				var tmp,
				    count = 1,
				    defer = jQuery.Deferred(),
				    elements = this,
				    i = this.length,
				    resolve = function resolve() {
					if (! --count) {
						defer.resolveWith(elements, [elements]);
					}
				};

				if (typeof type !== "string") {
					obj = type;
					type = undefined;
				}
				type = type || "fx";

				while (i--) {
					tmp = dataPriv.get(elements[i], type + "queueHooks");
					if (tmp && tmp.empty) {
						count++;
						tmp.empty.add(resolve);
					}
				}
				resolve();
				return defer.promise(obj);
			}
		});
		var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

		var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

		var cssExpand = ["Top", "Right", "Bottom", "Left"];

		var isHidden = function isHidden(elem, el) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
		};

		function adjustCSS(elem, prop, valueParts, tween) {
			var adjusted,
			    scale = 1,
			    maxIterations = 20,
			    currentValue = tween ? function () {
				return tween.cur();
			} : function () {
				return jQuery.css(elem, prop, "");
			},
			    initial = currentValue(),
			    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


			// Starting value computation is required for potential unit mismatches
			initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

			if (initialInUnit && initialInUnit[3] !== unit) {

				// Trust units reported by jQuery.css
				unit = unit || initialInUnit[3];

				// Make sure we update the tween properties later on
				valueParts = valueParts || [];

				// Iteratively approximate from a nonzero starting point
				initialInUnit = +initial || 1;

				do {

					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					initialInUnit = initialInUnit / scale;
					jQuery.style(elem, prop, initialInUnit + unit);

					// Update scale, tolerating zero or NaN from tween.cur()
					// Break the loop if scale is unchanged or perfect, or if we've just had enough.
				} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
			}

			if (valueParts) {
				initialInUnit = +initialInUnit || +initial || 0;

				// Apply relative offset (+=/-=) if specified
				adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
				if (tween) {
					tween.unit = unit;
					tween.start = initialInUnit;
					tween.end = adjusted;
				}
			}
			return adjusted;
		}
		var rcheckableType = /^(?:checkbox|radio)$/i;

		var rtagName = /<([\w:-]+)/;

		var rscriptType = /^$|\/(?:java|ecma)script/i;

		// We have to close these tags to support XHTML (#13200)
		var wrapMap = {

			// Support: IE9
			option: [1, "<select multiple='multiple'>", "</select>"],

			// XHTML parsers do not magically insert elements in the
			// same way that tag soup parsers do. So we cannot shorten
			// this by omitting <tbody> or other required elements.
			thead: [1, "<table>", "</table>"],
			col: [2, "<table><colgroup>", "</colgroup></table>"],
			tr: [2, "<table><tbody>", "</tbody></table>"],
			td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

			_default: [0, "", ""]
		};

		// Support: IE9
		wrapMap.optgroup = wrapMap.option;

		wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
		wrapMap.th = wrapMap.td;

		function getAll(context, tag) {

			// Support: IE9-11+
			// Use typeof to avoid zero-argument method invocation on host objects (#15151)
			var ret = typeof context.getElementsByTagName !== "undefined" ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== "undefined" ? context.querySelectorAll(tag || "*") : [];

			return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
		}

		// Mark scripts as having already been evaluated
		function setGlobalEval(elems, refElements) {
			var i = 0,
			    l = elems.length;

			for (; i < l; i++) {
				dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
			}
		}

		var rhtml = /<|&#?\w+;/;

		function buildFragment(elems, context, scripts, selection, ignored) {
			var elem,
			    tmp,
			    tag,
			    wrap,
			    contains,
			    j,
			    fragment = context.createDocumentFragment(),
			    nodes = [],
			    i = 0,
			    l = elems.length;

			for (; i < l; i++) {
				elem = elems[i];

				if (elem || elem === 0) {

					// Add nodes directly
					if (jQuery.type(elem) === "object") {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

						// Convert non-html into a text node
					} else if (!rhtml.test(elem)) {
						nodes.push(context.createTextNode(elem));

						// Convert html into DOM nodes
					} else {
						tmp = tmp || fragment.appendChild(context.createElement("div"));

						// Deserialize a standard representation
						tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
						wrap = wrapMap[tag] || wrapMap._default;
						tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

						// Descend through wrappers to the right content
						j = wrap[0];
						while (j--) {
							tmp = tmp.lastChild;
						}

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge(nodes, tmp.childNodes);

						// Remember the top-level container
						tmp = fragment.firstChild;

						// Ensure the created nodes are orphaned (#12392)
						tmp.textContent = "";
					}
				}
			}

			// Remove wrapper from fragment
			fragment.textContent = "";

			i = 0;
			while (elem = nodes[i++]) {

				// Skip elements already in the context collection (trac-4087)
				if (selection && jQuery.inArray(elem, selection) > -1) {
					if (ignored) {
						ignored.push(elem);
					}
					continue;
				}

				contains = jQuery.contains(elem.ownerDocument, elem);

				// Append to fragment
				tmp = getAll(fragment.appendChild(elem), "script");

				// Preserve script evaluation history
				if (contains) {
					setGlobalEval(tmp);
				}

				// Capture executables
				if (scripts) {
					j = 0;
					while (elem = tmp[j++]) {
						if (rscriptType.test(elem.type || "")) {
							scripts.push(elem);
						}
					}
				}
			}

			return fragment;
		}

		(function () {
			var fragment = document.createDocumentFragment(),
			    div = fragment.appendChild(document.createElement("div")),
			    input = document.createElement("input");

			// Support: Android 4.0-4.3, Safari<=5.1
			// Check state lost if the name is set (#11217)
			// Support: Windows Web Apps (WWA)
			// `name` and `type` must use .setAttribute for WWA (#14901)
			input.setAttribute("type", "radio");
			input.setAttribute("checked", "checked");
			input.setAttribute("name", "t");

			div.appendChild(input);

			// Support: Safari<=5.1, Android<4.2
			// Older WebKit doesn't clone checked state correctly in fragments
			support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

			// Support: IE<=11+
			// Make sure textarea (and checkbox) defaultValue is properly cloned
			div.innerHTML = "<textarea>x</textarea>";
			support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
		})();

		var rkeyEvent = /^key/,
		    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

		function returnTrue() {
			return true;
		}

		function returnFalse() {
			return false;
		}

		// Support: IE9
		// See #13393 for more info
		function safeActiveElement() {
			try {
				return document.activeElement;
			} catch (err) {}
		}

		function _on(elem, types, selector, data, fn, one) {
			var origFn, type;

			// Types can be a map of types/handlers
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

				// ( types-Object, selector, data )
				if (typeof selector !== "string") {

					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for (type in types) {
					_on(elem, type, selector, data, types[type], one);
				}
				return elem;
			}

			if (data == null && fn == null) {

				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if (fn == null) {
				if (typeof selector === "string") {

					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {

					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if (fn === false) {
				fn = returnFalse;
			} else if (!fn) {
				return elem;
			}

			if (one === 1) {
				origFn = fn;
				fn = function fn(event) {

					// Can use an empty set, since event contains the info
					jQuery().off(event);
					return origFn.apply(this, arguments);
				};

				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
			}
			return elem.each(function () {
				jQuery.event.add(this, types, fn, data, selector);
			});
		}

		/*
	  * Helper functions for managing events -- not part of the public interface.
	  * Props to Dean Edwards' addEvent library for many of the ideas.
	  */
		jQuery.event = {

			global: {},

			add: function add(elem, types, handler, data, selector) {

				var handleObjIn,
				    eventHandle,
				    tmp,
				    events,
				    t,
				    handleObj,
				    special,
				    handlers,
				    type,
				    namespaces,
				    origType,
				    elemData = dataPriv.get(elem);

				// Don't attach events to noData or text/comment nodes (but allow plain objects)
				if (!elemData) {
					return;
				}

				// Caller can pass in an object of custom data in lieu of the handler
				if (handler.handler) {
					handleObjIn = handler;
					handler = handleObjIn.handler;
					selector = handleObjIn.selector;
				}

				// Make sure that the handler has a unique ID, used to find/remove it later
				if (!handler.guid) {
					handler.guid = jQuery.guid++;
				}

				// Init the element's event structure and main handler, if this is the first
				if (!(events = elemData.events)) {
					events = elemData.events = {};
				}
				if (!(eventHandle = elemData.handle)) {
					eventHandle = elemData.handle = function (e) {

						// Discard the second event of a jQuery.event.trigger() and
						// when an event is called after a page has unloaded
						return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
					};
				}

				// Handle multiple events separated by a space
				types = (types || "").match(rnotwhite) || [""];
				t = types.length;
				while (t--) {
					tmp = rtypenamespace.exec(types[t]) || [];
					type = origType = tmp[1];
					namespaces = (tmp[2] || "").split(".").sort();

					// There *must* be a type, no attaching namespace-only handlers
					if (!type) {
						continue;
					}

					// If event changes its type, use the special event handlers for the changed type
					special = jQuery.event.special[type] || {};

					// If selector defined, determine special event api type, otherwise given type
					type = (selector ? special.delegateType : special.bindType) || type;

					// Update special based on newly reset type
					special = jQuery.event.special[type] || {};

					// handleObj is passed to all event handlers
					handleObj = jQuery.extend({
						type: type,
						origType: origType,
						data: data,
						handler: handler,
						guid: handler.guid,
						selector: selector,
						needsContext: selector && jQuery.expr.match.needsContext.test(selector),
						namespace: namespaces.join(".")
					}, handleObjIn);

					// Init the event handler queue if we're the first
					if (!(handlers = events[type])) {
						handlers = events[type] = [];
						handlers.delegateCount = 0;

						// Only use addEventListener if the special events handler returns false
						if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

							if (elem.addEventListener) {
								elem.addEventListener(type, eventHandle);
							}
						}
					}

					if (special.add) {
						special.add.call(elem, handleObj);

						if (!handleObj.handler.guid) {
							handleObj.handler.guid = handler.guid;
						}
					}

					// Add to the element's handler list, delegates in front
					if (selector) {
						handlers.splice(handlers.delegateCount++, 0, handleObj);
					} else {
						handlers.push(handleObj);
					}

					// Keep track of which events have ever been used, for event optimization
					jQuery.event.global[type] = true;
				}
			},

			// Detach an event or set of events from an element
			remove: function remove(elem, types, handler, selector, mappedTypes) {

				var j,
				    origCount,
				    tmp,
				    events,
				    t,
				    handleObj,
				    special,
				    handlers,
				    type,
				    namespaces,
				    origType,
				    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

				if (!elemData || !(events = elemData.events)) {
					return;
				}

				// Once for each type.namespace in types; type may be omitted
				types = (types || "").match(rnotwhite) || [""];
				t = types.length;
				while (t--) {
					tmp = rtypenamespace.exec(types[t]) || [];
					type = origType = tmp[1];
					namespaces = (tmp[2] || "").split(".").sort();

					// Unbind all events (on this namespace, if provided) for the element
					if (!type) {
						for (type in events) {
							jQuery.event.remove(elem, type + types[t], handler, selector, true);
						}
						continue;
					}

					special = jQuery.event.special[type] || {};
					type = (selector ? special.delegateType : special.bindType) || type;
					handlers = events[type] || [];
					tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

					// Remove matching events
					origCount = j = handlers.length;
					while (j--) {
						handleObj = handlers[j];

						if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
							handlers.splice(j, 1);

							if (handleObj.selector) {
								handlers.delegateCount--;
							}
							if (special.remove) {
								special.remove.call(elem, handleObj);
							}
						}
					}

					// Remove generic event handler if we removed something and no more handlers exist
					// (avoids potential for endless recursion during removal of special event handlers)
					if (origCount && !handlers.length) {
						if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

							jQuery.removeEvent(elem, type, elemData.handle);
						}

						delete events[type];
					}
				}

				// Remove data and the expando if it's no longer used
				if (jQuery.isEmptyObject(events)) {
					dataPriv.remove(elem, "handle events");
				}
			},

			dispatch: function dispatch(event) {

				// Make a writable jQuery.Event from the native event object
				event = jQuery.event.fix(event);

				var i,
				    j,
				    ret,
				    matched,
				    handleObj,
				    handlerQueue = [],
				    args = _slice.call(arguments),
				    handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
				    special = jQuery.event.special[event.type] || {};

				// Use the fix-ed jQuery.Event rather than the (read-only) native event
				args[0] = event;
				event.delegateTarget = this;

				// Call the preDispatch hook for the mapped type, and let it bail if desired
				if (special.preDispatch && special.preDispatch.call(this, event) === false) {
					return;
				}

				// Determine handlers
				handlerQueue = jQuery.event.handlers.call(this, event, handlers);

				// Run delegates first; they may want to stop propagation beneath us
				i = 0;
				while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
					event.currentTarget = matched.elem;

					j = 0;
					while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

						// Triggered event must either 1) have no namespace, or 2) have namespace(s)
						// a subset or equal to those in the bound event (both can have no namespace).
						if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

							event.handleObj = handleObj;
							event.data = handleObj.data;

							ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

							if (ret !== undefined) {
								if ((event.result = ret) === false) {
									event.preventDefault();
									event.stopPropagation();
								}
							}
						}
					}
				}

				// Call the postDispatch hook for the mapped type
				if (special.postDispatch) {
					special.postDispatch.call(this, event);
				}

				return event.result;
			},

			handlers: function handlers(event, _handlers) {
				var i,
				    matches,
				    sel,
				    handleObj,
				    handlerQueue = [],
				    delegateCount = _handlers.delegateCount,
				    cur = event.target;

				// Support (at least): Chrome, IE9
				// Find delegate handlers
				// Black-hole SVG <use> instance trees (#13180)
				//
				// Support: Firefox<=42+
				// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
				if (delegateCount && cur.nodeType && (event.type !== "click" || isNaN(event.button) || event.button < 1)) {

					for (; cur !== this; cur = cur.parentNode || this) {

						// Don't check non-elements (#13208)
						// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
						if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
							matches = [];
							for (i = 0; i < delegateCount; i++) {
								handleObj = _handlers[i];

								// Don't conflict with Object.prototype properties (#13203)
								sel = handleObj.selector + " ";

								if (matches[sel] === undefined) {
									matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
								}
								if (matches[sel]) {
									matches.push(handleObj);
								}
							}
							if (matches.length) {
								handlerQueue.push({ elem: cur, handlers: matches });
							}
						}
					}
				}

				// Add the remaining (directly-bound) handlers
				if (delegateCount < _handlers.length) {
					handlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });
				}

				return handlerQueue;
			},

			// Includes some event props shared by KeyEvent and MouseEvent
			props: ("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " + "metaKey relatedTarget shiftKey target timeStamp view which").split(" "),

			fixHooks: {},

			keyHooks: {
				props: "char charCode key keyCode".split(" "),
				filter: function filter(event, original) {

					// Add which for key events
					if (event.which == null) {
						event.which = original.charCode != null ? original.charCode : original.keyCode;
					}

					return event;
				}
			},

			mouseHooks: {
				props: ("button buttons clientX clientY offsetX offsetY pageX pageY " + "screenX screenY toElement").split(" "),
				filter: function filter(event, original) {
					var eventDoc,
					    doc,
					    body,
					    button = original.button;

					// Calculate pageX/Y if missing and clientX/Y available
					if (event.pageX == null && original.clientX != null) {
						eventDoc = event.target.ownerDocument || document;
						doc = eventDoc.documentElement;
						body = eventDoc.body;

						event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
						event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
					}

					// Add which for click: 1 === left; 2 === middle; 3 === right
					// Note: button is not normalized, so don't use it
					if (!event.which && button !== undefined) {
						event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
					}

					return event;
				}
			},

			fix: function fix(event) {
				if (event[jQuery.expando]) {
					return event;
				}

				// Create a writable copy of the event object and normalize some properties
				var i,
				    prop,
				    copy,
				    type = event.type,
				    originalEvent = event,
				    fixHook = this.fixHooks[type];

				if (!fixHook) {
					this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
				}
				copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

				event = new jQuery.Event(originalEvent);

				i = copy.length;
				while (i--) {
					prop = copy[i];
					event[prop] = originalEvent[prop];
				}

				// Support: Cordova 2.5 (WebKit) (#13255)
				// All events should have a target; Cordova deviceready doesn't
				if (!event.target) {
					event.target = document;
				}

				// Support: Safari 6.0+, Chrome<28
				// Target should not be a text node (#504, #13143)
				if (event.target.nodeType === 3) {
					event.target = event.target.parentNode;
				}

				return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
			},

			special: {
				load: {

					// Prevent triggered image.load events from bubbling to window.load
					noBubble: true
				},
				focus: {

					// Fire native event if possible so blur/focus sequence is correct
					trigger: function trigger() {
						if (this !== safeActiveElement() && this.focus) {
							this.focus();
							return false;
						}
					},
					delegateType: "focusin"
				},
				blur: {
					trigger: function trigger() {
						if (this === safeActiveElement() && this.blur) {
							this.blur();
							return false;
						}
					},
					delegateType: "focusout"
				},
				click: {

					// For checkbox, fire native event so checked state will be right
					trigger: function trigger() {
						if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
							this.click();
							return false;
						}
					},

					// For cross-browser consistency, don't fire native .click() on links
					_default: function _default(event) {
						return jQuery.nodeName(event.target, "a");
					}
				},

				beforeunload: {
					postDispatch: function postDispatch(event) {

						// Support: Firefox 20+
						// Firefox doesn't alert if the returnValue field is not set.
						if (event.result !== undefined && event.originalEvent) {
							event.originalEvent.returnValue = event.result;
						}
					}
				}
			}
		};

		jQuery.removeEvent = function (elem, type, handle) {

			// This "if" is needed for plain objects
			if (elem.removeEventListener) {
				elem.removeEventListener(type, handle);
			}
		};

		jQuery.Event = function (src, props) {

			// Allow instantiation without the 'new' keyword
			if (!(this instanceof jQuery.Event)) {
				return new jQuery.Event(src, props);
			}

			// Event object
			if (src && src.type) {
				this.originalEvent = src;
				this.type = src.type;

				// Events bubbling up the document may have been marked as prevented
				// by a handler lower down the tree; reflect the correct value.
				this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

				// Support: Android<4.0
				src.returnValue === false ? returnTrue : returnFalse;

				// Event type
			} else {
				this.type = src;
			}

			// Put explicitly provided properties onto the event object
			if (props) {
				jQuery.extend(this, props);
			}

			// Create a timestamp if incoming event doesn't have one
			this.timeStamp = src && src.timeStamp || jQuery.now();

			// Mark it as fixed
			this[jQuery.expando] = true;
		};

		// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
		// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
		jQuery.Event.prototype = {
			constructor: jQuery.Event,
			isDefaultPrevented: returnFalse,
			isPropagationStopped: returnFalse,
			isImmediatePropagationStopped: returnFalse,
			isSimulated: false,

			preventDefault: function preventDefault() {
				var e = this.originalEvent;

				this.isDefaultPrevented = returnTrue;

				if (e && !this.isSimulated) {
					e.preventDefault();
				}
			},
			stopPropagation: function stopPropagation() {
				var e = this.originalEvent;

				this.isPropagationStopped = returnTrue;

				if (e && !this.isSimulated) {
					e.stopPropagation();
				}
			},
			stopImmediatePropagation: function stopImmediatePropagation() {
				var e = this.originalEvent;

				this.isImmediatePropagationStopped = returnTrue;

				if (e && !this.isSimulated) {
					e.stopImmediatePropagation();
				}

				this.stopPropagation();
			}
		};

		// Create mouseenter/leave events using mouseover/out and event-time checks
		// so that event delegation works in jQuery.
		// Do the same for pointerenter/pointerleave and pointerover/pointerout
		//
		// Support: Safari 7 only
		// Safari sends mouseenter too often; see:
		// https://code.google.com/p/chromium/issues/detail?id=470258
		// for the description of the bug (it existed in older Chrome versions as well).
		jQuery.each({
			mouseenter: "mouseover",
			mouseleave: "mouseout",
			pointerenter: "pointerover",
			pointerleave: "pointerout"
		}, function (orig, fix) {
			jQuery.event.special[orig] = {
				delegateType: fix,
				bindType: fix,

				handle: function handle(event) {
					var ret,
					    target = this,
					    related = event.relatedTarget,
					    handleObj = event.handleObj;

					// For mouseenter/leave call the handler if related is outside the target.
					// NB: No relatedTarget if the mouse left/entered the browser window
					if (!related || related !== target && !jQuery.contains(target, related)) {
						event.type = handleObj.origType;
						ret = handleObj.handler.apply(this, arguments);
						event.type = fix;
					}
					return ret;
				}
			};
		});

		jQuery.fn.extend({
			on: function on(types, selector, data, fn) {
				return _on(this, types, selector, data, fn);
			},
			one: function one(types, selector, data, fn) {
				return _on(this, types, selector, data, fn, 1);
			},
			off: function off(types, selector, fn) {
				var handleObj, type;
				if (types && types.preventDefault && types.handleObj) {

					// ( event )  dispatched jQuery.Event
					handleObj = types.handleObj;
					jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
					return this;
				}
				if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

					// ( types-object [, selector] )
					for (type in types) {
						this.off(type, selector, types[type]);
					}
					return this;
				}
				if (selector === false || typeof selector === "function") {

					// ( types [, fn] )
					fn = selector;
					selector = undefined;
				}
				if (fn === false) {
					fn = returnFalse;
				}
				return this.each(function () {
					jQuery.event.remove(this, types, fn, selector);
				});
			}
		});

		var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,


		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,


		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		    rscriptTypeMasked = /^true\/(.*)/,
		    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

		// Manipulating tables requires a tbody
		function manipulationTarget(elem, content) {
			return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
		}

		// Replace/restore the type attribute of script elements for safe DOM manipulation
		function disableScript(elem) {
			elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
			return elem;
		}
		function restoreScript(elem) {
			var match = rscriptTypeMasked.exec(elem.type);

			if (match) {
				elem.type = match[1];
			} else {
				elem.removeAttribute("type");
			}

			return elem;
		}

		function cloneCopyEvent(src, dest) {
			var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

			if (dest.nodeType !== 1) {
				return;
			}

			// 1. Copy private data: events, handlers, etc.
			if (dataPriv.hasData(src)) {
				pdataOld = dataPriv.access(src);
				pdataCur = dataPriv.set(dest, pdataOld);
				events = pdataOld.events;

				if (events) {
					delete pdataCur.handle;
					pdataCur.events = {};

					for (type in events) {
						for (i = 0, l = events[type].length; i < l; i++) {
							jQuery.event.add(dest, type, events[type][i]);
						}
					}
				}
			}

			// 2. Copy user data
			if (dataUser.hasData(src)) {
				udataOld = dataUser.access(src);
				udataCur = jQuery.extend({}, udataOld);

				dataUser.set(dest, udataCur);
			}
		}

		// Fix IE bugs, see support tests
		function fixInput(src, dest) {
			var nodeName = dest.nodeName.toLowerCase();

			// Fails to persist the checked state of a cloned checkbox or radio button.
			if (nodeName === "input" && rcheckableType.test(src.type)) {
				dest.checked = src.checked;

				// Fails to return the selected option to the default selected state when cloning options
			} else if (nodeName === "input" || nodeName === "textarea") {
				dest.defaultValue = src.defaultValue;
			}
		}

		function domManip(collection, args, callback, ignored) {

			// Flatten any nested arrays
			args = concat.apply([], args);

			var fragment,
			    first,
			    scripts,
			    hasScripts,
			    node,
			    doc,
			    i = 0,
			    l = collection.length,
			    iNoClone = l - 1,
			    value = args[0],
			    isFunction = jQuery.isFunction(value);

			// We can't cloneNode fragments that contain checked, in WebKit
			if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
				return collection.each(function (index) {
					var self = collection.eq(index);
					if (isFunction) {
						args[0] = value.call(this, index, self.html());
					}
					domManip(self, args, callback, ignored);
				});
			}

			if (l) {
				fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
				first = fragment.firstChild;

				if (fragment.childNodes.length === 1) {
					fragment = first;
				}

				// Require either new content or an interest in ignored elements to invoke the callback
				if (first || ignored) {
					scripts = jQuery.map(getAll(fragment, "script"), disableScript);
					hasScripts = scripts.length;

					// Use the original fragment for the last item
					// instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for (; i < l; i++) {
						node = fragment;

						if (i !== iNoClone) {
							node = jQuery.clone(node, true, true);

							// Keep references to cloned scripts for later restoration
							if (hasScripts) {

								// Support: Android<4.1, PhantomJS<2
								// push.apply(_, arraylike) throws on ancient WebKit
								jQuery.merge(scripts, getAll(node, "script"));
							}
						}

						callback.call(collection[i], node, i);
					}

					if (hasScripts) {
						doc = scripts[scripts.length - 1].ownerDocument;

						// Reenable scripts
						jQuery.map(scripts, restoreScript);

						// Evaluate executable scripts on first document insertion
						for (i = 0; i < hasScripts; i++) {
							node = scripts[i];
							if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {

								if (node.src) {

									// Optional AJAX dependency, but won't run scripts if not present
									if (jQuery._evalUrl) {
										jQuery._evalUrl(node.src);
									}
								} else {
									jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
								}
							}
						}
					}
				}
			}

			return collection;
		}

		function _remove(elem, selector, keepData) {
			var node,
			    nodes = selector ? jQuery.filter(selector, elem) : elem,
			    i = 0;

			for (; (node = nodes[i]) != null; i++) {
				if (!keepData && node.nodeType === 1) {
					jQuery.cleanData(getAll(node));
				}

				if (node.parentNode) {
					if (keepData && jQuery.contains(node.ownerDocument, node)) {
						setGlobalEval(getAll(node, "script"));
					}
					node.parentNode.removeChild(node);
				}
			}

			return elem;
		}

		jQuery.extend({
			htmlPrefilter: function htmlPrefilter(html) {
				return html.replace(rxhtmlTag, "<$1></$2>");
			},

			clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
				var i,
				    l,
				    srcElements,
				    destElements,
				    clone = elem.cloneNode(true),
				    inPage = jQuery.contains(elem.ownerDocument, elem);

				// Fix IE cloning issues
				if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

					// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
					destElements = getAll(clone);
					srcElements = getAll(elem);

					for (i = 0, l = srcElements.length; i < l; i++) {
						fixInput(srcElements[i], destElements[i]);
					}
				}

				// Copy the events from the original to the clone
				if (dataAndEvents) {
					if (deepDataAndEvents) {
						srcElements = srcElements || getAll(elem);
						destElements = destElements || getAll(clone);

						for (i = 0, l = srcElements.length; i < l; i++) {
							cloneCopyEvent(srcElements[i], destElements[i]);
						}
					} else {
						cloneCopyEvent(elem, clone);
					}
				}

				// Preserve script evaluation history
				destElements = getAll(clone, "script");
				if (destElements.length > 0) {
					setGlobalEval(destElements, !inPage && getAll(elem, "script"));
				}

				// Return the cloned set
				return clone;
			},

			cleanData: function cleanData(elems) {
				var data,
				    elem,
				    type,
				    special = jQuery.event.special,
				    i = 0;

				for (; (elem = elems[i]) !== undefined; i++) {
					if (acceptData(elem)) {
						if (data = elem[dataPriv.expando]) {
							if (data.events) {
								for (type in data.events) {
									if (special[type]) {
										jQuery.event.remove(elem, type);

										// This is a shortcut to avoid jQuery.event.remove's overhead
									} else {
										jQuery.removeEvent(elem, type, data.handle);
									}
								}
							}

							// Support: Chrome <= 35-45+
							// Assign undefined instead of using delete, see Data#remove
							elem[dataPriv.expando] = undefined;
						}
						if (elem[dataUser.expando]) {

							// Support: Chrome <= 35-45+
							// Assign undefined instead of using delete, see Data#remove
							elem[dataUser.expando] = undefined;
						}
					}
				}
			}
		});

		jQuery.fn.extend({

			// Keep domManip exposed until 3.0 (gh-2225)
			domManip: domManip,

			detach: function detach(selector) {
				return _remove(this, selector, true);
			},

			remove: function remove(selector) {
				return _remove(this, selector);
			},

			text: function text(value) {
				return access(this, function (value) {
					return value === undefined ? jQuery.text(this) : this.empty().each(function () {
						if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
							this.textContent = value;
						}
					});
				}, null, value, arguments.length);
			},

			append: function append() {
				return domManip(this, arguments, function (elem) {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						var target = manipulationTarget(this, elem);
						target.appendChild(elem);
					}
				});
			},

			prepend: function prepend() {
				return domManip(this, arguments, function (elem) {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						var target = manipulationTarget(this, elem);
						target.insertBefore(elem, target.firstChild);
					}
				});
			},

			before: function before() {
				return domManip(this, arguments, function (elem) {
					if (this.parentNode) {
						this.parentNode.insertBefore(elem, this);
					}
				});
			},

			after: function after() {
				return domManip(this, arguments, function (elem) {
					if (this.parentNode) {
						this.parentNode.insertBefore(elem, this.nextSibling);
					}
				});
			},

			empty: function empty() {
				var elem,
				    i = 0;

				for (; (elem = this[i]) != null; i++) {
					if (elem.nodeType === 1) {

						// Prevent memory leaks
						jQuery.cleanData(getAll(elem, false));

						// Remove any remaining nodes
						elem.textContent = "";
					}
				}

				return this;
			},

			clone: function clone(dataAndEvents, deepDataAndEvents) {
				dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
				deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

				return this.map(function () {
					return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
				});
			},

			html: function html(value) {
				return access(this, function (value) {
					var elem = this[0] || {},
					    i = 0,
					    l = this.length;

					if (value === undefined && elem.nodeType === 1) {
						return elem.innerHTML;
					}

					// See if we can take a shortcut and just use innerHTML
					if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

						value = jQuery.htmlPrefilter(value);

						try {
							for (; i < l; i++) {
								elem = this[i] || {};

								// Remove element nodes and prevent memory leaks
								if (elem.nodeType === 1) {
									jQuery.cleanData(getAll(elem, false));
									elem.innerHTML = value;
								}
							}

							elem = 0;

							// If using innerHTML throws an exception, use the fallback method
						} catch (e) {}
					}

					if (elem) {
						this.empty().append(value);
					}
				}, null, value, arguments.length);
			},

			replaceWith: function replaceWith() {
				var ignored = [];

				// Make the changes, replacing each non-ignored context element with the new content
				return domManip(this, arguments, function (elem) {
					var parent = this.parentNode;

					if (jQuery.inArray(this, ignored) < 0) {
						jQuery.cleanData(getAll(this));
						if (parent) {
							parent.replaceChild(elem, this);
						}
					}

					// Force callback invocation
				}, ignored);
			}
		});

		jQuery.each({
			appendTo: "append",
			prependTo: "prepend",
			insertBefore: "before",
			insertAfter: "after",
			replaceAll: "replaceWith"
		}, function (name, original) {
			jQuery.fn[name] = function (selector) {
				var elems,
				    ret = [],
				    insert = jQuery(selector),
				    last = insert.length - 1,
				    i = 0;

				for (; i <= last; i++) {
					elems = i === last ? this : this.clone(true);
					jQuery(insert[i])[original](elems);

					// Support: QtWebKit
					// .get() because push.apply(_, arraylike) throws
					push.apply(ret, elems.get());
				}

				return this.pushStack(ret);
			};
		});

		var iframe,
		    elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

		/**
	  * Retrieve the actual display of a element
	  * @param {String} name nodeName of the element
	  * @param {Object} doc Document object
	  */

		// Called only from within defaultDisplay
		function actualDisplay(name, doc) {
			var elem = jQuery(doc.createElement(name)).appendTo(doc.body),
			    display = jQuery.css(elem[0], "display");

			// We don't have any data stored on the element,
			// so use "detach" method as fast way to get rid of the element
			elem.detach();

			return display;
		}

		/**
	  * Try to determine the default display value of an element
	  * @param {String} nodeName
	  */
		function defaultDisplay(nodeName) {
			var doc = document,
			    display = elemdisplay[nodeName];

			if (!display) {
				display = actualDisplay(nodeName, doc);

				// If the simple way fails, read from inside an iframe
				if (display === "none" || !display) {

					// Use the already-created iframe if possible
					iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);

					// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
					doc = iframe[0].contentDocument;

					// Support: IE
					doc.write();
					doc.close();

					display = actualDisplay(nodeName, doc);
					iframe.detach();
				}

				// Store the correct default display
				elemdisplay[nodeName] = display;
			}

			return display;
		}
		var rmargin = /^margin/;

		var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

		var getStyles = function getStyles(elem) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if (!view || !view.opener) {
				view = window;
			}

			return view.getComputedStyle(elem);
		};

		var swap = function swap(elem, options, callback, args) {
			var ret,
			    name,
			    old = {};

			// Remember the old values, and insert the new ones
			for (name in options) {
				old[name] = elem.style[name];
				elem.style[name] = options[name];
			}

			ret = callback.apply(elem, args || []);

			// Revert the old values
			for (name in options) {
				elem.style[name] = old[name];
			}

			return ret;
		};

		var documentElement = document.documentElement;

		(function () {
			var pixelPositionVal,
			    boxSizingReliableVal,
			    pixelMarginRightVal,
			    reliableMarginLeftVal,
			    container = document.createElement("div"),
			    div = document.createElement("div");

			// Finish early in limited (non-browser) environments
			if (!div.style) {
				return;
			}

			// Support: IE9-11+
			// Style of cloned element affects source element cloned (#8908)
			div.style.backgroundClip = "content-box";
			div.cloneNode(true).style.backgroundClip = "";
			support.clearCloneStyle = div.style.backgroundClip === "content-box";

			container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
			container.appendChild(div);

			// Executing both pixelPosition & boxSizingReliable tests require only one layout
			// so they're executed at the same time to save the second computation.
			function computeStyleTests() {
				div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";
				div.innerHTML = "";
				documentElement.appendChild(container);

				var divStyle = window.getComputedStyle(div);
				pixelPositionVal = divStyle.top !== "1%";
				reliableMarginLeftVal = divStyle.marginLeft === "2px";
				boxSizingReliableVal = divStyle.width === "4px";

				// Support: Android 4.0 - 4.3 only
				// Some styles come back with percentage values, even though they shouldn't
				div.style.marginRight = "50%";
				pixelMarginRightVal = divStyle.marginRight === "4px";

				documentElement.removeChild(container);
			}

			jQuery.extend(support, {
				pixelPosition: function pixelPosition() {

					// This test is executed only once but we still do memoizing
					// since we can use the boxSizingReliable pre-computing.
					// No need to check if the test was already performed, though.
					computeStyleTests();
					return pixelPositionVal;
				},
				boxSizingReliable: function boxSizingReliable() {
					if (boxSizingReliableVal == null) {
						computeStyleTests();
					}
					return boxSizingReliableVal;
				},
				pixelMarginRight: function pixelMarginRight() {

					// Support: Android 4.0-4.3
					// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
					// since that compresses better and they're computed together anyway.
					if (boxSizingReliableVal == null) {
						computeStyleTests();
					}
					return pixelMarginRightVal;
				},
				reliableMarginLeft: function reliableMarginLeft() {

					// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
					if (boxSizingReliableVal == null) {
						computeStyleTests();
					}
					return reliableMarginLeftVal;
				},
				reliableMarginRight: function reliableMarginRight() {

					// Support: Android 2.3
					// Check if div with explicit width and no margin-right incorrectly
					// gets computed margin-right based on width of container. (#3333)
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// This support function is only executed once so no memoizing is needed.
					var ret,
					    marginDiv = div.appendChild(document.createElement("div"));

					// Reset CSS: box-sizing; display; margin; border; padding
					marginDiv.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" + "display:block;margin:0;border:0;padding:0";
					marginDiv.style.marginRight = marginDiv.style.width = "0";
					div.style.width = "1px";
					documentElement.appendChild(container);

					ret = !parseFloat(window.getComputedStyle(marginDiv).marginRight);

					documentElement.removeChild(container);
					div.removeChild(marginDiv);

					return ret;
				}
			});
		})();

		function curCSS(elem, name, computed) {
			var width,
			    minWidth,
			    maxWidth,
			    ret,
			    style = elem.style;

			computed = computed || getStyles(elem);
			ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;

			// Support: Opera 12.1x only
			// Fall back to style even without computed
			// computed is undefined for elems on document fragments
			if ((ret === "" || ret === undefined) && !jQuery.contains(elem.ownerDocument, elem)) {
				ret = jQuery.style(elem, name);
			}

			// Support: IE9
			// getPropertyValue is only needed for .css('filter') (#12537)
			if (computed) {

				// A tribute to the "awesome hack by Dean Edwards"
				// Android Browser returns percentage for some values,
				// but width seems to be reliably pixels.
				// This is against the CSSOM draft spec:
				// http://dev.w3.org/csswg/cssom/#resolved-values
				if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

					// Remember the original values
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;

					// Put in the new values to get a computed value out
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;

					// Revert the changed values
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}

			return ret !== undefined ?

			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" : ret;
		}

		function addGetHookIf(conditionFn, hookFn) {

			// Define the hook, we'll check on the first run if it's really needed.
			return {
				get: function get() {
					if (conditionFn()) {

						// Hook not needed (or it's not possible to use it due
						// to missing dependency), remove it.
						delete this.get;
						return;
					}

					// Hook needed; redefine it so that the support test is not executed again.
					return (this.get = hookFn).apply(this, arguments);
				}
			};
		}

		var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		    cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
		    cssPrefixes = ["Webkit", "O", "Moz", "ms"],
		    emptyStyle = document.createElement("div").style;

		// Return a css property mapped to a potentially vendor prefixed property
		function vendorPropName(name) {

			// Shortcut for names that are not vendor prefixed
			if (name in emptyStyle) {
				return name;
			}

			// Check for vendor prefixed names
			var capName = name[0].toUpperCase() + name.slice(1),
			    i = cssPrefixes.length;

			while (i--) {
				name = cssPrefixes[i] + capName;
				if (name in emptyStyle) {
					return name;
				}
			}
		}

		function setPositiveNumber(elem, value, subtract) {

			// Any relative (+/-) values have already been
			// normalized at this point
			var matches = rcssNum.exec(value);
			return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
		}

		function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
			var i = extra === (isBorderBox ? "border" : "content") ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
			    val = 0;

			for (; i < 4; i += 2) {

				// Both box models exclude margin, so add it if we want it
				if (extra === "margin") {
					val += jQuery.css(elem, extra + cssExpand[i], true, styles);
				}

				if (isBorderBox) {

					// border-box includes padding, so remove it if we want content
					if (extra === "content") {
						val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
					}

					// At this point, extra isn't border nor margin, so remove border
					if (extra !== "margin") {
						val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
					}
				} else {

					// At this point, extra isn't content, so add padding
					val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

					// At this point, extra isn't content nor padding, so add border
					if (extra !== "padding") {
						val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
					}
				}
			}

			return val;
		}

		function getWidthOrHeight(elem, name, extra) {

			// Start with offset property, which is equivalent to the border-box value
			var valueIsBorderBox = true,
			    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			    styles = getStyles(elem),
			    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

			// Some non-html elements return undefined for offsetWidth, so check for null/undefined
			// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
			// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
			if (val <= 0 || val == null) {

				// Fall back to computed then uncomputed css if necessary
				val = curCSS(elem, name, styles);
				if (val < 0 || val == null) {
					val = elem.style[name];
				}

				// Computed unit is not pixels. Stop here and return.
				if (rnumnonpx.test(val)) {
					return val;
				}

				// Check for style in case a browser which returns unreliable values
				// for getComputedStyle silently falls back to the reliable elem.style
				valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

				// Normalize "", auto, and prepare for extra
				val = parseFloat(val) || 0;
			}

			// Use the active box-sizing model to add/subtract irrelevant styles
			return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
		}

		function showHide(elements, show) {
			var display,
			    elem,
			    hidden,
			    values = [],
			    index = 0,
			    length = elements.length;

			for (; index < length; index++) {
				elem = elements[index];
				if (!elem.style) {
					continue;
				}

				values[index] = dataPriv.get(elem, "olddisplay");
				display = elem.style.display;
				if (show) {

					// Reset the inline display of this element to learn if it is
					// being hidden by cascaded rules or not
					if (!values[index] && display === "none") {
						elem.style.display = "";
					}

					// Set elements which have been overridden with display: none
					// in a stylesheet to whatever the default browser style is
					// for such an element
					if (elem.style.display === "" && isHidden(elem)) {
						values[index] = dataPriv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
					}
				} else {
					hidden = isHidden(elem);

					if (display !== "none" || !hidden) {
						dataPriv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
					}
				}
			}

			// Set the display of most of the elements in a second loop
			// to avoid the constant reflow
			for (index = 0; index < length; index++) {
				elem = elements[index];
				if (!elem.style) {
					continue;
				}
				if (!show || elem.style.display === "none" || elem.style.display === "") {
					elem.style.display = show ? values[index] || "" : "none";
				}
			}

			return elements;
		}

		jQuery.extend({

			// Add in style property hooks for overriding the default
			// behavior of getting and setting a style property
			cssHooks: {
				opacity: {
					get: function get(elem, computed) {
						if (computed) {

							// We should always get a number back from opacity
							var ret = curCSS(elem, "opacity");
							return ret === "" ? "1" : ret;
						}
					}
				}
			},

			// Don't automatically add "px" to these possibly-unitless properties
			cssNumber: {
				"animationIterationCount": true,
				"columnCount": true,
				"fillOpacity": true,
				"flexGrow": true,
				"flexShrink": true,
				"fontWeight": true,
				"lineHeight": true,
				"opacity": true,
				"order": true,
				"orphans": true,
				"widows": true,
				"zIndex": true,
				"zoom": true
			},

			// Add in properties whose names you wish to fix before
			// setting or getting the value
			cssProps: {
				"float": "cssFloat"
			},

			// Get and set the style property on a DOM Node
			style: function style(elem, name, value, extra) {

				// Don't set styles on text and comment nodes
				if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
					return;
				}

				// Make sure that we're working with the right name
				var ret,
				    type,
				    hooks,
				    origName = jQuery.camelCase(name),
				    style = elem.style;

				name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

				// Gets hook for the prefixed version, then unprefixed version
				hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

				// Check if we're setting a value
				if (value !== undefined) {
					type = typeof value === "undefined" ? "undefined" : _typeof(value);

					// Convert "+=" or "-=" to relative numbers (#7345)
					if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
						value = adjustCSS(elem, name, ret);

						// Fixes bug #9237
						type = "number";
					}

					// Make sure that null and NaN values aren't set (#7116)
					if (value == null || value !== value) {
						return;
					}

					// If a number was passed in, add the unit (except for certain CSS properties)
					if (type === "number") {
						value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
					}

					// Support: IE9-11+
					// background-* props affect original clone's values
					if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
						style[name] = "inherit";
					}

					// If a hook was provided, use that value, otherwise just set the specified value
					if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

						style[name] = value;
					}
				} else {

					// If a hook was provided get the non-computed value from there
					if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

						return ret;
					}

					// Otherwise just get the value from the style object
					return style[name];
				}
			},

			css: function css(elem, name, extra, styles) {
				var val,
				    num,
				    hooks,
				    origName = jQuery.camelCase(name);

				// Make sure that we're working with the right name
				name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

				// Try prefixed name followed by the unprefixed name
				hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

				// If a hook was provided get the computed value from there
				if (hooks && "get" in hooks) {
					val = hooks.get(elem, true, extra);
				}

				// Otherwise, if a way to get the computed value exists, use that
				if (val === undefined) {
					val = curCSS(elem, name, styles);
				}

				// Convert "normal" to computed value
				if (val === "normal" && name in cssNormalTransform) {
					val = cssNormalTransform[name];
				}

				// Make numeric if forced or a qualifier was provided and val looks numeric
				if (extra === "" || extra) {
					num = parseFloat(val);
					return extra === true || isFinite(num) ? num || 0 : val;
				}
				return val;
			}
		});

		jQuery.each(["height", "width"], function (i, name) {
			jQuery.cssHooks[name] = {
				get: function get(elem, computed, extra) {
					if (computed) {

						// Certain elements can have dimension info if we invisibly show them
						// but it must have a current display style that would benefit
						return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? swap(elem, cssShow, function () {
							return getWidthOrHeight(elem, name, extra);
						}) : getWidthOrHeight(elem, name, extra);
					}
				},

				set: function set(elem, value, extra) {
					var matches,
					    styles = extra && getStyles(elem),
					    subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles);

					// Convert to pixels if value adjustment is needed
					if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {

						elem.style[name] = value;
						value = jQuery.css(elem, name);
					}

					return setPositiveNumber(elem, value, subtract);
				}
			};
		});

		jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
			if (computed) {
				return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
					return elem.getBoundingClientRect().left;
				})) + "px";
			}
		});

		// Support: Android 2.3
		jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
			if (computed) {
				return swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]);
			}
		});

		// These hooks are used by animate to expand properties
		jQuery.each({
			margin: "",
			padding: "",
			border: "Width"
		}, function (prefix, suffix) {
			jQuery.cssHooks[prefix + suffix] = {
				expand: function expand(value) {
					var i = 0,
					    expanded = {},


					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [value];

					for (; i < 4; i++) {
						expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
					}

					return expanded;
				}
			};

			if (!rmargin.test(prefix)) {
				jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
			}
		});

		jQuery.fn.extend({
			css: function css(name, value) {
				return access(this, function (elem, name, value) {
					var styles,
					    len,
					    map = {},
					    i = 0;

					if (jQuery.isArray(name)) {
						styles = getStyles(elem);
						len = name.length;

						for (; i < len; i++) {
							map[name[i]] = jQuery.css(elem, name[i], false, styles);
						}

						return map;
					}

					return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
				}, name, value, arguments.length > 1);
			},
			show: function show() {
				return showHide(this, true);
			},
			hide: function hide() {
				return showHide(this);
			},
			toggle: function toggle(state) {
				if (typeof state === "boolean") {
					return state ? this.show() : this.hide();
				}

				return this.each(function () {
					if (isHidden(this)) {
						jQuery(this).show();
					} else {
						jQuery(this).hide();
					}
				});
			}
		});

		function Tween(elem, options, prop, end, easing) {
			return new Tween.prototype.init(elem, options, prop, end, easing);
		}
		jQuery.Tween = Tween;

		Tween.prototype = {
			constructor: Tween,
			init: function init(elem, options, prop, end, easing, unit) {
				this.elem = elem;
				this.prop = prop;
				this.easing = easing || jQuery.easing._default;
				this.options = options;
				this.start = this.now = this.cur();
				this.end = end;
				this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
			},
			cur: function cur() {
				var hooks = Tween.propHooks[this.prop];

				return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
			},
			run: function run(percent) {
				var eased,
				    hooks = Tween.propHooks[this.prop];

				if (this.options.duration) {
					this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
				} else {
					this.pos = eased = percent;
				}
				this.now = (this.end - this.start) * eased + this.start;

				if (this.options.step) {
					this.options.step.call(this.elem, this.now, this);
				}

				if (hooks && hooks.set) {
					hooks.set(this);
				} else {
					Tween.propHooks._default.set(this);
				}
				return this;
			}
		};

		Tween.prototype.init.prototype = Tween.prototype;

		Tween.propHooks = {
			_default: {
				get: function get(tween) {
					var result;

					// Use a property on the element directly when it is not a DOM element,
					// or when there is no matching style property that exists.
					if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
						return tween.elem[tween.prop];
					}

					// Passing an empty string as a 3rd parameter to .css will automatically
					// attempt a parseFloat and fallback to a string if the parse fails.
					// Simple values such as "10px" are parsed to Float;
					// complex values such as "rotate(1rad)" are returned as-is.
					result = jQuery.css(tween.elem, tween.prop, "");

					// Empty strings, null, undefined and "auto" are converted to 0.
					return !result || result === "auto" ? 0 : result;
				},
				set: function set(tween) {

					// Use step hook for back compat.
					// Use cssHook if its there.
					// Use .style if available and use plain properties where available.
					if (jQuery.fx.step[tween.prop]) {
						jQuery.fx.step[tween.prop](tween);
					} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
						jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
					} else {
						tween.elem[tween.prop] = tween.now;
					}
				}
			}
		};

		// Support: IE9
		// Panic based approach to setting things on disconnected nodes
		Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
			set: function set(tween) {
				if (tween.elem.nodeType && tween.elem.parentNode) {
					tween.elem[tween.prop] = tween.now;
				}
			}
		};

		jQuery.easing = {
			linear: function linear(p) {
				return p;
			},
			swing: function swing(p) {
				return 0.5 - Math.cos(p * Math.PI) / 2;
			},
			_default: "swing"
		};

		jQuery.fx = Tween.prototype.init;

		// Back Compat <1.8 extension point
		jQuery.fx.step = {};

		var fxNow,
		    timerId,
		    rfxtypes = /^(?:toggle|show|hide)$/,
		    rrun = /queueHooks$/;

		// Animations created synchronously will run synchronously
		function createFxNow() {
			window.setTimeout(function () {
				fxNow = undefined;
			});
			return fxNow = jQuery.now();
		}

		// Generate parameters to create a standard animation
		function genFx(type, includeWidth) {
			var which,
			    i = 0,
			    attrs = { height: type };

			// If we include width, step value is 1 to do all cssExpand values,
			// otherwise step value is 2 to skip over Left and Right
			includeWidth = includeWidth ? 1 : 0;
			for (; i < 4; i += 2 - includeWidth) {
				which = cssExpand[i];
				attrs["margin" + which] = attrs["padding" + which] = type;
			}

			if (includeWidth) {
				attrs.opacity = attrs.width = type;
			}

			return attrs;
		}

		function createTween(value, prop, animation) {
			var tween,
			    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
			    index = 0,
			    length = collection.length;
			for (; index < length; index++) {
				if (tween = collection[index].call(animation, prop, value)) {

					// We're done with this property
					return tween;
				}
			}
		}

		function defaultPrefilter(elem, props, opts) {
			/* jshint validthis: true */
			var prop,
			    value,
			    toggle,
			    tween,
			    hooks,
			    oldfire,
			    display,
			    checkDisplay,
			    anim = this,
			    orig = {},
			    style = elem.style,
			    hidden = elem.nodeType && isHidden(elem),
			    dataShow = dataPriv.get(elem, "fxshow");

			// Handle queue: false promises
			if (!opts.queue) {
				hooks = jQuery._queueHooks(elem, "fx");
				if (hooks.unqueued == null) {
					hooks.unqueued = 0;
					oldfire = hooks.empty.fire;
					hooks.empty.fire = function () {
						if (!hooks.unqueued) {
							oldfire();
						}
					};
				}
				hooks.unqueued++;

				anim.always(function () {

					// Ensure the complete handler is called before this completes
					anim.always(function () {
						hooks.unqueued--;
						if (!jQuery.queue(elem, "fx").length) {
							hooks.empty.fire();
						}
					});
				});
			}

			// Height/width overflow pass
			if (elem.nodeType === 1 && ("height" in props || "width" in props)) {

				// Make sure that nothing sneaks out
				// Record all 3 overflow attributes because IE9-10 do not
				// change the overflow attribute when overflowX and
				// overflowY are set to the same value
				opts.overflow = [style.overflow, style.overflowX, style.overflowY];

				// Set display property to inline-block for height/width
				// animations on inline elements that are having width/height animated
				display = jQuery.css(elem, "display");

				// Test default display if display is currently "none"
				checkDisplay = display === "none" ? dataPriv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

				if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
					style.display = "inline-block";
				}
			}

			if (opts.overflow) {
				style.overflow = "hidden";
				anim.always(function () {
					style.overflow = opts.overflow[0];
					style.overflowX = opts.overflow[1];
					style.overflowY = opts.overflow[2];
				});
			}

			// show/hide pass
			for (prop in props) {
				value = props[prop];
				if (rfxtypes.exec(value)) {
					delete props[prop];
					toggle = toggle || value === "toggle";
					if (value === (hidden ? "hide" : "show")) {

						// If there is dataShow left over from a stopped hide or show
						// and we are going to proceed with show, we should pretend to be hidden
						if (value === "show" && dataShow && dataShow[prop] !== undefined) {
							hidden = true;
						} else {
							continue;
						}
					}
					orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

					// Any non-fx value stops us from restoring the original display value
				} else {
					display = undefined;
				}
			}

			if (!jQuery.isEmptyObject(orig)) {
				if (dataShow) {
					if ("hidden" in dataShow) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access(elem, "fxshow", {});
				}

				// Store state if its toggle - enables .stop().toggle() to "reverse"
				if (toggle) {
					dataShow.hidden = !hidden;
				}
				if (hidden) {
					jQuery(elem).show();
				} else {
					anim.done(function () {
						jQuery(elem).hide();
					});
				}
				anim.done(function () {
					var prop;

					dataPriv.remove(elem, "fxshow");
					for (prop in orig) {
						jQuery.style(elem, prop, orig[prop]);
					}
				});
				for (prop in orig) {
					tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

					if (!(prop in dataShow)) {
						dataShow[prop] = tween.start;
						if (hidden) {
							tween.end = tween.start;
							tween.start = prop === "width" || prop === "height" ? 1 : 0;
						}
					}
				}

				// If this is a noop like .hide().hide(), restore an overwritten display value
			} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
				style.display = display;
			}
		}

		function propFilter(props, specialEasing) {
			var index, name, easing, value, hooks;

			// camelCase, specialEasing and expand cssHook pass
			for (index in props) {
				name = jQuery.camelCase(index);
				easing = specialEasing[name];
				value = props[index];
				if (jQuery.isArray(value)) {
					easing = value[1];
					value = props[index] = value[0];
				}

				if (index !== name) {
					props[name] = value;
					delete props[index];
				}

				hooks = jQuery.cssHooks[name];
				if (hooks && "expand" in hooks) {
					value = hooks.expand(value);
					delete props[name];

					// Not quite $.extend, this won't overwrite existing keys.
					// Reusing 'index' because we have the correct "name"
					for (index in value) {
						if (!(index in props)) {
							props[index] = value[index];
							specialEasing[index] = easing;
						}
					}
				} else {
					specialEasing[name] = easing;
				}
			}
		}

		function Animation(elem, properties, options) {
			var result,
			    stopped,
			    index = 0,
			    length = Animation.prefilters.length,
			    deferred = jQuery.Deferred().always(function () {

				// Don't match elem in the :animated selector
				delete tick.elem;
			}),
			    tick = function tick() {
				if (stopped) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
				    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				    percent = 1 - temp,
				    index = 0,
				    length = animation.tweens.length;

				for (; index < length; index++) {
					animation.tweens[index].run(percent);
				}

				deferred.notifyWith(elem, [animation, percent, remaining]);

				if (percent < 1 && length) {
					return remaining;
				} else {
					deferred.resolveWith(elem, [animation]);
					return false;
				}
			},
			    animation = deferred.promise({
				elem: elem,
				props: jQuery.extend({}, properties),
				opts: jQuery.extend(true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function createTween(prop, end) {
					var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
					animation.tweens.push(tween);
					return tween;
				},
				stop: function stop(gotoEnd) {
					var index = 0,


					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
					if (stopped) {
						return this;
					}
					stopped = true;
					for (; index < length; index++) {
						animation.tweens[index].run(1);
					}

					// Resolve when we played the last frame; otherwise, reject
					if (gotoEnd) {
						deferred.notifyWith(elem, [animation, 1, 0]);
						deferred.resolveWith(elem, [animation, gotoEnd]);
					} else {
						deferred.rejectWith(elem, [animation, gotoEnd]);
					}
					return this;
				}
			}),
			    props = animation.props;

			propFilter(props, animation.opts.specialEasing);

			for (; index < length; index++) {
				result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
				if (result) {
					if (jQuery.isFunction(result.stop)) {
						jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
					}
					return result;
				}
			}

			jQuery.map(props, createTween, animation);

			if (jQuery.isFunction(animation.opts.start)) {
				animation.opts.start.call(elem, animation);
			}

			jQuery.fx.timer(jQuery.extend(tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			}));

			// attach callbacks from options
			return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
		}

		jQuery.Animation = jQuery.extend(Animation, {
			tweeners: {
				"*": [function (prop, value) {
					var tween = this.createTween(prop, value);
					adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
					return tween;
				}]
			},

			tweener: function tweener(props, callback) {
				if (jQuery.isFunction(props)) {
					callback = props;
					props = ["*"];
				} else {
					props = props.match(rnotwhite);
				}

				var prop,
				    index = 0,
				    length = props.length;

				for (; index < length; index++) {
					prop = props[index];
					Animation.tweeners[prop] = Animation.tweeners[prop] || [];
					Animation.tweeners[prop].unshift(callback);
				}
			},

			prefilters: [defaultPrefilter],

			prefilter: function prefilter(callback, prepend) {
				if (prepend) {
					Animation.prefilters.unshift(callback);
				} else {
					Animation.prefilters.push(callback);
				}
			}
		});

		jQuery.speed = function (speed, easing, fn) {
			var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
				complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
				duration: speed,
				easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
			};

			opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

			// Normalize opt.queue - true/undefined/null -> "fx"
			if (opt.queue == null || opt.queue === true) {
				opt.queue = "fx";
			}

			// Queueing
			opt.old = opt.complete;

			opt.complete = function () {
				if (jQuery.isFunction(opt.old)) {
					opt.old.call(this);
				}

				if (opt.queue) {
					jQuery.dequeue(this, opt.queue);
				}
			};

			return opt;
		};

		jQuery.fn.extend({
			fadeTo: function fadeTo(speed, to, easing, callback) {

				// Show any hidden elements after setting opacity to 0
				return this.filter(isHidden).css("opacity", 0).show()

				// Animate to the value specified
				.end().animate({ opacity: to }, speed, easing, callback);
			},
			animate: function animate(prop, speed, easing, callback) {
				var empty = jQuery.isEmptyObject(prop),
				    optall = jQuery.speed(speed, easing, callback),
				    doAnimation = function doAnimation() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation(this, jQuery.extend({}, prop), optall);

					// Empty animations, or finishing resolves immediately
					if (empty || dataPriv.get(this, "finish")) {
						anim.stop(true);
					}
				};
				doAnimation.finish = doAnimation;

				return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
			},
			stop: function stop(type, clearQueue, gotoEnd) {
				var stopQueue = function stopQueue(hooks) {
					var stop = hooks.stop;
					delete hooks.stop;
					stop(gotoEnd);
				};

				if (typeof type !== "string") {
					gotoEnd = clearQueue;
					clearQueue = type;
					type = undefined;
				}
				if (clearQueue && type !== false) {
					this.queue(type || "fx", []);
				}

				return this.each(function () {
					var dequeue = true,
					    index = type != null && type + "queueHooks",
					    timers = jQuery.timers,
					    data = dataPriv.get(this);

					if (index) {
						if (data[index] && data[index].stop) {
							stopQueue(data[index]);
						}
					} else {
						for (index in data) {
							if (data[index] && data[index].stop && rrun.test(index)) {
								stopQueue(data[index]);
							}
						}
					}

					for (index = timers.length; index--;) {
						if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

							timers[index].anim.stop(gotoEnd);
							dequeue = false;
							timers.splice(index, 1);
						}
					}

					// Start the next in the queue if the last step wasn't forced.
					// Timers currently will call their complete callbacks, which
					// will dequeue but only if they were gotoEnd.
					if (dequeue || !gotoEnd) {
						jQuery.dequeue(this, type);
					}
				});
			},
			finish: function finish(type) {
				if (type !== false) {
					type = type || "fx";
				}
				return this.each(function () {
					var index,
					    data = dataPriv.get(this),
					    queue = data[type + "queue"],
					    hooks = data[type + "queueHooks"],
					    timers = jQuery.timers,
					    length = queue ? queue.length : 0;

					// Enable finishing flag on private data
					data.finish = true;

					// Empty the queue first
					jQuery.queue(this, type, []);

					if (hooks && hooks.stop) {
						hooks.stop.call(this, true);
					}

					// Look for any active animations, and finish them
					for (index = timers.length; index--;) {
						if (timers[index].elem === this && timers[index].queue === type) {
							timers[index].anim.stop(true);
							timers.splice(index, 1);
						}
					}

					// Look for any animations in the old queue and finish them
					for (index = 0; index < length; index++) {
						if (queue[index] && queue[index].finish) {
							queue[index].finish.call(this);
						}
					}

					// Turn off finishing flag
					delete data.finish;
				});
			}
		});

		jQuery.each(["toggle", "show", "hide"], function (i, name) {
			var cssFn = jQuery.fn[name];
			jQuery.fn[name] = function (speed, easing, callback) {
				return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
			};
		});

		// Generate shortcuts for custom animations
		jQuery.each({
			slideDown: genFx("show"),
			slideUp: genFx("hide"),
			slideToggle: genFx("toggle"),
			fadeIn: { opacity: "show" },
			fadeOut: { opacity: "hide" },
			fadeToggle: { opacity: "toggle" }
		}, function (name, props) {
			jQuery.fn[name] = function (speed, easing, callback) {
				return this.animate(props, speed, easing, callback);
			};
		});

		jQuery.timers = [];
		jQuery.fx.tick = function () {
			var timer,
			    i = 0,
			    timers = jQuery.timers;

			fxNow = jQuery.now();

			for (; i < timers.length; i++) {
				timer = timers[i];

				// Checks the timer has not already been removed
				if (!timer() && timers[i] === timer) {
					timers.splice(i--, 1);
				}
			}

			if (!timers.length) {
				jQuery.fx.stop();
			}
			fxNow = undefined;
		};

		jQuery.fx.timer = function (timer) {
			jQuery.timers.push(timer);
			if (timer()) {
				jQuery.fx.start();
			} else {
				jQuery.timers.pop();
			}
		};

		jQuery.fx.interval = 13;
		jQuery.fx.start = function () {
			if (!timerId) {
				timerId = window.setInterval(jQuery.fx.tick, jQuery.fx.interval);
			}
		};

		jQuery.fx.stop = function () {
			window.clearInterval(timerId);

			timerId = null;
		};

		jQuery.fx.speeds = {
			slow: 600,
			fast: 200,

			// Default speed
			_default: 400
		};

		// Based off of the plugin by Clint Helfers, with permission.
		// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
		jQuery.fn.delay = function (time, type) {
			time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
			type = type || "fx";

			return this.queue(type, function (next, hooks) {
				var timeout = window.setTimeout(next, time);
				hooks.stop = function () {
					window.clearTimeout(timeout);
				};
			});
		};

		(function () {
			var input = document.createElement("input"),
			    select = document.createElement("select"),
			    opt = select.appendChild(document.createElement("option"));

			input.type = "checkbox";

			// Support: iOS<=5.1, Android<=4.2+
			// Default value for a checkbox should be "on"
			support.checkOn = input.value !== "";

			// Support: IE<=11+
			// Must access selectedIndex to make default options select
			support.optSelected = opt.selected;

			// Support: Android<=2.3
			// Options inside disabled selects are incorrectly marked as disabled
			select.disabled = true;
			support.optDisabled = !opt.disabled;

			// Support: IE<=11+
			// An input loses its value after becoming a radio
			input = document.createElement("input");
			input.value = "t";
			input.type = "radio";
			support.radioValue = input.value === "t";
		})();

		var boolHook,
		    attrHandle = jQuery.expr.attrHandle;

		jQuery.fn.extend({
			attr: function attr(name, value) {
				return access(this, jQuery.attr, name, value, arguments.length > 1);
			},

			removeAttr: function removeAttr(name) {
				return this.each(function () {
					jQuery.removeAttr(this, name);
				});
			}
		});

		jQuery.extend({
			attr: function attr(elem, name, value) {
				var ret,
				    hooks,
				    nType = elem.nodeType;

				// Don't get/set attributes on text, comment and attribute nodes
				if (nType === 3 || nType === 8 || nType === 2) {
					return;
				}

				// Fallback to prop when attributes are not supported
				if (typeof elem.getAttribute === "undefined") {
					return jQuery.prop(elem, name, value);
				}

				// All attributes are lowercase
				// Grab necessary hook if one is defined
				if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
					name = name.toLowerCase();
					hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
				}

				if (value !== undefined) {
					if (value === null) {
						jQuery.removeAttr(elem, name);
						return;
					}

					if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
						return ret;
					}

					elem.setAttribute(name, value + "");
					return value;
				}

				if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
					return ret;
				}

				ret = jQuery.find.attr(elem, name);

				// Non-existent attributes return null, we normalize to undefined
				return ret == null ? undefined : ret;
			},

			attrHooks: {
				type: {
					set: function set(elem, value) {
						if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
							var val = elem.value;
							elem.setAttribute("type", value);
							if (val) {
								elem.value = val;
							}
							return value;
						}
					}
				}
			},

			removeAttr: function removeAttr(elem, value) {
				var name,
				    propName,
				    i = 0,
				    attrNames = value && value.match(rnotwhite);

				if (attrNames && elem.nodeType === 1) {
					while (name = attrNames[i++]) {
						propName = jQuery.propFix[name] || name;

						// Boolean attributes get special treatment (#10870)
						if (jQuery.expr.match.bool.test(name)) {

							// Set corresponding property to false
							elem[propName] = false;
						}

						elem.removeAttribute(name);
					}
				}
			}
		});

		// Hooks for boolean attributes
		boolHook = {
			set: function set(elem, value, name) {
				if (value === false) {

					// Remove boolean attributes when set to false
					jQuery.removeAttr(elem, name);
				} else {
					elem.setAttribute(name, name);
				}
				return name;
			}
		};
		jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
			var getter = attrHandle[name] || jQuery.find.attr;

			attrHandle[name] = function (elem, name, isXML) {
				var ret, handle;
				if (!isXML) {

					// Avoid an infinite loop by temporarily removing this function from the getter
					handle = attrHandle[name];
					attrHandle[name] = ret;
					ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
					attrHandle[name] = handle;
				}
				return ret;
			};
		});

		var rfocusable = /^(?:input|select|textarea|button)$/i,
		    rclickable = /^(?:a|area)$/i;

		jQuery.fn.extend({
			prop: function prop(name, value) {
				return access(this, jQuery.prop, name, value, arguments.length > 1);
			},

			removeProp: function removeProp(name) {
				return this.each(function () {
					delete this[jQuery.propFix[name] || name];
				});
			}
		});

		jQuery.extend({
			prop: function prop(elem, name, value) {
				var ret,
				    hooks,
				    nType = elem.nodeType;

				// Don't get/set properties on text, comment and attribute nodes
				if (nType === 3 || nType === 8 || nType === 2) {
					return;
				}

				if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

					// Fix name and attach hooks
					name = jQuery.propFix[name] || name;
					hooks = jQuery.propHooks[name];
				}

				if (value !== undefined) {
					if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
						return ret;
					}

					return elem[name] = value;
				}

				if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
					return ret;
				}

				return elem[name];
			},

			propHooks: {
				tabIndex: {
					get: function get(elem) {

						// elem.tabIndex doesn't always return the
						// correct value when it hasn't been explicitly set
						// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
						// Use proper attribute retrieval(#12072)
						var tabindex = jQuery.find.attr(elem, "tabindex");

						return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
					}
				}
			},

			propFix: {
				"for": "htmlFor",
				"class": "className"
			}
		});

		// Support: IE <=11 only
		// Accessing the selectedIndex property
		// forces the browser to respect setting selected
		// on the option
		// The getter ensures a default option is selected
		// when in an optgroup
		if (!support.optSelected) {
			jQuery.propHooks.selected = {
				get: function get(elem) {
					var parent = elem.parentNode;
					if (parent && parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
					return null;
				},
				set: function set(elem) {
					var parent = elem.parentNode;
					if (parent) {
						parent.selectedIndex;

						if (parent.parentNode) {
							parent.parentNode.selectedIndex;
						}
					}
				}
			};
		}

		jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
			jQuery.propFix[this.toLowerCase()] = this;
		});

		var rclass = /[\t\r\n\f]/g;

		function getClass(elem) {
			return elem.getAttribute && elem.getAttribute("class") || "";
		}

		jQuery.fn.extend({
			addClass: function addClass(value) {
				var classes,
				    elem,
				    cur,
				    curValue,
				    clazz,
				    j,
				    finalValue,
				    i = 0;

				if (jQuery.isFunction(value)) {
					return this.each(function (j) {
						jQuery(this).addClass(value.call(this, j, getClass(this)));
					});
				}

				if (typeof value === "string" && value) {
					classes = value.match(rnotwhite) || [];

					while (elem = this[i++]) {
						curValue = getClass(elem);
						cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " ");

						if (cur) {
							j = 0;
							while (clazz = classes[j++]) {
								if (cur.indexOf(" " + clazz + " ") < 0) {
									cur += clazz + " ";
								}
							}

							// Only assign if different to avoid unneeded rendering.
							finalValue = jQuery.trim(cur);
							if (curValue !== finalValue) {
								elem.setAttribute("class", finalValue);
							}
						}
					}
				}

				return this;
			},

			removeClass: function removeClass(value) {
				var classes,
				    elem,
				    cur,
				    curValue,
				    clazz,
				    j,
				    finalValue,
				    i = 0;

				if (jQuery.isFunction(value)) {
					return this.each(function (j) {
						jQuery(this).removeClass(value.call(this, j, getClass(this)));
					});
				}

				if (!arguments.length) {
					return this.attr("class", "");
				}

				if (typeof value === "string" && value) {
					classes = value.match(rnotwhite) || [];

					while (elem = this[i++]) {
						curValue = getClass(elem);

						// This expression is here for better compressibility (see addClass)
						cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " ");

						if (cur) {
							j = 0;
							while (clazz = classes[j++]) {

								// Remove *all* instances
								while (cur.indexOf(" " + clazz + " ") > -1) {
									cur = cur.replace(" " + clazz + " ", " ");
								}
							}

							// Only assign if different to avoid unneeded rendering.
							finalValue = jQuery.trim(cur);
							if (curValue !== finalValue) {
								elem.setAttribute("class", finalValue);
							}
						}
					}
				}

				return this;
			},

			toggleClass: function toggleClass(value, stateVal) {
				var type = typeof value === "undefined" ? "undefined" : _typeof(value);

				if (typeof stateVal === "boolean" && type === "string") {
					return stateVal ? this.addClass(value) : this.removeClass(value);
				}

				if (jQuery.isFunction(value)) {
					return this.each(function (i) {
						jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
					});
				}

				return this.each(function () {
					var className, i, self, classNames;

					if (type === "string") {

						// Toggle individual class names
						i = 0;
						self = jQuery(this);
						classNames = value.match(rnotwhite) || [];

						while (className = classNames[i++]) {

							// Check each className given, space separated list
							if (self.hasClass(className)) {
								self.removeClass(className);
							} else {
								self.addClass(className);
							}
						}

						// Toggle whole class name
					} else if (value === undefined || type === "boolean") {
						className = getClass(this);
						if (className) {

							// Store className if set
							dataPriv.set(this, "__className__", className);
						}

						// If the element has a class name or if we're passed `false`,
						// then remove the whole classname (if there was one, the above saved it).
						// Otherwise bring back whatever was previously saved (if anything),
						// falling back to the empty string if nothing was stored.
						if (this.setAttribute) {
							this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
						}
					}
				});
			},

			hasClass: function hasClass(selector) {
				var className,
				    elem,
				    i = 0;

				className = " " + selector + " ";
				while (elem = this[i++]) {
					if (elem.nodeType === 1 && (" " + getClass(elem) + " ").replace(rclass, " ").indexOf(className) > -1) {
						return true;
					}
				}

				return false;
			}
		});

		var rreturn = /\r/g,
		    rspaces = /[\x20\t\r\n\f]+/g;

		jQuery.fn.extend({
			val: function val(value) {
				var hooks,
				    ret,
				    isFunction,
				    elem = this[0];

				if (!arguments.length) {
					if (elem) {
						hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

						if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
							return ret;
						}

						ret = elem.value;

						return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace(rreturn, "") :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
					}

					return;
				}

				isFunction = jQuery.isFunction(value);

				return this.each(function (i) {
					var val;

					if (this.nodeType !== 1) {
						return;
					}

					if (isFunction) {
						val = value.call(this, i, jQuery(this).val());
					} else {
						val = value;
					}

					// Treat null/undefined as ""; convert numbers to string
					if (val == null) {
						val = "";
					} else if (typeof val === "number") {
						val += "";
					} else if (jQuery.isArray(val)) {
						val = jQuery.map(val, function (value) {
							return value == null ? "" : value + "";
						});
					}

					hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

					// If set returns undefined, fall back to normal setting
					if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
						this.value = val;
					}
				});
			}
		});

		jQuery.extend({
			valHooks: {
				option: {
					get: function get(elem) {

						var val = jQuery.find.attr(elem, "value");
						return val != null ? val :

						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim(jQuery.text(elem)).replace(rspaces, " ");
					}
				},
				select: {
					get: function get(elem) {
						var value,
						    option,
						    options = elem.options,
						    index = elem.selectedIndex,
						    one = elem.type === "select-one" || index < 0,
						    values = one ? null : [],
						    max = one ? index + 1 : options.length,
						    i = index < 0 ? max : one ? index : 0;

						// Loop through all the selected options
						for (; i < max; i++) {
							option = options[i];

							// IE8-9 doesn't update selected after form reset (#2551)
							if ((option.selected || i === index) && (

							// Don't return options that are disabled or in a disabled optgroup
							support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

								// Get the specific value for the option
								value = jQuery(option).val();

								// We don't need an array for one selects
								if (one) {
									return value;
								}

								// Multi-Selects return an array
								values.push(value);
							}
						}

						return values;
					},

					set: function set(elem, value) {
						var optionSet,
						    option,
						    options = elem.options,
						    values = jQuery.makeArray(value),
						    i = options.length;

						while (i--) {
							option = options[i];
							if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
								optionSet = true;
							}
						}

						// Force browsers to behave consistently when non-matching value is set
						if (!optionSet) {
							elem.selectedIndex = -1;
						}
						return values;
					}
				}
			}
		});

		// Radios and checkboxes getter/setter
		jQuery.each(["radio", "checkbox"], function () {
			jQuery.valHooks[this] = {
				set: function set(elem, value) {
					if (jQuery.isArray(value)) {
						return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
					}
				}
			};
			if (!support.checkOn) {
				jQuery.valHooks[this].get = function (elem) {
					return elem.getAttribute("value") === null ? "on" : elem.value;
				};
			}
		});

		// Return jQuery for attributes-only inclusion


		var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

		jQuery.extend(jQuery.event, {

			trigger: function trigger(event, data, elem, onlyHandlers) {

				var i,
				    cur,
				    tmp,
				    bubbleType,
				    ontype,
				    handle,
				    special,
				    eventPath = [elem || document],
				    type = hasOwn.call(event, "type") ? event.type : event,
				    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

				cur = tmp = elem = elem || document;

				// Don't do events on text and comment nodes
				if (elem.nodeType === 3 || elem.nodeType === 8) {
					return;
				}

				// focus/blur morphs to focusin/out; ensure we're not firing them right now
				if (rfocusMorph.test(type + jQuery.event.triggered)) {
					return;
				}

				if (type.indexOf(".") > -1) {

					// Namespaced trigger; create a regexp to match event type in handle()
					namespaces = type.split(".");
					type = namespaces.shift();
					namespaces.sort();
				}
				ontype = type.indexOf(":") < 0 && "on" + type;

				// Caller can pass in a jQuery.Event object, Object, or just an event type string
				event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

				// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
				event.isTrigger = onlyHandlers ? 2 : 3;
				event.namespace = namespaces.join(".");
				event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

				// Clean up the event in case it is being reused
				event.result = undefined;
				if (!event.target) {
					event.target = elem;
				}

				// Clone any incoming data and prepend the event, creating the handler arg list
				data = data == null ? [event] : jQuery.makeArray(data, [event]);

				// Allow special events to draw outside the lines
				special = jQuery.event.special[type] || {};
				if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
					return;
				}

				// Determine event propagation path in advance, per W3C events spec (#9951)
				// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
				if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

					bubbleType = special.delegateType || type;
					if (!rfocusMorph.test(bubbleType + type)) {
						cur = cur.parentNode;
					}
					for (; cur; cur = cur.parentNode) {
						eventPath.push(cur);
						tmp = cur;
					}

					// Only add window if we got to document (e.g., not plain obj or detached DOM)
					if (tmp === (elem.ownerDocument || document)) {
						eventPath.push(tmp.defaultView || tmp.parentWindow || window);
					}
				}

				// Fire handlers on the event path
				i = 0;
				while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

					event.type = i > 1 ? bubbleType : special.bindType || type;

					// jQuery handler
					handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
					if (handle) {
						handle.apply(cur, data);
					}

					// Native handler
					handle = ontype && cur[ontype];
					if (handle && handle.apply && acceptData(cur)) {
						event.result = handle.apply(cur, data);
						if (event.result === false) {
							event.preventDefault();
						}
					}
				}
				event.type = type;

				// If nobody prevented the default action, do it now
				if (!onlyHandlers && !event.isDefaultPrevented()) {

					if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

						// Call a native DOM method on the target with the same name name as the event.
						// Don't do default actions on window, that's where global variables be (#6170)
						if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

							// Don't re-trigger an onFOO event when we call its FOO() method
							tmp = elem[ontype];

							if (tmp) {
								elem[ontype] = null;
							}

							// Prevent re-triggering of the same event, since we already bubbled it above
							jQuery.event.triggered = type;
							elem[type]();
							jQuery.event.triggered = undefined;

							if (tmp) {
								elem[ontype] = tmp;
							}
						}
					}
				}

				return event.result;
			},

			// Piggyback on a donor event to simulate a different one
			// Used only for `focus(in | out)` events
			simulate: function simulate(type, elem, event) {
				var e = jQuery.extend(new jQuery.Event(), event, {
					type: type,
					isSimulated: true
				});

				jQuery.event.trigger(e, null, elem);
			}

		});

		jQuery.fn.extend({

			trigger: function trigger(type, data) {
				return this.each(function () {
					jQuery.event.trigger(type, data, this);
				});
			},
			triggerHandler: function triggerHandler(type, data) {
				var elem = this[0];
				if (elem) {
					return jQuery.event.trigger(type, data, elem, true);
				}
			}
		});

		jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {

			// Handle event binding
			jQuery.fn[name] = function (data, fn) {
				return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
			};
		});

		jQuery.fn.extend({
			hover: function hover(fnOver, fnOut) {
				return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
			}
		});

		support.focusin = "onfocusin" in window;

		// Support: Firefox
		// Firefox doesn't have focus(in | out) events
		// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
		//
		// Support: Chrome, Safari
		// focus(in | out) events fire after focus & blur events,
		// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
		// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
		if (!support.focusin) {
			jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

				// Attach a single capturing handler on the document while someone wants focusin/focusout
				var handler = function handler(event) {
					jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
				};

				jQuery.event.special[fix] = {
					setup: function setup() {
						var doc = this.ownerDocument || this,
						    attaches = dataPriv.access(doc, fix);

						if (!attaches) {
							doc.addEventListener(orig, handler, true);
						}
						dataPriv.access(doc, fix, (attaches || 0) + 1);
					},
					teardown: function teardown() {
						var doc = this.ownerDocument || this,
						    attaches = dataPriv.access(doc, fix) - 1;

						if (!attaches) {
							doc.removeEventListener(orig, handler, true);
							dataPriv.remove(doc, fix);
						} else {
							dataPriv.access(doc, fix, attaches);
						}
					}
				};
			});
		}
		var location = window.location;

		var nonce = jQuery.now();

		var rquery = /\?/;

		// Support: Android 2.3
		// Workaround failure to string-cast null input
		jQuery.parseJSON = function (data) {
			return JSON.parse(data + "");
		};

		// Cross-browser xml parsing
		jQuery.parseXML = function (data) {
			var xml;
			if (!data || typeof data !== "string") {
				return null;
			}

			// Support: IE9
			try {
				xml = new window.DOMParser().parseFromString(data, "text/xml");
			} catch (e) {
				xml = undefined;
			}

			if (!xml || xml.getElementsByTagName("parsererror").length) {
				jQuery.error("Invalid XML: " + data);
			}
			return xml;
		};

		var rhash = /#.*$/,
		    rts = /([?&])_=[^&]*/,
		    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,


		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		    rnoContent = /^(?:GET|HEAD)$/,
		    rprotocol = /^\/\//,


		/* Prefilters
	  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	  * 2) These are called:
	  *    - BEFORE asking for a transport
	  *    - AFTER param serialization (s.data is a string if s.processData is true)
	  * 3) key is the dataType
	  * 4) the catchall symbol "*" can be used
	  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	  */
		prefilters = {},


		/* Transports bindings
	  * 1) key is the dataType
	  * 2) the catchall symbol "*" can be used
	  * 3) selection will start with transport dataType and THEN go to "*" if needed
	  */
		transports = {},


		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat("*"),


		// Anchor tag for parsing the document origin
		originAnchor = document.createElement("a");
		originAnchor.href = location.href;

		// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
		function addToPrefiltersOrTransports(structure) {

			// dataTypeExpression is optional and defaults to "*"
			return function (dataTypeExpression, func) {

				if (typeof dataTypeExpression !== "string") {
					func = dataTypeExpression;
					dataTypeExpression = "*";
				}

				var dataType,
				    i = 0,
				    dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

				if (jQuery.isFunction(func)) {

					// For each dataType in the dataTypeExpression
					while (dataType = dataTypes[i++]) {

						// Prepend if requested
						if (dataType[0] === "+") {
							dataType = dataType.slice(1) || "*";
							(structure[dataType] = structure[dataType] || []).unshift(func);

							// Otherwise append
						} else {
							(structure[dataType] = structure[dataType] || []).push(func);
						}
					}
				}
			};
		}

		// Base inspection function for prefilters and transports
		function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

			var inspected = {},
			    seekingTransport = structure === transports;

			function inspect(dataType) {
				var selected;
				inspected[dataType] = true;
				jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
					var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
					if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

						options.dataTypes.unshift(dataTypeOrTransport);
						inspect(dataTypeOrTransport);
						return false;
					} else if (seekingTransport) {
						return !(selected = dataTypeOrTransport);
					}
				});
				return selected;
			}

			return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
		}

		// A special extend for ajax options
		// that takes "flat" options (not to be deep extended)
		// Fixes #9887
		function ajaxExtend(target, src) {
			var key,
			    deep,
			    flatOptions = jQuery.ajaxSettings.flatOptions || {};

			for (key in src) {
				if (src[key] !== undefined) {
					(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
				}
			}
			if (deep) {
				jQuery.extend(true, target, deep);
			}

			return target;
		}

		/* Handles responses to an ajax request:
	  * - finds the right dataType (mediates between content-type and expected dataType)
	  * - returns the corresponding response
	  */
		function ajaxHandleResponses(s, jqXHR, responses) {

			var ct,
			    type,
			    finalDataType,
			    firstDataType,
			    contents = s.contents,
			    dataTypes = s.dataTypes;

			// Remove auto dataType and get content-type in the process
			while (dataTypes[0] === "*") {
				dataTypes.shift();
				if (ct === undefined) {
					ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
				}
			}

			// Check if we're dealing with a known content-type
			if (ct) {
				for (type in contents) {
					if (contents[type] && contents[type].test(ct)) {
						dataTypes.unshift(type);
						break;
					}
				}
			}

			// Check to see if we have a response for the expected dataType
			if (dataTypes[0] in responses) {
				finalDataType = dataTypes[0];
			} else {

				// Try convertible dataTypes
				for (type in responses) {
					if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
						finalDataType = type;
						break;
					}
					if (!firstDataType) {
						firstDataType = type;
					}
				}

				// Or just use first one
				finalDataType = finalDataType || firstDataType;
			}

			// If we found a dataType
			// We add the dataType to the list if needed
			// and return the corresponding response
			if (finalDataType) {
				if (finalDataType !== dataTypes[0]) {
					dataTypes.unshift(finalDataType);
				}
				return responses[finalDataType];
			}
		}

		/* Chain conversions given the request and the original response
	  * Also sets the responseXXX fields on the jqXHR instance
	  */
		function ajaxConvert(s, response, jqXHR, isSuccess) {
			var conv2,
			    current,
			    conv,
			    tmp,
			    prev,
			    converters = {},


			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

			// Create converters map with lowercased keys
			if (dataTypes[1]) {
				for (conv in s.converters) {
					converters[conv.toLowerCase()] = s.converters[conv];
				}
			}

			current = dataTypes.shift();

			// Convert to each sequential dataType
			while (current) {

				if (s.responseFields[current]) {
					jqXHR[s.responseFields[current]] = response;
				}

				// Apply the dataFilter if provided
				if (!prev && isSuccess && s.dataFilter) {
					response = s.dataFilter(response, s.dataType);
				}

				prev = current;
				current = dataTypes.shift();

				if (current) {

					// There's only work to do if current dataType is non-auto
					if (current === "*") {

						current = prev;

						// Convert response if prev dataType is non-auto and differs from current
					} else if (prev !== "*" && prev !== current) {

						// Seek a direct converter
						conv = converters[prev + " " + current] || converters["* " + current];

						// If none found, seek a pair
						if (!conv) {
							for (conv2 in converters) {

								// If conv2 outputs current
								tmp = conv2.split(" ");
								if (tmp[1] === current) {

									// If prev can be converted to accepted input
									conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
									if (conv) {

										// Condense equivalence converters
										if (conv === true) {
											conv = converters[conv2];

											// Otherwise, insert the intermediate dataType
										} else if (converters[conv2] !== true) {
											current = tmp[0];
											dataTypes.unshift(tmp[1]);
										}
										break;
									}
								}
							}
						}

						// Apply converter (if not an equivalence)
						if (conv !== true) {

							// Unless errors are allowed to bubble, catch and return them
							if (conv && s.throws) {
								response = conv(response);
							} else {
								try {
									response = conv(response);
								} catch (e) {
									return {
										state: "parsererror",
										error: conv ? e : "No conversion from " + prev + " to " + current
									};
								}
							}
						}
					}
				}
			}

			return { state: "success", data: response };
		}

		jQuery.extend({

			// Counter for holding the number of active queries
			active: 0,

			// Last-Modified header cache for next request
			lastModified: {},
			etag: {},

			ajaxSettings: {
				url: location.href,
				type: "GET",
				isLocal: rlocalProtocol.test(location.protocol),
				global: true,
				processData: true,
				async: true,
				contentType: "application/x-www-form-urlencoded; charset=UTF-8",
				/*
	   timeout: 0,
	   data: null,
	   dataType: null,
	   username: null,
	   password: null,
	   cache: null,
	   throws: false,
	   traditional: false,
	   headers: {},
	   */

				accepts: {
					"*": allTypes,
					text: "text/plain",
					html: "text/html",
					xml: "application/xml, text/xml",
					json: "application/json, text/javascript"
				},

				contents: {
					xml: /\bxml\b/,
					html: /\bhtml/,
					json: /\bjson\b/
				},

				responseFields: {
					xml: "responseXML",
					text: "responseText",
					json: "responseJSON"
				},

				// Data converters
				// Keys separate source (or catchall "*") and destination types with a single space
				converters: {

					// Convert anything to text
					"* text": String,

					// Text to html (true = no transformation)
					"text html": true,

					// Evaluate text as a json expression
					"text json": jQuery.parseJSON,

					// Parse text as xml
					"text xml": jQuery.parseXML
				},

				// For options that shouldn't be deep extended:
				// you can add your own custom options here if
				// and when you create one that shouldn't be
				// deep extended (see ajaxExtend)
				flatOptions: {
					url: true,
					context: true
				}
			},

			// Creates a full fledged settings object into target
			// with both ajaxSettings and settings fields.
			// If target is omitted, writes into ajaxSettings.
			ajaxSetup: function ajaxSetup(target, settings) {
				return settings ?

				// Building a settings object
				ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

				// Extending ajaxSettings
				ajaxExtend(jQuery.ajaxSettings, target);
			},

			ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
			ajaxTransport: addToPrefiltersOrTransports(transports),

			// Main method
			ajax: function ajax(url, options) {

				// If url is an object, simulate pre-1.5 signature
				if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
					options = url;
					url = undefined;
				}

				// Force options to be an object
				options = options || {};

				var transport,


				// URL without anti-cache param
				cacheURL,


				// Response headers
				responseHeadersString,
				    responseHeaders,


				// timeout handle
				timeoutTimer,


				// Url cleanup var
				urlAnchor,


				// To know if global events are to be dispatched
				fireGlobals,


				// Loop variable
				i,


				// Create the final options object
				s = jQuery.ajaxSetup({}, options),


				// Callbacks context
				callbackContext = s.context || s,


				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


				// Deferreds
				deferred = jQuery.Deferred(),
				    completeDeferred = jQuery.Callbacks("once memory"),


				// Status-dependent callbacks
				_statusCode = s.statusCode || {},


				// Headers (they are sent all at once)
				requestHeaders = {},
				    requestHeadersNames = {},


				// The jqXHR state
				state = 0,


				// Default abort message
				strAbort = "canceled",


				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function getResponseHeader(key) {
						var match;
						if (state === 2) {
							if (!responseHeaders) {
								responseHeaders = {};
								while (match = rheaders.exec(responseHeadersString)) {
									responseHeaders[match[1].toLowerCase()] = match[2];
								}
							}
							match = responseHeaders[key.toLowerCase()];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function getAllResponseHeaders() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function setRequestHeader(name, value) {
						var lname = name.toLowerCase();
						if (!state) {
							name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
							requestHeaders[name] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function overrideMimeType(type) {
						if (!state) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function statusCode(map) {
						var code;
						if (map) {
							if (state < 2) {
								for (code in map) {

									// Lazy-add the new callback in a way that preserves old ones
									_statusCode[code] = [_statusCode[code], map[code]];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always(map[jqXHR.status]);
							}
						}
						return this;
					},

					// Cancel the request
					abort: function abort(statusText) {
						var finalText = statusText || strAbort;
						if (transport) {
							transport.abort(finalText);
						}
						done(0, finalText);
						return this;
					}
				};

				// Attach deferreds
				deferred.promise(jqXHR).complete = completeDeferred.add;
				jqXHR.success = jqXHR.done;
				jqXHR.error = jqXHR.fail;

				// Remove hash character (#7531: and string promotion)
				// Add protocol if not provided (prefilters might expect it)
				// Handle falsy url in the settings object (#10093: consistency with old signature)
				// We also use the url parameter if available
				s.url = ((url || s.url || location.href) + "").replace(rhash, "").replace(rprotocol, location.protocol + "//");

				// Alias method option to type as per ticket #12004
				s.type = options.method || options.type || s.method || s.type;

				// Extract dataTypes list
				s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

				// A cross-domain request is in order when the origin doesn't match the current origin.
				if (s.crossDomain == null) {
					urlAnchor = document.createElement("a");

					// Support: IE8-11+
					// IE throws exception if url is malformed, e.g. http://example.com:80x/
					try {
						urlAnchor.href = s.url;

						// Support: IE8-11+
						// Anchor's host property isn't correctly set when s.url is relative
						urlAnchor.href = urlAnchor.href;
						s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
					} catch (e) {

						// If there is an error parsing the URL, assume it is crossDomain,
						// it can be rejected by the transport if it is invalid
						s.crossDomain = true;
					}
				}

				// Convert data if not already a string
				if (s.data && s.processData && typeof s.data !== "string") {
					s.data = jQuery.param(s.data, s.traditional);
				}

				// Apply prefilters
				inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

				// If request was aborted inside a prefilter, stop there
				if (state === 2) {
					return jqXHR;
				}

				// We can fire global events as of now if asked to
				// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
				fireGlobals = jQuery.event && s.global;

				// Watch for a new set of requests
				if (fireGlobals && jQuery.active++ === 0) {
					jQuery.event.trigger("ajaxStart");
				}

				// Uppercase the type
				s.type = s.type.toUpperCase();

				// Determine if request has content
				s.hasContent = !rnoContent.test(s.type);

				// Save the URL in case we're toying with the If-Modified-Since
				// and/or If-None-Match header later on
				cacheURL = s.url;

				// More options handling for requests with no content
				if (!s.hasContent) {

					// If data is available, append data to url
					if (s.data) {
						cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;

						// #9682: remove data so that it's not used in an eventual retry
						delete s.data;
					}

					// Add anti-cache in url if needed
					if (s.cache === false) {
						s.url = rts.test(cacheURL) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace(rts, "$1_=" + nonce++) :

						// Otherwise add one to the end
						cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
					}
				}

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if (s.ifModified) {
					if (jQuery.lastModified[cacheURL]) {
						jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
					}
					if (jQuery.etag[cacheURL]) {
						jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
					}
				}

				// Set the correct header, if data is being sent
				if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
					jqXHR.setRequestHeader("Content-Type", s.contentType);
				}

				// Set the Accepts header for the server, depending on the dataType
				jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

				// Check for headers option
				for (i in s.headers) {
					jqXHR.setRequestHeader(i, s.headers[i]);
				}

				// Allow custom headers/mimetypes and early abort
				if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {

					// Abort if not done already and return
					return jqXHR.abort();
				}

				// Aborting is no longer a cancellation
				strAbort = "abort";

				// Install callbacks on deferreds
				for (i in { success: 1, error: 1, complete: 1 }) {
					jqXHR[i](s[i]);
				}

				// Get transport
				transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

				// If no transport, we auto-abort
				if (!transport) {
					done(-1, "No Transport");
				} else {
					jqXHR.readyState = 1;

					// Send global event
					if (fireGlobals) {
						globalEventContext.trigger("ajaxSend", [jqXHR, s]);
					}

					// If request was aborted inside ajaxSend, stop there
					if (state === 2) {
						return jqXHR;
					}

					// Timeout
					if (s.async && s.timeout > 0) {
						timeoutTimer = window.setTimeout(function () {
							jqXHR.abort("timeout");
						}, s.timeout);
					}

					try {
						state = 1;
						transport.send(requestHeaders, done);
					} catch (e) {

						// Propagate exception as error if not done
						if (state < 2) {
							done(-1, e);

							// Simply rethrow otherwise
						} else {
							throw e;
						}
					}
				}

				// Callback for when everything is done
				function done(status, nativeStatusText, responses, headers) {
					var isSuccess,
					    success,
					    error,
					    response,
					    modified,
					    statusText = nativeStatusText;

					// Called once
					if (state === 2) {
						return;
					}

					// State is "done" now
					state = 2;

					// Clear timeout if it exists
					if (timeoutTimer) {
						window.clearTimeout(timeoutTimer);
					}

					// Dereference transport for early garbage collection
					// (no matter how long the jqXHR object will be used)
					transport = undefined;

					// Cache response headers
					responseHeadersString = headers || "";

					// Set readyState
					jqXHR.readyState = status > 0 ? 4 : 0;

					// Determine if successful
					isSuccess = status >= 200 && status < 300 || status === 304;

					// Get response data
					if (responses) {
						response = ajaxHandleResponses(s, jqXHR, responses);
					}

					// Convert no matter what (that way responseXXX fields are always set)
					response = ajaxConvert(s, response, jqXHR, isSuccess);

					// If successful, handle type chaining
					if (isSuccess) {

						// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
						if (s.ifModified) {
							modified = jqXHR.getResponseHeader("Last-Modified");
							if (modified) {
								jQuery.lastModified[cacheURL] = modified;
							}
							modified = jqXHR.getResponseHeader("etag");
							if (modified) {
								jQuery.etag[cacheURL] = modified;
							}
						}

						// if no content
						if (status === 204 || s.type === "HEAD") {
							statusText = "nocontent";

							// if not modified
						} else if (status === 304) {
							statusText = "notmodified";

							// If we have data, let's convert it
						} else {
							statusText = response.state;
							success = response.data;
							error = response.error;
							isSuccess = !error;
						}
					} else {

						// Extract error from statusText and normalize for non-aborts
						error = statusText;
						if (status || !statusText) {
							statusText = "error";
							if (status < 0) {
								status = 0;
							}
						}
					}

					// Set data for the fake xhr object
					jqXHR.status = status;
					jqXHR.statusText = (nativeStatusText || statusText) + "";

					// Success/Error
					if (isSuccess) {
						deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
					} else {
						deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
					}

					// Status-dependent callbacks
					jqXHR.statusCode(_statusCode);
					_statusCode = undefined;

					if (fireGlobals) {
						globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
					}

					// Complete
					completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

					if (fireGlobals) {
						globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

						// Handle the global AJAX counter
						if (! --jQuery.active) {
							jQuery.event.trigger("ajaxStop");
						}
					}
				}

				return jqXHR;
			},

			getJSON: function getJSON(url, data, callback) {
				return jQuery.get(url, data, callback, "json");
			},

			getScript: function getScript(url, callback) {
				return jQuery.get(url, undefined, callback, "script");
			}
		});

		jQuery.each(["get", "post"], function (i, method) {
			jQuery[method] = function (url, data, callback, type) {

				// Shift arguments if data argument was omitted
				if (jQuery.isFunction(data)) {
					type = type || callback;
					callback = data;
					data = undefined;
				}

				// The url can be an options object (which then must have .url)
				return jQuery.ajax(jQuery.extend({
					url: url,
					type: method,
					dataType: type,
					data: data,
					success: callback
				}, jQuery.isPlainObject(url) && url));
			};
		});

		jQuery._evalUrl = function (url) {
			return jQuery.ajax({
				url: url,

				// Make this explicit, since user can override this through ajaxSetup (#11264)
				type: "GET",
				dataType: "script",
				async: false,
				global: false,
				"throws": true
			});
		};

		jQuery.fn.extend({
			wrapAll: function wrapAll(html) {
				var wrap;

				if (jQuery.isFunction(html)) {
					return this.each(function (i) {
						jQuery(this).wrapAll(html.call(this, i));
					});
				}

				if (this[0]) {

					// The elements to wrap the target around
					wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

					if (this[0].parentNode) {
						wrap.insertBefore(this[0]);
					}

					wrap.map(function () {
						var elem = this;

						while (elem.firstElementChild) {
							elem = elem.firstElementChild;
						}

						return elem;
					}).append(this);
				}

				return this;
			},

			wrapInner: function wrapInner(html) {
				if (jQuery.isFunction(html)) {
					return this.each(function (i) {
						jQuery(this).wrapInner(html.call(this, i));
					});
				}

				return this.each(function () {
					var self = jQuery(this),
					    contents = self.contents();

					if (contents.length) {
						contents.wrapAll(html);
					} else {
						self.append(html);
					}
				});
			},

			wrap: function wrap(html) {
				var isFunction = jQuery.isFunction(html);

				return this.each(function (i) {
					jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
				});
			},

			unwrap: function unwrap() {
				return this.parent().each(function () {
					if (!jQuery.nodeName(this, "body")) {
						jQuery(this).replaceWith(this.childNodes);
					}
				}).end();
			}
		});

		jQuery.expr.filters.hidden = function (elem) {
			return !jQuery.expr.filters.visible(elem);
		};
		jQuery.expr.filters.visible = function (elem) {

			// Support: Opera <= 12.12
			// Opera reports offsetWidths and offsetHeights less than zero on some elements
			// Use OR instead of AND as the element is not visible if either is true
			// See tickets #10406 and #13132
			return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
		};

		var r20 = /%20/g,
		    rbracket = /\[\]$/,
		    rCRLF = /\r?\n/g,
		    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		    rsubmittable = /^(?:input|select|textarea|keygen)/i;

		function buildParams(prefix, obj, traditional, add) {
			var name;

			if (jQuery.isArray(obj)) {

				// Serialize array item.
				jQuery.each(obj, function (i, v) {
					if (traditional || rbracket.test(prefix)) {

						// Treat each array item as a scalar.
						add(prefix, v);
					} else {

						// Item is non-scalar (array or object), encode its numeric index.
						buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" && v != null ? i : "") + "]", v, traditional, add);
					}
				});
			} else if (!traditional && jQuery.type(obj) === "object") {

				// Serialize object item.
				for (name in obj) {
					buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
				}
			} else {

				// Serialize scalar item.
				add(prefix, obj);
			}
		}

		// Serialize an array of form elements or a set of
		// key/values into a query string
		jQuery.param = function (a, traditional) {
			var prefix,
			    s = [],
			    add = function add(key, value) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
				s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
			};

			// Set traditional to true for jQuery <= 1.3.2 behavior.
			if (traditional === undefined) {
				traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
			}

			// If an array was passed in, assume that it is an array of form elements.
			if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

				// Serialize the form elements
				jQuery.each(a, function () {
					add(this.name, this.value);
				});
			} else {

				// If traditional, encode the "old" way (the way 1.3.2 or older
				// did it), otherwise encode params recursively.
				for (prefix in a) {
					buildParams(prefix, a[prefix], traditional, add);
				}
			}

			// Return the resulting serialization
			return s.join("&").replace(r20, "+");
		};

		jQuery.fn.extend({
			serialize: function serialize() {
				return jQuery.param(this.serializeArray());
			},
			serializeArray: function serializeArray() {
				return this.map(function () {

					// Can add propHook for "elements" to filter or add form elements
					var elements = jQuery.prop(this, "elements");
					return elements ? jQuery.makeArray(elements) : this;
				}).filter(function () {
					var type = this.type;

					// Use .is( ":disabled" ) so that fieldset[disabled] works
					return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
				}).map(function (i, elem) {
					var val = jQuery(this).val();

					return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
						return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
					}) : { name: elem.name, value: val.replace(rCRLF, "\r\n") };
				}).get();
			}
		});

		jQuery.ajaxSettings.xhr = function () {
			try {
				return new window.XMLHttpRequest();
			} catch (e) {}
		};

		var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		    xhrSupported = jQuery.ajaxSettings.xhr();

		support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
		support.ajax = xhrSupported = !!xhrSupported;

		jQuery.ajaxTransport(function (options) {
			var _callback, errorCallback;

			// Cross domain only allowed if supported through XMLHttpRequest
			if (support.cors || xhrSupported && !options.crossDomain) {
				return {
					send: function send(headers, complete) {
						var i,
						    xhr = options.xhr();

						xhr.open(options.type, options.url, options.async, options.username, options.password);

						// Apply custom fields if provided
						if (options.xhrFields) {
							for (i in options.xhrFields) {
								xhr[i] = options.xhrFields[i];
							}
						}

						// Override mime type if needed
						if (options.mimeType && xhr.overrideMimeType) {
							xhr.overrideMimeType(options.mimeType);
						}

						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if (!options.crossDomain && !headers["X-Requested-With"]) {
							headers["X-Requested-With"] = "XMLHttpRequest";
						}

						// Set headers
						for (i in headers) {
							xhr.setRequestHeader(i, headers[i]);
						}

						// Callback
						_callback = function callback(type) {
							return function () {
								if (_callback) {
									_callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

									if (type === "abort") {
										xhr.abort();
									} else if (type === "error") {

										// Support: IE9
										// On a manual native abort, IE9 throws
										// errors on any property access that is not readyState
										if (typeof xhr.status !== "number") {
											complete(0, "error");
										} else {
											complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status, xhr.statusText);
										}
									} else {
										complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,

										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										(xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
									}
								}
							};
						};

						// Listen to events
						xhr.onload = _callback();
						errorCallback = xhr.onerror = _callback("error");

						// Support: IE9
						// Use onreadystatechange to replace onabort
						// to handle uncaught aborts
						if (xhr.onabort !== undefined) {
							xhr.onabort = errorCallback;
						} else {
							xhr.onreadystatechange = function () {

								// Check readyState before timeout as it changes
								if (xhr.readyState === 4) {

									// Allow onerror to be called first,
									// but that will not handle a native abort
									// Also, save errorCallback to a variable
									// as xhr.onerror cannot be accessed
									window.setTimeout(function () {
										if (_callback) {
											errorCallback();
										}
									});
								}
							};
						}

						// Create the abort callback
						_callback = _callback("abort");

						try {

							// Do send the request (this may raise an exception)
							xhr.send(options.hasContent && options.data || null);
						} catch (e) {

							// #14683: Only rethrow if this hasn't been notified as an error yet
							if (_callback) {
								throw e;
							}
						}
					},

					abort: function abort() {
						if (_callback) {
							_callback();
						}
					}
				};
			}
		});

		// Install script dataType
		jQuery.ajaxSetup({
			accepts: {
				script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
			},
			contents: {
				script: /\b(?:java|ecma)script\b/
			},
			converters: {
				"text script": function textScript(text) {
					jQuery.globalEval(text);
					return text;
				}
			}
		});

		// Handle cache's special case and crossDomain
		jQuery.ajaxPrefilter("script", function (s) {
			if (s.cache === undefined) {
				s.cache = false;
			}
			if (s.crossDomain) {
				s.type = "GET";
			}
		});

		// Bind script tag hack transport
		jQuery.ajaxTransport("script", function (s) {

			// This transport only deals with cross domain requests
			if (s.crossDomain) {
				var script, _callback2;
				return {
					send: function send(_, complete) {
						script = jQuery("<script>").prop({
							charset: s.scriptCharset,
							src: s.url
						}).on("load error", _callback2 = function callback(evt) {
							script.remove();
							_callback2 = null;
							if (evt) {
								complete(evt.type === "error" ? 404 : 200, evt.type);
							}
						});

						// Use native DOM manipulation to avoid our domManip AJAX trickery
						document.head.appendChild(script[0]);
					},
					abort: function abort() {
						if (_callback2) {
							_callback2();
						}
					}
				};
			}
		});

		var oldCallbacks = [],
		    rjsonp = /(=)\?(?=&|$)|\?\?/;

		// Default jsonp settings
		jQuery.ajaxSetup({
			jsonp: "callback",
			jsonpCallback: function jsonpCallback() {
				var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
				this[callback] = true;
				return callback;
			}
		});

		// Detect, normalize options and install callbacks for jsonp requests
		jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

			var callbackName,
			    overwritten,
			    responseContainer,
			    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

			// Handle iff the expected data type is "jsonp" or we have a parameter to set
			if (jsonProp || s.dataTypes[0] === "jsonp") {

				// Get callback name, remembering preexisting value associated with it
				callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

				// Insert callback into url or form data
				if (jsonProp) {
					s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
				} else if (s.jsonp !== false) {
					s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
				}

				// Use data converter to retrieve json after script execution
				s.converters["script json"] = function () {
					if (!responseContainer) {
						jQuery.error(callbackName + " was not called");
					}
					return responseContainer[0];
				};

				// Force json dataType
				s.dataTypes[0] = "json";

				// Install callback
				overwritten = window[callbackName];
				window[callbackName] = function () {
					responseContainer = arguments;
				};

				// Clean-up function (fires after converters)
				jqXHR.always(function () {

					// If previous value didn't exist - remove it
					if (overwritten === undefined) {
						jQuery(window).removeProp(callbackName);

						// Otherwise restore preexisting value
					} else {
						window[callbackName] = overwritten;
					}

					// Save back as free
					if (s[callbackName]) {

						// Make sure that re-using the options doesn't screw things around
						s.jsonpCallback = originalSettings.jsonpCallback;

						// Save the callback name for future use
						oldCallbacks.push(callbackName);
					}

					// Call if it was a function and we have a response
					if (responseContainer && jQuery.isFunction(overwritten)) {
						overwritten(responseContainer[0]);
					}

					responseContainer = overwritten = undefined;
				});

				// Delegate to script
				return "script";
			}
		});

		// Argument "data" should be string of html
		// context (optional): If specified, the fragment will be created in this context,
		// defaults to document
		// keepScripts (optional): If true, will include scripts passed in the html string
		jQuery.parseHTML = function (data, context, keepScripts) {
			if (!data || typeof data !== "string") {
				return null;
			}
			if (typeof context === "boolean") {
				keepScripts = context;
				context = false;
			}
			context = context || document;

			var parsed = rsingleTag.exec(data),
			    scripts = !keepScripts && [];

			// Single tag
			if (parsed) {
				return [context.createElement(parsed[1])];
			}

			parsed = buildFragment([data], context, scripts);

			if (scripts && scripts.length) {
				jQuery(scripts).remove();
			}

			return jQuery.merge([], parsed.childNodes);
		};

		// Keep a copy of the old load method
		var _load = jQuery.fn.load;

		/**
	  * Load a url into a page
	  */
		jQuery.fn.load = function (url, params, callback) {
			if (typeof url !== "string" && _load) {
				return _load.apply(this, arguments);
			}

			var selector,
			    type,
			    response,
			    self = this,
			    off = url.indexOf(" ");

			if (off > -1) {
				selector = jQuery.trim(url.slice(off));
				url = url.slice(0, off);
			}

			// If it's a function
			if (jQuery.isFunction(params)) {

				// We assume that it's the callback
				callback = params;
				params = undefined;

				// Otherwise, build a param string
			} else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
				type = "POST";
			}

			// If we have elements to modify, make the request
			if (self.length > 0) {
				jQuery.ajax({
					url: url,

					// If "type" variable is undefined, then "GET" method will be used.
					// Make value of this field explicit since
					// user can override it through ajaxSetup method
					type: type || "GET",
					dataType: "html",
					data: params
				}).done(function (responseText) {

					// Save response for use in complete callback
					response = arguments;

					self.html(selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

					// Otherwise use the full result
					responseText);

					// If the request succeeds, this function gets "data", "status", "jqXHR"
					// but they are ignored because response was set above.
					// If it fails, this function gets "jqXHR", "status", "error"
				}).always(callback && function (jqXHR, status) {
					self.each(function () {
						callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
					});
				});
			}

			return this;
		};

		// Attach a bunch of functions for handling common AJAX events
		jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
			jQuery.fn[type] = function (fn) {
				return this.on(type, fn);
			};
		});

		jQuery.expr.filters.animated = function (elem) {
			return jQuery.grep(jQuery.timers, function (fn) {
				return elem === fn.elem;
			}).length;
		};

		/**
	  * Gets a window from an element
	  */
		function getWindow(elem) {
			return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
		}

		jQuery.offset = {
			setOffset: function setOffset(elem, options, i) {
				var curPosition,
				    curLeft,
				    curCSSTop,
				    curTop,
				    curOffset,
				    curCSSLeft,
				    calculatePosition,
				    position = jQuery.css(elem, "position"),
				    curElem = jQuery(elem),
				    props = {};

				// Set position first, in-case top/left are set even on static elem
				if (position === "static") {
					elem.style.position = "relative";
				}

				curOffset = curElem.offset();
				curCSSTop = jQuery.css(elem, "top");
				curCSSLeft = jQuery.css(elem, "left");
				calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

				// Need to be able to calculate position if either
				// top or left is auto and position is either absolute or fixed
				if (calculatePosition) {
					curPosition = curElem.position();
					curTop = curPosition.top;
					curLeft = curPosition.left;
				} else {
					curTop = parseFloat(curCSSTop) || 0;
					curLeft = parseFloat(curCSSLeft) || 0;
				}

				if (jQuery.isFunction(options)) {

					// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
					options = options.call(elem, i, jQuery.extend({}, curOffset));
				}

				if (options.top != null) {
					props.top = options.top - curOffset.top + curTop;
				}
				if (options.left != null) {
					props.left = options.left - curOffset.left + curLeft;
				}

				if ("using" in options) {
					options.using.call(elem, props);
				} else {
					curElem.css(props);
				}
			}
		};

		jQuery.fn.extend({
			offset: function offset(options) {
				if (arguments.length) {
					return options === undefined ? this : this.each(function (i) {
						jQuery.offset.setOffset(this, options, i);
					});
				}

				var docElem,
				    win,
				    elem = this[0],
				    box = { top: 0, left: 0 },
				    doc = elem && elem.ownerDocument;

				if (!doc) {
					return;
				}

				docElem = doc.documentElement;

				// Make sure it's not a disconnected DOM node
				if (!jQuery.contains(docElem, elem)) {
					return box;
				}

				box = elem.getBoundingClientRect();
				win = getWindow(doc);
				return {
					top: box.top + win.pageYOffset - docElem.clientTop,
					left: box.left + win.pageXOffset - docElem.clientLeft
				};
			},

			position: function position() {
				if (!this[0]) {
					return;
				}

				var offsetParent,
				    offset,
				    elem = this[0],
				    parentOffset = { top: 0, left: 0 };

				// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
				// because it is its only offset parent
				if (jQuery.css(elem, "position") === "fixed") {

					// Assume getBoundingClientRect is there when computed position is fixed
					offset = elem.getBoundingClientRect();
				} else {

					// Get *real* offsetParent
					offsetParent = this.offsetParent();

					// Get correct offsets
					offset = this.offset();
					if (!jQuery.nodeName(offsetParent[0], "html")) {
						parentOffset = offsetParent.offset();
					}

					// Add offsetParent borders
					parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
					parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
				}

				// Subtract parent offsets and element margins
				return {
					top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
					left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
				};
			},

			// This method will return documentElement in the following cases:
			// 1) For the element inside the iframe without offsetParent, this method will return
			//    documentElement of the parent window
			// 2) For the hidden or detached element
			// 3) For body or html element, i.e. in case of the html node - it will return itself
			//
			// but those exceptions were never presented as a real life use-cases
			// and might be considered as more preferable results.
			//
			// This logic, however, is not guaranteed and can change at any point in the future
			offsetParent: function offsetParent() {
				return this.map(function () {
					var offsetParent = this.offsetParent;

					while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
						offsetParent = offsetParent.offsetParent;
					}

					return offsetParent || documentElement;
				});
			}
		});

		// Create scrollLeft and scrollTop methods
		jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
			var top = "pageYOffset" === prop;

			jQuery.fn[method] = function (val) {
				return access(this, function (elem, method, val) {
					var win = getWindow(elem);

					if (val === undefined) {
						return win ? win[prop] : elem[method];
					}

					if (win) {
						win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
					} else {
						elem[method] = val;
					}
				}, method, val, arguments.length);
			};
		});

		// Support: Safari<7-8+, Chrome<37-44+
		// Add the top/left cssHooks using jQuery.fn.position
		// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
		// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
		// getComputedStyle returns percent when specified for top/left/bottom/right;
		// rather than make the css module depend on the offset module, just check for it here
		jQuery.each(["top", "left"], function (i, prop) {
			jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
				if (computed) {
					computed = curCSS(elem, prop);

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
				}
			});
		});

		// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
		jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
			jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

				// Margin is only for outerHeight, outerWidth
				jQuery.fn[funcName] = function (margin, value) {
					var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
					    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

					return access(this, function (elem, type, value) {
						var doc;

						if (jQuery.isWindow(elem)) {

							// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
							// isn't a whole lot we can do. See pull request at this URL for discussion:
							// https://github.com/jquery/jquery/pull/764
							return elem.document.documentElement["client" + name];
						}

						// Get document width or height
						if (elem.nodeType === 9) {
							doc = elem.documentElement;

							// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
							// whichever is greatest
							return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
						}

						return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css(elem, type, extra) :

						// Set width or height on the element
						jQuery.style(elem, type, value, extra);
					}, type, chainable ? margin : undefined, chainable, null);
				};
			});
		});

		jQuery.fn.extend({

			bind: function bind(types, data, fn) {
				return this.on(types, null, data, fn);
			},
			unbind: function unbind(types, fn) {
				return this.off(types, null, fn);
			},

			delegate: function delegate(selector, types, data, fn) {
				return this.on(types, selector, data, fn);
			},
			undelegate: function undelegate(selector, types, fn) {

				// ( namespace ) or ( selector, types [, fn] )
				return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
			},
			size: function size() {
				return this.length;
			}
		});

		jQuery.fn.andSelf = jQuery.fn.addBack;

		// Register as a named AMD module, since jQuery can be concatenated with other
		// files that may use define, but not via a proper concatenation script that
		// understands anonymous AMD modules. A named AMD is safest and most robust
		// way to register. Lowercase jquery is used because AMD module names are
		// derived from file names, and jQuery is normally delivered in a lowercase
		// file name. Do this after creating the global so that if an AMD module wants
		// to call noConflict to hide this version of jQuery, it will work.

		// Note that for maximum portability, libraries that are not jQuery should
		// declare themselves as anonymous modules, and avoid setting a global if an
		// AMD loader is present. jQuery is a special case. For more information, see
		// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

		if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return jQuery;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}

		var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,


		// Map over the $ in case of overwrite
		_$ = window.$;

		jQuery.noConflict = function (deep) {
			if (window.$ === jQuery) {
				window.$ = _$;
			}

			if (deep && window.jQuery === jQuery) {
				window.jQuery = _jQuery;
			}

			return jQuery;
		};

		// Expose jQuery and $ identifiers, even in AMD
		// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
		// and CommonJS for browser emulators (#13566)
		if (!noGlobal) {
			window.jQuery = window.$ = jQuery;
		}

		return jQuery;
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	};

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * State-based routing for AngularJS
	 * @version v0.3.2
	 * @link http://angular-ui.github.com/
	 * @license MIT License, http://www.opensource.org/licenses/MIT
	 */

	/* commonjs package manager support (eg componentjs) */
	if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports) {
	  module.exports = 'ui.router';
	}

	(function (window, angular, undefined) {
	  /*jshint globalstrict:true*/
	  /*global angular:false*/
	  'use strict';

	  var isDefined = angular.isDefined,
	      isFunction = angular.isFunction,
	      isString = angular.isString,
	      isObject = angular.isObject,
	      isArray = angular.isArray,
	      forEach = angular.forEach,
	      extend = angular.extend,
	      copy = angular.copy,
	      toJson = angular.toJson;

	  function inherit(parent, extra) {
	    return extend(new (extend(function () {}, { prototype: parent }))(), extra);
	  }

	  function merge(dst) {
	    forEach(arguments, function (obj) {
	      if (obj !== dst) {
	        forEach(obj, function (value, key) {
	          if (!dst.hasOwnProperty(key)) dst[key] = value;
	        });
	      }
	    });
	    return dst;
	  }

	  /**
	   * Finds the common ancestor path between two states.
	   *
	   * @param {Object} first The first state.
	   * @param {Object} second The second state.
	   * @return {Array} Returns an array of state names in descending order, not including the root.
	   */
	  function ancestors(first, second) {
	    var path = [];

	    for (var n in first.path) {
	      if (first.path[n] !== second.path[n]) break;
	      path.push(first.path[n]);
	    }
	    return path;
	  }

	  /**
	   * IE8-safe wrapper for `Object.keys()`.
	   *
	   * @param {Object} object A JavaScript object.
	   * @return {Array} Returns the keys of the object as an array.
	   */
	  function objectKeys(object) {
	    if (Object.keys) {
	      return Object.keys(object);
	    }
	    var result = [];

	    forEach(object, function (val, key) {
	      result.push(key);
	    });
	    return result;
	  }

	  /**
	   * IE8-safe wrapper for `Array.prototype.indexOf()`.
	   *
	   * @param {Array} array A JavaScript array.
	   * @param {*} value A value to search the array for.
	   * @return {Number} Returns the array index value of `value`, or `-1` if not present.
	   */
	  function indexOf(array, value) {
	    if (Array.prototype.indexOf) {
	      return array.indexOf(value, Number(arguments[2]) || 0);
	    }
	    var len = array.length >>> 0,
	        from = Number(arguments[2]) || 0;
	    from = from < 0 ? Math.ceil(from) : Math.floor(from);

	    if (from < 0) from += len;

	    for (; from < len; from++) {
	      if (from in array && array[from] === value) return from;
	    }
	    return -1;
	  }

	  /**
	   * Merges a set of parameters with all parameters inherited between the common parents of the
	   * current state and a given destination state.
	   *
	   * @param {Object} currentParams The value of the current state parameters ($stateParams).
	   * @param {Object} newParams The set of parameters which will be composited with inherited params.
	   * @param {Object} $current Internal definition of object representing the current state.
	   * @param {Object} $to Internal definition of object representing state to transition to.
	   */
	  function inheritParams(currentParams, newParams, $current, $to) {
	    var parents = ancestors($current, $to),
	        parentParams,
	        inherited = {},
	        inheritList = [];

	    for (var i in parents) {
	      if (!parents[i] || !parents[i].params) continue;
	      parentParams = objectKeys(parents[i].params);
	      if (!parentParams.length) continue;

	      for (var j in parentParams) {
	        if (indexOf(inheritList, parentParams[j]) >= 0) continue;
	        inheritList.push(parentParams[j]);
	        inherited[parentParams[j]] = currentParams[parentParams[j]];
	      }
	    }
	    return extend({}, inherited, newParams);
	  }

	  /**
	   * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
	   *
	   * @param {Object} a The first object.
	   * @param {Object} b The second object.
	   * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
	   *                     it defaults to the list of keys in `a`.
	   * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
	   */
	  function equalForKeys(a, b, keys) {
	    if (!keys) {
	      keys = [];
	      for (var n in a) {
	        keys.push(n);
	      } // Used instead of Object.keys() for IE8 compatibility
	    }

	    for (var i = 0; i < keys.length; i++) {
	      var k = keys[i];
	      if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
	    }
	    return true;
	  }

	  /**
	   * Returns the subset of an object, based on a list of keys.
	   *
	   * @param {Array} keys
	   * @param {Object} values
	   * @return {Boolean} Returns a subset of `values`.
	   */
	  function filterByKeys(keys, values) {
	    var filtered = {};

	    forEach(keys, function (name) {
	      filtered[name] = values[name];
	    });
	    return filtered;
	  }

	  // like _.indexBy
	  // when you know that your index values will be unique, or you want last-one-in to win
	  function indexBy(array, propName) {
	    var result = {};
	    forEach(array, function (item) {
	      result[item[propName]] = item;
	    });
	    return result;
	  }

	  // extracted from underscore.js
	  // Return a copy of the object only containing the whitelisted properties.
	  function pick(obj) {
	    var copy = {};
	    var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
	    forEach(keys, function (key) {
	      if (key in obj) copy[key] = obj[key];
	    });
	    return copy;
	  }

	  // extracted from underscore.js
	  // Return a copy of the object omitting the blacklisted properties.
	  function omit(obj) {
	    var copy = {};
	    var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
	    for (var key in obj) {
	      if (indexOf(keys, key) == -1) copy[key] = obj[key];
	    }
	    return copy;
	  }

	  function pluck(collection, key) {
	    var result = isArray(collection) ? [] : {};

	    forEach(collection, function (val, i) {
	      result[i] = isFunction(key) ? key(val) : val[key];
	    });
	    return result;
	  }

	  function filter(collection, callback) {
	    var array = isArray(collection);
	    var result = array ? [] : {};
	    forEach(collection, function (val, i) {
	      if (callback(val, i)) {
	        result[array ? result.length : i] = val;
	      }
	    });
	    return result;
	  }

	  function map(collection, callback) {
	    var result = isArray(collection) ? [] : {};

	    forEach(collection, function (val, i) {
	      result[i] = callback(val, i);
	    });
	    return result;
	  }

	  // issue #2676 #2889
	  function silenceUncaughtInPromise(promise) {
	    return promise.then(undefined, function () {}) && promise;
	  }

	  /**
	   * @ngdoc overview
	   * @name ui.router.util
	   *
	   * @description
	   * # ui.router.util sub-module
	   *
	   * This module is a dependency of other sub-modules. Do not include this module as a dependency
	   * in your angular app (use {@link ui.router} module instead).
	   *
	   */
	  angular.module('ui.router.util', ['ng']);

	  /**
	   * @ngdoc overview
	   * @name ui.router.router
	   * 
	   * @requires ui.router.util
	   *
	   * @description
	   * # ui.router.router sub-module
	   *
	   * This module is a dependency of other sub-modules. Do not include this module as a dependency
	   * in your angular app (use {@link ui.router} module instead).
	   */
	  angular.module('ui.router.router', ['ui.router.util']);

	  /**
	   * @ngdoc overview
	   * @name ui.router.state
	   * 
	   * @requires ui.router.router
	   * @requires ui.router.util
	   *
	   * @description
	   * # ui.router.state sub-module
	   *
	   * This module is a dependency of the main ui.router module. Do not include this module as a dependency
	   * in your angular app (use {@link ui.router} module instead).
	   * 
	   */
	  angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

	  /**
	   * @ngdoc overview
	   * @name ui.router
	   *
	   * @requires ui.router.state
	   *
	   * @description
	   * # ui.router
	   * 
	   * ## The main module for ui.router 
	   * There are several sub-modules included with the ui.router module, however only this module is needed
	   * as a dependency within your angular app. The other modules are for organization purposes. 
	   *
	   * The modules are:
	   * * ui.router - the main "umbrella" module
	   * * ui.router.router - 
	   * 
	   * *You'll need to include **only** this module as the dependency within your angular app.*
	   * 
	   * <pre>
	   * <!doctype html>
	   * <html ng-app="myApp">
	   * <head>
	   *   <script src="js/angular.js"></script>
	   *   <!-- Include the ui-router script -->
	   *   <script src="js/angular-ui-router.min.js"></script>
	   *   <script>
	   *     // ...and add 'ui.router' as a dependency
	   *     var myApp = angular.module('myApp', ['ui.router']);
	   *   </script>
	   * </head>
	   * <body>
	   * </body>
	   * </html>
	   * </pre>
	   */
	  angular.module('ui.router', ['ui.router.state']);

	  angular.module('ui.router.compat', ['ui.router']);

	  /**
	   * @ngdoc object
	   * @name ui.router.util.$resolve
	   *
	   * @requires $q
	   * @requires $injector
	   *
	   * @description
	   * Manages resolution of (acyclic) graphs of promises.
	   */
	  $Resolve.$inject = ['$q', '$injector'];
	  function $Resolve($q, $injector) {

	    var VISIT_IN_PROGRESS = 1,
	        VISIT_DONE = 2,
	        NOTHING = {},
	        NO_DEPENDENCIES = [],
	        NO_LOCALS = NOTHING,
	        NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });

	    /**
	     * @ngdoc function
	     * @name ui.router.util.$resolve#study
	     * @methodOf ui.router.util.$resolve
	     *
	     * @description
	     * Studies a set of invocables that are likely to be used multiple times.
	     * <pre>
	     * $resolve.study(invocables)(locals, parent, self)
	     * </pre>
	     * is equivalent to
	     * <pre>
	     * $resolve.resolve(invocables, locals, parent, self)
	     * </pre>
	     * but the former is more efficient (in fact `resolve` just calls `study` 
	     * internally).
	     *
	     * @param {object} invocables Invocable objects
	     * @return {function} a function to pass in locals, parent and self
	     */
	    this.study = function (invocables) {
	      if (!isObject(invocables)) throw new Error("'invocables' must be an object");
	      var invocableKeys = objectKeys(invocables || {});

	      // Perform a topological sort of invocables to build an ordered plan
	      var plan = [],
	          cycle = [],
	          visited = {};
	      function visit(value, key) {
	        if (visited[key] === VISIT_DONE) return;

	        cycle.push(key);
	        if (visited[key] === VISIT_IN_PROGRESS) {
	          cycle.splice(0, indexOf(cycle, key));
	          throw new Error("Cyclic dependency: " + cycle.join(" -> "));
	        }
	        visited[key] = VISIT_IN_PROGRESS;

	        if (isString(value)) {
	          plan.push(key, [function () {
	            return $injector.get(value);
	          }], NO_DEPENDENCIES);
	        } else {
	          var params = $injector.annotate(value);
	          forEach(params, function (param) {
	            if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
	          });
	          plan.push(key, value, params);
	        }

	        cycle.pop();
	        visited[key] = VISIT_DONE;
	      }
	      forEach(invocables, visit);
	      invocables = cycle = visited = null; // plan is all that's required

	      function isResolve(value) {
	        return isObject(value) && value.then && value.$$promises;
	      }

	      return function (locals, parent, self) {
	        if (isResolve(locals) && self === undefined) {
	          self = parent;parent = locals;locals = null;
	        }
	        if (!locals) locals = NO_LOCALS;else if (!isObject(locals)) {
	          throw new Error("'locals' must be an object");
	        }
	        if (!parent) parent = NO_PARENT;else if (!isResolve(parent)) {
	          throw new Error("'parent' must be a promise returned by $resolve.resolve()");
	        }

	        // To complete the overall resolution, we have to wait for the parent
	        // promise and for the promise for each invokable in our plan.
	        var resolution = $q.defer(),
	            result = resolution.promise,
	            promises = result.$$promises = {},
	            values = extend({}, locals),
	            wait = 1 + plan.length / 3,
	            merged = false;

	        function done() {
	          // Merge parent values we haven't got yet and publish our own $$values
	          if (! --wait) {
	            if (!merged) merge(values, parent.$$values);
	            result.$$values = values;
	            result.$$promises = result.$$promises || true; // keep for isResolve()
	            delete result.$$inheritedValues;
	            resolution.resolve(values);
	          }
	        }

	        function fail(reason) {
	          result.$$failure = reason;
	          resolution.reject(reason);
	        }

	        // Short-circuit if parent has already failed
	        if (isDefined(parent.$$failure)) {
	          fail(parent.$$failure);
	          return result;
	        }

	        if (parent.$$inheritedValues) {
	          merge(values, omit(parent.$$inheritedValues, invocableKeys));
	        }

	        // Merge parent values if the parent has already resolved, or merge
	        // parent promises and wait if the parent resolve is still in progress.
	        extend(promises, parent.$$promises);
	        if (parent.$$values) {
	          merged = merge(values, omit(parent.$$values, invocableKeys));
	          result.$$inheritedValues = omit(parent.$$values, invocableKeys);
	          done();
	        } else {
	          if (parent.$$inheritedValues) {
	            result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
	          }
	          parent.then(done, fail);
	        }

	        // Process each invocable in the plan, but ignore any where a local of the same name exists.
	        for (var i = 0, ii = plan.length; i < ii; i += 3) {
	          if (locals.hasOwnProperty(plan[i])) done();else invoke(plan[i], plan[i + 1], plan[i + 2]);
	        }

	        function invoke(key, invocable, params) {
	          // Create a deferred for this invocation. Failures will propagate to the resolution as well.
	          var invocation = $q.defer(),
	              waitParams = 0;
	          function onfailure(reason) {
	            invocation.reject(reason);
	            fail(reason);
	          }
	          // Wait for any parameter that we have a promise for (either from parent or from this
	          // resolve; in that case study() will have made sure it's ordered before us in the plan).
	          forEach(params, function (dep) {
	            if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
	              waitParams++;
	              promises[dep].then(function (result) {
	                values[dep] = result;
	                if (! --waitParams) proceed();
	              }, onfailure);
	            }
	          });
	          if (!waitParams) proceed();
	          function proceed() {
	            if (isDefined(result.$$failure)) return;
	            try {
	              invocation.resolve($injector.invoke(invocable, self, values));
	              invocation.promise.then(function (result) {
	                values[key] = result;
	                done();
	              }, onfailure);
	            } catch (e) {
	              onfailure(e);
	            }
	          }
	          // Publish promise synchronously; invocations further down in the plan may depend on it.
	          promises[key] = invocation.promise;
	        }

	        return result;
	      };
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.util.$resolve#resolve
	     * @methodOf ui.router.util.$resolve
	     *
	     * @description
	     * Resolves a set of invocables. An invocable is a function to be invoked via 
	     * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
	     * An invocable can either return a value directly,
	     * or a `$q` promise. If a promise is returned it will be resolved and the 
	     * resulting value will be used instead. Dependencies of invocables are resolved 
	     * (in this order of precedence)
	     *
	     * - from the specified `locals`
	     * - from another invocable that is part of this `$resolve` call
	     * - from an invocable that is inherited from a `parent` call to `$resolve` 
	     *   (or recursively
	     * - from any ancestor `$resolve` of that parent).
	     *
	     * The return value of `$resolve` is a promise for an object that contains 
	     * (in this order of precedence)
	     *
	     * - any `locals` (if specified)
	     * - the resolved return values of all injectables
	     * - any values inherited from a `parent` call to `$resolve` (if specified)
	     *
	     * The promise will resolve after the `parent` promise (if any) and all promises 
	     * returned by injectables have been resolved. If any invocable 
	     * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
	     * invocable is rejected, the `$resolve` promise is immediately rejected with the 
	     * same error. A rejection of a `parent` promise (if specified) will likewise be 
	     * propagated immediately. Once the `$resolve` promise has been rejected, no 
	     * further invocables will be called.
	     * 
	     * Cyclic dependencies between invocables are not permitted and will cause `$resolve`
	     * to throw an error. As a special case, an injectable can depend on a parameter 
	     * with the same name as the injectable, which will be fulfilled from the `parent` 
	     * injectable of the same name. This allows inherited values to be decorated. 
	     * Note that in this case any other injectable in the same `$resolve` with the same
	     * dependency would see the decorated value, not the inherited value.
	     *
	     * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
	     * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
	     * exception.
	     *
	     * Invocables are invoked eagerly as soon as all dependencies are available. 
	     * This is true even for dependencies inherited from a `parent` call to `$resolve`.
	     *
	     * As a special case, an invocable can be a string, in which case it is taken to 
	     * be a service name to be passed to `$injector.get()`. This is supported primarily 
	     * for backwards-compatibility with the `resolve` property of `$routeProvider` 
	     * routes.
	     *
	     * @param {object} invocables functions to invoke or 
	     * `$injector` services to fetch.
	     * @param {object} locals  values to make available to the injectables
	     * @param {object} parent  a promise returned by another call to `$resolve`.
	     * @param {object} self  the `this` for the invoked methods
	     * @return {object} Promise for an object that contains the resolved return value
	     * of all invocables, as well as any inherited and local values.
	     */
	    this.resolve = function (invocables, locals, parent, self) {
	      return this.study(invocables)(locals, parent, self);
	    };
	  }

	  angular.module('ui.router.util').service('$resolve', $Resolve);

	  /**
	   * @ngdoc object
	   * @name ui.router.util.$templateFactory
	   *
	   * @requires $http
	   * @requires $templateCache
	   * @requires $injector
	   *
	   * @description
	   * Service. Manages loading of templates.
	   */
	  $TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
	  function $TemplateFactory($http, $templateCache, $injector) {

	    /**
	     * @ngdoc function
	     * @name ui.router.util.$templateFactory#fromConfig
	     * @methodOf ui.router.util.$templateFactory
	     *
	     * @description
	     * Creates a template from a configuration object. 
	     *
	     * @param {object} config Configuration object for which to load a template. 
	     * The following properties are search in the specified order, and the first one 
	     * that is defined is used to create the template:
	     *
	     * @param {string|object} config.template html string template or function to 
	     * load via {@link ui.router.util.$templateFactory#fromString fromString}.
	     * @param {string|object} config.templateUrl url to load or a function returning 
	     * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
	     * @param {Function} config.templateProvider function to invoke via 
	     * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
	     * @param {object} params  Parameters to pass to the template function.
	     * @param {object} locals Locals to pass to `invoke` if the template is loaded 
	     * via a `templateProvider`. Defaults to `{ params: params }`.
	     *
	     * @return {string|object}  The template html as a string, or a promise for 
	     * that string,or `null` if no template is configured.
	     */
	    this.fromConfig = function (config, params, locals) {
	      return isDefined(config.template) ? this.fromString(config.template, params) : isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) : isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) : null;
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.util.$templateFactory#fromString
	     * @methodOf ui.router.util.$templateFactory
	     *
	     * @description
	     * Creates a template from a string or a function returning a string.
	     *
	     * @param {string|object} template html template as a string or function that 
	     * returns an html template as a string.
	     * @param {object} params Parameters to pass to the template function.
	     *
	     * @return {string|object} The template html as a string, or a promise for that 
	     * string.
	     */
	    this.fromString = function (template, params) {
	      return isFunction(template) ? template(params) : template;
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.util.$templateFactory#fromUrl
	     * @methodOf ui.router.util.$templateFactory
	     * 
	     * @description
	     * Loads a template from the a URL via `$http` and `$templateCache`.
	     *
	     * @param {string|Function} url url of the template to load, or a function 
	     * that returns a url.
	     * @param {Object} params Parameters to pass to the url function.
	     * @return {string|Promise.<string>} The template html as a string, or a promise 
	     * for that string.
	     */
	    this.fromUrl = function (url, params) {
	      if (isFunction(url)) url = url(params);
	      if (url == null) return null;else return $http.get(url, { cache: $templateCache, headers: { Accept: 'text/html' } }).then(function (response) {
	        return response.data;
	      });
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.util.$templateFactory#fromProvider
	     * @methodOf ui.router.util.$templateFactory
	     *
	     * @description
	     * Creates a template by invoking an injectable provider function.
	     *
	     * @param {Function} provider Function to invoke via `$injector.invoke`
	     * @param {Object} params Parameters for the template.
	     * @param {Object} locals Locals to pass to `invoke`. Defaults to 
	     * `{ params: params }`.
	     * @return {string|Promise.<string>} The template html as a string, or a promise 
	     * for that string.
	     */
	    this.fromProvider = function (provider, params, locals) {
	      return $injector.invoke(provider, null, locals || { params: params });
	    };
	  }

	  angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

	  var $$UMFP; // reference to $UrlMatcherFactoryProvider

	  /**
	   * @ngdoc object
	   * @name ui.router.util.type:UrlMatcher
	   *
	   * @description
	   * Matches URLs against patterns and extracts named parameters from the path or the search
	   * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
	   * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
	   * do not influence whether or not a URL is matched, but their values are passed through into
	   * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
	   *
	   * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
	   * syntax, which optionally allows a regular expression for the parameter to be specified:
	   *
	   * * `':'` name - colon placeholder
	   * * `'*'` name - catch-all placeholder
	   * * `'{' name '}'` - curly placeholder
	   * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
	   *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
	   *
	   * Parameter names may contain only word characters (latin letters, digits, and underscore) and
	   * must be unique within the pattern (across both path and search parameters). For colon
	   * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
	   * number of characters other than '/'. For catch-all placeholders the path parameter matches
	   * any number of characters.
	   *
	   * Examples:
	   *
	   * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
	   *   trailing slashes, and patterns have to match the entire path, not just a prefix.
	   * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
	   *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
	   * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
	   * * `'/user/{id:[^/]*}'` - Same as the previous example.
	   * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
	   *   parameter consists of 1 to 8 hex digits.
	   * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
	   *   path into the parameter 'path'.
	   * * `'/files/*path'` - ditto.
	   * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
	   *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
	   *
	   * @param {string} pattern  The pattern to compile into a matcher.
	   * @param {Object} config  A configuration object hash:
	   * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
	   *   an existing UrlMatcher
	   *
	   * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
	   * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
	   *
	   * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
	   *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
	   *   non-null) will start with this prefix.
	   *
	   * @property {string} source  The pattern that was passed into the constructor
	   *
	   * @property {string} sourcePath  The path portion of the source property
	   *
	   * @property {string} sourceSearch  The search portion of the source property
	   *
	   * @property {string} regex  The constructed regex that will be used to match against the url when
	   *   it is time to determine which url will match.
	   *
	   * @returns {Object}  New `UrlMatcher` object
	   */
	  function UrlMatcher(pattern, config, parentMatcher) {
	    config = extend({ params: {} }, isObject(config) ? config : {});

	    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
	    //   '*' name
	    //   ':' name
	    //   '{' name '}'
	    //   '{' name ':' regexp '}'
	    // The regular expression is somewhat complicated due to the need to allow curly braces
	    // inside the regular expression. The placeholder regexp breaks down as follows:
	    //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
	    //    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
	    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
	    //    [^{}\\]+                       - anything other than curly braces or backslash
	    //    \\.                            - a backslash escape
	    //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
	    var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
	        searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
	        compiled = '^',
	        last = 0,
	        m,
	        segments = this.segments = [],
	        parentParams = parentMatcher ? parentMatcher.params : {},
	        params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
	        paramNames = [];

	    function addParameter(id, type, config, location) {
	      paramNames.push(id);
	      if (parentParams[id]) return parentParams[id];
	      if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
	      if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
	      params[id] = new $$UMFP.Param(id, type, config, location);
	      return params[id];
	    }

	    function quoteRegExp(string, pattern, squash, optional) {
	      var surroundPattern = ['', ''],
	          result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
	      if (!pattern) return result;
	      switch (squash) {
	        case false:
	          surroundPattern = ['(', ')' + (optional ? "?" : "")];break;
	        case true:
	          result = result.replace(/\/$/, '');
	          surroundPattern = ['(?:\/(', ')|\/)?'];
	          break;
	        default:
	          surroundPattern = ['(' + squash + "|", ')?'];break;
	      }
	      return result + surroundPattern[0] + pattern + surroundPattern[1];
	    }

	    this.source = pattern;

	    // Split into static segments separated by path parameter placeholders.
	    // The number of segments is always 1 more than the number of parameters.
	    function matchDetails(m, isSearch) {
	      var id, regexp, segment, type, cfg, arrayMode;
	      id = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
	      cfg = config.params[id];
	      segment = pattern.substring(last, m.index);
	      regexp = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);

	      if (regexp) {
	        type = $$UMFP.type(regexp) || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });
	      }

	      return {
	        id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
	      };
	    }

	    var p, param, segment;
	    while (m = placeholder.exec(pattern)) {
	      p = matchDetails(m, false);
	      if (p.segment.indexOf('?') >= 0) break; // we're into the search part

	      param = addParameter(p.id, p.type, p.cfg, "path");
	      compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
	      segments.push(p.segment);
	      last = placeholder.lastIndex;
	    }
	    segment = pattern.substring(last);

	    // Find any search parameter names and remove them from the last segment
	    var i = segment.indexOf('?');

	    if (i >= 0) {
	      var search = this.sourceSearch = segment.substring(i);
	      segment = segment.substring(0, i);
	      this.sourcePath = pattern.substring(0, last + i);

	      if (search.length > 0) {
	        last = 0;
	        while (m = searchPlaceholder.exec(search)) {
	          p = matchDetails(m, true);
	          param = addParameter(p.id, p.type, p.cfg, "search");
	          last = placeholder.lastIndex;
	          // check if ?&
	        }
	      }
	    } else {
	      this.sourcePath = pattern;
	      this.sourceSearch = '';
	    }

	    compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
	    segments.push(segment);

	    this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
	    this.prefix = segments[0];
	    this.$$paramNames = paramNames;
	  }

	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:UrlMatcher#concat
	   * @methodOf ui.router.util.type:UrlMatcher
	   *
	   * @description
	   * Returns a new matcher for a pattern constructed by appending the path part and adding the
	   * search parameters of the specified pattern to this pattern. The current pattern is not
	   * modified. This can be understood as creating a pattern for URLs that are relative to (or
	   * suffixes of) the current pattern.
	   *
	   * @example
	   * The following two matchers are equivalent:
	   * <pre>
	   * new UrlMatcher('/user/{id}?q').concat('/details?date');
	   * new UrlMatcher('/user/{id}/details?q&date');
	   * </pre>
	   *
	   * @param {string} pattern  The pattern to append.
	   * @param {Object} config  An object hash of the configuration for the matcher.
	   * @returns {UrlMatcher}  A matcher for the concatenated pattern.
	   */
	  UrlMatcher.prototype.concat = function (pattern, config) {
	    // Because order of search parameters is irrelevant, we can add our own search
	    // parameters to the end of the new pattern. Parse the new pattern by itself
	    // and then join the bits together, but it's much easier to do this on a string level.
	    var defaultConfig = {
	      caseInsensitive: $$UMFP.caseInsensitive(),
	      strict: $$UMFP.strictMode(),
	      squash: $$UMFP.defaultSquashPolicy()
	    };
	    return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
	  };

	  UrlMatcher.prototype.toString = function () {
	    return this.source;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:UrlMatcher#exec
	   * @methodOf ui.router.util.type:UrlMatcher
	   *
	   * @description
	   * Tests the specified path against this matcher, and returns an object containing the captured
	   * parameter values, or null if the path does not match. The returned object contains the values
	   * of any search parameters that are mentioned in the pattern, but their value may be null if
	   * they are not present in `searchParams`. This means that search parameters are always treated
	   * as optional.
	   *
	   * @example
	   * <pre>
	   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
	   *   x: '1', q: 'hello'
	   * });
	   * // returns { id: 'bob', q: 'hello', r: null }
	   * </pre>
	   *
	   * @param {string} path  The URL path to match, e.g. `$location.path()`.
	   * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
	   * @returns {Object}  The captured parameter values.
	   */
	  UrlMatcher.prototype.exec = function (path, searchParams) {
	    var m = this.regexp.exec(path);
	    if (!m) return null;
	    searchParams = searchParams || {};

	    var paramNames = this.parameters(),
	        nTotal = paramNames.length,
	        nPath = this.segments.length - 1,
	        values = {},
	        i,
	        j,
	        cfg,
	        paramName;

	    if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

	    function decodePathArray(string) {
	      function reverseString(str) {
	        return str.split("").reverse().join("");
	      }
	      function unquoteDashes(str) {
	        return str.replace(/\\-/g, "-");
	      }

	      var split = reverseString(string).split(/-(?!\\)/);
	      var allReversed = map(split, reverseString);
	      return map(allReversed, unquoteDashes).reverse();
	    }

	    var param, paramVal;
	    for (i = 0; i < nPath; i++) {
	      paramName = paramNames[i];
	      param = this.params[paramName];
	      paramVal = m[i + 1];
	      // if the param value matches a pre-replace pair, replace the value before decoding.
	      for (j = 0; j < param.replace.length; j++) {
	        if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
	      }
	      if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
	      if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
	      values[paramName] = param.value(paramVal);
	    }
	    for (; /**/i < nTotal; i++) {
	      paramName = paramNames[i];
	      values[paramName] = this.params[paramName].value(searchParams[paramName]);
	      param = this.params[paramName];
	      paramVal = searchParams[paramName];
	      for (j = 0; j < param.replace.length; j++) {
	        if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
	      }
	      if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
	      values[paramName] = param.value(paramVal);
	    }

	    return values;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:UrlMatcher#parameters
	   * @methodOf ui.router.util.type:UrlMatcher
	   *
	   * @description
	   * Returns the names of all path and search parameters of this pattern in an unspecified order.
	   *
	   * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
	   *    pattern has no parameters, an empty array is returned.
	   */
	  UrlMatcher.prototype.parameters = function (param) {
	    if (!isDefined(param)) return this.$$paramNames;
	    return this.params[param] || null;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:UrlMatcher#validates
	   * @methodOf ui.router.util.type:UrlMatcher
	   *
	   * @description
	   * Checks an object hash of parameters to validate their correctness according to the parameter
	   * types of this `UrlMatcher`.
	   *
	   * @param {Object} params The object hash of parameters to validate.
	   * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
	   */
	  UrlMatcher.prototype.validates = function (params) {
	    return this.params.$$validates(params);
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:UrlMatcher#format
	   * @methodOf ui.router.util.type:UrlMatcher
	   *
	   * @description
	   * Creates a URL that matches this pattern by substituting the specified values
	   * for the path and search parameters. Null values for path parameters are
	   * treated as empty strings.
	   *
	   * @example
	   * <pre>
	   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
	   * // returns '/user/bob?q=yes'
	   * </pre>
	   *
	   * @param {Object} values  the values to substitute for the parameters in this pattern.
	   * @returns {string}  the formatted URL (path and optionally search part).
	   */
	  UrlMatcher.prototype.format = function (values) {
	    values = values || {};
	    var segments = this.segments,
	        params = this.parameters(),
	        paramset = this.params;
	    if (!this.validates(values)) return null;

	    var i,
	        search = false,
	        nPath = segments.length - 1,
	        nTotal = params.length,
	        result = segments[0];

	    function encodeDashes(str) {
	      // Replace dashes with encoded "\-"
	      return encodeURIComponent(str).replace(/-/g, function (c) {
	        return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase();
	      });
	    }

	    for (i = 0; i < nTotal; i++) {
	      var isPathParam = i < nPath;
	      var name = params[i],
	          param = paramset[name],
	          value = param.value(values[name]);
	      var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
	      var squash = isDefaultValue ? param.squash : false;
	      var encoded = param.type.encode(value);

	      if (isPathParam) {
	        var nextSegment = segments[i + 1];
	        var isFinalPathParam = i + 1 === nPath;

	        if (squash === false) {
	          if (encoded != null) {
	            if (isArray(encoded)) {
	              result += map(encoded, encodeDashes).join("-");
	            } else {
	              result += encodeURIComponent(encoded);
	            }
	          }
	          result += nextSegment;
	        } else if (squash === true) {
	          var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
	          result += nextSegment.match(capture)[1];
	        } else if (isString(squash)) {
	          result += squash + nextSegment;
	        }

	        if (isFinalPathParam && param.squash === true && result.slice(-1) === '/') result = result.slice(0, -1);
	      } else {
	        if (encoded == null || isDefaultValue && squash !== false) continue;
	        if (!isArray(encoded)) encoded = [encoded];
	        if (encoded.length === 0) continue;
	        encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
	        result += (search ? '&' : '?') + (name + '=' + encoded);
	        search = true;
	      }
	    }

	    return result;
	  };

	  /**
	   * @ngdoc object
	   * @name ui.router.util.type:Type
	   *
	   * @description
	   * Implements an interface to define custom parameter types that can be decoded from and encoded to
	   * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
	   * objects when matching or formatting URLs, or comparing or validating parameter values.
	   *
	   * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
	   * information on registering custom types.
	   *
	   * @param {Object} config  A configuration object which contains the custom type definition.  The object's
	   *        properties will override the default methods and/or pattern in `Type`'s public interface.
	   * @example
	   * <pre>
	   * {
	   *   decode: function(val) { return parseInt(val, 10); },
	   *   encode: function(val) { return val && val.toString(); },
	   *   equals: function(a, b) { return this.is(a) && a === b; },
	   *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
	   *   pattern: /\d+/
	   * }
	   * </pre>
	   *
	   * @property {RegExp} pattern The regular expression pattern used to match values of this type when
	   *           coming from a substring of a URL.
	   *
	   * @returns {Object}  Returns a new `Type` object.
	   */
	  function Type(config) {
	    extend(this, config);
	  }

	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:Type#is
	   * @methodOf ui.router.util.type:Type
	   *
	   * @description
	   * Detects whether a value is of a particular type. Accepts a native (decoded) value
	   * and determines whether it matches the current `Type` object.
	   *
	   * @param {*} val  The value to check.
	   * @param {string} key  Optional. If the type check is happening in the context of a specific
	   *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
	   *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
	   * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
	   */
	  Type.prototype.is = function (val, key) {
	    return true;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:Type#encode
	   * @methodOf ui.router.util.type:Type
	   *
	   * @description
	   * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
	   * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
	   * only needs to be a representation of `val` that has been coerced to a string.
	   *
	   * @param {*} val  The value to encode.
	   * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
	   *        meta-programming of `Type` objects.
	   * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
	   */
	  Type.prototype.encode = function (val, key) {
	    return val;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:Type#decode
	   * @methodOf ui.router.util.type:Type
	   *
	   * @description
	   * Converts a parameter value (from URL string or transition param) to a custom/native value.
	   *
	   * @param {string} val  The URL parameter value to decode.
	   * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
	   *        meta-programming of `Type` objects.
	   * @returns {*}  Returns a custom representation of the URL parameter value.
	   */
	  Type.prototype.decode = function (val, key) {
	    return val;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.type:Type#equals
	   * @methodOf ui.router.util.type:Type
	   *
	   * @description
	   * Determines whether two decoded values are equivalent.
	   *
	   * @param {*} a  A value to compare against.
	   * @param {*} b  A value to compare against.
	   * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
	   */
	  Type.prototype.equals = function (a, b) {
	    return a == b;
	  };

	  Type.prototype.$subPattern = function () {
	    var sub = this.pattern.toString();
	    return sub.substr(1, sub.length - 2);
	  };

	  Type.prototype.pattern = /.*/;

	  Type.prototype.toString = function () {
	    return "{Type:" + this.name + "}";
	  };

	  /** Given an encoded string, or a decoded object, returns a decoded object */
	  Type.prototype.$normalize = function (val) {
	    return this.is(val) ? val : this.decode(val);
	  };

	  /*
	   * Wraps an existing custom Type as an array of Type, depending on 'mode'.
	   * e.g.:
	   * - urlmatcher pattern "/path?{queryParam[]:int}"
	   * - url: "/path?queryParam=1&queryParam=2
	   * - $stateParams.queryParam will be [1, 2]
	   * if `mode` is "auto", then
	   * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
	   * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
	   */
	  Type.prototype.$asArray = function (mode, isSearch) {
	    if (!mode) return this;
	    if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");

	    function ArrayType(type, mode) {
	      function bindTo(type, callbackName) {
	        return function () {
	          return type[callbackName].apply(type, arguments);
	        };
	      }

	      // Wrap non-array value as array
	      function arrayWrap(val) {
	        return isArray(val) ? val : isDefined(val) ? [val] : [];
	      }
	      // Unwrap array value for "auto" mode. Return undefined for empty array.
	      function arrayUnwrap(val) {
	        switch (val.length) {
	          case 0:
	            return undefined;
	          case 1:
	            return mode === "auto" ? val[0] : val;
	          default:
	            return val;
	        }
	      }
	      function falsey(val) {
	        return !val;
	      }

	      // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
	      function arrayHandler(callback, allTruthyMode) {
	        return function handleArray(val) {
	          if (isArray(val) && val.length === 0) return val;
	          val = arrayWrap(val);
	          var result = map(val, callback);
	          if (allTruthyMode === true) return filter(result, falsey).length === 0;
	          return arrayUnwrap(result);
	        };
	      }

	      // Wraps type (.equals) functions to operate on each value of an array
	      function arrayEqualsHandler(callback) {
	        return function handleArray(val1, val2) {
	          var left = arrayWrap(val1),
	              right = arrayWrap(val2);
	          if (left.length !== right.length) return false;
	          for (var i = 0; i < left.length; i++) {
	            if (!callback(left[i], right[i])) return false;
	          }
	          return true;
	        };
	      }

	      this.encode = arrayHandler(bindTo(type, 'encode'));
	      this.decode = arrayHandler(bindTo(type, 'decode'));
	      this.is = arrayHandler(bindTo(type, 'is'), true);
	      this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
	      this.pattern = type.pattern;
	      this.$normalize = arrayHandler(bindTo(type, '$normalize'));
	      this.name = type.name;
	      this.$arrayMode = mode;
	    }

	    return new ArrayType(this, mode);
	  };

	  /**
	   * @ngdoc object
	   * @name ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
	   * is also available to providers under the name `$urlMatcherFactoryProvider`.
	   */
	  function $UrlMatcherFactory() {
	    $$UMFP = this;

	    var isCaseInsensitive = false,
	        isStrictMode = true,
	        defaultSquashPolicy = false;

	    // Use tildes to pre-encode slashes.
	    // If the slashes are simply URLEncoded, the browser can choose to pre-decode them,
	    // and bidirectional encoding/decoding fails.
	    // Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character
	    function valToString(val) {
	      return val != null ? val.toString().replace(/(~|\/)/g, function (m) {
	        return { '~': '~~', '/': '~2F' }[m];
	      }) : val;
	    }
	    function valFromString(val) {
	      return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) {
	        return { '~~': '~', '~2F': '/' }[m];
	      }) : val;
	    }

	    var $types = {},
	        enqueue = true,
	        typeQueue = [],
	        injector,
	        defaultTypes = {
	      "string": {
	        encode: valToString,
	        decode: valFromString,
	        // TODO: in 1.0, make string .is() return false if value is undefined/null by default.
	        // In 0.2.x, string params are optional by default for backwards compat
	        is: function is(val) {
	          return val == null || !isDefined(val) || typeof val === "string";
	        },
	        pattern: /[^/]*/
	      },
	      "int": {
	        encode: valToString,
	        decode: function decode(val) {
	          return parseInt(val, 10);
	        },
	        is: function is(val) {
	          return isDefined(val) && this.decode(val.toString()) === val;
	        },
	        pattern: /\d+/
	      },
	      "bool": {
	        encode: function encode(val) {
	          return val ? 1 : 0;
	        },
	        decode: function decode(val) {
	          return parseInt(val, 10) !== 0;
	        },
	        is: function is(val) {
	          return val === true || val === false;
	        },
	        pattern: /0|1/
	      },
	      "date": {
	        encode: function encode(val) {
	          if (!this.is(val)) return undefined;
	          return [val.getFullYear(), ('0' + (val.getMonth() + 1)).slice(-2), ('0' + val.getDate()).slice(-2)].join("-");
	        },
	        decode: function decode(val) {
	          if (this.is(val)) return val;
	          var match = this.capture.exec(val);
	          return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
	        },
	        is: function is(val) {
	          return val instanceof Date && !isNaN(val.valueOf());
	        },
	        equals: function equals(a, b) {
	          return this.is(a) && this.is(b) && a.toISOString() === b.toISOString();
	        },
	        pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
	        capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
	      },
	      "json": {
	        encode: angular.toJson,
	        decode: angular.fromJson,
	        is: angular.isObject,
	        equals: angular.equals,
	        pattern: /[^/]*/
	      },
	      "any": { // does not encode/decode
	        encode: angular.identity,
	        decode: angular.identity,
	        equals: angular.equals,
	        pattern: /.*/
	      }
	    };

	    function getDefaultConfig() {
	      return {
	        strict: isStrictMode,
	        caseInsensitive: isCaseInsensitive
	      };
	    }

	    function isInjectable(value) {
	      return isFunction(value) || isArray(value) && isFunction(value[value.length - 1]);
	    }

	    /**
	     * [Internal] Get the default value of a parameter, which may be an injectable function.
	     */
	    $UrlMatcherFactory.$$getDefaultValue = function (config) {
	      if (!isInjectable(config.value)) return config.value;
	      if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
	      return injector.invoke(config.value);
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.util.$urlMatcherFactory#caseInsensitive
	     * @methodOf ui.router.util.$urlMatcherFactory
	     *
	     * @description
	     * Defines whether URL matching should be case sensitive (the default behavior), or not.
	     *
	     * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
	     * @returns {boolean} the current value of caseInsensitive
	     */
	    this.caseInsensitive = function (value) {
	      if (isDefined(value)) isCaseInsensitive = value;
	      return isCaseInsensitive;
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.util.$urlMatcherFactory#strictMode
	     * @methodOf ui.router.util.$urlMatcherFactory
	     *
	     * @description
	     * Defines whether URLs should match trailing slashes, or not (the default behavior).
	     *
	     * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
	     * @returns {boolean} the current value of strictMode
	     */
	    this.strictMode = function (value) {
	      if (isDefined(value)) isStrictMode = value;
	      return isStrictMode;
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
	     * @methodOf ui.router.util.$urlMatcherFactory
	     *
	     * @description
	     * Sets the default behavior when generating or matching URLs with default parameter values.
	     *
	     * @param {string} value A string that defines the default parameter URL squashing behavior.
	     *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
	     *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
	     *             parameter is surrounded by slashes, squash (remove) one slash from the URL
	     *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
	     *             the parameter value from the URL and replace it with this string.
	     */
	    this.defaultSquashPolicy = function (value) {
	      if (!isDefined(value)) return defaultSquashPolicy;
	      if (value !== true && value !== false && !isString(value)) throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
	      defaultSquashPolicy = value;
	      return value;
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.util.$urlMatcherFactory#compile
	     * @methodOf ui.router.util.$urlMatcherFactory
	     *
	     * @description
	     * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
	     *
	     * @param {string} pattern  The URL pattern.
	     * @param {Object} config  The config object hash.
	     * @returns {UrlMatcher}  The UrlMatcher.
	     */
	    this.compile = function (pattern, config) {
	      return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.util.$urlMatcherFactory#isMatcher
	     * @methodOf ui.router.util.$urlMatcherFactory
	     *
	     * @description
	     * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
	     *
	     * @param {Object} object  The object to perform the type check against.
	     * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
	     *          implementing all the same methods.
	     */
	    this.isMatcher = function (o) {
	      if (!isObject(o)) return false;
	      var result = true;

	      forEach(UrlMatcher.prototype, function (val, name) {
	        if (isFunction(val)) {
	          result = result && isDefined(o[name]) && isFunction(o[name]);
	        }
	      });
	      return result;
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.util.$urlMatcherFactory#type
	     * @methodOf ui.router.util.$urlMatcherFactory
	     *
	     * @description
	     * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
	     * generate URLs with typed parameters.
	     *
	     * @param {string} name  The type name.
	     * @param {Object|Function} definition   The type definition. See
	     *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
	     * @param {Object|Function} definitionFn (optional) A function that is injected before the app
	     *        runtime starts.  The result of this function is merged into the existing `definition`.
	     *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
	     *
	     * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
	     *
	     * @example
	     * This is a simple example of a custom type that encodes and decodes items from an
	     * array, using the array index as the URL-encoded value:
	     *
	     * <pre>
	     * var list = ['John', 'Paul', 'George', 'Ringo'];
	     *
	     * $urlMatcherFactoryProvider.type('listItem', {
	     *   encode: function(item) {
	     *     // Represent the list item in the URL using its corresponding index
	     *     return list.indexOf(item);
	     *   },
	     *   decode: function(item) {
	     *     // Look up the list item by index
	     *     return list[parseInt(item, 10)];
	     *   },
	     *   is: function(item) {
	     *     // Ensure the item is valid by checking to see that it appears
	     *     // in the list
	     *     return list.indexOf(item) > -1;
	     *   }
	     * });
	     *
	     * $stateProvider.state('list', {
	     *   url: "/list/{item:listItem}",
	     *   controller: function($scope, $stateParams) {
	     *     console.log($stateParams.item);
	     *   }
	     * });
	     *
	     * // ...
	     *
	     * // Changes URL to '/list/3', logs "Ringo" to the console
	     * $state.go('list', { item: "Ringo" });
	     * </pre>
	     *
	     * This is a more complex example of a type that relies on dependency injection to
	     * interact with services, and uses the parameter name from the URL to infer how to
	     * handle encoding and decoding parameter values:
	     *
	     * <pre>
	     * // Defines a custom type that gets a value from a service,
	     * // where each service gets different types of values from
	     * // a backend API:
	     * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
	     *
	     *   // Matches up services to URL parameter names
	     *   var services = {
	     *     user: Users,
	     *     post: Posts
	     *   };
	     *
	     *   return {
	     *     encode: function(object) {
	     *       // Represent the object in the URL using its unique ID
	     *       return object.id;
	     *     },
	     *     decode: function(value, key) {
	     *       // Look up the object by ID, using the parameter
	     *       // name (key) to call the correct service
	     *       return services[key].findById(value);
	     *     },
	     *     is: function(object, key) {
	     *       // Check that object is a valid dbObject
	     *       return angular.isObject(object) && object.id && services[key];
	     *     }
	     *     equals: function(a, b) {
	     *       // Check the equality of decoded objects by comparing
	     *       // their unique IDs
	     *       return a.id === b.id;
	     *     }
	     *   };
	     * });
	     *
	     * // In a config() block, you can then attach URLs with
	     * // type-annotated parameters:
	     * $stateProvider.state('users', {
	     *   url: "/users",
	     *   // ...
	     * }).state('users.item', {
	     *   url: "/{user:dbObject}",
	     *   controller: function($scope, $stateParams) {
	     *     // $stateParams.user will now be an object returned from
	     *     // the Users service
	     *   },
	     *   // ...
	     * });
	     * </pre>
	     */
	    this.type = function (name, definition, definitionFn) {
	      if (!isDefined(definition)) return $types[name];
	      if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

	      $types[name] = new Type(extend({ name: name }, definition));
	      if (definitionFn) {
	        typeQueue.push({ name: name, def: definitionFn });
	        if (!enqueue) flushTypeQueue();
	      }
	      return this;
	    };

	    // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
	    function flushTypeQueue() {
	      while (typeQueue.length) {
	        var type = typeQueue.shift();
	        if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
	        angular.extend($types[type.name], injector.invoke(type.def));
	      }
	    }

	    // Register default types. Store them in the prototype of $types.
	    forEach(defaultTypes, function (type, name) {
	      $types[name] = new Type(extend({ name: name }, type));
	    });
	    $types = inherit($types, {});

	    /* No need to document $get, since it returns this */
	    this.$get = ['$injector', function ($injector) {
	      injector = $injector;
	      enqueue = false;
	      flushTypeQueue();

	      forEach(defaultTypes, function (type, name) {
	        if (!$types[name]) $types[name] = new Type(type);
	      });
	      return this;
	    }];

	    this.Param = function Param(id, type, config, location) {
	      var self = this;
	      config = unwrapShorthand(config);
	      type = getType(config, type, location);
	      var arrayMode = getArrayMode();
	      type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
	      if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined) config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
	      var isOptional = config.value !== undefined;
	      var squash = getSquashPolicy(config, isOptional);
	      var replace = getReplace(config, arrayMode, isOptional, squash);

	      function unwrapShorthand(config) {
	        var keys = isObject(config) ? objectKeys(config) : [];
	        var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 && indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
	        if (isShorthand) config = { value: config };
	        config.$$fn = isInjectable(config.value) ? config.value : function () {
	          return config.value;
	        };
	        return config;
	      }

	      function getType(config, urlType, location) {
	        if (config.type && urlType) throw new Error("Param '" + id + "' has two type configurations.");
	        if (urlType) return urlType;
	        if (!config.type) return location === "config" ? $types.any : $types.string;

	        if (angular.isString(config.type)) return $types[config.type];
	        if (config.type instanceof Type) return config.type;
	        return new Type(config.type);
	      }

	      // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
	      function getArrayMode() {
	        var arrayDefaults = { array: location === "search" ? "auto" : false };
	        var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
	        return extend(arrayDefaults, arrayParamNomenclature, config).array;
	      }

	      /**
	       * returns false, true, or the squash value to indicate the "default parameter url squash policy".
	       */
	      function getSquashPolicy(config, isOptional) {
	        var squash = config.squash;
	        if (!isOptional || squash === false) return false;
	        if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
	        if (squash === true || isString(squash)) return squash;
	        throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
	      }

	      function getReplace(config, arrayMode, isOptional, squash) {
	        var replace,
	            configuredKeys,
	            defaultPolicy = [{ from: "", to: isOptional || arrayMode ? undefined : "" }, { from: null, to: isOptional || arrayMode ? undefined : "" }];
	        replace = isArray(config.replace) ? config.replace : [];
	        if (isString(squash)) replace.push({ from: squash, to: undefined });
	        configuredKeys = map(replace, function (item) {
	          return item.from;
	        });
	        return filter(defaultPolicy, function (item) {
	          return indexOf(configuredKeys, item.from) === -1;
	        }).concat(replace);
	      }

	      /**
	       * [Internal] Get the default value of a parameter, which may be an injectable function.
	       */
	      function $$getDefaultValue() {
	        if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
	        var defaultValue = injector.invoke(config.$$fn);
	        if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue)) throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
	        return defaultValue;
	      }

	      /**
	       * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
	       * default value, which may be the result of an injectable function.
	       */
	      function $value(value) {
	        function hasReplaceVal(val) {
	          return function (obj) {
	            return obj.from === val;
	          };
	        }
	        function $replace(value) {
	          var replacement = map(filter(self.replace, hasReplaceVal(value)), function (obj) {
	            return obj.to;
	          });
	          return replacement.length ? replacement[0] : value;
	        }
	        value = $replace(value);
	        return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
	      }

	      function toString() {
	        return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}";
	      }

	      extend(this, {
	        id: id,
	        type: type,
	        location: location,
	        array: arrayMode,
	        squash: squash,
	        replace: replace,
	        isOptional: isOptional,
	        value: $value,
	        dynamic: undefined,
	        config: config,
	        toString: toString
	      });
	    };

	    function ParamSet(params) {
	      extend(this, params || {});
	    }

	    ParamSet.prototype = {
	      $$new: function $$new() {
	        return inherit(this, extend(new ParamSet(), { $$parent: this }));
	      },
	      $$keys: function $$keys() {
	        var keys = [],
	            chain = [],
	            parent = this,
	            ignore = objectKeys(ParamSet.prototype);
	        while (parent) {
	          chain.push(parent);parent = parent.$$parent;
	        }
	        chain.reverse();
	        forEach(chain, function (paramset) {
	          forEach(objectKeys(paramset), function (key) {
	            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
	          });
	        });
	        return keys;
	      },
	      $$values: function $$values(paramValues) {
	        var values = {},
	            self = this;
	        forEach(self.$$keys(), function (key) {
	          values[key] = self[key].value(paramValues && paramValues[key]);
	        });
	        return values;
	      },
	      $$equals: function $$equals(paramValues1, paramValues2) {
	        var equal = true,
	            self = this;
	        forEach(self.$$keys(), function (key) {
	          var left = paramValues1 && paramValues1[key],
	              right = paramValues2 && paramValues2[key];
	          if (!self[key].type.equals(left, right)) equal = false;
	        });
	        return equal;
	      },
	      $$validates: function $$validate(paramValues) {
	        var keys = this.$$keys(),
	            i,
	            param,
	            rawVal,
	            normalized,
	            encoded;
	        for (i = 0; i < keys.length; i++) {
	          param = this[keys[i]];
	          rawVal = paramValues[keys[i]];
	          if ((rawVal === undefined || rawVal === null) && param.isOptional) break; // There was no parameter value, but the param is optional
	          normalized = param.type.$normalize(rawVal);
	          if (!param.type.is(normalized)) return false; // The value was not of the correct Type, and could not be decoded to the correct Type
	          encoded = param.type.encode(normalized);
	          if (angular.isString(encoded) && !param.type.pattern.exec(encoded)) return false; // The value was of the correct type, but when encoded, did not match the Type's regexp
	        }
	        return true;
	      },
	      $$parent: undefined
	    };

	    this.ParamSet = ParamSet;
	  }

	  // Register as a provider so it's available to other providers
	  angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
	  angular.module('ui.router.util').run(['$urlMatcherFactory', function ($urlMatcherFactory) {}]);

	  /**
	   * @ngdoc object
	   * @name ui.router.router.$urlRouterProvider
	   *
	   * @requires ui.router.util.$urlMatcherFactoryProvider
	   * @requires $locationProvider
	   *
	   * @description
	   * `$urlRouterProvider` has the responsibility of watching `$location`. 
	   * When `$location` changes it runs through a list of rules one by one until a 
	   * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
	   * a url in a state configuration. All urls are compiled into a UrlMatcher object.
	   *
	   * There are several methods on `$urlRouterProvider` that make it useful to use directly
	   * in your module config.
	   */
	  $UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
	  function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {
	    var rules = [],
	        otherwise = null,
	        interceptDeferred = false,
	        listener;

	    // Returns a string that is a prefix of all strings matching the RegExp
	    function regExpPrefix(re) {
	      var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
	      return prefix != null ? prefix[1].replace(/\\(.)/g, "$1") : '';
	    }

	    // Interpolates matched values into a String.replace()-style pattern
	    function interpolate(pattern, match) {
	      return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
	        return match[what === '$' ? 0 : Number(what)];
	      });
	    }

	    /**
	     * @ngdoc function
	     * @name ui.router.router.$urlRouterProvider#rule
	     * @methodOf ui.router.router.$urlRouterProvider
	     *
	     * @description
	     * Defines rules that are used by `$urlRouterProvider` to find matches for
	     * specific URLs.
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router.router']);
	     *
	     * app.config(function ($urlRouterProvider) {
	     *   // Here's an example of how you might allow case insensitive urls
	     *   $urlRouterProvider.rule(function ($injector, $location) {
	     *     var path = $location.path(),
	     *         normalized = path.toLowerCase();
	     *
	     *     if (path !== normalized) {
	     *       return normalized;
	     *     }
	     *   });
	     * });
	     * </pre>
	     *
	     * @param {function} rule Handler function that takes `$injector` and `$location`
	     * services as arguments. You can use them to return a valid path as a string.
	     *
	     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
	     */
	    this.rule = function (rule) {
	      if (!isFunction(rule)) throw new Error("'rule' must be a function");
	      rules.push(rule);
	      return this;
	    };

	    /**
	     * @ngdoc object
	     * @name ui.router.router.$urlRouterProvider#otherwise
	     * @methodOf ui.router.router.$urlRouterProvider
	     *
	     * @description
	     * Defines a path that is used when an invalid route is requested.
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router.router']);
	     *
	     * app.config(function ($urlRouterProvider) {
	     *   // if the path doesn't match any of the urls you configured
	     *   // otherwise will take care of routing the user to the
	     *   // specified url
	     *   $urlRouterProvider.otherwise('/index');
	     *
	     *   // Example of using function rule as param
	     *   $urlRouterProvider.otherwise(function ($injector, $location) {
	     *     return '/a/valid/url';
	     *   });
	     * });
	     * </pre>
	     *
	     * @param {string|function} rule The url path you want to redirect to or a function 
	     * rule that returns the url path. The function version is passed two params: 
	     * `$injector` and `$location` services, and must return a url string.
	     *
	     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
	     */
	    this.otherwise = function (rule) {
	      if (isString(rule)) {
	        var redirect = rule;
	        rule = function rule() {
	          return redirect;
	        };
	      } else if (!isFunction(rule)) throw new Error("'rule' must be a function");
	      otherwise = rule;
	      return this;
	    };

	    function handleIfMatch($injector, handler, match) {
	      if (!match) return false;
	      var result = $injector.invoke(handler, handler, { $match: match });
	      return isDefined(result) ? result : true;
	    }

	    /**
	     * @ngdoc function
	     * @name ui.router.router.$urlRouterProvider#when
	     * @methodOf ui.router.router.$urlRouterProvider
	     *
	     * @description
	     * Registers a handler for a given url matching. 
	     * 
	     * If the handler is a string, it is
	     * treated as a redirect, and is interpolated according to the syntax of match
	     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
	     *
	     * If the handler is a function, it is injectable. It gets invoked if `$location`
	     * matches. You have the option of inject the match object as `$match`.
	     *
	     * The handler can return
	     *
	     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
	     *   will continue trying to find another one that matches.
	     * - **string** which is treated as a redirect and passed to `$location.url()`
	     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router.router']);
	     *
	     * app.config(function ($urlRouterProvider) {
	     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
	     *     if ($state.$current.navigable !== state ||
	     *         !equalForKeys($match, $stateParams) {
	     *      $state.transitionTo(state, $match, false);
	     *     }
	     *   });
	     * });
	     * </pre>
	     *
	     * @param {string|object} what The incoming path that you want to redirect.
	     * @param {string|function} handler The path you want to redirect your user to.
	     */
	    this.when = function (what, handler) {
	      var redirect,
	          handlerIsString = isString(handler);
	      if (isString(what)) what = $urlMatcherFactory.compile(what);

	      if (!handlerIsString && !isFunction(handler) && !isArray(handler)) throw new Error("invalid 'handler' in when()");

	      var strategies = {
	        matcher: function matcher(what, handler) {
	          if (handlerIsString) {
	            redirect = $urlMatcherFactory.compile(handler);
	            handler = ['$match', function ($match) {
	              return redirect.format($match);
	            }];
	          }
	          return extend(function ($injector, $location) {
	            return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
	          }, {
	            prefix: isString(what.prefix) ? what.prefix : ''
	          });
	        },
	        regex: function regex(what, handler) {
	          if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

	          if (handlerIsString) {
	            redirect = handler;
	            handler = ['$match', function ($match) {
	              return interpolate(redirect, $match);
	            }];
	          }
	          return extend(function ($injector, $location) {
	            return handleIfMatch($injector, handler, what.exec($location.path()));
	          }, {
	            prefix: regExpPrefix(what)
	          });
	        }
	      };

	      var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

	      for (var n in check) {
	        if (check[n]) return this.rule(strategies[n](what, handler));
	      }

	      throw new Error("invalid 'what' in when()");
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.router.$urlRouterProvider#deferIntercept
	     * @methodOf ui.router.router.$urlRouterProvider
	     *
	     * @description
	     * Disables (or enables) deferring location change interception.
	     *
	     * If you wish to customize the behavior of syncing the URL (for example, if you wish to
	     * defer a transition but maintain the current URL), call this method at configuration time.
	     * Then, at run time, call `$urlRouter.listen()` after you have configured your own
	     * `$locationChangeSuccess` event handler.
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router.router']);
	     *
	     * app.config(function ($urlRouterProvider) {
	     *
	     *   // Prevent $urlRouter from automatically intercepting URL changes;
	     *   // this allows you to configure custom behavior in between
	     *   // location changes and route synchronization:
	     *   $urlRouterProvider.deferIntercept();
	     *
	     * }).run(function ($rootScope, $urlRouter, UserService) {
	     *
	     *   $rootScope.$on('$locationChangeSuccess', function(e) {
	     *     // UserService is an example service for managing user state
	     *     if (UserService.isLoggedIn()) return;
	     *
	     *     // Prevent $urlRouter's default handler from firing
	     *     e.preventDefault();
	     *
	     *     UserService.handleLogin().then(function() {
	     *       // Once the user has logged in, sync the current URL
	     *       // to the router:
	     *       $urlRouter.sync();
	     *     });
	     *   });
	     *
	     *   // Configures $urlRouter's listener *after* your custom listener
	     *   $urlRouter.listen();
	     * });
	     * </pre>
	     *
	     * @param {boolean} defer Indicates whether to defer location change interception. Passing
	              no parameter is equivalent to `true`.
	     */
	    this.deferIntercept = function (defer) {
	      if (defer === undefined) defer = true;
	      interceptDeferred = defer;
	    };

	    /**
	     * @ngdoc object
	     * @name ui.router.router.$urlRouter
	     *
	     * @requires $location
	     * @requires $rootScope
	     * @requires $injector
	     * @requires $browser
	     *
	     * @description
	     *
	     */
	    this.$get = $get;
	    $get.$inject = ['$location', '$rootScope', '$injector', '$browser', '$sniffer'];
	    function $get($location, $rootScope, $injector, $browser, $sniffer) {

	      var baseHref = $browser.baseHref(),
	          location = $location.url(),
	          lastPushedUrl;

	      function appendBasePath(url, isHtml5, absolute) {
	        if (baseHref === '/') return url;
	        if (isHtml5) return baseHref.slice(0, -1) + url;
	        if (absolute) return baseHref.slice(1) + url;
	        return url;
	      }

	      // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
	      function update(evt) {
	        if (evt && evt.defaultPrevented) return;
	        var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
	        lastPushedUrl = undefined;
	        // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573
	        //if (ignoreUpdate) return true;

	        function check(rule) {
	          var handled = rule($injector, $location);

	          if (!handled) return false;
	          if (isString(handled)) $location.replace().url(handled);
	          return true;
	        }
	        var n = rules.length,
	            i;

	        for (i = 0; i < n; i++) {
	          if (check(rules[i])) return;
	        }
	        // always check otherwise last to allow dynamic updates to the set of rules
	        if (otherwise) check(otherwise);
	      }

	      function _listen() {
	        listener = listener || $rootScope.$on('$locationChangeSuccess', update);
	        return listener;
	      }

	      if (!interceptDeferred) _listen();

	      return {
	        /**
	         * @ngdoc function
	         * @name ui.router.router.$urlRouter#sync
	         * @methodOf ui.router.router.$urlRouter
	         *
	         * @description
	         * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
	         * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
	         * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
	         * with the transition by calling `$urlRouter.sync()`.
	         *
	         * @example
	         * <pre>
	         * angular.module('app', ['ui.router'])
	         *   .run(function($rootScope, $urlRouter) {
	         *     $rootScope.$on('$locationChangeSuccess', function(evt) {
	         *       // Halt state change from even starting
	         *       evt.preventDefault();
	         *       // Perform custom logic
	         *       var meetsRequirement = ...
	         *       // Continue with the update and state transition if logic allows
	         *       if (meetsRequirement) $urlRouter.sync();
	         *     });
	         * });
	         * </pre>
	         */
	        sync: function sync() {
	          update();
	        },

	        listen: function listen() {
	          return _listen();
	        },

	        update: function update(read) {
	          if (read) {
	            location = $location.url();
	            return;
	          }
	          if ($location.url() === location) return;

	          $location.url(location);
	          $location.replace();
	        },

	        push: function push(urlMatcher, params, options) {
	          var url = urlMatcher.format(params || {});

	          // Handle the special hash param, if needed
	          if (url !== null && params && params['#']) {
	            url += '#' + params['#'];
	          }

	          $location.url(url);
	          lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
	          if (options && options.replace) $location.replace();
	        },

	        /**
	         * @ngdoc function
	         * @name ui.router.router.$urlRouter#href
	         * @methodOf ui.router.router.$urlRouter
	         *
	         * @description
	         * A URL generation method that returns the compiled URL for a given
	         * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
	         *
	         * @example
	         * <pre>
	         * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
	         *   person: "bob"
	         * });
	         * // $bob == "/about/bob";
	         * </pre>
	         *
	         * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
	         * @param {object=} params An object of parameter values to fill the matcher's required parameters.
	         * @param {object=} options Options object. The options are:
	         *
	         * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
	         *
	         * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
	         */
	        href: function href(urlMatcher, params, options) {
	          if (!urlMatcher.validates(params)) return null;

	          var isHtml5 = $locationProvider.html5Mode();
	          if (angular.isObject(isHtml5)) {
	            isHtml5 = isHtml5.enabled;
	          }

	          isHtml5 = isHtml5 && $sniffer.history;

	          var url = urlMatcher.format(params);
	          options = options || {};

	          if (!isHtml5 && url !== null) {
	            url = "#" + $locationProvider.hashPrefix() + url;
	          }

	          // Handle special hash param, if needed
	          if (url !== null && params && params['#']) {
	            url += '#' + params['#'];
	          }

	          url = appendBasePath(url, isHtml5, options.absolute);

	          if (!options.absolute || !url) {
	            return url;
	          }

	          var slash = !isHtml5 && url ? '/' : '',
	              port = $location.port();
	          port = port === 80 || port === 443 ? '' : ':' + port;

	          return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
	        }
	      };
	    }
	  }

	  angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

	  /**
	   * @ngdoc object
	   * @name ui.router.state.$stateProvider
	   *
	   * @requires ui.router.router.$urlRouterProvider
	   * @requires ui.router.util.$urlMatcherFactoryProvider
	   *
	   * @description
	   * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
	   * on state.
	   *
	   * A state corresponds to a "place" in the application in terms of the overall UI and
	   * navigation. A state describes (via the controller / template / view properties) what
	   * the UI looks like and does at that place.
	   *
	   * States often have things in common, and the primary way of factoring out these
	   * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
	   * nested states.
	   *
	   * The `$stateProvider` provides interfaces to declare these states for your app.
	   */
	  $StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
	  function $StateProvider($urlRouterProvider, $urlMatcherFactory) {

	    var root,
	        states = {},
	        $state,
	        queue = {},
	        abstractKey = 'abstract';

	    // Builds state properties from definition passed to registerState()
	    var stateBuilder = {

	      // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
	      // state.children = [];
	      // if (parent) parent.children.push(state);
	      parent: function parent(state) {
	        if (isDefined(state.parent) && state.parent) return findState(state.parent);
	        // regex matches any valid composite state name
	        // would match "contact.list" but not "contacts"
	        var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
	        return compositeName ? findState(compositeName[1]) : root;
	      },

	      // inherit 'data' from parent and override by own values (if any)
	      data: function data(state) {
	        if (state.parent && state.parent.data) {
	          state.data = state.self.data = inherit(state.parent.data, state.data);
	        }
	        return state.data;
	      },

	      // Build a URLMatcher if necessary, either via a relative or absolute URL
	      url: function url(state) {
	        var url = state.url,
	            config = { params: state.params || {} };

	        if (isString(url)) {
	          if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
	          return (state.parent.navigable || root).url.concat(url, config);
	        }

	        if (!url || $urlMatcherFactory.isMatcher(url)) return url;
	        throw new Error("Invalid url '" + url + "' in state '" + state + "'");
	      },

	      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
	      navigable: function navigable(state) {
	        return state.url ? state : state.parent ? state.parent.navigable : null;
	      },

	      // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
	      ownParams: function ownParams(state) {
	        var params = state.url && state.url.params || new $$UMFP.ParamSet();
	        forEach(state.params || {}, function (config, id) {
	          if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
	        });
	        return params;
	      },

	      // Derive parameters for this state and ensure they're a super-set of parent's parameters
	      params: function params(state) {
	        var ownParams = pick(state.ownParams, state.ownParams.$$keys());
	        return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();
	      },

	      // If there is no explicit multi-view configuration, make one up so we don't have
	      // to handle both cases in the view directive later. Note that having an explicit
	      // 'views' property will mean the default unnamed view properties are ignored. This
	      // is also a good time to resolve view names to absolute names, so everything is a
	      // straight lookup at link time.
	      views: function views(state) {
	        var views = {};

	        forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
	          if (name.indexOf('@') < 0) name += '@' + state.parent.name;
	          view.resolveAs = view.resolveAs || state.resolveAs || '$resolve';
	          views[name] = view;
	        });
	        return views;
	      },

	      // Keep a full path from the root down to this state as this is needed for state activation.
	      path: function path(state) {
	        return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
	      },

	      // Speed up $state.contains() as it's used a lot
	      includes: function includes(state) {
	        var includes = state.parent ? extend({}, state.parent.includes) : {};
	        includes[state.name] = true;
	        return includes;
	      },

	      $delegates: {}
	    };

	    function isRelative(stateName) {
	      return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
	    }

	    function findState(stateOrName, base) {
	      if (!stateOrName) return undefined;

	      var isStr = isString(stateOrName),
	          name = isStr ? stateOrName : stateOrName.name,
	          path = isRelative(name);

	      if (path) {
	        if (!base) throw new Error("No reference point given for path '" + name + "'");
	        base = findState(base);

	        var rel = name.split("."),
	            i = 0,
	            pathLength = rel.length,
	            current = base;

	        for (; i < pathLength; i++) {
	          if (rel[i] === "" && i === 0) {
	            current = base;
	            continue;
	          }
	          if (rel[i] === "^") {
	            if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
	            current = current.parent;
	            continue;
	          }
	          break;
	        }
	        rel = rel.slice(i).join(".");
	        name = current.name + (current.name && rel ? "." : "") + rel;
	      }
	      var state = states[name];

	      if (state && (isStr || !isStr && (state === stateOrName || state.self === stateOrName))) {
	        return state;
	      }
	      return undefined;
	    }

	    function queueState(parentName, state) {
	      if (!queue[parentName]) {
	        queue[parentName] = [];
	      }
	      queue[parentName].push(state);
	    }

	    function flushQueuedChildren(parentName) {
	      var queued = queue[parentName] || [];
	      while (queued.length) {
	        registerState(queued.shift());
	      }
	    }

	    function registerState(state) {
	      // Wrap a new object around the state so we can store our private details easily.
	      state = inherit(state, {
	        self: state,
	        resolve: state.resolve || {},
	        toString: function toString() {
	          return this.name;
	        }
	      });

	      var name = state.name;
	      if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
	      if (states.hasOwnProperty(name)) throw new Error("State '" + name + "' is already defined");

	      // Get parent name
	      var parentName = name.indexOf('.') !== -1 ? name.substring(0, name.lastIndexOf('.')) : isString(state.parent) ? state.parent : isObject(state.parent) && isString(state.parent.name) ? state.parent.name : '';

	      // If parent is not registered yet, add state to queue and register later
	      if (parentName && !states[parentName]) {
	        return queueState(parentName, state.self);
	      }

	      for (var key in stateBuilder) {
	        if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
	      }
	      states[name] = state;

	      // Register the state in the global state list and with $urlRouter if necessary.
	      if (!state[abstractKey] && state.url) {
	        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
	          if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
	            $state.transitionTo(state, $match, { inherit: true, location: false });
	          }
	        }]);
	      }

	      // Register any queued children
	      flushQueuedChildren(name);

	      return state;
	    }

	    // Checks text to see if it looks like a glob.
	    function isGlob(text) {
	      return text.indexOf('*') > -1;
	    }

	    // Returns true if glob matches current $state name.
	    function doesStateMatchGlob(glob) {
	      var globSegments = glob.split('.'),
	          segments = $state.$current.name.split('.');

	      //match single stars
	      for (var i = 0, l = globSegments.length; i < l; i++) {
	        if (globSegments[i] === '*') {
	          segments[i] = '*';
	        }
	      }

	      //match greedy starts
	      if (globSegments[0] === '**') {
	        segments = segments.slice(indexOf(segments, globSegments[1]));
	        segments.unshift('**');
	      }
	      //match greedy ends
	      if (globSegments[globSegments.length - 1] === '**') {
	        segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
	        segments.push('**');
	      }

	      if (globSegments.length != segments.length) {
	        return false;
	      }

	      return segments.join('') === globSegments.join('');
	    }

	    // Implicit root state that is always active
	    root = registerState({
	      name: '',
	      url: '^',
	      views: null,
	      'abstract': true
	    });
	    root.navigable = null;

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$stateProvider#decorator
	     * @methodOf ui.router.state.$stateProvider
	     *
	     * @description
	     * Allows you to extend (carefully) or override (at your own peril) the 
	     * `stateBuilder` object used internally by `$stateProvider`. This can be used 
	     * to add custom functionality to ui-router, for example inferring templateUrl 
	     * based on the state name.
	     *
	     * When passing only a name, it returns the current (original or decorated) builder
	     * function that matches `name`.
	     *
	     * The builder functions that can be decorated are listed below. Though not all
	     * necessarily have a good use case for decoration, that is up to you to decide.
	     *
	     * In addition, users can attach custom decorators, which will generate new 
	     * properties within the state's internal definition. There is currently no clear 
	     * use-case for this beyond accessing internal states (i.e. $state.$current), 
	     * however, expect this to become increasingly relevant as we introduce additional 
	     * meta-programming features.
	     *
	     * **Warning**: Decorators should not be interdependent because the order of 
	     * execution of the builder functions in non-deterministic. Builder functions 
	     * should only be dependent on the state definition object and super function.
	     *
	     *
	     * Existing builder functions and current return values:
	     *
	     * - **parent** `{object}` - returns the parent state object.
	     * - **data** `{object}` - returns state data, including any inherited data that is not
	     *   overridden by own values (if any).
	     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
	     *   or `null`.
	     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
	     *   navigable).
	     * - **params** `{object}` - returns an array of state params that are ensured to 
	     *   be a super-set of parent's params.
	     * - **views** `{object}` - returns a views object where each key is an absolute view 
	     *   name (i.e. "viewName@stateName") and each value is the config object 
	     *   (template, controller) for the view. Even when you don't use the views object 
	     *   explicitly on a state config, one is still created for you internally.
	     *   So by decorating this builder function you have access to decorating template 
	     *   and controller properties.
	     * - **ownParams** `{object}` - returns an array of params that belong to the state, 
	     *   not including any params defined by ancestor states.
	     * - **path** `{string}` - returns the full path from the root down to this state. 
	     *   Needed for state activation.
	     * - **includes** `{object}` - returns an object that includes every state that 
	     *   would pass a `$state.includes()` test.
	     *
	     * @example
	     * <pre>
	     * // Override the internal 'views' builder with a function that takes the state
	     * // definition, and a reference to the internal function being overridden:
	     * $stateProvider.decorator('views', function (state, parent) {
	     *   var result = {},
	     *       views = parent(state);
	     *
	     *   angular.forEach(views, function (config, name) {
	     *     var autoName = (state.name + '.' + name).replace('.', '/');
	     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
	     *     result[name] = config;
	     *   });
	     *   return result;
	     * });
	     *
	     * $stateProvider.state('home', {
	     *   views: {
	     *     'contact.list': { controller: 'ListController' },
	     *     'contact.item': { controller: 'ItemController' }
	     *   }
	     * });
	     *
	     * // ...
	     *
	     * $state.go('home');
	     * // Auto-populates list and item views with /partials/home/contact/list.html,
	     * // and /partials/home/contact/item.html, respectively.
	     * </pre>
	     *
	     * @param {string} name The name of the builder function to decorate. 
	     * @param {object} func A function that is responsible for decorating the original 
	     * builder function. The function receives two parameters:
	     *
	     *   - `{object}` - state - The state config object.
	     *   - `{object}` - super - The original builder function.
	     *
	     * @return {object} $stateProvider - $stateProvider instance
	     */
	    this.decorator = decorator;
	    function decorator(name, func) {
	      /*jshint validthis: true */
	      if (isString(name) && !isDefined(func)) {
	        return stateBuilder[name];
	      }
	      if (!isFunction(func) || !isString(name)) {
	        return this;
	      }
	      if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
	        stateBuilder.$delegates[name] = stateBuilder[name];
	      }
	      stateBuilder[name] = func;
	      return this;
	    }

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$stateProvider#state
	     * @methodOf ui.router.state.$stateProvider
	     *
	     * @description
	     * Registers a state configuration under a given state name. The stateConfig object
	     * has the following acceptable properties.
	     *
	     * @param {string} name A unique state name, e.g. "home", "about", "contacts".
	     * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
	     * @param {object} stateConfig State configuration object.
	     * @param {string|function=} stateConfig.template
	     * <a id='template'></a>
	     *   html template as a string or a function that returns
	     *   an html template as a string which should be used by the uiView directives. This property 
	     *   takes precedence over templateUrl.
	     *   
	     *   If `template` is a function, it will be called with the following parameters:
	     *
	     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
	     *     applying the current state
	     *
	     * <pre>template:
	     *   "<h1>inline template definition</h1>" +
	     *   "<div ui-view></div>"</pre>
	     * <pre>template: function(params) {
	     *       return "<h1>generated template</h1>"; }</pre>
	     * </div>
	     *
	     * @param {string|function=} stateConfig.templateUrl
	     * <a id='templateUrl'></a>
	     *
	     *   path or function that returns a path to an html
	     *   template that should be used by uiView.
	     *   
	     *   If `templateUrl` is a function, it will be called with the following parameters:
	     *
	     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
	     *     applying the current state
	     *
	     * <pre>templateUrl: "home.html"</pre>
	     * <pre>templateUrl: function(params) {
	     *     return myTemplates[params.pageId]; }</pre>
	     *
	     * @param {function=} stateConfig.templateProvider
	     * <a id='templateProvider'></a>
	     *    Provider function that returns HTML content string.
	     * <pre> templateProvider:
	     *       function(MyTemplateService, params) {
	     *         return MyTemplateService.getTemplate(params.pageId);
	     *       }</pre>
	     *
	     * @param {string|function=} stateConfig.controller
	     * <a id='controller'></a>
	     *
	     *  Controller fn that should be associated with newly
	     *   related scope or the name of a registered controller if passed as a string.
	     *   Optionally, the ControllerAs may be declared here.
	     * <pre>controller: "MyRegisteredController"</pre>
	     * <pre>controller:
	     *     "MyRegisteredController as fooCtrl"}</pre>
	     * <pre>controller: function($scope, MyService) {
	     *     $scope.data = MyService.getData(); }</pre>
	     *
	     * @param {function=} stateConfig.controllerProvider
	     * <a id='controllerProvider'></a>
	     *
	     * Injectable provider function that returns the actual controller or string.
	     * <pre>controllerProvider:
	     *   function(MyResolveData) {
	     *     if (MyResolveData.foo)
	     *       return "FooCtrl"
	     *     else if (MyResolveData.bar)
	     *       return "BarCtrl";
	     *     else return function($scope) {
	     *       $scope.baz = "Qux";
	     *     }
	     *   }</pre>
	     *
	     * @param {string=} stateConfig.controllerAs
	     * <a id='controllerAs'></a>
	     * 
	     * A controller alias name. If present the controller will be
	     *   published to scope under the controllerAs name.
	     * <pre>controllerAs: "myCtrl"</pre>
	     *
	     * @param {string|object=} stateConfig.parent
	     * <a id='parent'></a>
	     * Optionally specifies the parent state of this state.
	     *
	     * <pre>parent: 'parentState'</pre>
	     * <pre>parent: parentState // JS variable</pre>
	     *
	     * @param {object=} stateConfig.resolve
	     * <a id='resolve'></a>
	     *
	     * An optional map&lt;string, function&gt; of dependencies which
	     *   should be injected into the controller. If any of these dependencies are promises, 
	     *   the router will wait for them all to be resolved before the controller is instantiated.
	     *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
	     *   and the values of the resolved promises are injected into any controllers that reference them.
	     *   If any  of the promises are rejected the $stateChangeError event is fired.
	     *
	     *   The map object is:
	     *   
	     *   - key - {string}: name of dependency to be injected into controller
	     *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
	     *     it is injected and return value it treated as dependency. If result is a promise, it is 
	     *     resolved before its value is injected into controller.
	     *
	     * <pre>resolve: {
	     *     myResolve1:
	     *       function($http, $stateParams) {
	     *         return $http.get("/api/foos/"+stateParams.fooID);
	     *       }
	     *     }</pre>
	     *
	     * @param {string=} stateConfig.url
	     * <a id='url'></a>
	     *
	     *   A url fragment with optional parameters. When a state is navigated or
	     *   transitioned to, the `$stateParams` service will be populated with any 
	     *   parameters that were passed.
	     *
	     *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
	     *   more details on acceptable patterns )
	     *
	     * examples:
	     * <pre>url: "/home"
	     * url: "/users/:userid"
	     * url: "/books/{bookid:[a-zA-Z_-]}"
	     * url: "/books/{categoryid:int}"
	     * url: "/books/{publishername:string}/{categoryid:int}"
	     * url: "/messages?before&after"
	     * url: "/messages?{before:date}&{after:date}"
	     * url: "/messages/:mailboxid?{before:date}&{after:date}"
	     * </pre>
	     *
	     * @param {object=} stateConfig.views
	     * <a id='views'></a>
	     * an optional map&lt;string, object&gt; which defined multiple views, or targets views
	     * manually/explicitly.
	     *
	     * Examples:
	     *
	     * Targets three named `ui-view`s in the parent state's template
	     * <pre>views: {
	     *     header: {
	     *       controller: "headerCtrl",
	     *       templateUrl: "header.html"
	     *     }, body: {
	     *       controller: "bodyCtrl",
	     *       templateUrl: "body.html"
	     *     }, footer: {
	     *       controller: "footCtrl",
	     *       templateUrl: "footer.html"
	     *     }
	     *   }</pre>
	     *
	     * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
	     * <pre>views: {
	     *     'header@top': {
	     *       controller: "msgHeaderCtrl",
	     *       templateUrl: "msgHeader.html"
	     *     }, 'body': {
	     *       controller: "messagesCtrl",
	     *       templateUrl: "messages.html"
	     *     }
	     *   }</pre>
	     *
	     * @param {boolean=} [stateConfig.abstract=false]
	     * <a id='abstract'></a>
	     * An abstract state will never be directly activated,
	     *   but can provide inherited properties to its common children states.
	     * <pre>abstract: true</pre>
	     *
	     * @param {function=} stateConfig.onEnter
	     * <a id='onEnter'></a>
	     *
	     * Callback function for when a state is entered. Good way
	     *   to trigger an action or dispatch an event, such as opening a dialog.
	     * If minifying your scripts, make sure to explicitly annotate this function,
	     * because it won't be automatically annotated by your build tools.
	     *
	     * <pre>onEnter: function(MyService, $stateParams) {
	     *     MyService.foo($stateParams.myParam);
	     * }</pre>
	     *
	     * @param {function=} stateConfig.onExit
	     * <a id='onExit'></a>
	     *
	     * Callback function for when a state is exited. Good way to
	     *   trigger an action or dispatch an event, such as opening a dialog.
	     * If minifying your scripts, make sure to explicitly annotate this function,
	     * because it won't be automatically annotated by your build tools.
	     *
	     * <pre>onExit: function(MyService, $stateParams) {
	     *     MyService.cleanup($stateParams.myParam);
	     * }</pre>
	     *
	     * @param {boolean=} [stateConfig.reloadOnSearch=true]
	     * <a id='reloadOnSearch'></a>
	     *
	     * If `false`, will not retrigger the same state
	     *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
	     *   Useful for when you'd like to modify $location.search() without triggering a reload.
	     * <pre>reloadOnSearch: false</pre>
	     *
	     * @param {object=} stateConfig.data
	     * <a id='data'></a>
	     *
	     * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
	     *   prototypally inherited.  In other words, adding a data property to a state adds it to
	     *   the entire subtree via prototypal inheritance.
	     *
	     * <pre>data: {
	     *     requiredRole: 'foo'
	     * } </pre>
	     *
	     * @param {object=} stateConfig.params
	     * <a id='params'></a>
	     *
	     * A map which optionally configures parameters declared in the `url`, or
	     *   defines additional non-url parameters.  For each parameter being
	     *   configured, add a configuration object keyed to the name of the parameter.
	     *
	     *   Each parameter configuration object may contain the following properties:
	     *
	     *   - ** value ** - {object|function=}: specifies the default value for this
	     *     parameter.  This implicitly sets this parameter as optional.
	     *
	     *     When UI-Router routes to a state and no value is
	     *     specified for this parameter in the URL or transition, the
	     *     default value will be used instead.  If `value` is a function,
	     *     it will be injected and invoked, and the return value used.
	     *
	     *     *Note*: `undefined` is treated as "no default value" while `null`
	     *     is treated as "the default value is `null`".
	     *
	     *     *Shorthand*: If you only need to configure the default value of the
	     *     parameter, you may use a shorthand syntax.   In the **`params`**
	     *     map, instead mapping the param name to a full parameter configuration
	     *     object, simply set map it to the default parameter value, e.g.:
	     *
	     * <pre>// define a parameter's default value
	     * params: {
	     *     param1: { value: "defaultValue" }
	     * }
	     * // shorthand default values
	     * params: {
	     *     param1: "defaultValue",
	     *     param2: "param2Default"
	     * }</pre>
	     *
	     *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
	     *     treated as an array of values.  If you specified a Type, the value will be
	     *     treated as an array of the specified Type.  Note: query parameter values
	     *     default to a special `"auto"` mode.
	     *
	     *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
	     *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
	     *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
	     *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
	     *     value (e.g.: `{ foo: '1' }`).
	     *
	     * <pre>params: {
	     *     param1: { array: true }
	     * }</pre>
	     *
	     *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
	     *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
	     *     configured default squash policy.
	     *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
	     *
	     *   There are three squash settings:
	     *
	     *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
	     *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
	     *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
	     *       This can allow for cleaner looking URLs.
	     *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
	     *
	     * <pre>params: {
	     *     param1: {
	     *       value: "defaultId",
	     *       squash: true
	     * } }
	     * // squash "defaultValue" to "~"
	     * params: {
	     *     param1: {
	     *       value: "defaultValue",
	     *       squash: "~"
	     * } }
	     * </pre>
	     *
	     *
	     * @example
	     * <pre>
	     * // Some state name examples
	     *
	     * // stateName can be a single top-level name (must be unique).
	     * $stateProvider.state("home", {});
	     *
	     * // Or it can be a nested state name. This state is a child of the
	     * // above "home" state.
	     * $stateProvider.state("home.newest", {});
	     *
	     * // Nest states as deeply as needed.
	     * $stateProvider.state("home.newest.abc.xyz.inception", {});
	     *
	     * // state() returns $stateProvider, so you can chain state declarations.
	     * $stateProvider
	     *   .state("home", {})
	     *   .state("about", {})
	     *   .state("contacts", {});
	     * </pre>
	     *
	     */
	    this.state = state;
	    function state(name, definition) {
	      /*jshint validthis: true */
	      if (isObject(name)) definition = name;else definition.name = name;
	      registerState(definition);
	      return this;
	    }

	    /**
	     * @ngdoc object
	     * @name ui.router.state.$state
	     *
	     * @requires $rootScope
	     * @requires $q
	     * @requires ui.router.state.$view
	     * @requires $injector
	     * @requires ui.router.util.$resolve
	     * @requires ui.router.state.$stateParams
	     * @requires ui.router.router.$urlRouter
	     *
	     * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
	     * you'd like to test against the current active state.
	     * @property {object} current A reference to the state's config object. However 
	     * you passed it in. Useful for accessing custom data.
	     * @property {object} transition Currently pending transition. A promise that'll 
	     * resolve or reject.
	     *
	     * @description
	     * `$state` service is responsible for representing states as well as transitioning
	     * between them. It also provides interfaces to ask for current state or even states
	     * you're coming from.
	     */
	    this.$get = $get;
	    $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
	    function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {

	      var TransitionSupersededError = new Error('transition superseded');

	      var TransitionSuperseded = silenceUncaughtInPromise($q.reject(TransitionSupersededError));
	      var TransitionPrevented = silenceUncaughtInPromise($q.reject(new Error('transition prevented')));
	      var TransitionAborted = silenceUncaughtInPromise($q.reject(new Error('transition aborted')));
	      var TransitionFailed = silenceUncaughtInPromise($q.reject(new Error('transition failed')));

	      // Handles the case where a state which is the target of a transition is not found, and the user
	      // can optionally retry or defer the transition
	      function handleRedirect(redirect, state, params, options) {
	        /**
	         * @ngdoc event
	         * @name ui.router.state.$state#$stateNotFound
	         * @eventOf ui.router.state.$state
	         * @eventType broadcast on root scope
	         * @description
	         * Fired when a requested state **cannot be found** using the provided state name during transition.
	         * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
	         * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
	         * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
	         * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
	         *
	         * @param {Object} event Event object.
	         * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
	         * @param {State} fromState Current state object.
	         * @param {Object} fromParams Current state params.
	         *
	         * @example
	         *
	         * <pre>
	         * // somewhere, assume lazy.state has not been defined
	         * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
	         *
	         * // somewhere else
	         * $scope.$on('$stateNotFound',
	         * function(event, unfoundState, fromState, fromParams){
	         *     console.log(unfoundState.to); // "lazy.state"
	         *     console.log(unfoundState.toParams); // {a:1, b:2}
	         *     console.log(unfoundState.options); // {inherit:false} + default options
	         * })
	         * </pre>
	         */
	        var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

	        if (evt.defaultPrevented) {
	          $urlRouter.update();
	          return TransitionAborted;
	        }

	        if (!evt.retry) {
	          return null;
	        }

	        // Allow the handler to return a promise to defer state lookup retry
	        if (options.$retry) {
	          $urlRouter.update();
	          return TransitionFailed;
	        }
	        var retryTransition = $state.transition = $q.when(evt.retry);

	        retryTransition.then(function () {
	          if (retryTransition !== $state.transition) {
	            $rootScope.$broadcast('$stateChangeCancel', redirect.to, redirect.toParams, state, params);
	            return TransitionSuperseded;
	          }
	          redirect.options.$retry = true;
	          return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
	        }, function () {
	          return TransitionAborted;
	        });
	        $urlRouter.update();

	        return retryTransition;
	      }

	      root.locals = { resolve: null, globals: { $stateParams: {} } };

	      $state = {
	        params: {},
	        current: root.self,
	        $current: root,
	        transition: null
	      };

	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#reload
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * A method that force reloads the current state. All resolves are re-resolved,
	       * controllers reinstantiated, and events re-fired.
	       *
	       * @example
	       * <pre>
	       * var app angular.module('app', ['ui.router']);
	       *
	       * app.controller('ctrl', function ($scope, $state) {
	       *   $scope.reload = function(){
	       *     $state.reload();
	       *   }
	       * });
	       * </pre>
	       *
	       * `reload()` is just an alias for:
	       * <pre>
	       * $state.transitionTo($state.current, $stateParams, { 
	       *   reload: true, inherit: false, notify: true
	       * });
	       * </pre>
	       *
	       * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
	       * @example
	       * <pre>
	       * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' 
	       * //and current state is 'contacts.detail.item'
	       * var app angular.module('app', ['ui.router']);
	       *
	       * app.controller('ctrl', function ($scope, $state) {
	       *   $scope.reload = function(){
	       *     //will reload 'contact.detail' and 'contact.detail.item' states
	       *     $state.reload('contact.detail');
	       *   }
	       * });
	       * </pre>
	       *
	       * `reload()` is just an alias for:
	       * <pre>
	       * $state.transitionTo($state.current, $stateParams, { 
	       *   reload: true, inherit: false, notify: true
	       * });
	       * </pre>
	        * @returns {promise} A promise representing the state of the new transition. See
	       * {@link ui.router.state.$state#methods_go $state.go}.
	       */
	      $state.reload = function reload(state) {
	        return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true });
	      };

	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#go
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * Convenience method for transitioning to a new state. `$state.go` calls 
	       * `$state.transitionTo` internally but automatically sets options to 
	       * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
	       * This allows you to easily use an absolute or relative to path and specify 
	       * only the parameters you'd like to update (while letting unspecified parameters 
	       * inherit from the currently active ancestor states).
	       *
	       * @example
	       * <pre>
	       * var app = angular.module('app', ['ui.router']);
	       *
	       * app.controller('ctrl', function ($scope, $state) {
	       *   $scope.changeState = function () {
	       *     $state.go('contact.detail');
	       *   };
	       * });
	       * </pre>
	       * <img src='../ngdoc_assets/StateGoExamples.png'/>
	       *
	       * @param {string} to Absolute state name or relative state path. Some examples:
	       *
	       * - `$state.go('contact.detail')` - will go to the `contact.detail` state
	       * - `$state.go('^')` - will go to a parent state
	       * - `$state.go('^.sibling')` - will go to a sibling state
	       * - `$state.go('.child.grandchild')` - will go to grandchild state
	       *
	       * @param {object=} params A map of the parameters that will be sent to the state, 
	       * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
	       * defined parameters. Only parameters specified in the state definition can be overridden, new 
	       * parameters will be ignored. This allows, for example, going to a sibling state that shares parameters
	       * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
	       * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
	       * will get you all current parameters, etc.
	       * @param {object=} options Options object. The options are:
	       *
	       * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
	       *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
	       * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
	       * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
	       *    defines which state to be relative from.
	       * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
	       * - **`reload`** (v0.2.5) - {boolean=false|string|object}, If `true` will force transition even if no state or params
	       *    have changed.  It will reload the resolves and views of the current state and parent states.
	       *    If `reload` is a string (or state object), the state object is fetched (by name, or object reference); and \
	       *    the transition reloads the resolves and views for that matched state, and all its children states.
	       *
	       * @returns {promise} A promise representing the state of the new transition.
	       *
	       * Possible success values:
	       *
	       * - $state.current
	       *
	       * <br/>Possible rejection values:
	       *
	       * - 'transition superseded' - when a newer transition has been started after this one
	       * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
	       * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
	       *   when a `$stateNotFound` `event.retry` promise errors.
	       * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
	       * - *resolve error* - when an error has occurred with a `resolve`
	       *
	       */
	      $state.go = function go(to, params, options) {
	        return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
	      };

	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#transitionTo
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
	       * uses `transitionTo` internally. `$state.go` is recommended in most situations.
	       *
	       * @example
	       * <pre>
	       * var app = angular.module('app', ['ui.router']);
	       *
	       * app.controller('ctrl', function ($scope, $state) {
	       *   $scope.changeState = function () {
	       *     $state.transitionTo('contact.detail');
	       *   };
	       * });
	       * </pre>
	       *
	       * @param {string} to State name.
	       * @param {object=} toParams A map of the parameters that will be sent to the state,
	       * will populate $stateParams.
	       * @param {object=} options Options object. The options are:
	       *
	       * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
	       *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
	       * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
	       * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
	       *    defines which state to be relative from.
	       * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
	       * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params 
	       *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
	       *    use this when you want to force a reload when *everything* is the same, including search params.
	       *    if String, then will reload the state with the name given in reload, and any children.
	       *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.
	       *
	       * @returns {promise} A promise representing the state of the new transition. See
	       * {@link ui.router.state.$state#methods_go $state.go}.
	       */
	      $state.transitionTo = function transitionTo(to, toParams, options) {
	        toParams = toParams || {};
	        options = extend({
	          location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
	        }, options || {});

	        var from = $state.$current,
	            fromParams = $state.params,
	            fromPath = from.path;
	        var evt,
	            toState = findState(to, options.relative);

	        // Store the hash param for later (since it will be stripped out by various methods)
	        var hash = toParams['#'];

	        if (!isDefined(toState)) {
	          var redirect = { to: to, toParams: toParams, options: options };
	          var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

	          if (redirectResult) {
	            return redirectResult;
	          }

	          // Always retry once if the $stateNotFound was not prevented
	          // (handles either redirect changed or state lazy-definition)
	          to = redirect.to;
	          toParams = redirect.toParams;
	          options = redirect.options;
	          toState = findState(to, options.relative);

	          if (!isDefined(toState)) {
	            if (!options.relative) throw new Error("No such state '" + to + "'");
	            throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
	          }
	        }
	        if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
	        if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
	        if (!toState.params.$$validates(toParams)) return TransitionFailed;

	        toParams = toState.params.$$values(toParams);
	        to = toState;

	        var toPath = to.path;

	        // Starting from the root of the path, keep all levels that haven't changed
	        var keep = 0,
	            state = toPath[keep],
	            locals = root.locals,
	            toLocals = [];

	        if (!options.reload) {
	          while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
	            locals = toLocals[keep] = state.locals;
	            keep++;
	            state = toPath[keep];
	          }
	        } else if (isString(options.reload) || isObject(options.reload)) {
	          if (isObject(options.reload) && !options.reload.name) {
	            throw new Error('Invalid reload state object');
	          }

	          var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
	          if (options.reload && !reloadState) {
	            throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
	          }

	          while (state && state === fromPath[keep] && state !== reloadState) {
	            locals = toLocals[keep] = state.locals;
	            keep++;
	            state = toPath[keep];
	          }
	        }

	        // If we're going to the same state and all locals are kept, we've got nothing to do.
	        // But clear 'transition', as we still want to cancel any other pending transitions.
	        // TODO: We may not want to bump 'transition' if we're called from a location change
	        // that we've initiated ourselves, because we might accidentally abort a legitimate
	        // transition initiated from code?
	        if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
	          if (hash) toParams['#'] = hash;
	          $state.params = toParams;
	          copy($state.params, $stateParams);
	          copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);
	          if (options.location && to.navigable && to.navigable.url) {
	            $urlRouter.push(to.navigable.url, toParams, {
	              $$avoidResync: true, replace: options.location === 'replace'
	            });
	            $urlRouter.update(true);
	          }
	          $state.transition = null;
	          return $q.when($state.current);
	        }

	        // Filter parameters before we pass them to event handlers etc.
	        toParams = filterByKeys(to.params.$$keys(), toParams || {});

	        // Re-add the saved hash before we start returning things or broadcasting $stateChangeStart
	        if (hash) toParams['#'] = hash;

	        // Broadcast start event and cancel the transition if requested
	        if (options.notify) {
	          /**
	           * @ngdoc event
	           * @name ui.router.state.$state#$stateChangeStart
	           * @eventOf ui.router.state.$state
	           * @eventType broadcast on root scope
	           * @description
	           * Fired when the state transition **begins**. You can use `event.preventDefault()`
	           * to prevent the transition from happening and then the transition promise will be
	           * rejected with a `'transition prevented'` value.
	           *
	           * @param {Object} event Event object.
	           * @param {State} toState The state being transitioned to.
	           * @param {Object} toParams The params supplied to the `toState`.
	           * @param {State} fromState The current state, pre-transition.
	           * @param {Object} fromParams The params supplied to the `fromState`.
	           *
	           * @example
	           *
	           * <pre>
	           * $rootScope.$on('$stateChangeStart',
	           * function(event, toState, toParams, fromState, fromParams){
	           *     event.preventDefault();
	           *     // transitionTo() promise will be rejected with
	           *     // a 'transition prevented' error
	           * })
	           * </pre>
	           */
	          if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams, options).defaultPrevented) {
	            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
	            //Don't update and resync url if there's been a new transition started. see issue #2238, #600
	            if ($state.transition == null) $urlRouter.update();
	            return TransitionPrevented;
	          }
	        }

	        // Resolve locals for the remaining states, but don't update any global state just
	        // yet -- if anything fails to resolve the current state needs to remain untouched.
	        // We also set up an inheritance chain for the locals here. This allows the view directive
	        // to quickly look up the correct definition for each view in the current state. Even
	        // though we create the locals object itself outside resolveState(), it is initially
	        // empty and gets filled asynchronously. We need to keep track of the promise for the
	        // (fully resolved) current locals, and pass this down the chain.
	        var resolved = $q.when(locals);

	        for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
	          locals = toLocals[l] = inherit(locals);
	          resolved = resolveState(state, toParams, state === to, resolved, locals, options);
	        }

	        // Once everything is resolved, we are ready to perform the actual transition
	        // and return a promise for the new state. We also keep track of what the
	        // current promise is, so that we can detect overlapping transitions and
	        // keep only the outcome of the last transition.
	        var transition = $state.transition = resolved.then(function () {
	          var l, entering, exiting;

	          if ($state.transition !== transition) {
	            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
	            return TransitionSuperseded;
	          }

	          // Exit 'from' states not kept
	          for (l = fromPath.length - 1; l >= keep; l--) {
	            exiting = fromPath[l];
	            if (exiting.self.onExit) {
	              $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
	            }
	            exiting.locals = null;
	          }

	          // Enter 'to' states not kept
	          for (l = keep; l < toPath.length; l++) {
	            entering = toPath[l];
	            entering.locals = toLocals[l];
	            if (entering.self.onEnter) {
	              $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
	            }
	          }

	          // Run it again, to catch any transitions in callbacks
	          if ($state.transition !== transition) {
	            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
	            return TransitionSuperseded;
	          }

	          // Update globals in $state
	          $state.$current = to;
	          $state.current = to.self;
	          $state.params = toParams;
	          copy($state.params, $stateParams);
	          $state.transition = null;

	          if (options.location && to.navigable) {
	            $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
	              $$avoidResync: true, replace: options.location === 'replace'
	            });
	          }

	          if (options.notify) {
	            /**
	             * @ngdoc event
	             * @name ui.router.state.$state#$stateChangeSuccess
	             * @eventOf ui.router.state.$state
	             * @eventType broadcast on root scope
	             * @description
	             * Fired once the state transition is **complete**.
	             *
	             * @param {Object} event Event object.
	             * @param {State} toState The state being transitioned to.
	             * @param {Object} toParams The params supplied to the `toState`.
	             * @param {State} fromState The current state, pre-transition.
	             * @param {Object} fromParams The params supplied to the `fromState`.
	             */
	            $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
	          }
	          $urlRouter.update(true);

	          return $state.current;
	        }).then(null, function (error) {
	          // propagate TransitionSuperseded error without emitting $stateChangeCancel
	          // as it was already emitted in the success handler above
	          if (error === TransitionSupersededError) return TransitionSuperseded;

	          if ($state.transition !== transition) {
	            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
	            return TransitionSuperseded;
	          }

	          $state.transition = null;
	          /**
	           * @ngdoc event
	           * @name ui.router.state.$state#$stateChangeError
	           * @eventOf ui.router.state.$state
	           * @eventType broadcast on root scope
	           * @description
	           * Fired when an **error occurs** during transition. It's important to note that if you
	           * have any errors in your resolve functions (javascript errors, non-existent services, etc)
	           * they will not throw traditionally. You must listen for this $stateChangeError event to
	           * catch **ALL** errors.
	           *
	           * @param {Object} event Event object.
	           * @param {State} toState The state being transitioned to.
	           * @param {Object} toParams The params supplied to the `toState`.
	           * @param {State} fromState The current state, pre-transition.
	           * @param {Object} fromParams The params supplied to the `fromState`.
	           * @param {Error} error The resolve error object.
	           */
	          evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

	          if (!evt.defaultPrevented) {
	            $urlRouter.update();
	          }

	          return $q.reject(error);
	        });

	        return transition;
	      };

	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#is
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
	       * but only checks for the full state name. If params is supplied then it will be
	       * tested for strict equality against the current active params object, so all params
	       * must match with none missing and no extras.
	       *
	       * @example
	       * <pre>
	       * $state.$current.name = 'contacts.details.item';
	       *
	       * // absolute name
	       * $state.is('contact.details.item'); // returns true
	       * $state.is(contactDetailItemStateObject); // returns true
	       *
	       * // relative name (. and ^), typically from a template
	       * // E.g. from the 'contacts.details' template
	       * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
	       * </pre>
	       *
	       * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
	       * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
	       * to test against the current active state.
	       * @param {object=} options An options object.  The options are:
	       *
	       * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
	       * test relative to `options.relative` state (or name).
	       *
	       * @returns {boolean} Returns true if it is the state.
	       */
	      $state.is = function is(stateOrName, params, options) {
	        options = extend({ relative: $state.$current }, options || {});
	        var state = findState(stateOrName, options.relative);

	        if (!isDefined(state)) {
	          return undefined;
	        }
	        if ($state.$current !== state) {
	          return false;
	        }
	        return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
	      };

	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#includes
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * A method to determine if the current active state is equal to or is the child of the
	       * state stateName. If any params are passed then they will be tested for a match as well.
	       * Not all the parameters need to be passed, just the ones you'd like to test for equality.
	       *
	       * @example
	       * Partial and relative names
	       * <pre>
	       * $state.$current.name = 'contacts.details.item';
	       *
	       * // Using partial names
	       * $state.includes("contacts"); // returns true
	       * $state.includes("contacts.details"); // returns true
	       * $state.includes("contacts.details.item"); // returns true
	       * $state.includes("contacts.list"); // returns false
	       * $state.includes("about"); // returns false
	       *
	       * // Using relative names (. and ^), typically from a template
	       * // E.g. from the 'contacts.details' template
	       * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
	       * </pre>
	       *
	       * Basic globbing patterns
	       * <pre>
	       * $state.$current.name = 'contacts.details.item.url';
	       *
	       * $state.includes("*.details.*.*"); // returns true
	       * $state.includes("*.details.**"); // returns true
	       * $state.includes("**.item.**"); // returns true
	       * $state.includes("*.details.item.url"); // returns true
	       * $state.includes("*.details.*.url"); // returns true
	       * $state.includes("*.details.*"); // returns false
	       * $state.includes("item.**"); // returns false
	       * </pre>
	       *
	       * @param {string} stateOrName A partial name, relative name, or glob pattern
	       * to be searched for within the current state name.
	       * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
	       * that you'd like to test against the current active state.
	       * @param {object=} options An options object.  The options are:
	       *
	       * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
	       * .includes will test relative to `options.relative` state (or name).
	       *
	       * @returns {boolean} Returns true if it does include the state
	       */
	      $state.includes = function includes(stateOrName, params, options) {
	        options = extend({ relative: $state.$current }, options || {});
	        if (isString(stateOrName) && isGlob(stateOrName)) {
	          if (!doesStateMatchGlob(stateOrName)) {
	            return false;
	          }
	          stateOrName = $state.$current.name;
	        }

	        var state = findState(stateOrName, options.relative);
	        if (!isDefined(state)) {
	          return undefined;
	        }
	        if (!isDefined($state.$current.includes[state.name])) {
	          return false;
	        }
	        if (!params) {
	          return true;
	        }

	        var keys = objectKeys(params);
	        for (var i = 0; i < keys.length; i++) {
	          var key = keys[i],
	              paramDef = state.params[key];
	          if (paramDef && !paramDef.type.equals($stateParams[key], params[key])) {
	            return false;
	          }
	        }

	        return true;
	      };

	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#href
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * A url generation method that returns the compiled url for the given state populated with the given params.
	       *
	       * @example
	       * <pre>
	       * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
	       * </pre>
	       *
	       * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
	       * @param {object=} params An object of parameter values to fill the state's required parameters.
	       * @param {object=} options Options object. The options are:
	       *
	       * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
	       *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
	       *    ancestor with a valid url).
	       * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
	       * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
	       *    defines which state to be relative from.
	       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
	       * 
	       * @returns {string} compiled state url
	       */
	      $state.href = function href(stateOrName, params, options) {
	        options = extend({
	          lossy: true,
	          inherit: true,
	          absolute: false,
	          relative: $state.$current
	        }, options || {});

	        var state = findState(stateOrName, options.relative);

	        if (!isDefined(state)) return null;
	        if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);

	        var nav = state && options.lossy ? state.navigable : state;

	        if (!nav || nav.url === undefined || nav.url === null) {
	          return null;
	        }
	        return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {
	          absolute: options.absolute
	        });
	      };

	      /**
	       * @ngdoc function
	       * @name ui.router.state.$state#get
	       * @methodOf ui.router.state.$state
	       *
	       * @description
	       * Returns the state configuration object for any specific state or all states.
	       *
	       * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
	       * the requested state. If not provided, returns an array of ALL state configs.
	       * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
	       * @returns {Object|Array} State configuration object or array of all objects.
	       */
	      $state.get = function (stateOrName, context) {
	        if (arguments.length === 0) return map(objectKeys(states), function (name) {
	          return states[name].self;
	        });
	        var state = findState(stateOrName, context || $state.$current);
	        return state && state.self ? state.self : null;
	      };

	      function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
	        // Make a restricted $stateParams with only the parameters that apply to this state if
	        // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
	        // we also need $stateParams to be available for any $injector calls we make during the
	        // dependency resolution process.
	        var $stateParams = paramsAreFiltered ? params : filterByKeys(state.params.$$keys(), params);
	        var locals = { $stateParams: $stateParams };

	        // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
	        // We're also including $stateParams in this; that way the parameters are restricted
	        // to the set that should be visible to the state, and are independent of when we update
	        // the global $state and $stateParams values.
	        dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
	        var promises = [dst.resolve.then(function (globals) {
	          dst.globals = globals;
	        })];
	        if (inherited) promises.push(inherited);

	        function resolveViews() {
	          var viewsPromises = [];

	          // Resolve template and dependencies for all views.
	          forEach(state.views, function (view, name) {
	            var injectables = view.resolve && view.resolve !== state.resolve ? view.resolve : {};
	            injectables.$template = [function () {
	              return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';
	            }];

	            viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {
	              // References to the controller (only instantiated at link time)
	              if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
	                var injectLocals = angular.extend({}, injectables, dst.globals);
	                result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
	              } else {
	                result.$$controller = view.controller;
	              }
	              // Provide access to the state itself for internal use
	              result.$$state = state;
	              result.$$controllerAs = view.controllerAs;
	              result.$$resolveAs = view.resolveAs;
	              dst[name] = result;
	            }));
	          });

	          return $q.all(viewsPromises).then(function () {
	            return dst.globals;
	          });
	        }

	        // Wait for all the promises and then return the activation object
	        return $q.all(promises).then(resolveViews).then(function (values) {
	          return dst;
	        });
	      }

	      return $state;
	    }

	    function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
	      // Return true if there are no differences in non-search (path/object) params, false if there are differences
	      function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
	        // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.
	        function notSearchParam(key) {
	          return fromAndToState.params[key].location != "search";
	        }
	        var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
	        var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));
	        var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
	        return nonQueryParamSet.$$equals(fromParams, toParams);
	      }

	      // If reload was not explicitly requested
	      // and we're transitioning to the same state we're already in
	      // and    the locals didn't change
	      //     or they changed in a way that doesn't merit reloading
	      //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)
	      // Then return true.
	      if (!options.reload && to === from && (locals === from.locals || to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams))) {
	        return true;
	      }
	    }
	  }

	  angular.module('ui.router.state').factory('$stateParams', function () {
	    return {};
	  }).constant("$state.runtime", { autoinject: true }).provider('$state', $StateProvider)
	  // Inject $state to initialize when entering runtime. #2574
	  .run(['$injector', function ($injector) {
	    // Allow tests (stateSpec.js) to turn this off by defining this constant
	    if ($injector.get("$state.runtime").autoinject) {
	      $injector.get('$state');
	    }
	  }]);

	  $ViewProvider.$inject = [];
	  function $ViewProvider() {

	    this.$get = $get;
	    /**
	     * @ngdoc object
	     * @name ui.router.state.$view
	     *
	     * @requires ui.router.util.$templateFactory
	     * @requires $rootScope
	     *
	     * @description
	     *
	     */
	    $get.$inject = ['$rootScope', '$templateFactory'];
	    function $get($rootScope, $templateFactory) {
	      return {
	        // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
	        /**
	         * @ngdoc function
	         * @name ui.router.state.$view#load
	         * @methodOf ui.router.state.$view
	         *
	         * @description
	         *
	         * @param {string} name name
	         * @param {object} options option object.
	         */
	        load: function load(name, options) {
	          var result,
	              defaults = {
	            template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
	          };
	          options = extend(defaults, options);

	          if (options.view) {
	            result = $templateFactory.fromConfig(options.view, options.params, options.locals);
	          }
	          return result;
	        }
	      };
	    }
	  }

	  angular.module('ui.router.state').provider('$view', $ViewProvider);

	  /**
	   * @ngdoc object
	   * @name ui.router.state.$uiViewScrollProvider
	   *
	   * @description
	   * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
	   */
	  function $ViewScrollProvider() {

	    var useAnchorScroll = false;

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
	     * @methodOf ui.router.state.$uiViewScrollProvider
	     *
	     * @description
	     * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
	     * scrolling based on the url anchor.
	     */
	    this.useAnchorScroll = function () {
	      useAnchorScroll = true;
	    };

	    /**
	     * @ngdoc object
	     * @name ui.router.state.$uiViewScroll
	     *
	     * @requires $anchorScroll
	     * @requires $timeout
	     *
	     * @description
	     * When called with a jqLite element, it scrolls the element into view (after a
	     * `$timeout` so the DOM has time to refresh).
	     *
	     * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
	     * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
	     */
	    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
	      if (useAnchorScroll) {
	        return $anchorScroll;
	      }

	      return function ($element) {
	        return $timeout(function () {
	          $element[0].scrollIntoView();
	        }, 0, false);
	      };
	    }];
	  }

	  angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

	  /**
	   * @ngdoc directive
	   * @name ui.router.state.directive:ui-view
	   *
	   * @requires ui.router.state.$state
	   * @requires $compile
	   * @requires $controller
	   * @requires $injector
	   * @requires ui.router.state.$uiViewScroll
	   * @requires $document
	   *
	   * @restrict ECA
	   *
	   * @description
	   * The ui-view directive tells $state where to place your templates.
	   *
	   * @param {string=} name A view name. The name should be unique amongst the other views in the
	   * same state. You can have views of the same name that live in different states.
	   *
	   * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
	   * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
	   * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
	   * scroll ui-view elements into view when they are populated during a state activation.
	   *
	   * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
	   * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
	   *
	   * @param {string=} onload Expression to evaluate whenever the view updates.
	   *
	   * @example
	   * A view can be unnamed or named.
	   * <pre>
	   * <!-- Unnamed -->
	   * <div ui-view></div>
	   *
	   * <!-- Named -->
	   * <div ui-view="viewName"></div>
	   * </pre>
	   *
	   * You can only have one unnamed view within any template (or root html). If you are only using a
	   * single view and it is unnamed then you can populate it like so:
	   * <pre>
	   * <div ui-view></div>
	   * $stateProvider.state("home", {
	   *   template: "<h1>HELLO!</h1>"
	   * })
	   * </pre>
	   *
	   * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#methods_state `views`}
	   * config property, by name, in this case an empty name:
	   * <pre>
	   * $stateProvider.state("home", {
	   *   views: {
	   *     "": {
	   *       template: "<h1>HELLO!</h1>"
	   *     }
	   *   }    
	   * })
	   * </pre>
	   *
	   * But typically you'll only use the views property if you name your view or have more than one view
	   * in the same template. There's not really a compelling reason to name a view if its the only one,
	   * but you could if you wanted, like so:
	   * <pre>
	   * <div ui-view="main"></div>
	   * </pre>
	   * <pre>
	   * $stateProvider.state("home", {
	   *   views: {
	   *     "main": {
	   *       template: "<h1>HELLO!</h1>"
	   *     }
	   *   }    
	   * })
	   * </pre>
	   *
	   * Really though, you'll use views to set up multiple views:
	   * <pre>
	   * <div ui-view></div>
	   * <div ui-view="chart"></div>
	   * <div ui-view="data"></div>
	   * </pre>
	   *
	   * <pre>
	   * $stateProvider.state("home", {
	   *   views: {
	   *     "": {
	   *       template: "<h1>HELLO!</h1>"
	   *     },
	   *     "chart": {
	   *       template: "<chart_thing/>"
	   *     },
	   *     "data": {
	   *       template: "<data_thing/>"
	   *     }
	   *   }    
	   * })
	   * </pre>
	   *
	   * Examples for `autoscroll`:
	   *
	   * <pre>
	   * <!-- If autoscroll present with no expression,
	   *      then scroll ui-view into view -->
	   * <ui-view autoscroll/>
	   *
	   * <!-- If autoscroll present with valid expression,
	   *      then scroll ui-view into view if expression evaluates to true -->
	   * <ui-view autoscroll='true'/>
	   * <ui-view autoscroll='false'/>
	   * <ui-view autoscroll='scopeVariable'/>
	   * </pre>
	   *
	   * Resolve data:
	   *
	   * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this
	   * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.
	   *
	   * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the
	   * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which
	   * depends on `$resolve` data.
	   *
	   * Example usage of $resolve in a view template
	   * <pre>
	   * $stateProvider.state('home', {
	   *   template: '<my-component user="$resolve.user"></my-component>',
	   *   resolve: {
	   *     user: function(UserService) { return UserService.fetchUser(); }
	   *   }
	   * });
	   * </pre>
	   */
	  $ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate', '$q'];
	  function $ViewDirective($state, $injector, $uiViewScroll, $interpolate, $q) {

	    function getService() {
	      return $injector.has ? function (service) {
	        return $injector.has(service) ? $injector.get(service) : null;
	      } : function (service) {
	        try {
	          return $injector.get(service);
	        } catch (e) {
	          return null;
	        }
	      };
	    }

	    var service = getService(),
	        $animator = service('$animator'),
	        $animate = service('$animate');

	    // Returns a set of DOM manipulation functions based on which Angular version
	    // it should use
	    function getRenderer(attrs, scope) {
	      var statics = function statics() {
	        return {
	          enter: function enter(element, target, cb) {
	            target.after(element);cb();
	          },
	          leave: function leave(element, cb) {
	            element.remove();cb();
	          }
	        };
	      };

	      if ($animate) {
	        return {
	          enter: function enter(element, target, cb) {
	            if (angular.version.minor > 2) {
	              $animate.enter(element, null, target).then(cb);
	            } else {
	              $animate.enter(element, null, target, cb);
	            }
	          },
	          leave: function leave(element, cb) {
	            if (angular.version.minor > 2) {
	              $animate.leave(element).then(cb);
	            } else {
	              $animate.leave(element, cb);
	            }
	          }
	        };
	      }

	      if ($animator) {
	        var animate = $animator && $animator(scope, attrs);

	        return {
	          enter: function enter(element, target, cb) {
	            animate.enter(element, null, target);cb();
	          },
	          leave: function leave(element, cb) {
	            animate.leave(element);cb();
	          }
	        };
	      }

	      return statics();
	    }

	    var directive = {
	      restrict: 'ECA',
	      terminal: true,
	      priority: 400,
	      transclude: 'element',
	      compile: function compile(tElement, tAttrs, $transclude) {
	        return function (scope, $element, attrs) {
	          var previousEl,
	              currentEl,
	              currentScope,
	              latestLocals,
	              onloadExp = attrs.onload || '',
	              autoScrollExp = attrs.autoscroll,
	              renderer = getRenderer(attrs, scope),
	              inherited = $element.inheritedData('$uiView');

	          scope.$on('$stateChangeSuccess', function () {
	            updateView(false);
	          });

	          updateView(true);

	          function cleanupLastView() {
	            if (previousEl) {
	              previousEl.remove();
	              previousEl = null;
	            }

	            if (currentScope) {
	              currentScope.$destroy();
	              currentScope = null;
	            }

	            if (currentEl) {
	              var $uiViewData = currentEl.data('$uiViewAnim');
	              renderer.leave(currentEl, function () {
	                $uiViewData.$$animLeave.resolve();
	                previousEl = null;
	              });

	              previousEl = currentEl;
	              currentEl = null;
	            }
	          }

	          function updateView(firstTime) {
	            var newScope,
	                name = getUiViewName(scope, attrs, $element, $interpolate),
	                previousLocals = name && $state.$current && $state.$current.locals[name];

	            if (!firstTime && previousLocals === latestLocals) return; // nothing to do
	            newScope = scope.$new();
	            latestLocals = $state.$current.locals[name];

	            /**
	             * @ngdoc event
	             * @name ui.router.state.directive:ui-view#$viewContentLoading
	             * @eventOf ui.router.state.directive:ui-view
	             * @eventType emits on ui-view directive scope
	             * @description
	             *
	             * Fired once the view **begins loading**, *before* the DOM is rendered.
	             *
	             * @param {Object} event Event object.
	             * @param {string} viewName Name of the view.
	             */
	            newScope.$emit('$viewContentLoading', name);

	            var clone = $transclude(newScope, function (clone) {
	              var animEnter = $q.defer(),
	                  animLeave = $q.defer();
	              var viewAnimData = {
	                $animEnter: animEnter.promise,
	                $animLeave: animLeave.promise,
	                $$animLeave: animLeave
	              };

	              clone.data('$uiViewAnim', viewAnimData);
	              renderer.enter(clone, $element, function onUiViewEnter() {
	                animEnter.resolve();
	                if (currentScope) {
	                  currentScope.$emit('$viewContentAnimationEnded');
	                }

	                if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
	                  $uiViewScroll(clone);
	                }
	              });
	              cleanupLastView();
	            });

	            currentEl = clone;
	            currentScope = newScope;
	            /**
	             * @ngdoc event
	             * @name ui.router.state.directive:ui-view#$viewContentLoaded
	             * @eventOf ui.router.state.directive:ui-view
	             * @eventType emits on ui-view directive scope
	             * @description
	             * Fired once the view is **loaded**, *after* the DOM is rendered.
	             *
	             * @param {Object} event Event object.
	             * @param {string} viewName Name of the view.
	             */
	            currentScope.$emit('$viewContentLoaded', name);
	            currentScope.$eval(onloadExp);
	          }
	        };
	      }
	    };

	    return directive;
	  }

	  $ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
	  function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {
	    return {
	      restrict: 'ECA',
	      priority: -400,
	      compile: function compile(tElement) {
	        var initial = tElement.html();
	        return function (scope, $element, attrs) {
	          var current = $state.$current,
	              name = getUiViewName(scope, attrs, $element, $interpolate),
	              locals = current && current.locals[name];

	          if (!locals) {
	            return;
	          }

	          $element.data('$uiView', { name: name, state: locals.$$state });
	          $element.html(locals.$template ? locals.$template : initial);

	          var resolveData = angular.extend({}, locals);
	          scope[locals.$$resolveAs] = resolveData;

	          var link = $compile($element.contents());

	          if (locals.$$controller) {
	            locals.$scope = scope;
	            locals.$element = $element;
	            var controller = $controller(locals.$$controller, locals);
	            if (locals.$$controllerAs) {
	              scope[locals.$$controllerAs] = controller;
	              scope[locals.$$controllerAs][locals.$$resolveAs] = resolveData;
	            }
	            if (isFunction(controller.$onInit)) controller.$onInit();
	            $element.data('$ngControllerController', controller);
	            $element.children().data('$ngControllerController', controller);
	          }

	          link(scope);
	        };
	      }
	    };
	  }

	  /**
	   * Shared ui-view code for both directives:
	   * Given scope, element, and its attributes, return the view's name
	   */
	  function getUiViewName(scope, attrs, element, $interpolate) {
	    var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
	    var uiViewCreatedBy = element.inheritedData('$uiView');
	    return name.indexOf('@') >= 0 ? name : name + '@' + (uiViewCreatedBy ? uiViewCreatedBy.state.name : '');
	  }

	  angular.module('ui.router.state').directive('uiView', $ViewDirective);
	  angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

	  function parseStateRef(ref, current) {
	    var preparsed = ref.match(/^\s*({[^}]*})\s*$/),
	        parsed;
	    if (preparsed) ref = current + '(' + preparsed[1] + ')';
	    parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
	    if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
	    return { state: parsed[1], paramExpr: parsed[3] || null };
	  }

	  function stateContext(el) {
	    var stateData = el.parent().inheritedData('$uiView');

	    if (stateData && stateData.state && stateData.state.name) {
	      return stateData.state;
	    }
	  }

	  function getTypeInfo(el) {
	    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	    var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';
	    var isForm = el[0].nodeName === "FORM";

	    return {
	      attr: isForm ? "action" : isSvg ? 'xlink:href' : 'href',
	      isAnchor: el.prop("tagName").toUpperCase() === "A",
	      clickable: !isForm
	    };
	  }

	  function clickHook(el, $state, $timeout, type, current) {
	    return function (e) {
	      var button = e.which || e.button,
	          target = current();

	      if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {
	        // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
	        var transition = $timeout(function () {
	          $state.go(target.state, target.params, target.options);
	        });
	        e.preventDefault();

	        // if the state has no URL, ignore one preventDefault from the <a> directive.
	        var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;

	        e.preventDefault = function () {
	          if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);
	        };
	      }
	    };
	  }

	  function defaultOpts(el, $state) {
	    return { relative: stateContext(el) || $state.$current, inherit: true };
	  }

	  /**
	   * @ngdoc directive
	   * @name ui.router.state.directive:ui-sref
	   *
	   * @requires ui.router.state.$state
	   * @requires $timeout
	   *
	   * @restrict A
	   *
	   * @description
	   * A directive that binds a link (`<a>` tag) to a state. If the state has an associated
	   * URL, the directive will automatically generate & update the `href` attribute via
	   * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking
	   * the link will trigger a state transition with optional parameters.
	   *
	   * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
	   * handled natively by the browser.
	   *
	   * You can also use relative state paths within ui-sref, just like the relative
	   * paths passed to `$state.go()`. You just need to be aware that the path is relative
	   * to the state that the link lives in, in other words the state that loaded the
	   * template containing the link.
	   *
	   * You can specify options to pass to {@link ui.router.state.$state#methods_go $state.go()}
	   * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
	   * and `reload`.
	   *
	   * @example
	   * Here's an example of how you'd use ui-sref and how it would compile. If you have the
	   * following template:
	   * <pre>
	   * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
	   *
	   * <ul>
	   *     <li ng-repeat="contact in contacts">
	   *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
	   *     </li>
	   * </ul>
	   * </pre>
	   *
	   * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
	   * <pre>
	   * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
	   *
	   * <ul>
	   *     <li ng-repeat="contact in contacts">
	   *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
	   *     </li>
	   *     <li ng-repeat="contact in contacts">
	   *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
	   *     </li>
	   *     <li ng-repeat="contact in contacts">
	   *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
	   *     </li>
	   * </ul>
	   *
	   * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
	   * </pre>
	   *
	   * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
	   * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}
	   */
	  $StateRefDirective.$inject = ['$state', '$timeout'];
	  function $StateRefDirective($state, $timeout) {
	    return {
	      restrict: 'A',
	      require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
	      link: function link(scope, element, attrs, uiSrefActive) {
	        var ref = parseStateRef(attrs.uiSref, $state.current.name);
	        var def = { state: ref.state, href: null, params: null };
	        var type = getTypeInfo(element);
	        var active = uiSrefActive[1] || uiSrefActive[0];
	        var unlinkInfoFn = null;
	        var hookFn;

	        def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});

	        var update = function update(val) {
	          if (val) def.params = angular.copy(val);
	          def.href = $state.href(ref.state, def.params, def.options);

	          if (unlinkInfoFn) unlinkInfoFn();
	          if (active) unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);
	          if (def.href !== null) attrs.$set(type.attr, def.href);
	        };

	        if (ref.paramExpr) {
	          scope.$watch(ref.paramExpr, function (val) {
	            if (val !== def.params) update(val);
	          }, true);
	          def.params = angular.copy(scope.$eval(ref.paramExpr));
	        }
	        update();

	        if (!type.clickable) return;
	        hookFn = clickHook(element, $state, $timeout, type, function () {
	          return def;
	        });
	        element[element.on ? 'on' : 'bind']("click", hookFn);
	        scope.$on('$destroy', function () {
	          element[element.off ? 'off' : 'unbind']("click", hookFn);
	        });
	      }
	    };
	  }

	  /**
	   * @ngdoc directive
	   * @name ui.router.state.directive:ui-state
	   *
	   * @requires ui.router.state.uiSref
	   *
	   * @restrict A
	   *
	   * @description
	   * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,
	   * params and override options.
	   *
	   * @param {string} ui-state 'stateName' can be any valid absolute or relative state
	   * @param {Object} ui-state-params params to pass to {@link ui.router.state.$state#methods_href $state.href()}
	   * @param {Object} ui-state-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}
	   */
	  $StateRefDynamicDirective.$inject = ['$state', '$timeout'];
	  function $StateRefDynamicDirective($state, $timeout) {
	    return {
	      restrict: 'A',
	      require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
	      link: function link(scope, element, attrs, uiSrefActive) {
	        var type = getTypeInfo(element);
	        var active = uiSrefActive[1] || uiSrefActive[0];
	        var group = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];
	        var watch = '[' + group.map(function (val) {
	          return val || 'null';
	        }).join(', ') + ']';
	        var def = { state: null, params: null, options: null, href: null };
	        var unlinkInfoFn = null;
	        var hookFn;

	        function runStateRefLink(group) {
	          def.state = group[0];def.params = group[1];def.options = group[2];
	          def.href = $state.href(def.state, def.params, def.options);

	          if (unlinkInfoFn) unlinkInfoFn();
	          if (active) unlinkInfoFn = active.$$addStateInfo(def.state, def.params);
	          if (def.href) attrs.$set(type.attr, def.href);
	        }

	        scope.$watch(watch, runStateRefLink, true);
	        runStateRefLink(scope.$eval(watch));

	        if (!type.clickable) return;
	        hookFn = clickHook(element, $state, $timeout, type, function () {
	          return def;
	        });
	        element[element.on ? 'on' : 'bind']("click", hookFn);
	        scope.$on('$destroy', function () {
	          element[element.off ? 'off' : 'unbind']("click", hookFn);
	        });
	      }
	    };
	  }

	  /**
	   * @ngdoc directive
	   * @name ui.router.state.directive:ui-sref-active
	   *
	   * @requires ui.router.state.$state
	   * @requires ui.router.state.$stateParams
	   * @requires $interpolate
	   *
	   * @restrict A
	   *
	   * @description
	   * A directive working alongside ui-sref to add classes to an element when the
	   * related ui-sref directive's state is active, and removing them when it is inactive.
	   * The primary use-case is to simplify the special appearance of navigation menus
	   * relying on `ui-sref`, by having the "active" state's menu button appear different,
	   * distinguishing it from the inactive menu items.
	   *
	   * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
	   * ui-sref-active found at the same level or above the ui-sref will be used.
	   *
	   * Will activate when the ui-sref's target state or any child state is active. If you
	   * need to activate only when the ui-sref target state is active and *not* any of
	   * it's children, then you will use
	   * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
	   *
	   * @example
	   * Given the following template:
	   * <pre>
	   * <ul>
	   *   <li ui-sref-active="active" class="item">
	   *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
	   *   </li>
	   * </ul>
	   * </pre>
	   *
	   *
	   * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
	   * the resulting HTML will appear as (note the 'active' class):
	   * <pre>
	   * <ul>
	   *   <li ui-sref-active="active" class="item active">
	   *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
	   *   </li>
	   * </ul>
	   * </pre>
	   *
	   * The class name is interpolated **once** during the directives link time (any further changes to the
	   * interpolated value are ignored).
	   *
	   * Multiple classes may be specified in a space-separated format:
	   * <pre>
	   * <ul>
	   *   <li ui-sref-active='class1 class2 class3'>
	   *     <a ui-sref="app.user">link</a>
	   *   </li>
	   * </ul>
	   * </pre>
	   *
	   * It is also possible to pass ui-sref-active an expression that evaluates
	   * to an object hash, whose keys represent active class names and whose
	   * values represent the respective state names/globs.
	   * ui-sref-active will match if the current active state **includes** any of
	   * the specified state names/globs, even the abstract ones.
	   *
	   * @Example
	   * Given the following template, with "admin" being an abstract state:
	   * <pre>
	   * <div ui-sref-active="{'active': 'admin.*'}">
	   *   <a ui-sref-active="active" ui-sref="admin.roles">Roles</a>
	   * </div>
	   * </pre>
	   *
	   * When the current state is "admin.roles" the "active" class will be applied
	   * to both the <div> and <a> elements. It is important to note that the state
	   * names/globs passed to ui-sref-active shadow the state provided by ui-sref.
	   */

	  /**
	   * @ngdoc directive
	   * @name ui.router.state.directive:ui-sref-active-eq
	   *
	   * @requires ui.router.state.$state
	   * @requires ui.router.state.$stateParams
	   * @requires $interpolate
	   *
	   * @restrict A
	   *
	   * @description
	   * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
	   * when the exact target state used in the `ui-sref` is active; no child states.
	   *
	   */
	  $StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
	  function $StateRefActiveDirective($state, $stateParams, $interpolate) {
	    return {
	      restrict: "A",
	      controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {
	        var states = [],
	            activeClasses = {},
	            activeEqClass,
	            uiSrefActive;

	        // There probably isn't much point in $observing this
	        // uiSrefActive and uiSrefActiveEq share the same directive object with some
	        // slight difference in logic routing
	        activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);

	        try {
	          uiSrefActive = $scope.$eval($attrs.uiSrefActive);
	        } catch (e) {
	          // Do nothing. uiSrefActive is not a valid expression.
	          // Fall back to using $interpolate below
	        }
	        uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);
	        if (isObject(uiSrefActive)) {
	          forEach(uiSrefActive, function (stateOrName, activeClass) {
	            if (isString(stateOrName)) {
	              var ref = parseStateRef(stateOrName, $state.current.name);
	              addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
	            }
	          });
	        }

	        // Allow uiSref to communicate with uiSrefActive[Equals]
	        this.$$addStateInfo = function (newState, newParams) {
	          // we already got an explicit state provided by ui-sref-active, so we
	          // shadow the one that comes from ui-sref
	          if (isObject(uiSrefActive) && states.length > 0) {
	            return;
	          }
	          var deregister = addState(newState, newParams, uiSrefActive);
	          update();
	          return deregister;
	        };

	        $scope.$on('$stateChangeSuccess', update);

	        function addState(stateName, stateParams, activeClass) {
	          var state = $state.get(stateName, stateContext($element));
	          var stateHash = createStateHash(stateName, stateParams);

	          var stateInfo = {
	            state: state || { name: stateName },
	            params: stateParams,
	            hash: stateHash
	          };

	          states.push(stateInfo);
	          activeClasses[stateHash] = activeClass;

	          return function removeState() {
	            var idx = states.indexOf(stateInfo);
	            if (idx !== -1) states.splice(idx, 1);
	          };
	        }

	        /**
	         * @param {string} state
	         * @param {Object|string} [params]
	         * @return {string}
	         */
	        function createStateHash(state, params) {
	          if (!isString(state)) {
	            throw new Error('state should be a string');
	          }
	          if (isObject(params)) {
	            return state + toJson(params);
	          }
	          params = $scope.$eval(params);
	          if (isObject(params)) {
	            return state + toJson(params);
	          }
	          return state;
	        }

	        // Update route state
	        function update() {
	          for (var i = 0; i < states.length; i++) {
	            if (anyMatch(states[i].state, states[i].params)) {
	              addClass($element, activeClasses[states[i].hash]);
	            } else {
	              removeClass($element, activeClasses[states[i].hash]);
	            }

	            if (exactMatch(states[i].state, states[i].params)) {
	              addClass($element, activeEqClass);
	            } else {
	              removeClass($element, activeEqClass);
	            }
	          }
	        }

	        function addClass(el, className) {
	          $timeout(function () {
	            el.addClass(className);
	          });
	        }
	        function removeClass(el, className) {
	          el.removeClass(className);
	        }
	        function anyMatch(state, params) {
	          return $state.includes(state.name, params);
	        }
	        function exactMatch(state, params) {
	          return $state.is(state.name, params);
	        }

	        update();
	      }]
	    };
	  }

	  angular.module('ui.router.state').directive('uiSref', $StateRefDirective).directive('uiSrefActive', $StateRefActiveDirective).directive('uiSrefActiveEq', $StateRefActiveDirective).directive('uiState', $StateRefDynamicDirective);

	  /**
	   * @ngdoc filter
	   * @name ui.router.state.filter:isState
	   *
	   * @requires ui.router.state.$state
	   *
	   * @description
	   * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
	   */
	  $IsStateFilter.$inject = ['$state'];
	  function $IsStateFilter($state) {
	    var isFilter = function isFilter(state, params) {
	      return $state.is(state, params);
	    };
	    isFilter.$stateful = true;
	    return isFilter;
	  }

	  /**
	   * @ngdoc filter
	   * @name ui.router.state.filter:includedByState
	   *
	   * @requires ui.router.state.$state
	   *
	   * @description
	   * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
	   */
	  $IncludedByStateFilter.$inject = ['$state'];
	  function $IncludedByStateFilter($state) {
	    var includesFilter = function includesFilter(state, params, options) {
	      return $state.includes(state, params, options);
	    };
	    includesFilter.$stateful = true;
	    return includesFilter;
	  }

	  angular.module('ui.router.state').filter('isState', $IsStateFilter).filter('includedByState', $IncludedByStateFilter);
	})(window, window.angular);

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	(function (root, factory) {
	  'use strict';

	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (root.hasOwnProperty('angular')) {
	    // Browser globals (root is window), we don't register it.
	    factory(root.angular);
	  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
	    module.exports = factory(require('angular'));
	  }
	})(undefined, function (angular) {
	  'use strict';

	  // In cases where Angular does not get passed or angular is a truthy value
	  // but misses .module we can fall back to using window.

	  angular = angular && angular.module ? angular : window.angular;

	  function isStorageSupported($window, storageType) {

	    // Some installations of IE, for an unknown reason, throw "SCRIPT5: Error: Access is denied"
	    // when accessing window.localStorage. This happens before you try to do anything with it. Catch
	    // that error and allow execution to continue.

	    // fix 'SecurityError: DOM Exception 18' exception in Desktop Safari, Mobile Safari
	    // when "Block cookies": "Always block" is turned on
	    var supported;
	    try {
	      supported = $window[storageType];
	    } catch (err) {
	      supported = false;
	    }

	    // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage and sessionStorage
	    // is available, but trying to call .setItem throws an exception below:
	    // "QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota."
	    if (supported) {
	      var key = '__' + Math.round(Math.random() * 1e7);
	      try {
	        $window[storageType].setItem(key, key);
	        $window[storageType].removeItem(key, key);
	      } catch (err) {
	        supported = false;
	      }
	    }

	    return supported;
	  }

	  /**
	   * @ngdoc overview
	   * @name ngStorage
	   */

	  return angular.module('ngStorage', [])

	  /**
	   * @ngdoc object
	   * @name ngStorage.$localStorage
	   * @requires $rootScope
	   * @requires $window
	   */

	  .provider('$localStorage', _storageProvider('localStorage'))

	  /**
	   * @ngdoc object
	   * @name ngStorage.$sessionStorage
	   * @requires $rootScope
	   * @requires $window
	   */

	  .provider('$sessionStorage', _storageProvider('sessionStorage'));

	  function _storageProvider(storageType) {
	    var providerWebStorage = isStorageSupported(window, storageType);

	    return function () {
	      var storageKeyPrefix = 'ngStorage-';

	      this.setKeyPrefix = function (prefix) {
	        if (typeof prefix !== 'string') {
	          throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setKeyPrefix() expects a String.');
	        }
	        storageKeyPrefix = prefix;
	      };

	      var serializer = angular.toJson;
	      var deserializer = angular.fromJson;

	      this.setSerializer = function (s) {
	        if (typeof s !== 'function') {
	          throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setSerializer expects a function.');
	        }

	        serializer = s;
	      };

	      this.setDeserializer = function (d) {
	        if (typeof d !== 'function') {
	          throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setDeserializer expects a function.');
	        }

	        deserializer = d;
	      };

	      this.supported = function () {
	        return !!providerWebStorage;
	      };

	      // Note: This is not very elegant at all.
	      this.get = function (key) {
	        return providerWebStorage && deserializer(providerWebStorage.getItem(storageKeyPrefix + key));
	      };

	      // Note: This is not very elegant at all.
	      this.set = function (key, value) {
	        return providerWebStorage && providerWebStorage.setItem(storageKeyPrefix + key, serializer(value));
	      };

	      this.remove = function (key) {
	        providerWebStorage && providerWebStorage.removeItem(storageKeyPrefix + key);
	      };

	      this.$get = ['$rootScope', '$window', '$log', '$timeout', '$document', function ($rootScope, $window, $log, $timeout, $document) {

	        // The magic number 10 is used which only works for some keyPrefixes...
	        // See https://github.com/gsklee/ngStorage/issues/137
	        var prefixLength = storageKeyPrefix.length;

	        // #9: Assign a placeholder object if Web Storage is unavailable to prevent breaking the entire AngularJS app
	        // Note: recheck mainly for testing (so we can use $window[storageType] rather than window[storageType])
	        var isSupported = isStorageSupported($window, storageType),
	            webStorage = isSupported || ($log.warn('This browser does not support Web Storage!'), { setItem: angular.noop, getItem: angular.noop, removeItem: angular.noop }),
	            $storage = {
	          $default: function $default(items) {
	            for (var k in items) {
	              angular.isDefined($storage[k]) || ($storage[k] = angular.copy(items[k]));
	            }

	            $storage.$sync();
	            return $storage;
	          },
	          $reset: function $reset(items) {
	            for (var k in $storage) {
	              '$' === k[0] || delete $storage[k] && webStorage.removeItem(storageKeyPrefix + k);
	            }

	            return $storage.$default(items);
	          },
	          $sync: function $sync() {
	            for (var i = 0, l = webStorage.length, k; i < l; i++) {
	              // #8, #10: `webStorage.key(i)` may be an empty string (or throw an exception in IE9 if `webStorage` is empty)
	              (k = webStorage.key(i)) && storageKeyPrefix === k.slice(0, prefixLength) && ($storage[k.slice(prefixLength)] = deserializer(webStorage.getItem(k)));
	            }
	          },
	          $apply: function $apply() {
	            var temp$storage;

	            _debounce = null;

	            if (!angular.equals($storage, _last$storage)) {
	              temp$storage = angular.copy(_last$storage);
	              angular.forEach($storage, function (v, k) {
	                if (angular.isDefined(v) && '$' !== k[0]) {
	                  webStorage.setItem(storageKeyPrefix + k, serializer(v));
	                  delete temp$storage[k];
	                }
	              });

	              for (var k in temp$storage) {
	                webStorage.removeItem(storageKeyPrefix + k);
	              }

	              _last$storage = angular.copy($storage);
	            }
	          },
	          $supported: function $supported() {
	            return !!isSupported;
	          }
	        },
	            _last$storage,
	            _debounce;

	        $storage.$sync();

	        _last$storage = angular.copy($storage);

	        $rootScope.$watch(function () {
	          _debounce || (_debounce = $timeout($storage.$apply, 100, false));
	        });

	        // #6: Use `$window.addEventListener` instead of `angular.element` to avoid the jQuery-specific `event.originalEvent`
	        $window.addEventListener && $window.addEventListener('storage', function (event) {
	          if (!event.key) {
	            return;
	          }

	          // Reference doc.
	          var doc = $document[0];

	          if ((!doc.hasFocus || !doc.hasFocus()) && storageKeyPrefix === event.key.slice(0, prefixLength)) {
	            event.newValue ? $storage[event.key.slice(prefixLength)] = deserializer(event.newValue) : delete $storage[event.key.slice(prefixLength)];

	            _last$storage = angular.copy($storage);

	            $rootScope.$apply();
	          }
	        });

	        $window.addEventListener && $window.addEventListener('beforeunload', function () {
	          $storage.$apply();
	        });

	        return $storage;
	      }];
	    };
	  }
	});

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(8);
	module.exports = 'ngSanitize';

/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * @license AngularJS v1.6.1
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function (window, angular) {
	  'use strict';

	  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	   *     Any commits to this file should be reviewed with security in mind.  *
	   *   Changes to this file can potentially create security vulnerabilities. *
	   *          An approval from 2 Core members with history of modifying      *
	   *                         this file is required.                          *
	   *                                                                         *
	   *  Does the change somehow allow for arbitrary javascript to be executed? *
	   *    Or allows for someone to change the prototype of built-in objects?   *
	   *     Or gives undesired access to variables likes document or window?    *
	   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	  var $sanitizeMinErr = angular.$$minErr('$sanitize');
	  var bind;
	  var extend;
	  var forEach;
	  var isDefined;
	  var lowercase;
	  var noop;
	  var htmlParser;
	  var htmlSanitizeWriter;

	  /**
	   * @ngdoc module
	   * @name ngSanitize
	   * @description
	   *
	   * # ngSanitize
	   *
	   * The `ngSanitize` module provides functionality to sanitize HTML.
	   *
	   *
	   * <div doc-module-components="ngSanitize"></div>
	   *
	   * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
	   */

	  /**
	   * @ngdoc service
	   * @name $sanitize
	   * @kind function
	   *
	   * @description
	   *   Sanitizes an html string by stripping all potentially dangerous tokens.
	   *
	   *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are
	   *   then serialized back to properly escaped html string. This means that no unsafe input can make
	   *   it into the returned string.
	   *
	   *   The whitelist for URL sanitization of attribute values is configured using the functions
	   *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider
	   *   `$compileProvider`}.
	   *
	   *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.
	   *
	   * @param {string} html HTML input.
	   * @returns {string} Sanitized HTML.
	   *
	   * @example
	     <example module="sanitizeExample" deps="angular-sanitize.js" name="sanitize-service">
	     <file name="index.html">
	       <script>
	           angular.module('sanitizeExample', ['ngSanitize'])
	             .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
	               $scope.snippet =
	                 '<p style="color:blue">an html\n' +
	                 '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
	                 'snippet</p>';
	               $scope.deliberatelyTrustDangerousSnippet = function() {
	                 return $sce.trustAsHtml($scope.snippet);
	               };
	             }]);
	       </script>
	       <div ng-controller="ExampleController">
	          Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
	         <table>
	           <tr>
	             <td>Directive</td>
	             <td>How</td>
	             <td>Source</td>
	             <td>Rendered</td>
	           </tr>
	           <tr id="bind-html-with-sanitize">
	             <td>ng-bind-html</td>
	             <td>Automatically uses $sanitize</td>
	             <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
	             <td><div ng-bind-html="snippet"></div></td>
	           </tr>
	           <tr id="bind-html-with-trust">
	             <td>ng-bind-html</td>
	             <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
	             <td>
	             <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
	  &lt;/div&gt;</pre>
	             </td>
	             <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
	           </tr>
	           <tr id="bind-default">
	             <td>ng-bind</td>
	             <td>Automatically escapes</td>
	             <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
	             <td><div ng-bind="snippet"></div></td>
	           </tr>
	         </table>
	         </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should sanitize the html snippet by default', function() {
	         expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).
	           toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
	       });
	  
	       it('should inline raw snippet if bound to a trusted value', function() {
	         expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).
	           toBe("<p style=\"color:blue\">an html\n" +
	                "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
	                "snippet</p>");
	       });
	  
	       it('should escape snippet without any filter', function() {
	         expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).
	           toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
	                "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
	                "snippet&lt;/p&gt;");
	       });
	  
	       it('should update', function() {
	         element(by.model('snippet')).clear();
	         element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
	         expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).
	           toBe('new <b>text</b>');
	         expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).toBe(
	           'new <b onclick="alert(1)">text</b>');
	         expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).toBe(
	           "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
	       });
	     </file>
	     </example>
	   */

	  /**
	   * @ngdoc provider
	   * @name $sanitizeProvider
	   * @this
	   *
	   * @description
	   * Creates and configures {@link $sanitize} instance.
	   */
	  function $SanitizeProvider() {
	    var svgEnabled = false;

	    this.$get = ['$$sanitizeUri', function ($$sanitizeUri) {
	      if (svgEnabled) {
	        extend(validElements, svgElements);
	      }
	      return function (html) {
	        var buf = [];
	        htmlParser(html, htmlSanitizeWriter(buf, function (uri, isImage) {
	          return !/^unsafe:/.test($$sanitizeUri(uri, isImage));
	        }));
	        return buf.join('');
	      };
	    }];

	    /**
	     * @ngdoc method
	     * @name $sanitizeProvider#enableSvg
	     * @kind function
	     *
	     * @description
	     * Enables a subset of svg to be supported by the sanitizer.
	     *
	     * <div class="alert alert-warning">
	     *   <p>By enabling this setting without taking other precautions, you might expose your
	     *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned
	     *   outside of the containing element and be rendered over other elements on the page (e.g. a login
	     *   link). Such behavior can then result in phishing incidents.</p>
	     *
	     *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg
	     *   tags within the sanitized content:</p>
	     *
	     *   <br>
	     *
	     *   <pre><code>
	     *   .rootOfTheIncludedContent svg {
	     *     overflow: hidden !important;
	     *   }
	     *   </code></pre>
	     * </div>
	     *
	     * @param {boolean=} flag Enable or disable SVG support in the sanitizer.
	     * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called
	     *    without an argument or self for chaining otherwise.
	     */
	    this.enableSvg = function (enableSvg) {
	      if (isDefined(enableSvg)) {
	        svgEnabled = enableSvg;
	        return this;
	      } else {
	        return svgEnabled;
	      }
	    };

	    //////////////////////////////////////////////////////////////////////////////////////////////////
	    // Private stuff
	    //////////////////////////////////////////////////////////////////////////////////////////////////

	    bind = angular.bind;
	    extend = angular.extend;
	    forEach = angular.forEach;
	    isDefined = angular.isDefined;
	    lowercase = angular.lowercase;
	    noop = angular.noop;

	    htmlParser = htmlParserImpl;
	    htmlSanitizeWriter = htmlSanitizeWriterImpl;

	    // Regular Expressions for parsing tags and attributes
	    var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,

	    // Match everything outside of normal chars and " (quote character)
	    NON_ALPHANUMERIC_REGEXP = /([^#-~ |!])/g;

	    // Good source of info about elements and attributes
	    // http://dev.w3.org/html5/spec/Overview.html#semantics
	    // http://simon.html5.org/html-elements

	    // Safe Void Elements - HTML5
	    // http://dev.w3.org/html5/spec/Overview.html#void-elements
	    var voidElements = toMap('area,br,col,hr,img,wbr');

	    // Elements that you can, intentionally, leave open (and which close themselves)
	    // http://dev.w3.org/html5/spec/Overview.html#optional-tags
	    var optionalEndTagBlockElements = toMap('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),
	        optionalEndTagInlineElements = toMap('rp,rt'),
	        optionalEndTagElements = extend({}, optionalEndTagInlineElements, optionalEndTagBlockElements);

	    // Safe Block Elements - HTML5
	    var blockElements = extend({}, optionalEndTagBlockElements, toMap('address,article,' + 'aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul'));

	    // Inline Elements - HTML5
	    var inlineElements = extend({}, optionalEndTagInlineElements, toMap('a,abbr,acronym,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,' + 'samp,small,span,strike,strong,sub,sup,time,tt,u,var'));

	    // SVG Elements
	    // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements
	    // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.
	    // They can potentially allow for arbitrary javascript to be executed. See #11290
	    var svgElements = toMap('circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,' + 'hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,' + 'radialGradient,rect,stop,svg,switch,text,title,tspan');

	    // Blocked Elements (will be stripped)
	    var blockedElements = toMap('script,style');

	    var validElements = extend({}, voidElements, blockElements, inlineElements, optionalEndTagElements);

	    //Attributes that have href and hence need to be sanitized
	    var uriAttrs = toMap('background,cite,href,longdesc,src,xlink:href');

	    var htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' + 'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' + 'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' + 'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' + 'valign,value,vspace,width');

	    // SVG attributes (without "id" and "name" attributes)
	    // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes
	    var svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' + 'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' + 'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' + 'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' + 'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' + 'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' + 'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' + 'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' + 'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' + 'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' + 'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' + 'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' + 'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' + 'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' + 'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);

	    var validAttrs = extend({}, uriAttrs, svgAttrs, htmlAttrs);

	    function toMap(str, lowercaseKeys) {
	      var obj = {},
	          items = str.split(','),
	          i;
	      for (i = 0; i < items.length; i++) {
	        obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;
	      }
	      return obj;
	    }

	    var inertBodyElement;
	    (function (window) {
	      var doc;
	      if (window.document && window.document.implementation) {
	        doc = window.document.implementation.createHTMLDocument('inert');
	      } else {
	        throw $sanitizeMinErr('noinert', 'Can\'t create an inert html document');
	      }
	      var docElement = doc.documentElement || doc.getDocumentElement();
	      var bodyElements = docElement.getElementsByTagName('body');

	      // usually there should be only one body element in the document, but IE doesn't have any, so we need to create one
	      if (bodyElements.length === 1) {
	        inertBodyElement = bodyElements[0];
	      } else {
	        var html = doc.createElement('html');
	        inertBodyElement = doc.createElement('body');
	        html.appendChild(inertBodyElement);
	        doc.appendChild(html);
	      }
	    })(window);

	    /**
	     * @example
	     * htmlParser(htmlString, {
	     *     start: function(tag, attrs) {},
	     *     end: function(tag) {},
	     *     chars: function(text) {},
	     *     comment: function(text) {}
	     * });
	     *
	     * @param {string} html string
	     * @param {object} handler
	     */
	    function htmlParserImpl(html, handler) {
	      if (html === null || html === undefined) {
	        html = '';
	      } else if (typeof html !== 'string') {
	        html = '' + html;
	      }
	      inertBodyElement.innerHTML = html;

	      //mXSS protection
	      var mXSSAttempts = 5;
	      do {
	        if (mXSSAttempts === 0) {
	          throw $sanitizeMinErr('uinput', 'Failed to sanitize html because the input is unstable');
	        }
	        mXSSAttempts--;

	        // strip custom-namespaced attributes on IE<=11
	        if (window.document.documentMode) {
	          stripCustomNsAttrs(inertBodyElement);
	        }
	        html = inertBodyElement.innerHTML; //trigger mXSS
	        inertBodyElement.innerHTML = html;
	      } while (html !== inertBodyElement.innerHTML);

	      var node = inertBodyElement.firstChild;
	      while (node) {
	        switch (node.nodeType) {
	          case 1:
	            // ELEMENT_NODE
	            handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));
	            break;
	          case 3:
	            // TEXT NODE
	            handler.chars(node.textContent);
	            break;
	        }

	        var nextNode;
	        if (!(nextNode = node.firstChild)) {
	          if (node.nodeType === 1) {
	            handler.end(node.nodeName.toLowerCase());
	          }
	          nextNode = node.nextSibling;
	          if (!nextNode) {
	            while (nextNode == null) {
	              node = node.parentNode;
	              if (node === inertBodyElement) break;
	              nextNode = node.nextSibling;
	              if (node.nodeType === 1) {
	                handler.end(node.nodeName.toLowerCase());
	              }
	            }
	          }
	        }
	        node = nextNode;
	      }

	      while (node = inertBodyElement.firstChild) {
	        inertBodyElement.removeChild(node);
	      }
	    }

	    function attrToMap(attrs) {
	      var map = {};
	      for (var i = 0, ii = attrs.length; i < ii; i++) {
	        var attr = attrs[i];
	        map[attr.name] = attr.value;
	      }
	      return map;
	    }

	    /**
	     * Escapes all potentially dangerous characters, so that the
	     * resulting string can be safely inserted into attribute or
	     * element text.
	     * @param value
	     * @returns {string} escaped text
	     */
	    function encodeEntities(value) {
	      return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (value) {
	        var hi = value.charCodeAt(0);
	        var low = value.charCodeAt(1);
	        return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';
	      }).replace(NON_ALPHANUMERIC_REGEXP, function (value) {
	        return '&#' + value.charCodeAt(0) + ';';
	      }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
	    }

	    /**
	     * create an HTML/XML writer which writes to buffer
	     * @param {Array} buf use buf.join('') to get out sanitized html string
	     * @returns {object} in the form of {
	     *     start: function(tag, attrs) {},
	     *     end: function(tag) {},
	     *     chars: function(text) {},
	     *     comment: function(text) {}
	     * }
	     */
	    function htmlSanitizeWriterImpl(buf, uriValidator) {
	      var ignoreCurrentElement = false;
	      var out = bind(buf, buf.push);
	      return {
	        start: function start(tag, attrs) {
	          tag = lowercase(tag);
	          if (!ignoreCurrentElement && blockedElements[tag]) {
	            ignoreCurrentElement = tag;
	          }
	          if (!ignoreCurrentElement && validElements[tag] === true) {
	            out('<');
	            out(tag);
	            forEach(attrs, function (value, key) {
	              var lkey = lowercase(key);
	              var isImage = tag === 'img' && lkey === 'src' || lkey === 'background';
	              if (validAttrs[lkey] === true && (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
	                out(' ');
	                out(key);
	                out('="');
	                out(encodeEntities(value));
	                out('"');
	              }
	            });
	            out('>');
	          }
	        },
	        end: function end(tag) {
	          tag = lowercase(tag);
	          if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {
	            out('</');
	            out(tag);
	            out('>');
	          }
	          // eslint-disable-next-line eqeqeq
	          if (tag == ignoreCurrentElement) {
	            ignoreCurrentElement = false;
	          }
	        },
	        chars: function chars(_chars) {
	          if (!ignoreCurrentElement) {
	            out(encodeEntities(_chars));
	          }
	        }
	      };
	    }

	    /**
	     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare
	     * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want
	     * to allow any of these custom attributes. This method strips them all.
	     *
	     * @param node Root element to process
	     */
	    function stripCustomNsAttrs(node) {
	      while (node) {
	        if (node.nodeType === window.Node.ELEMENT_NODE) {
	          var attrs = node.attributes;
	          for (var i = 0, l = attrs.length; i < l; i++) {
	            var attrNode = attrs[i];
	            var attrName = attrNode.name.toLowerCase();
	            if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {
	              node.removeAttributeNode(attrNode);
	              i--;
	              l--;
	            }
	          }
	        }

	        var nextNode = node.firstChild;
	        if (nextNode) {
	          stripCustomNsAttrs(nextNode);
	        }

	        node = node.nextSibling;
	      }
	    }
	  }

	  function sanitizeText(chars) {
	    var buf = [];
	    var writer = htmlSanitizeWriter(buf, noop);
	    writer.chars(chars);
	    return buf.join('');
	  }

	  // define ngSanitize module and register $sanitize service
	  angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);

	  /**
	   * @ngdoc filter
	   * @name linky
	   * @kind function
	   *
	   * @description
	   * Finds links in text input and turns them into html links. Supports `http/https/ftp/mailto` and
	   * plain email address links.
	   *
	   * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
	   *
	   * @param {string} text Input text.
	   * @param {string} target Window (`_blank|_self|_parent|_top`) or named frame to open links in.
	   * @param {object|function(url)} [attributes] Add custom attributes to the link element.
	   *
	   *    Can be one of:
	   *
	   *    - `object`: A map of attributes
	   *    - `function`: Takes the url as a parameter and returns a map of attributes
	   *
	   *    If the map of attributes contains a value for `target`, it overrides the value of
	   *    the target parameter.
	   *
	   *
	   * @returns {string} Html-linkified and {@link $sanitize sanitized} text.
	   *
	   * @usage
	     <span ng-bind-html="linky_expression | linky"></span>
	   *
	   * @example
	     <example module="linkyExample" deps="angular-sanitize.js" name="linky-filter">
	       <file name="index.html">
	         <div ng-controller="ExampleController">
	         Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
	         <table>
	           <tr>
	             <th>Filter</th>
	             <th>Source</th>
	             <th>Rendered</th>
	           </tr>
	           <tr id="linky-filter">
	             <td>linky filter</td>
	             <td>
	               <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
	             </td>
	             <td>
	               <div ng-bind-html="snippet | linky"></div>
	             </td>
	           </tr>
	           <tr id="linky-target">
	            <td>linky target</td>
	            <td>
	              <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
	            </td>
	            <td>
	              <div ng-bind-html="snippetWithSingleURL | linky:'_blank'"></div>
	            </td>
	           </tr>
	           <tr id="linky-custom-attributes">
	            <td>linky custom attributes</td>
	            <td>
	              <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"&gt;<br>&lt;/div&gt;</pre>
	            </td>
	            <td>
	              <div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"></div>
	            </td>
	           </tr>
	           <tr id="escaped-html">
	             <td>no filter</td>
	             <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
	             <td><div ng-bind="snippet"></div></td>
	           </tr>
	         </table>
	       </file>
	       <file name="script.js">
	         angular.module('linkyExample', ['ngSanitize'])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.snippet =
	               'Pretty text with some links:\n' +
	               'http://angularjs.org/,\n' +
	               'mailto:us@somewhere.org,\n' +
	               'another@somewhere.org,\n' +
	               'and one more: ftp://127.0.0.1/.';
	             $scope.snippetWithSingleURL = 'http://angularjs.org/';
	           }]);
	       </file>
	       <file name="protractor.js" type="protractor">
	         it('should linkify the snippet with urls', function() {
	           expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
	               toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
	                    'another@somewhere.org, and one more: ftp://127.0.0.1/.');
	           expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
	         });
	  
	         it('should not linkify snippet without the linky filter', function() {
	           expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
	               toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
	                    'another@somewhere.org, and one more: ftp://127.0.0.1/.');
	           expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
	         });
	  
	         it('should update', function() {
	           element(by.model('snippet')).clear();
	           element(by.model('snippet')).sendKeys('new http://link.');
	           expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
	               toBe('new http://link.');
	           expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
	           expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
	               .toBe('new http://link.');
	         });
	  
	         it('should work with the target property', function() {
	          expect(element(by.id('linky-target')).
	              element(by.binding("snippetWithSingleURL | linky:'_blank'")).getText()).
	              toBe('http://angularjs.org/');
	          expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
	         });
	  
	         it('should optionally add custom attributes', function() {
	          expect(element(by.id('linky-custom-attributes')).
	              element(by.binding("snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}")).getText()).
	              toBe('http://angularjs.org/');
	          expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');
	         });
	       </file>
	     </example>
	   */
	  angular.module('ngSanitize').filter('linky', ['$sanitize', function ($sanitize) {
	    var LINKY_URL_REGEXP = /((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,
	        MAILTO_REGEXP = /^mailto:/i;

	    var linkyMinErr = angular.$$minErr('linky');
	    var isDefined = angular.isDefined;
	    var isFunction = angular.isFunction;
	    var isObject = angular.isObject;
	    var isString = angular.isString;

	    return function (text, target, attributes) {
	      if (text == null || text === '') return text;
	      if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);

	      var attributesFn = isFunction(attributes) ? attributes : isObject(attributes) ? function getAttributesObject() {
	        return attributes;
	      } : function getEmptyAttributesObject() {
	        return {};
	      };

	      var match;
	      var raw = text;
	      var html = [];
	      var url;
	      var i;
	      while (match = raw.match(LINKY_URL_REGEXP)) {
	        // We can not end in these as they are sometimes found at the end of the sentence
	        url = match[0];
	        // if we did not match ftp/http/www/mailto then assume mailto
	        if (!match[2] && !match[4]) {
	          url = (match[3] ? 'http://' : 'mailto:') + url;
	        }
	        i = match.index;
	        addText(raw.substr(0, i));
	        addLink(url, match[0].replace(MAILTO_REGEXP, ''));
	        raw = raw.substring(i + match[0].length);
	      }
	      addText(raw);
	      return $sanitize(html.join(''));

	      function addText(text) {
	        if (!text) {
	          return;
	        }
	        html.push(sanitizeText(text));
	      }

	      function addLink(url, text) {
	        var key,
	            linkAttributes = attributesFn(url);
	        html.push('<a ');

	        for (key in linkAttributes) {
	          html.push(key + '="' + linkAttributes[key] + '" ');
	        }

	        if (isDefined(target) && !('target' in linkAttributes)) {
	          html.push('target="', target, '" ');
	        }
	        html.push('href="', url.replace(/"/g, '&quot;'), '">');
	        addText(text);
	        html.push('</a>');
	      }
	    };
	  }]);
	})(window, window.angular);

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);
	__webpack_require__(6);

	module.exports.service = function () {
	  'use strict';

	  angular.module('Services').factory('User', ['$rootScope', '$http', '$q', '$localStorage', function ($rootScope, $http, $q, $localStorage) {
	    ////console.log("User Service");


	    var service = {
	      // Keys and other mathematical constants
	      id: '',
	      username: '',
	      email: '',
	      numberOfXnum: function numberOfXnum() {
	        var defered = $q.defer();
	        $http.get('/api/v1/userNumXnum/', { headers: { auth: service.token } }).then(function (resp) {
	          console.log('UserService Get numberOf Xnum');
	          console.log(resp);
	          service.xnumCount = resp.data;
	          defered.resolve(resp.data);
	        }, function (err) {
	          console.log('UserService Get numberOf Xnum ERR');
	          console.log(err);
	          defered.reject(err);
	        });

	        return defered.promise;
	      },
	      valueOfXnum: function valueOfXnum() {
	        var defered = $q.defer();
	        $http.get('/api/v1/userValXnum/', { headers: { auth: service.token } }).then(function (resp) {
	          console.log('UserService Get  xnumValue Xnum');
	          console.log(resp);
	          service.xnumValue = resp.data;
	          defered.resolve(resp.data);
	        }, function (err) {
	          console.log('UserService Get  xnumValue Xnum ERR');
	          console.log(err);
	          defered.reject(err);
	        });

	        return defered.promise;
	      },
	      availableValueOfXnum: function availableValueOfXnum() {
	        var defered = $q.defer();
	        $http.get('/api/v1/userAvailValXnum/', { headers: { auth: service.token } }).then(function (resp) {
	          console.log('UserService Get  AvailxnumValue Xnum');
	          console.log(resp);
	          service.xnumAvailableValue = resp.data;
	          defered.resolve(resp.data);
	        }, function (err) {
	          console.log('UserService Get AvailxnumValue Xnum ERR');
	          console.log(err);
	          defered.reject(err);
	        });

	        return defered.promise;
	      },
	      xnumCount: 0,
	      xnumValue: 0,
	      xnumAvailableValue: 0,
	      token: '',
	      loggedin: false,
	      isTokenValid: function isTokenValid() {
	        var defered = $q.defer();
	        ////console.log('Is Token Valid Service');
	        ////console.log('token');
	        ////console.log(service.token);

	        if (typeof $localStorage.token !== 'undefined' && $localStorage !== null) {
	          service.token = $localStorage.token;
	        }
	        console.log("IN SERVICE TOKEN");
	        console.log(service.token);
	        if (service.token !== null && service.token !== undefined && service.token !== '') {
	          //loadgif.attr('src', 'img/loading.gif');
	          $http.post('/api/v1/users/findByToken', { "token": service.token }).then(function (resp) {
	            console.log('FindByToken Server Response');
	            console.log(resp);
	            service.loggedin = true;
	            service.username = resp.data.username;
	            service.email = resp.data.email;
	            service.id = resp.data.id;
	            service.loggedin = true;
	            service.token = service.token;
	            service.xBits = resp.data.xBits;

	            service.bodyColorR = resp.data.bodyColorR;
	            service.bodyColorG = resp.data.bodyColorG;
	            service.bodyColorB = resp.data.bodyColorB;
	            service.bodyColorA = resp.data.bodyColorA;

	            service.borderColorR = resp.data.borderColorR;
	            service.borderColorG = resp.data.borderColorG;
	            service.borderColorB = resp.data.borderColorB;
	            service.borderColorA = resp.data.borderColorA;

	            defered.resolve(resp.data);
	          }, function (err) {
	            service.token = '';
	            $localStorage.token = null;
	            service.loggedin = false;
	            defered.reject('Token Not Valid');
	          });
	        } else {
	          defered.reject('Token Not Valid');
	        }
	        return defered.promise;
	      },
	      login: function login(username_or_email, password) {
	        var defered = $q.defer();

	        if ($localStorage.token !== 'undefined' && $localStorage.token !== null) {
	          var logoutToken = $localStorage.token;
	          service.logout(logoutToken);
	        }

	        var loginData = {
	          email_or_username: username_or_email,
	          password: password
	        };

	        var loginXhrCallConfig = {
	          method: 'POST',
	          url: 'api/v1/users/login',
	          data: loginData,
	          responseType: "json"
	        };

	        $http(loginXhrCallConfig).then(function (resp) {
	          service.token = resp.headers('auth');
	          $localStorage.token = service.token;
	          service.username = resp.data.username;
	          service.email = resp.data.email;
	          service.id = resp.data.id;
	          service.loggedin = true;

	          $rootScope.$broadcast('UserLoggedIn', {});

	          defered.resolve('Login Successfull');
	        }, function (err) {
	          defered.reject(err);
	        });

	        return defered.promise;
	      },

	      signup: function signup(username, email, password) {
	        var defered = $q.defer();

	        if ($localStorage.token !== 'undefined' && $localStorage.token !== null) {
	          ////console.log("Signup Trying to delete local token");
	          ////console.log($localStorage.token);
	          var logoutToken = $localStorage.token;
	          service.logout(logoutToken);
	        }

	        var signupData = {
	          username: username,
	          email: email,
	          password: password
	        };

	        var signupXhrCallConfig = {
	          method: 'POST',
	          url: '/api/v1/users',
	          data: signupData,
	          responseType: "json"
	        };

	        $http(signupXhrCallConfig).then(function (resp) {
	          ////console.log("SIGN UP RESP");

	          ////console.log(resp);
	          service.username = resp.data.username;
	          service.email = resp.data.email;
	          service.id = resp.data.id;

	          defered.resolve('Signup Successfull');
	        }, function (err) {
	          defered.reject(err);
	        });

	        return defered.promise;
	      },
	      // Checks if the nick chosen contains valid alphanumeric characters (and underscores).
	      validNick: function validNick() {
	        var regex = /^\w*$/;
	        debug('Regex Test', regex.exec(service.username));
	        return regex.exec(service.username) !== null;
	      },
	      logout: function logout(token) {

	        var defered = $q.defer();

	        var logoutXhrCallConfig = {
	          method: 'DELETE',
	          url: 'api/v1/users/login',
	          headers: { auth: token },
	          responseType: "json"
	        };

	        $http(logoutXhrCallConfig).then(function (resp) {
	          $localStorage.token = null;
	          service.username = '';
	          service.email = '';
	          service.id = '';
	          service.loggedin = false;
	          $rootScope.$broadcast('UserLoggedOut', {});
	          defered.resolve('Logout Successfull');
	        }, function (err) {
	          $localStorage.token = null;
	          service.username = '';
	          service.email = '';
	          service.id = '';
	          service.loggedin = false;
	          defered.reject(err);
	        });

	        return defered.promise;
	      },
	      updateColor: function updateColor(colorData) {

	        var defered = $q.defer();

	        var updateColorXhrCallConfig = {
	          method: 'PUT',
	          url: '/api/v1/users',
	          data: colorData,
	          headers: { auth: service.token },
	          responseType: "json"
	        };

	        $http(updateColorXhrCallConfig).then(function (resp) {
	          ////console.log("SIGN UP RESP");

	          defered.resolve('Color Update Successfull');
	        }, function (err) {
	          defered.reject(err);
	        });

	        return defered.promise;
	      },
	      recoverPW: function recoverPW(username_or_email) {
	        console.log('USER PW RECOVERY SERVICE');
	        var defered = $q.defer();

	        var recoverPWXhrCallConfig = {
	          method: 'POST',
	          url: '/api/v1/recoverPW',
	          data: { 'username_or_email': username_or_email },
	          responseType: "json"
	        };

	        $http(recoverPWXhrCallConfig).then(function (resp) {
	          console.log("Recover PW RESP in Service");
	          console.log(resp);
	          defered.resolve(resp);
	        }, function (err) {
	          defered.reject(err);
	        });

	        return defered.promise;
	      },
	      changePW: function changePW(username, password1, password2) {
	        console.log('USER PW Change SERVICE');
	        var defered = $q.defer();
	        var data = {
	          username: username,
	          password1: password1,
	          password2: password2
	        };
	        var changePWXhrCallConfig = {
	          method: 'POST',
	          url: '/api/v1/changePW',
	          data: data,
	          headers: { auth: service.token },
	          responseType: "json"
	        };

	        $http(changePWXhrCallConfig).then(function (resp) {
	          console.log("Change PW Response in Service");
	          console.log(resp);
	          defered.resolve(resp);
	        }, function (err) {
	          console.log('Error ChangePW');
	          console.log(err);
	          defered.reject(err);
	        });

	        return defered.promise;
	      }

	    };

	    return service;
	  }]);
	};

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	//AuthService

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.service = function () {
	    'use strict';

	    angular.module('Services').factory('Auth', ['$http', '$q', '$localStorage', function ($http, $q, $localStorage) {
	        ////console.log("User Service");
	        var service = {
	            // Keys and other mathematical constants
	            adminAuthenticate: function adminAuthenticate() {
	                var defered = $q.defer();
	                console.log("$localStorage.token");
	                console.log($localStorage.token);

	                var adminAuthXhrCallConfig = {
	                    method: 'GET',
	                    url: '/api/v1/auth',
	                    //params: null,
	                    //data: signupData,
	                    headers: { auth: $localStorage.token },
	                    //eventHandlers: {},
	                    //uploadEventHandlers: {},
	                    //xsrfHeaderName: '',
	                    //xsrfCookieName: '',
	                    //transformRequest: function(data, headersGetter) {},
	                    //tranformResponse: function(data, headersGetter, status){},
	                    //paramSerializer: '',
	                    //cache: false,
	                    //timeout: null,
	                    //withCredentials: false,
	                    responseType: "json"
	                };

	                $http(adminAuthXhrCallConfig).then(function (resp) {
	                    console.log("AdminAuth Resp");

	                    console.log(resp);

	                    defered.resolve('Is Admin Successfull');
	                }, function (err) {
	                    defered.reject(err);
	                });

	                return defered.promise;
	            },
	            userAuthenticate: function userAuthenticate() {
	                var defered = $q.defer();
	                console.log("$localStorage.token");
	                console.log($localStorage.token);

	                var userAuthXhrCallConfig = {
	                    method: 'GET',
	                    url: '/api/v1/auth',
	                    //params: null,
	                    //data: signupData,
	                    headers: { auth: $localStorage.token },
	                    //eventHandlers: {},
	                    //uploadEventHandlers: {},
	                    //xsrfHeaderName: '',
	                    //xsrfCookieName: '',
	                    //transformRequest: function(data, headersGetter) {},
	                    //tranformResponse: function(data, headersGetter, status){},
	                    //paramSerializer: '',
	                    //cache: false,
	                    //timeout: null,
	                    //withCredentials: false,
	                    responseType: "json"
	                };

	                $http(userAuthXhrCallConfig).then(function (resp) {
	                    console.log("AdminAuth Resp");

	                    console.log(resp);

	                    defered.resolve('Is Admin Successfull');
	                }, function (err) {
	                    defered.reject(err);
	                });

	                return defered.promise;
	            }

	        };

	        return service;
	    }]);
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	///Global Variables Service

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.service = function () {
	    'use strict';

	    angular.module('Services').factory('Global', function () {

	        //console.log("Global Service");
	        var service = {
	            // Keys and other mathematical constants
	            KEY_ESC: 27,
	            KEY_ENTER: 13,
	            KEY_CHAT: 13,
	            KEY_FIREFOOD: 119,
	            KEY_SPLIT: 32,
	            KEY_LEFT: 37,
	            KEY_UP: 38,
	            KEY_RIGHT: 39,
	            KEY_DOWN: 40,
	            KEY_TAB: 10000,
	            borderDraw: true,
	            spin: -Math.PI,
	            enemySpin: -Math.PI,
	            mobile: false,
	            xnumSides: 6,

	            // Canvas
	            screenWidth: window.innerWidth,
	            screenHeight: window.innerHeight,
	            gameWidth: 0,
	            gameHeight: 0,
	            xoffset: -0,
	            yoffset: -0,
	            gameStart: false,
	            disconnected: false,
	            died: false,
	            kicked: false,
	            continuity: false,
	            startPingTime: 0,
	            toggleMassState: 0,
	            backgroundColor: '#f2fbff',
	            lineColor: '#ccc',
	            target: { x: 0.5, y: 0.5 },
	            clickPos: { x: null, y: null },
	            advs: [],
	            isAdvClick: false,
	            advBuy: {},
	            isAdvClickforLink: false,
	            advClickforLink: {},
	            screen_min_dim: function screen_min_dim() {
	                return this.screenHeight <= this.screenWidth ? this.screenHeight : this.screenWidth;
	            },
	            screenCellsWidth: 20,
	            screenCellsHeight: 20,
	            updateScreenDims: function updateScreenDims() {
	                service.screenWidth = window.innerWidth;
	                service.screenHeight = window.innerHeight;
	            }

	        };

	        return service;
	    });
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	//Global Variables Service

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.service = function () {
	    'use strict';

	    angular.module('Services').factory('Canvas', ['Global', 'Matrix', function (Global, Matrix) {

	        var throttle = function throttle(func, limit) {
	            var inThrottle, lastFunc, throttleTimer;
	            return function () {
	                var context = this,
	                    args = arguments;
	                if (inThrottle) {
	                    clearTimeout(lastFunc);
	                    return lastFunc = setTimeout(function () {
	                        func.apply(context, args);
	                        inThrottle = false;
	                    }, limit);
	                } else {
	                    func.apply(context, args);
	                    inThrottle = true;
	                    return throttleTimer = setTimeout(function () {
	                        return inThrottle = false;
	                    }, limit);
	                }
	            };
	        };

	        var Canvas = function () {
	            function Canvas(params) {
	                _classCallCheck(this, Canvas);

	                this.directionLock = false;
	                this.target = Global.target;
	                this.reenviar = true;
	                this.directions = [];
	                this.clickPos = Global.clickPos;
	                this.isAdvClick = Global.isAdvClick;
	                this.isAdvClickforLink = Global.isAdvClickforLink;
	                var self = this;

	                this.cv = document.getElementById('cvs');
	                this.cv.width = Global.screenWidth;
	                this.cv.height = Global.screenHeight;
	                this.cv.addEventListener('mousemove', throttle(this.gameInputMouseMove, 200), false);
	                this.cv.addEventListener('mouseup', this.gameInputMouseUp, false);
	                this.cv.addEventListener('mouseout', this.outOfBounds, false);
	                this.cv.addEventListener('keypress', this.keyInput, false);
	                this.cv.addEventListener('keyup', function (event) {
	                    self.reenviar = true;
	                    self.directionUp(event);
	                }, false);
	                this.cv.addEventListener('keydown', this.directionDown, false);

	                this.cv.addEventListener('touchstart', this.touchInput, false);
	                this.cv.addEventListener('touchmove', function (e) {}, false);
	                this.cv.addEventListener('touchend', this.touchUp, false);

	                //  this.cv.addEventListener('touchmove', this.touchInput, false)
	                this.cv.parent = self;
	                Global.canvas = this;
	            }

	            // Function called when a key is pressed, will change direction if arrow key.


	            _createClass(Canvas, [{
	                key: 'directionDown',
	                value: function directionDown(event) {
	                    var key = event.which || event.keyCode;
	                    var self = this.parent; // have to do this so we are not using the cv object
	                    if (self.directional(key)) {
	                        self.directionLock = true;
	                        if (self.newDirection(key, self.directions, true)) {
	                            self.updateTarget(self.directions);
	                        }
	                    }
	                }

	                // Function called when a key is lifted, will change direction if arrow key.

	            }, {
	                key: 'directionUp',
	                value: function directionUp(event) {
	                    var key = event.which || event.keyCode;
	                    if (this.directional(key)) {
	                        // this == the actual class
	                        if (this.newDirection(key, this.directions, false)) {
	                            this.updateTarget(this.directions);
	                            if (this.directions.length === 0) this.directionLock = false;
	                        }
	                    }
	                }

	                // Updates the direction array including information about the new direction.

	            }, {
	                key: 'newDirection',
	                value: function newDirection(direction, list, isAddition) {
	                    var result = false;
	                    var found = false;
	                    for (var i = 0, len = list.length; i < len; i++) {
	                        if (list[i] == direction) {
	                            found = true;
	                            if (!isAddition) {
	                                result = true;
	                                // Removes the direction.
	                                list.splice(i, 1);
	                            }
	                            break;
	                        }
	                    }
	                    // Adds the direction.
	                    if (isAddition && found === false) {
	                        result = true;
	                        list.push(direction);
	                    }

	                    return result;
	                }

	                // Updates the target according to the directions in the directions array.

	            }, {
	                key: 'updateTarget',
	                value: function updateTarget(list) {
	                    this.target = { x: 0, y: 0 };
	                    var directionHorizontal = 0;
	                    var directionVertical = 0;
	                    for (var i = 0, len = list.length; i < len; i++) {
	                        if (directionHorizontal === 0) {
	                            if (list[i] == Global.KEY_LEFT) directionHorizontal -= Number.MAX_VALUE;else if (list[i] == Global.KEY_RIGHT) directionHorizontal += Number.MAX_VALUE;
	                        }
	                        if (directionVertical === 0) {
	                            if (list[i] == Global.KEY_UP) directionVertical -= Number.MAX_VALUE;else if (list[i] == Global.KEY_DOWN) directionVertical += Number.MAX_VALUE;
	                        }
	                    }
	                    this.target.x += directionHorizontal;
	                    this.target.y += directionVertical;
	                    Global.target = this.target;
	                }
	            }, {
	                key: 'directional',
	                value: function directional(key) {
	                    return this.horizontal(key) || this.vertical(key);
	                }
	            }, {
	                key: 'horizontal',
	                value: function horizontal(key) {
	                    return key == Global.KEY_LEFT || key == Global.KEY_RIGHT;
	                }
	            }, {
	                key: 'vertical',
	                value: function vertical(key) {
	                    return key == Global.KEY_DOWN || key == Global.KEY_UP;
	                }
	            }, {
	                key: 'gameInputMouseUp',
	                value: function gameInputMouseUp(mouse) {
	                    var self = this.parent;
	                    var mscreen = [mouse.clientX, mouse.clientY, 1];
	                    var scrnMap = Matrix.inverseMap(mscreen);
	                    this.clickPos = { x: scrnMap[0], y: scrnMap[1] };
	                    Global.clickPos = this.clickPos;
	                    self.advClickCheck(this.clickPos);

	                    if (!this.directionLock) {
	                        this.parent.target.x = mouse.clientX - this.width / 2;
	                        this.parent.target.y = mouse.clientY - this.height / 2;
	                        Global.target = this.parent.target;
	                    }
	                }
	            }, {
	                key: 'gameInputMouseMove',
	                value: function gameInputMouseMove(mouse) {
	                    if (!this.directionLock) {
	                        this.parent.target.x = mouse.clientX - this.width / 2;
	                        this.parent.target.y = mouse.clientY - this.height / 2;
	                        Global.target = this.parent.target;
	                    }
	                }
	            }, {
	                key: 'touchUp',
	                value: function touchUp(touch) {
	                    console.log(touch);
	                    var self = this.parent;
	                    var touches = touch.changedTouches;
	                    var tscreen = [touches[0].clientX, touches[0].clientY, 1];
	                    var scrnMap = Matrix.inverseMap(tscreen);
	                    this.clickPos = { x: scrnMap[0], y: scrnMap[1] };
	                    Global.clickPos = this.clickPos;

	                    self.advClickCheck(this.clickPos);

	                    if (!this.directionLock) {
	                        this.parent.target.x = touches[0].clientX - this.width / 2;
	                        this.parent.target.y = touches[0].clientY - this.height / 2;
	                        Global.target = this.parent.target;
	                    }
	                }
	            }, {
	                key: 'touchInput',
	                value: function touchInput(touch) {
	                    touch.preventDefault();
	                    touch.stopPropagation();
	                    if (!this.directionLock) {
	                        this.parent.target.x = touch.touches[0].clientX - this.width / 2;
	                        this.parent.target.y = touch.touches[0].clientY - this.height / 2;
	                        Global.target = this.parent.target;
	                    }
	                }

	                // Chat command callback functions.

	            }, {
	                key: 'keyInput',
	                value: function keyInput(event) {
	                    console.log('KEY DOWN');
	                }
	            }, {
	                key: 'advClickCheck',
	                value: function advClickCheck(clkPos) {

	                    var advlength = Global.advs.length;

	                    for (var i = 0; i < advlength; i++) {

	                        if (clkPos.x <= Global.advs[i].locX + Global.advs[i].width - 0.5 && clkPos.x >= Global.advs[i].locX - 0.5 && clkPos.y <= Global.advs[i].locY + 0.5 && clkPos.y >= Global.advs[i].locY - Global.advs[i].height + 0.5 && Global.advs[i].available && !Global.advs[i].sponsorshipInterest && Global.advs[i].img === 'sponsorshipavailable.png') {
	                            console.log("CLICK IS IN");
	                            this.isAdvClick = true;
	                            Global.isAdvClick = true;

	                            Global.advBuy = Global.advs[i];

	                            break;
	                        }

	                        if (clkPos.x <= Global.advs[i].locX + Global.advs[i].width - 0.5 && clkPos.x >= Global.advs[i].locX - 0.5 && clkPos.y <= Global.advs[i].locY + 0.5 && clkPos.y >= Global.advs[i].locY - Global.advs[i].height + 0.5 && !Global.advs[i].available && Global.advs[i].hasLink && Global.advs[i].link !== '') {
	                            console.log("CLICK IS IN");
	                            this.isAdvClickforLink = true;
	                            Global.isAdvClickforLink = true;
	                            Global.advClickforLink = Global.advs[i];

	                            break;
	                        }
	                    }
	                }
	            }]);

	            return Canvas;
	        }();

	        var service = {};

	        service.getCanvas = function () {

	            var canvas = new Canvas();
	            //console.log(canvas)
	            return canvas;
	        };

	        return service;
	    }]);
	};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);

	module.exports.service = function () {
	  'use strict';

	  angular.module('Services').factory('Matrix', [function () {
	    //console.log("XonumiaController");
	    var service = this;

	    service.m = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];

	    service.invm = [[], [], []];

	    service.reset = function () {
	      service.m = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
	    };

	    //console.log(service.m);

	    service.scale = function (s) {
	      //console.log("SCALE");
	      // console.log(s);
	      service.m[0][0] = service.m[0][0] * s[0];
	      service.m[1][1] = service.m[1][1] * s[1];
	      service.m[2][2] = service.m[2][2] * s[2];
	    };

	    service.translate = function (t) {
	      //  console.log("TRANS");

	      service.m[0][2] = service.m[0][2] + t[0];
	      service.m[1][2] = service.m[1][2] + t[1];
	      service.m[2][2] = service.m[2][2] + t[2];
	    };

	    service.rotate = function (theta) {
	      service.m[0][0] = service.m[0][0] * Math.cos(theta) + service.m[0][1] * Math.sin(theta);
	      service.m[0][1] = service.m[0][0] * -Math.sin(theta) + service.m[0][1] * Math.cos(thea);
	      service.m[0][2] = service.m[0][2];

	      service.m[1][0] = service.m[1][0] * Math.cos(theta) + service.m[1][1] * Math.sin(theta);
	      service.m[1][1] = service.m[1][0] * -Math.sin(theta) + service.m[1][1] * Math.cos(thea);
	      service.m[1][2] = service.m[1][2];

	      service.m[2][0] = service.m[2][0] * Math.cos(theta) + service.m[2][1] * Math.sin(theta);
	      service.m[2][1] = service.m[2][0] * -Math.sin(theta) + service.m[2][1] * Math.cos(thea);
	      service.m[2][2] = service.m[2][2];
	    };

	    service.map = function (src) {
	      ////maps Game Coords to screen Coords..
	      // console.log("MAP");
	      // console.log(service.m);
	      // console.log(src);
	      var screen = [];

	      screen[0] = src[0] * service.m[0][0] + src[1] * service.m[0][1] + src[2] * service.m[0][2];
	      screen[1] = src[0] * service.m[1][0] + src[1] * service.m[1][1] + src[2] * service.m[1][2];
	      screen[2] = src[0] * service.m[2][0] + src[1] * service.m[2][1] + src[2] * service.m[2][2];
	      //console.log(src);
	      return screen;
	    };

	    service.inverseMap = function (screen) {
	      ////maps screen coords to game coords...
	      service.invertM();
	      var src = [];
	      src[0] = screen[0] * service.invm[0][0] + screen[1] * service.invm[0][1] + screen[2] * service.invm[0][2];
	      src[1] = screen[0] * service.invm[1][0] + screen[1] * service.invm[1][1] + screen[2] * service.invm[1][2];
	      src[2] = screen[0] * service.invm[2][0] + screen[1] * service.invm[2][1] + screen[2] * service.invm[2][2];

	      return src;
	    };

	    service.invertM = function () {
	      var detM = service.m[0][0] * service.m[1][1] * service.m[2][2] + service.m[0][1] * service.m[1][2] * service.m[2][0] + service.m[0][2] * service.m[1][0] * service.m[2][1] - service.m[0][2] * service.m[1][1] * service.m[2][0] - service.m[0][1] * service.m[1][0] * service.m[2][2] - service.m[0][0] * service.m[1][2] * service.m[2][1];

	      if (detM !== 0) {

	        service.invm[0][0] = 1 / detM * (service.m[1][1] * service.m[2][2] - service.m[1][2] * service.m[2][1]);
	        service.invm[0][1] = 1 / detM * (service.m[0][2] * service.m[2][1] - service.m[0][1] * service.m[2][2]);
	        service.invm[0][2] = 1 / detM * (service.m[0][1] * service.m[1][2] - service.m[0][2] * service.m[1][1]);

	        service.invm[1][0] = 1 / detM * (service.m[1][2] * service.m[1][0] - service.m[1][0] * service.m[2][2]);
	        service.invm[1][1] = 1 / detM * (service.m[0][0] * service.m[2][2] - service.m[0][2] * service.m[2][0]);
	        service.invm[1][2] = 1 / detM * (service.m[0][2] * service.m[1][0] - service.m[0][0] * service.m[1][2]);

	        service.invm[2][0] = 1 / detM * (service.m[1][0] * service.m[2][1] - service.m[1][1] * service.m[2][0]);
	        service.invm[2][1] = 1 / detM * (service.m[0][1] * service.m[2][0] - service.m[0][0] * service.m[2][1]);
	        service.invm[2][2] = 1 / detM * (service.m[0][0] * service.m[1][1] - service.m[0][1] * service.m[1][0]);
	      } else {

	        console.log("IVERSE FAILED");
	      }
	    };

	    return service;
	  }]);
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	//LEVEL SERVICE


	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.service = function () {
	  'use strict';

	  angular.module('Services').factory('Levels', ['$http', '$q', 'User', function ($http, $q, User) {

	    //console.log("Global Service");
	    var service = {};

	    service.getLevels = function (url) {
	      var defered = $q.defer();

	      var levelsGetXhrCallConfig = {
	        method: 'GET',
	        url: url,
	        //params: null,
	        //data: tile,
	        headers: { auth: User.token },
	        //eventHandlers: {},
	        //uploadEventHandlers: {},
	        //xsrfHeaderName: '',
	        //xsrfCookieName: '',
	        //transformRequest: function(data, headersGetter) {},
	        //tranformResponse: function(data, headersGetter, status){},
	        //paramSerializer: '',
	        //cache: false,
	        //timeout: null,
	        //withCredentials: false,
	        responseType: "json"
	      };

	      $http(levelsGetXhrCallConfig).then(function (resp) {
	        defered.resolve(resp.data);
	      }, function (err) {
	        defered.reject(err);
	      });

	      return defered.promise;
	    };

	    service.getMapTiles = function (url) {

	      var defered = $q.defer();

	      var mapGetXhrCallConfig = {
	        method: 'GET',
	        url: url,
	        //params: null,
	        //data: tile,
	        headers: { auth: User.token },
	        //eventHandlers: {},
	        //uploadEventHandlers: {},
	        //xsrfHeaderName: '',
	        //xsrfCookieName: '',
	        //transformRequest: function(data, headersGetter) {},
	        //tranformResponse: function(data, headersGetter, status){},
	        //paramSerializer: '',
	        //cache: false,
	        //timeout: null,
	        //withCredentials: false,
	        responseType: "json"
	      };

	      $http(mapGetXhrCallConfig).then(function (resp) {
	        defered.resolve(resp.data);
	      }, function (err) {
	        defered.reject(err);
	      });
	      return defered.promise;
	    };

	    service.getAdvs = function (url) {

	      var defered = $q.defer();

	      var advsGetXhrCallConfig = {
	        method: 'GET',
	        url: url,
	        //params: null,
	        //data: tile,
	        headers: { auth: User.token },
	        //eventHandlers: {},
	        //uploadEventHandlers: {},
	        //xsrfHeaderName: '',
	        //xsrfCookieName: '',
	        //transformRequest: function(data, headersGetter) {},
	        //tranformResponse: function(data, headersGetter, status){},
	        //paramSerializer: '',
	        //cache: false,
	        //timeout: null,
	        //withCredentials: false,
	        responseType: "json"
	      };

	      $http(advsGetXhrCallConfig).then(function (resp) {

	        for (var i = 0; i < resp.data.length; i++) {
	          var advimag = resp.data[i].img;
	          var ext = advimag.substr(advimag.lastIndexOf('.'));
	          console.log(advimag);
	          console.log(ext);
	          var basename = advimag.substr(0, advimag.lastIndexOf('.'));
	          console.log(basename);
	          resp.data[i].imgL = basename + '_L' + ext;
	          resp.data[i].imgM = basename + '_M' + ext;
	          resp.data[i].imgS = basename + '_S' + ext;
	        }
	        defered.resolve(resp.data);
	      }, function (err) {
	        defered.reject(err);
	      });
	      return defered.promise;
	    };

	    return service;
	  }]);
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);

	module.exports.service = function () {
	  'use strict';

	  angular.module('Services').factory('Draw', ['Global', 'Matrix', '$state', function (Global, Matrix, $state) {
	    //console.log("XonumiaController");


	    var tempCanvas;

	    function valueInRange(min, max, value) {
	      return Math.min(max, Math.max(min, value));
	    }

	    var service = this;

	    service.drawOnInvisibleCanvas = function (map) {

	      Global.canvasCache = document.createElement('canvas');
	      Global.canvasCache.setAttribute("width", "1500");
	      Global.canvasCache.setAttribute("height", "1500");
	      Global.canvasCache.setAttribute("id", "mapCanvas");
	      Global.canvasCache.style.cssText = 'display:none;background:rgb(192,192,192);';
	      Global.canvasctx = Global.canvasCache.getContext("2d");
	      service.drawMaptoInvisibleCanvas(map);
	    };

	    service.createMapImage = function (ctx, map) {

	      if (Global.needNewGlobalMap) {
	        service.drawOnInvisibleCanvas(map);
	      }

	      Global.mapImage = new Image();

	      Global.mapImage.src = Global.canvasCache.toDataURL();
	      Global.needNewGlobalMap = false;
	    };

	    service.checkifnewMapImageNeeded = function () {
	      var boolcheck = Global.player.x - Global.mapimageinizializationlocation[0] < Global.screenCellsWidth || Global.mapimageinizializationlocation[0] + 3 * Global.screenCellsWidth - Global.player.x < Global.screenCellsWidth || Global.mapimageinizializationlocation[1] - Global.player.y < Global.screenCellsHeight || Global.player.y - (Global.mapimageinizializationlocation[1] - 3 * Global.screenCellsHeight) < Global.screenCellsHeight;

	      if (boolcheck) {
	        Global.needNewGlobalMap = true;
	      } else {
	        Global.needNewGlobalMap = false;
	      }
	    };

	    service.drawMapImage = function (ctx) {

	      var topleftMapImage = Matrix.map([Global.mapimageinizializationlocation[0], Global.mapimageinizializationlocation[1], 1]);

	      ctx.drawImage(Global.mapImage, topleftMapImage[0], topleftMapImage[1]);

	      //service.checkifnewMapImageNeeded();

	    };

	    service.drawMap = function (ctx, map) {

	      ctx.beginPath();
	      ctx.setLineDash([1, 0]);
	      ctx.strokeStyle = '#000000';
	      ctx.lineWidth = 5;
	      ctx.lineCap = "round";

	      map.tiles.forEach(function (tile) {
	        var start = [];
	        var end = [];

	        if (tile.gu) {
	          start = Matrix.map([tile.locX - 0.5, tile.locY + 0.5, 1]);
	          end = Matrix.map([tile.locX + 0.5, tile.locY + 0.5, 1]);
	          ctx.moveTo(start[0], start[1]);
	          ctx.lineTo(end[0], end[1]);
	        }
	        if (tile.gr) {
	          start = Matrix.map([tile.locX + 0.5, tile.locY + 0.5, 1]);
	          end = Matrix.map([tile.locX + 0.5, tile.locY - 0.5, 1]);
	          ctx.moveTo(start[0], start[1]);
	          ctx.lineTo(end[0], end[1]);
	        }

	        if (tile.gd) {
	          start = Matrix.map([tile.locX - 0.5, tile.locY - 0.5, 1]);
	          end = Matrix.map([tile.locX + 0.5, tile.locY - 0.5, 1]);
	          ctx.moveTo(start[0], start[1]);
	          ctx.lineTo(end[0], end[1]);
	        }

	        if (tile.gl) {
	          start = Matrix.map([tile.locX - 0.5, tile.locY - 0.5, 1]);
	          end = Matrix.map([tile.locX - 0.5, tile.locY + 0.5, 1]);
	          ctx.moveTo(start[0], start[1]);
	          ctx.lineTo(end[0], end[1]);
	        }

	        ctx.fillStyle = 'rgba(' + Math.floor(tile.color_r) + ', ' + Math.floor(tile.color_g) + ', ' + Math.floor(tile.color_b) + ', ' + tile.color_a + ')';

	        var topleftR = Matrix.map([tile.locX - 0.505, tile.locY + 0.505, 1]);
	        var bottomR = Matrix.map([tile.locX + 0.505, tile.locY - 0.505, 1]);
	        var widthR = bottomR[0] - topleftR[0];
	        var heightR = bottomR[1] - topleftR[1];
	        ctx.fillRect(topleftR[0], topleftR[1], widthR, heightR);
	      });

	      ctx.stroke();
	      ctx.closePath();
	    };

	    service.drawMaptoInvisibleCanvas = function (map) {

	      var initPosImage = [Global.screenWidth / 2 - 1.5 * Global.screenWidth, Global.screenHeight / 2 - 1.5 * Global.screenHeight, 1];
	      var mapImageGamePos = Matrix.inverseMap(initPosImage);
	      Global.mapimageinizializationlocation = [mapImageGamePos[0], mapImageGamePos[1]];

	      Global.canvasctx.beginPath();
	      Global.canvasctx.setLineDash([1, 0]);
	      Global.canvasctx.strokeStyle = '#000000';
	      Global.canvasctx.lineWidth = 5;
	      Global.canvasctx.lineCap = "round";

	      map.tiles.forEach(function (tile) {
	        var start = [];
	        var end = [];

	        if (tile.gu) {
	          start = Matrix.map([tile.locX - 0.5, tile.locY + 0.5, 1]);
	          end = Matrix.map([tile.locX + 0.5, tile.locY + 0.5, 1]);
	          Global.canvasctx.moveTo(start[0] + Global.screenWidth, start[1] + Global.screenHeight);
	          Global.canvasctx.lineTo(end[0] + Global.screenWidth, end[1] + Global.screenHeight);
	        }
	        if (tile.gr) {
	          start = Matrix.map([tile.locX + 0.5, tile.locY + 0.5, 1]);
	          end = Matrix.map([tile.locX + 0.5, tile.locY - 0.5, 1]);
	          Global.canvasctx.moveTo(start[0] + Global.screenWidth, start[1] + Global.screenHeight);
	          Global.canvasctx.lineTo(end[0] + Global.screenWidth, end[1] + Global.screenHeight);
	        }

	        if (tile.gd) {
	          start = Matrix.map([tile.locX - 0.5, tile.locY - 0.5, 1]);
	          end = Matrix.map([tile.locX + 0.5, tile.locY - 0.5, 1]);
	          Global.canvasctx.moveTo(start[0] + Global.screenWidth, start[1] + Global.screenHeight);
	          Global.canvasctx.lineTo(end[0] + Global.screenWidth, end[1] + Global.screenHeight);
	        }

	        if (tile.gl) {
	          start = Matrix.map([tile.locX - 0.5, tile.locY - 0.5, 1]);
	          end = Matrix.map([tile.locX - 0.5, tile.locY + 0.5, 1]);
	          Global.canvasctx.moveTo(start[0] + Global.screenWidth, start[1] + Global.screenHeight);
	          Global.canvasctx.lineTo(end[0] + Global.screenWidth, end[1] + Global.screenHeight);
	        }

	        Global.canvasctx.fillStyle = 'rgba(' + Math.floor(tile.color_r) + ', ' + Math.floor(tile.color_g) + ', ' + Math.floor(tile.color_b) + ', ' + tile.color_a + ')';

	        var topleftR = Matrix.map([tile.locX - 0.505, tile.locY + 0.505, 1]);
	        var bottomR = Matrix.map([tile.locX + 0.505, tile.locY - 0.505, 1]);
	        var widthR = bottomR[0] - topleftR[0];
	        var heightR = bottomR[1] - topleftR[1];
	        Global.canvasctx.fillRect(topleftR[0] + Global.screenWidth, topleftR[1] + Global.screenHeight, widthR, heightR);
	      });

	      Global.canvasctx.stroke();
	      Global.canvasctx.closePath();
	    };

	    service.drawSelectedCells = function (ctx, selectCells) {
	      ctx.beginPath();
	      var numSelectedCells = selectCells.length;
	      for (var i = 0; i < numSelectedCells; i++) {

	        ctx.setLineDash([1, 0]);
	        ctx.fillStyle = '#cecece';
	        ctx.lineWidth = 3;
	        ctx.strokeStyle = '#333';

	        var topleftR = Matrix.map([selectCells[i].locX - 0.25, selectCells[i].locY + 0.25, 1]);
	        var bottomR = Matrix.map([selectCells[i].locX + 0.25, selectCells[i].locY - 0.25, 1]);
	        var widthR = bottomR[0] - topleftR[0];
	        var heightR = bottomR[1] - topleftR[1];
	        ctx.rect(topleftR[0], topleftR[1], widthR, heightR);
	        ctx.fill();
	        ctx.stroke();

	        ctx.closePath();
	      }
	    };

	    service.drawHoverCell = function (ctx, hoverCell) {

	      ctx.beginPath();
	      ctx.setLineDash([1, 0]);
	      ctx.strokeStyle = '#ffa366';
	      ctx.lineWidth = 3;

	      var topleftR = Matrix.map([hoverCell[0] - 0.4, hoverCell[1] + 0.4, 1]);
	      var bottomR = Matrix.map([hoverCell[0] + 0.4, hoverCell[1] - 0.4, 1]);

	      var widthR = bottomR[0] - topleftR[0];
	      var heightR = bottomR[1] - topleftR[1];

	      ctx.strokeRect(topleftR[0], topleftR[1], widthR, heightR);
	      ctx.closePath();
	    };

	    service.drawGrid = function (ctx, zoom) {

	      var bottomleftEdgeCoord = [0, Global.screenHeight, 1];

	      var toprightEdgeCoord = [Global.screenWidth, 0, 1];

	      var localCoordBottomLeftView = Matrix.inverseMap(bottomleftEdgeCoord);

	      var localCoordTopRightView = Matrix.inverseMap(toprightEdgeCoord);

	      ctx.beginPath();
	      ctx.setLineDash([3, 6]);
	      ctx.strokeStyle = '#ccc';
	      var istart = Math.floor(localCoordBottomLeftView[0]);
	      var iend = Math.floor(localCoordTopRightView[0]) + 1;

	      for (var i = istart; i < iend; i++) {

	        var start = [i, localCoordBottomLeftView[1], 1];
	        var end = [i, localCoordTopRightView[1], 1];

	        start = Matrix.map(start);
	        end = Matrix.map(end);

	        ctx.moveTo(start[0], start[1]);
	        ctx.lineWidth = zoom / 100;
	        ctx.lineTo(end[0], end[1]);
	        ctx.stroke();
	      }

	      var jstart = Math.floor(localCoordBottomLeftView[1]);
	      var jend = Math.floor(localCoordTopRightView[1]) + 1;
	      for (var j = jstart; j < jend; j++) {

	        start = [localCoordBottomLeftView[0], j, 1];
	        end = [localCoordTopRightView[0], j, 1];

	        start = Matrix.map(start);
	        end = Matrix.map(end);

	        ctx.moveTo(start[0], start[1]);
	        ctx.lineWidth = zoom / 100;
	        ctx.lineTo(end[0], end[1]);
	        ctx.stroke();
	      }
	      ctx.closePath();
	    };

	    service.drawBounds = function (ctx, bounds) {

	      ctx.beginPath();
	      ctx.strokeStyle = '#ccc';
	      ctx.setLineDash([1, 0]);
	      ctx.lineWidth = 1;

	      var start = [bounds[1], bounds[0], 1];
	      var end = [bounds[1], bounds[2], 1];

	      start = Matrix.map(start);
	      end = Matrix.map(end);

	      ctx.moveTo(start[0], start[1]);

	      ctx.lineTo(end[0], end[1]);
	      ctx.stroke();

	      start = [bounds[1], bounds[2], 1];
	      end = [bounds[3], bounds[2], 1];

	      start = Matrix.map(start);
	      end = Matrix.map(end);

	      ctx.moveTo(start[0], start[1]);

	      ctx.lineTo(end[0], end[1]);
	      ctx.stroke();

	      start = [bounds[3], bounds[2], 1];
	      end = [bounds[3], bounds[0], 1];

	      start = Matrix.map(start);
	      end = Matrix.map(end);

	      ctx.moveTo(start[0], start[1]);

	      ctx.lineTo(end[0], end[1]);
	      ctx.stroke();

	      start = [bounds[3], bounds[0], 1];
	      end = [bounds[1], bounds[0], 1];

	      start = Matrix.map(start);
	      end = Matrix.map(end);

	      ctx.moveTo(start[0], start[1]);

	      ctx.lineTo(end[0], end[1]);
	      ctx.stroke();

	      ctx.closePath();
	    };

	    service.drawWorldCoordinateSystem = function (ctx, zoom) {

	      var bottomleftEdgeCoord = [0, Global.screenHeight, 1];

	      var toprightEdgeCoord = [Global.screenWidth, 0, 1];

	      var localCoordBottomLeftView = Matrix.inverseMap(bottomleftEdgeCoord);

	      var localCoordTopRightView = Matrix.inverseMap(toprightEdgeCoord);

	      ctx.beginPath();

	      ctx.strokeStyle = '#ccc';
	      ctx.setLineDash([1, 0]);
	      var start = [0, localCoordBottomLeftView[1], 1];
	      var end = [0, localCoordTopRightView[1], 1];

	      start = Matrix.map(start);
	      end = Matrix.map(end);

	      ctx.moveTo(start[0], start[1]);
	      ctx.lineWidth = zoom / 50;
	      ctx.lineTo(end[0], end[1]);
	      ctx.stroke();

	      var start = [localCoordBottomLeftView[0], 0, 1];
	      var end = [localCoordTopRightView[0], 0, 1];

	      start = Matrix.map(start);
	      end = Matrix.map(end);

	      ctx.moveTo(start[0], start[1]);
	      ctx.lineWidth = zoom / 50;
	      ctx.lineTo(end[0], end[1]);
	      ctx.stroke();

	      ctx.closePath();
	    };

	    service.drawStartCell = function (ctx, start) {
	      ctx.beginPath();
	      // ctx.setLineDash([1,0]);
	      // ctx.strokeStyle = '#FF0000';
	      // ctx.lineWidth = 6;

	      var topleftR = Matrix.map([start[0] - 0.45, start[1] + 0.45, 1]);
	      var bottomR = Matrix.map([start[0] + 0.45, start[1] - 0.45, 1]);

	      var widthR = bottomR[0] - topleftR[0];
	      var heightR = bottomR[1] - topleftR[1];
	      var cenX = topleftR[0] + widthR / 2;
	      var cenY = topleftR[1] + heightR / 2;
	      var grd = ctx.createRadialGradient(cenX, cenY, 2, cenX, cenY, widthR / 2);
	      grd.addColorStop(0, '#FF0000');
	      grd.addColorStop(1, '#004CB3');

	      ctx.fillStyle = grd;
	      ctx.fillRect(topleftR[0], topleftR[1], widthR, heightR);

	      // ctx.strokeRect((topleftR[0]), (topleftR[1]), widthR, heightR);
	      ctx.closePath();
	    };

	    service.drawFinishCell = function (ctx, finish) {
	      ctx.beginPath();
	      //ctx.setLineDash([1,0]);
	      //ctx.strokeStyle = '#00FF00';
	      // ctx.lineWidth = 6;

	      var topleftR = Matrix.map([finish[0] - 0.45, finish[1] + 0.45, 1]);
	      var bottomR = Matrix.map([finish[0] + 0.45, finish[1] - 0.45, 1]);

	      var widthR = bottomR[0] - topleftR[0];
	      var heightR = bottomR[1] - topleftR[1];

	      var cenX = topleftR[0] + widthR / 2;
	      var cenY = topleftR[1] + heightR / 2;
	      var grd = ctx.createRadialGradient(cenX, cenY, 2, cenX, cenY, widthR / 2);
	      grd.addColorStop(0, '#00FF00');
	      grd.addColorStop(1, '#004CB3');

	      ctx.fillStyle = grd;
	      ctx.fillRect(topleftR[0], topleftR[1], widthR, heightR);

	      //ctx.strokeRect((topleftR[0]), (topleftR[1]), widthR, heightR);
	      ctx.closePath();
	    };

	    service.drawOtherPlayers = function (ctx, order, player, playerConfig) {

	      var start = {
	        x: player.x,
	        y: player.y
	      };

	      for (var z = 0; z < order.length; z++) {

	        var userCurrent = order[z];

	        var x = 0;
	        var y = 0;

	        ctx.strokeStyle = 'rgba(' + userCurrent.playerConfig.borderColorR + ',' + userCurrent.playerConfig.borderColorG + ',' + userCurrent.playerConfig.borderColorB + ',' + userCurrent.playerConfig.borderColorA + ')';
	        ctx.fillStyle = 'rgba(' + userCurrent.playerConfig.bodyColorR + ',' + userCurrent.playerConfig.bodyColorG + ',' + userCurrent.playerConfig.bodyColorB + ',' + userCurrent.playerConfig.bodyColorA + ')';
	        ctx.lineWidth = userCurrent.playerConfig.border;

	        var xstore = [];
	        var ystore = [];

	        Global.spin += 0.0;

	        var points = 10 + ~~(userCurrent.radius / 5);
	        var increase = Math.PI * 2 / points;

	        for (var i = 0; i < points; i++) {

	          x = userCurrent.radius * Math.cos(Global.spin) + userCurrent.x;
	          y = userCurrent.radius * Math.sin(Global.spin) + userCurrent.y;

	          Global.spin += increase;
	          xstore[i] = x;
	          ystore[i] = y;
	        }

	        var test = Matrix.map([10, 10, 1]);

	        for (i = 0; i < points; ++i) {
	          if (i === 0) {
	            ctx.beginPath();
	            var moveTo = Matrix.map([xstore[i], ystore[i], 1]);

	            ctx.moveTo(moveTo[0], moveTo[1]);
	          } else if (i > 0 && i < points - 1) {
	            var lineTo = Matrix.map([xstore[i], ystore[i], 1]);
	            ctx.lineTo(lineTo[0], lineTo[1]);
	          } else {
	            lineTo = Matrix.map([xstore[i], ystore[i], 1]);
	            ctx.lineTo(lineTo[0], lineTo[1]);

	            lineTo = Matrix.map([xstore[0], ystore[0], 1]);
	            ctx.lineTo(lineTo[0], lineTo[1]);
	          }
	        }

	        ctx.lineJoin = 'round';
	        ctx.lineCap = 'round';
	        ctx.fill();
	        ctx.stroke();
	        var nameCell = "";
	        if (typeof userCurrent.id == "undefined") {
	          nameCell = player.name;
	        } else {
	          nameCell = userCurrent.name;
	        }

	        var fontSize = 13;
	        ctx.lineWidth = userCurrent.playerConfig.textBorderSize;
	        ctx.fillStyle = userCurrent.playerConfig.textColor;
	        ctx.strokeStyle = userCurrent.playerConfig.textBorder;
	        ctx.miterLimit = 1;
	        ctx.lineJoin = 'round';
	        ctx.textAlign = 'center';
	        ctx.textBaseline = 'middle';
	        ctx.font = 'bold ' + fontSize + 'px sans-serif';

	        var txtLocation = Matrix.map([userCurrent.x, userCurrent.y, 1]);
	        ctx.strokeText(nameCell, txtLocation[0], txtLocation[1]);
	        ctx.fillText(nameCell, txtLocation[0], txtLocation[1]);
	        ctx.font = 'bold ' + Math.max(fontSize / 3 * 2, 10) + 'px sans-serif';

	        if (typeof nameCell === "undefined") fontSize = 0;

	        ctx.strokeText(Math.floor(userCurrent.x) + ', ' + Math.floor(userCurrent.y), txtLocation[0], txtLocation[1] + fontSize);
	        ctx.fillText(Math.floor(userCurrent.x) + ', ' + Math.floor(userCurrent.y), txtLocation[0], txtLocation[1] + fontSize);
	      }
	    };

	    service.drawPlayer = function (ctx, player, displayName, displayXnums) {

	      var start = {
	        x: player.x,
	        y: player.y
	      };

	      var x = 0;
	      var y = 0;

	      ctx.strokeStyle = 'rgba(' + player.playerConfig.borderColorR + ',' + player.playerConfig.borderColorG + ',' + player.playerConfig.borderColorB + ',' + player.playerConfig.borderColorA + ')';

	      ctx.fillStyle = 'rgba(' + player.playerConfig.bodyColorR + ',' + player.playerConfig.bodyColorG + ',' + player.playerConfig.bodyColorB + ',' + player.playerConfig.bodyColorA + ')';

	      ctx.lineWidth = player.playerConfig.border;

	      var xstore = [];
	      var ystore = [];

	      Global.spin += 0.0;

	      var points = 10 + ~~(player.radius / 5);
	      var increase = Math.PI * 2 / points;

	      for (var i = 0; i < points; i++) {

	        x = player.radius * Math.cos(Global.spin) + player.x;
	        y = player.radius * Math.sin(Global.spin) + player.y;

	        Global.spin += increase;
	        xstore[i] = x;
	        ystore[i] = y;
	      }

	      for (i = 0; i < points; ++i) {
	        if (i === 0) {
	          ctx.beginPath();
	          var moveTo = Matrix.map([xstore[i], ystore[i], 1]);

	          ctx.moveTo(moveTo[0], moveTo[1]);
	        } else if (i > 0 && i < points - 1) {
	          var lineTo = Matrix.map([xstore[i], ystore[i], 1]);
	          ctx.lineTo(lineTo[0], lineTo[1]);
	        } else {
	          lineTo = Matrix.map([xstore[i], ystore[i], 1]);
	          ctx.lineTo(lineTo[0], lineTo[1]);

	          lineTo = Matrix.map([xstore[0], ystore[0], 1]);
	          ctx.lineTo(lineTo[0], lineTo[1]);
	        }
	      }

	      ctx.lineJoin = 'round';
	      ctx.lineCap = 'round';
	      ctx.fill();
	      ctx.stroke();

	      if (displayName) {
	        var nameCell = "";
	        if (typeof player.id == "undefined") {
	          nameCell = player.name;
	        } else {
	          nameCell = player.name;
	        }

	        var fontSize = 13;
	        ctx.lineWidth = player.playerConfig.textBorderSize;
	        ctx.fillStyle = player.playerConfig.textColor;
	        ctx.strokeStyle = player.playerConfig.textBorder;
	        ctx.miterLimit = 1;
	        ctx.lineJoin = 'round';
	        ctx.textAlign = 'center';
	        ctx.textBaseline = 'middle';
	        ctx.font = 'bold ' + fontSize + 'px sans-serif';

	        var txtLocation = Matrix.map([player.x, player.y, 1]);
	        ctx.strokeText(nameCell, txtLocation[0], txtLocation[1]);
	        ctx.fillText(nameCell, txtLocation[0], txtLocation[1]);
	        // ctx.font = 'bold ' + Math.max(fontSize / 3 * 2, 10) + 'px sans-serif';


	        // ctx.strokeText(Math.floor(player.x) + ', ' + Math.floor(player.y), txtLocation[0], txtLocation[1]+fontSize);
	        // ctx.fillText(Math.floor(player.x) + ', ' + Math.floor(player.y), txtLocation[0], txtLocation[1]+fontSize);
	      } else if (displayXnums) {
	        var fontSize = 13;
	        ctx.lineWidth = player.playerConfig.textBorderSize;
	        ctx.fillStyle = player.playerConfig.textColor;
	        ctx.strokeStyle = player.playerConfig.textBorder;
	        ctx.miterLimit = 1;
	        ctx.lineJoin = 'round';
	        ctx.textAlign = 'center';
	        ctx.textBaseline = 'middle';
	        ctx.font = 'bold ' + fontSize + 'px sans-serif';

	        var txtLocation = Matrix.map([player.x, player.y, 1]);
	        ctx.strokeText('xNum: ' + player.xnumsLength, txtLocation[0], txtLocation[1]);
	        ctx.fillText('xNum: ' + player.xnumsLength, txtLocation[0], txtLocation[1]);

	        ctx.strokeText('xVal ($): ' + player.xnumsVal, txtLocation[0], txtLocation[1] + fontSize);
	        ctx.fillText('xVal ($): ' + player.xnumsVal, txtLocation[0], txtLocation[1] + fontSize);

	        ctx.strokeText('xBits: ' + player.xbits, txtLocation[0], txtLocation[1] - fontSize);
	        ctx.fillText('xBits: ' + player.xbits, txtLocation[0], txtLocation[1] - fontSize);
	      }

	      if (!displayXnums) {
	        var fontSize = 13;
	        ctx.lineWidth = player.playerConfig.textBorderSize;
	        ctx.fillStyle = player.playerConfig.textColor;
	        ctx.strokeStyle = player.playerConfig.textBorder;
	        ctx.miterLimit = 1;
	        ctx.lineJoin = 'round';
	        ctx.textAlign = 'center';
	        ctx.textBaseline = 'middle';
	        ctx.font = 'bold ' + fontSize + 'px sans-serif';

	        var txtLocation = Matrix.map([player.x + Math.floor(Global.screenCellsWidth / 2) - 1, player.y + 2, 1]);
	        ctx.strokeText('xNum: ' + player.xnumsLength, txtLocation[0], txtLocation[1]);
	        ctx.fillText('xNum: ' + player.xnumsLength, txtLocation[0], txtLocation[1]);

	        ctx.strokeText('xVal ($): ' + player.xnumsVal, txtLocation[0], txtLocation[1] + fontSize);
	        ctx.fillText('xVal ($): ' + player.xnumsVal, txtLocation[0], txtLocation[1] + fontSize);

	        ctx.strokeText('xBits: ' + player.xbits, txtLocation[0], txtLocation[1] - fontSize);
	        ctx.fillText('xBits: ' + player.xbits, txtLocation[0], txtLocation[1] - fontSize);
	      }
	    };

	    function drawCircle(graph, centerX, centerY, radius, sides) {
	      var theta = 0;
	      var x = 0;
	      var y = 0;
	      var xpoints = [[]];

	      graph.beginPath();

	      for (var i = 0; i < sides; i++) {
	        theta = i / sides * 2 * Math.PI;
	        x = centerX + radius * Math.sin(theta);
	        y = centerY + radius * Math.cos(theta);
	        var moveTo = Matrix.map([x, y, 1]);

	        graph.lineTo(moveTo[0], moveTo[1]);
	        if (i === 1) {
	          xpoints[0] = [moveTo[0], moveTo[1]];
	        }
	        if (i === 4) {
	          xpoints[1] = [moveTo[0], moveTo[1]];
	        }
	        if (i === 5) {
	          xpoints[2] = [moveTo[0], moveTo[1]];
	        }
	        if (i === 2) {
	          xpoints[3] = [moveTo[0], moveTo[1]];
	        }
	      }

	      graph.closePath();
	      graph.fill();
	      graph.stroke();

	      return xpoints;
	    }

	    service.drawAdvs = function (ctx, advs, zoom, tmpCtx) {
	      var img;
	      var start;
	      var end;
	      advs.forEach(function (instance) {
	        if (instance.htmlImg === null || instance.htmlImg === undefined) {
	          var htmlIMG = new Image();
	          var widthHeights = [instance.width, instance.height, 1];
	          var whs = Matrix.map(widthHeights);
	          instance.w = whs[0];
	          instance.h = whs[1];

	          if ($state.current.name === 'build') {
	            htmlIMG.src = 'public/advImages/' + instance.id + '/' + instance.imgS;
	          } else {
	            if (instance.width > 5) {
	              htmlIMG.src = 'public/advImages/' + instance.id + '/' + instance.imgL;
	            } else {
	              htmlIMG.src = 'public/advImages/' + instance.id + '/' + instance.imgM;
	            }
	          }
	          instance.htmlImg = htmlIMG;
	          instance.adRatio = instance.width / instance.height;
	          instance.htmlImg.onload = function () {
	            instance.naturalImageRatio = instance.htmlImg.naturalWidth / instance.htmlImg.naturalHeight;
	          };
	        }
	        if (instance.img === 'sponsorshipavailable.png' && !instance.sponsorshipInterest) {

	          start = [instance.locX - 0.55, instance.locY + 0.55, 1];
	          end = [start[0] + instance.width + 0.05, start[1] - instance.height - 0.05, 1];

	          start = Matrix.map(start);
	          end = Matrix.map(end);

	          var cirx = (end[0] - start[0]) / 2 + start[0];

	          var ciry = (end[1] - start[1]) / 2 + start[1];

	          //var r1 = Math.min((end[0] - start[0]), (end[1] - start[1]));
	          var r2 = Math.max(end[0] - start[0], end[1] - start[1]);

	          var grd = ctx.createRadialGradient(cirx, ciry, 2, cirx, ciry, r2 / 2);
	          grd.addColorStop(0, '#8ED6FF');
	          grd.addColorStop(1, '#004CB3');

	          ctx.fillStyle = grd;
	          ctx.fillRect(start[0], start[1], end[0] - start[0], end[1] - start[1]);
	          img = document.getElementById('advImgAvailable');

	          var cenx = (end[0] - start[0]) / 2 + start[0];

	          var ceny = (end[1] - start[1]) / 2 + start[1];

	          var r = Math.min(end[0] - start[0], end[1] - start[1]);

	          ctx.drawImage(img, cenx - r / 2, ceny - r / 2, r, r);
	        } else if (instance.sponsorshipInterest) {
	          start = [instance.locX - 0.55, instance.locY + 0.55, 1];
	          end = [start[0] + instance.width + 0.05, start[1] - instance.height - 0.05, 1];

	          start = Matrix.map(start);
	          end = Matrix.map(end);

	          var cirx = (end[0] - start[0]) / 2 + start[0];

	          var ciry = (end[1] - start[1]) / 2 + start[1];

	          //var r1 = Math.min((end[0] - start[0]), (end[1] - start[1]));
	          var r2 = Math.max(end[0] - start[0], end[1] - start[1]);

	          var grd = ctx.createRadialGradient(cirx, ciry, 2, cirx, ciry, r2 / 2);
	          grd.addColorStop(0, '#8ED6FF');
	          grd.addColorStop(1, '#ffbf80');

	          ctx.fillStyle = grd;
	          ctx.fillRect(start[0], start[1], end[0] - start[0], end[1] - start[1]);
	          img = document.getElementById('advImgInterest');

	          var cenx = (end[0] - start[0]) / 2 + start[0];

	          var ceny = (end[1] - start[1]) / 2 + start[1];

	          var r = Math.min(end[0] - start[0], end[1] - start[1]);

	          ctx.drawImage(img, cenx - r / 2, ceny - r / 2, r, r);
	        } else {

	          switch (instance.aspect) {

	            case 0:
	              //Stretch
	              start = [instance.locX - 0.45, instance.locY + 0.45, 1];
	              end = [start[0] + instance.width - 0.1, start[1] - instance.height + 0.1, 1];
	              start = Matrix.map(start);
	              end = Matrix.map(end);
	              ctx.drawImage(instance.htmlImg, start[0], start[1], end[0] - start[0], end[1] - start[1]);
	              break;
	            case 1:
	              //Fit

	              if (instance.naturalImageRatio) {
	                if (instance.adRatio <= instance.naturalImageRatio) {
	                  //Flat
	                  var dy = (instance.height - instance.width / instance.naturalImageRatio) / 2;

	                  start = [instance.locX - 0.45, instance.locY + 0.45 - dy, 1];
	                  end = [start[0] + instance.width - 0.1, start[1] - instance.width / instance.naturalImageRatio + 0.1, 1];
	                  start = Matrix.map(start);
	                  end = Matrix.map(end);

	                  ctx.drawImage(instance.htmlImg, start[0], start[1], end[0] - start[0], end[1] - start[1]);
	                } else {
	                  // Tall
	                  var dx = (instance.width - instance.height * instance.naturalImageRatio) / 2;

	                  start = [instance.locX - 0.45 + dx, instance.locY + 0.45, 1];
	                  end = [start[0] + instance.height * instance.naturalImageRatio - 0.1, start[1] - instance.height + 0.1, 1];
	                  start = Matrix.map(start);
	                  end = Matrix.map(end);

	                  ctx.drawImage(instance.htmlImg, start[0], start[1], end[0] - start[0], end[1] - start[1]);
	                }
	              }

	              break;
	            case 2:
	              //Fill
	              if (instance.naturalImageRatio) {

	                if (instance.adRatio <= instance.naturalImageRatio) {
	                  //Flat
	                  var dx = (instance.height * instance.naturalImageRatio - instance.width) / 2;

	                  start = [instance.locX - 0.45 - dx, instance.locY + 0.45, 1];
	                  end = [start[0] + instance.height * instance.naturalImageRatio + 0.1, start[1] - instance.height + 0.1, 1];
	                  start = Matrix.map(start);
	                  end = Matrix.map(end);

	                  tmpCtx.drawImage(instance.htmlImg, start[0], start[1], end[0] - start[0], end[1] - start[1]);

	                  start = [instance.locX - 0.45, instance.locY + 0.45, 1];
	                  end = [start[0] + instance.width - 0.1, start[1] - instance.height + 0.1, 1];
	                  start = Matrix.map(start);
	                  end = Matrix.map(end);

	                  var imgData = tmpCtx.getImageData(start[0], start[1], end[0] - start[0], end[1] - start[1]);
	                  ctx.putImageData(imgData, start[0], start[1]);
	                } else {
	                  //Tall
	                  var dy = (instance.width / instance.naturalImageRatio - instance.height) / 2;

	                  start = [instance.locX - 0.45, instance.locY + 0.45 + dy, 1];
	                  end = [start[0] + instance.width + 0.1, start[1] - instance.width / instance.naturalImageRatio + 0.1, 1];
	                  start = Matrix.map(start);
	                  end = Matrix.map(end);

	                  tmpCtx.drawImage(instance.htmlImg, start[0], start[1], end[0] - start[0], end[1] - start[1]);

	                  start = [instance.locX - 0.45, instance.locY + 0.45, 1];
	                  end = [start[0] + instance.width - 0.1, start[1] - instance.height + 0.1, 1];
	                  start = Matrix.map(start);
	                  end = Matrix.map(end);

	                  var imgData = tmpCtx.getImageData(start[0], start[1], end[0] - start[0], end[1] - start[1]);
	                  ctx.putImageData(imgData, start[0], start[1]);
	                }
	              }
	              break;
	            default:

	              start = [instance.locX - 0.55, instance.locY + 0.55, 1];
	              end = [start[0] + instance.width + 0.05, start[1] - instance.height - 0.05, 1];
	              start = Matrix.map(start);
	              end = Matrix.map(end);
	              ctx.drawImage(instance.htmlImg, start[0], start[1], end[0] - start[0], end[1] - start[1]);

	          }
	        }
	      });
	    };

	    service.drawXnum = function (graph, xnum) {

	      xnum.forEach(function (instance) {
	        // graph.beginPath();
	        graph.strokeStyle = 'rgba(255,0,0,1.0)';
	        graph.fillStyle = 'rgba(0,0,0,1.0)';
	        graph.lineWidth = 3;
	        graph.lineJoin = 'round';
	        graph.lineCap = 'round';
	        var xpoints = drawCircle(graph, instance.locX, instance.locY, 0.4, 25);
	        var xoPoints = [[instance.locX + 0.17, instance.locY + 0.17], [instance.locX - 0.17, instance.locY - 0.17], [instance.locX - 0.17, instance.locY + 0.17], [instance.locX + 0.17, instance.locY - 0.17]];

	        var xoPointsMapped = [Matrix.map([xoPoints[0][0], xoPoints[0][1], 1]), Matrix.map([xoPoints[1][0], xoPoints[1][1], 1]), Matrix.map([xoPoints[2][0], xoPoints[2][1], 1]), Matrix.map([xoPoints[3][0], xoPoints[3][1], 1])];

	        graph.beginPath();
	        graph.lineWidth = 12;
	        graph.moveTo(xoPointsMapped[0][0], xoPointsMapped[0][1]);
	        graph.lineTo(xoPointsMapped[1][0], xoPointsMapped[1][1]);
	        graph.moveTo(xoPointsMapped[2][0], xoPointsMapped[2][1]);
	        graph.lineTo(xoPointsMapped[3][0], xoPointsMapped[3][1]);
	        graph.stroke();

	        graph.beginPath();
	        graph.lineWidth = 8;
	        graph.strokeStyle = 'rgba(0,0,0,1.0)';
	        graph.moveTo(xoPointsMapped[0][0], xoPointsMapped[0][1]);
	        graph.lineTo(xoPointsMapped[1][0], xoPointsMapped[1][1]);
	        graph.moveTo(xoPointsMapped[2][0], xoPointsMapped[2][1]);
	        graph.lineTo(xoPointsMapped[3][0], xoPointsMapped[3][1]);
	        graph.stroke();
	      });
	    };

	    service.drawXbit = function (graph, xbit) {

	      xbit.forEach(function (instance) {
	        // graph.beginPath();
	        graph.strokeStyle = 'rgba(0,0,0,1.0)';
	        graph.lineJoin = 'round';
	        graph.lineCap = 'round';

	        graph.fillStyle = 'rgba(' + instance.colorR + ',' + instance.colorG + ',' + instance.colorB + ',' + instance.colorA + ')'; /// Randomize...
	        graph.lineWidth = 2;
	        var xpoints = drawCircle(graph, instance.locX, instance.locY, 0.25, 7);
	        var xoPoints = [[instance.locX + 0.1, instance.locY + 0.1], [instance.locX - 0.1, instance.locY - 0.1], [instance.locX - 0.1, instance.locY + 0.1], [instance.locX + 0.1, instance.locY - 0.1]];

	        var xoPointsMapped = [Matrix.map([xoPoints[0][0], xoPoints[0][1], 1]), Matrix.map([xoPoints[1][0], xoPoints[1][1], 1]), Matrix.map([xoPoints[2][0], xoPoints[2][1], 1]), Matrix.map([xoPoints[3][0], xoPoints[3][1], 1])];

	        graph.beginPath();
	        graph.lineWidth = 5;
	        graph.moveTo(xoPointsMapped[0][0], xoPointsMapped[0][1]);
	        graph.lineTo(xoPointsMapped[1][0], xoPointsMapped[1][1]);
	        graph.moveTo(xoPointsMapped[2][0], xoPointsMapped[2][1]);
	        graph.lineTo(xoPointsMapped[3][0], xoPointsMapped[3][1]);
	        graph.stroke();
	      });
	    };

	    service.flagReadoutImgs = [{}, {}, {}, {}];
	    function fillFlagReadoutImgObjs(id) {

	      if (service.flagReadoutImgs[id].htmlImg === null || service.flagReadoutImgs[id].htmlImg === undefined) {
	        var htmlIMG = new Image();
	        switch (id) {
	          case 0:
	            htmlIMG.src = 'public/img/noflagsV.png';

	            break;
	          case 1:
	            htmlIMG.src = 'public/img/1flagV.png';
	            break;
	          case 2:
	            htmlIMG.src = 'public/img/2flagsV.png';
	            break;
	          case 3:
	            htmlIMG.src = 'public/img/all3flagsV.png';
	            break;
	          default:
	            htmlIMG.src = 'public/img/noflagsV.png';
	            break;
	        }

	        service.flagReadoutImgs[id].htmlImg = htmlIMG;
	      }
	    }

	    service.draXflags = function (graph, xflags) {

	      xflags.forEach(function (instance) {

	        graph.strokeStyle = 'rgba(0,0,0,1.0)';
	        graph.lineJoin = 'round';
	        graph.lineCap = 'round';
	        graph.lineWidth = 2;
	        graph.fillStyle = 'rgba(255, 0,0, 1.0)';

	        var xst = instance.x;
	        var yst = instance.y;

	        var xoFlagPoints = [[xst - 0.3, yst + 0.25], [xst + 0.2, yst + 0.25], [xst + 0.45, yst], [xst + 0.20, yst - 0.25], [xst - 0.30, yst - 0.25]];

	        var xoFlagPointsMapped = [Matrix.map([xoFlagPoints[0][0], xoFlagPoints[0][1], 1]), Matrix.map([xoFlagPoints[1][0], xoFlagPoints[1][1], 1]), Matrix.map([xoFlagPoints[2][0], xoFlagPoints[2][1], 1]), Matrix.map([xoFlagPoints[3][0], xoFlagPoints[3][1], 1]), Matrix.map([xoFlagPoints[4][0], xoFlagPoints[4][1], 1])];

	        graph.beginPath();
	        graph.moveTo(xoFlagPointsMapped[0][0], xoFlagPointsMapped[0][1]);
	        graph.lineTo(xoFlagPointsMapped[1][0], xoFlagPointsMapped[1][1]);
	        graph.lineTo(xoFlagPointsMapped[2][0], xoFlagPointsMapped[2][1]);
	        graph.lineTo(xoFlagPointsMapped[3][0], xoFlagPointsMapped[3][1]);
	        graph.lineTo(xoFlagPointsMapped[4][0], xoFlagPointsMapped[4][1]);
	        graph.closePath();
	        graph.stroke();
	        graph.fill();

	        var xoFlagPoints = [[xst + 0.20, yst + 0.25], [xst - 0.30, yst - 0.25], [xst - 0.30, yst + 0.25], [xst + 0.20, yst - 0.25]];

	        var xoFlagPointsMapped = [Matrix.map([xoFlagPoints[0][0], xoFlagPoints[0][1], 1]), Matrix.map([xoFlagPoints[1][0], xoFlagPoints[1][1], 1]), Matrix.map([xoFlagPoints[2][0], xoFlagPoints[2][1], 1]), Matrix.map([xoFlagPoints[3][0], xoFlagPoints[3][1], 1])];

	        graph.beginPath();
	        graph.moveTo(xoFlagPointsMapped[0][0], xoFlagPointsMapped[0][1]);
	        graph.lineTo(xoFlagPointsMapped[1][0], xoFlagPointsMapped[1][1]);
	        graph.moveTo(xoFlagPointsMapped[2][0], xoFlagPointsMapped[2][1]);
	        graph.lineTo(xoFlagPointsMapped[3][0], xoFlagPointsMapped[3][1]);
	        graph.stroke();
	      });
	    };

	    service.drawCaptureFlagsReadout = function (graph, numFlags) {

	      if (numFlags >= 0 && numFlags <= 3) {
	        fillFlagReadoutImgObjs(numFlags);
	        graph.drawImage(service.flagReadoutImgs[numFlags].htmlImg, Global.screenWidth - 40, Global.screenHeight - 150, 40, 90);
	      }
	    };

	    return service;
	  }]);
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	//Global Variables Service

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.service = function () {

	    angular.module('Services').factory('Cart', ['$http', '$q', '$localStorage', 'Global', 'User', function ($http, $q, $localStorage, Global, User) {

	        //----------------------------------------------------------------
	        // shopping cart
	        //
	        var service = {};

	        function cartItem(id, sku, name, price, quantity, options) {
	            console.log('CartItem Object');
	            this.id = id;
	            this.sku = sku;
	            this.name = name;
	            this.price = price * 1;
	            this.quantity = quantity * 1;
	            this.options = options;
	            console.log(this);
	        }

	        var AdvItem = function () {
	            function AdvItem(advId, locX, locY, width, height, mapId) {
	                _classCallCheck(this, AdvItem);

	                this.advId = advId;
	                this.locX = locX;
	                this.locY = locY;
	                this.width = width;
	                this.height = height;
	                this.aspect = 0;
	                this.img = "sponsorshipavailable.png";
	                this.active = true;
	                this.available = true;
	                this.mapId = mapId;
	                this.link = '';
	                this.hasLink = false;
	                this.rate = 0.1;
	                this.runTime = 14;
	            }

	            _createClass(AdvItem, [{
	                key: 'calculateCost',
	                value: function calculateCost() {
	                    if (this.hasLink) {
	                        return 2 * this.runTime * this.area * this.rate;
	                    } else {
	                        return this.runTime * this.area * this.rate;
	                    }
	                }
	            }, {
	                key: 'area',
	                get: function get() {
	                    return this.width * this.height;
	                }
	            }]);

	            return AdvItem;
	        }();

	        function checkoutParameters(serviceName, merchantID, options) {
	            this.serviceName = serviceName;
	            this.merchantID = merchantID;
	            this.options = options;
	        }

	        var ShoppingCart = function () {
	            function ShoppingCart() {
	                _classCallCheck(this, ShoppingCart);

	                console.log('Cart CONSTRUCTOR');
	                console.log('Cart');
	                console.log('User Obj..');
	                console.log(User);
	                this.cartName = 'XONUMIA CART';
	                this.cartId = '';
	                this.clearCart = false;
	                this.checkoutParameters = {};
	                this.items = [];
	                this.adv = [];
	                this.codeApplied = false;
	                this.discount = 1;
	                this.discountCode = '';
	                this.iswholesale = false;
	                this.ispickup = false;
	                this.isoutofState = false;
	                this.coinbaseVerificationCode = '';
	                $localStorage.cart = {};

	                $localStorage.cart.items = [];
	                // load items from local storage when initializing

	                // save items to local storage when unloading
	            }

	            _createClass(ShoppingCart, [{
	                key: 'getCartId',
	                value: function getCartId() {
	                    this.cartId = 'XO-CART-' + User.id;
	                    return this.cartId;
	                }
	            }, {
	                key: 'loadItems',
	                value: function loadItems() {
	                    console.log('LocalStorage on load Items');
	                    console.log($localStorage);
	                    this.items = $localStorage.cart.items !== null && $localStorage.cart.items.length > 0 ? $localStorage.cart.items : [];
	                    this.adv = $localStorage.cart.adv !== null ? $localStorage.cart.adv : {};

	                    console.log('This.items..', this.items, _typeof(this.items));
	                }
	            }, {
	                key: 'saveItems',
	                value: function saveItems() {
	                    console.log(this.items);
	                    console.log('save Items local Storage ');
	                    console.log($localStorage);
	                    $localStorage.cart = {};
	                    $localStorage.cart.items = this.items;
	                    $localStorage.cart.adv = this.adv;
	                }
	            }, {
	                key: 'addAdv',
	                value: function addAdv(advId, locX, locY, width, height, mapId) {
	                    var adv = new AdvItem(advId, locX, locY, width, height, mapId);
	                    console.log("nEw AdvItem..");
	                    console.log(adv);
	                    this.adv = adv;
	                }
	            }, {
	                key: 'removeAdv',
	                value: function removeAdv() {
	                    this.adv = [];
	                }
	            }, {
	                key: 'addItem',
	                value: function addItem(id, sku, name, price, quantity, options) {

	                    var qty = parseInt(quantity);
	                    console.log('qty', quantity);

	                    console.log(qty);
	                    var item;
	                    if (qty !== 0) {

	                        // update quantity for existing item
	                        var found = false;
	                        for (var i = 0; i < this.items.length && !found; i++) {
	                            item = this.items[i];

	                            if (item.sku == sku && JSON.stringify(item.options) === JSON.stringify(options)) {
	                                found = true;

	                                item.quantity = parseInt(item.quantity);

	                                item.quantity = item.quantity + qty;
	                                if (item.quantity <= 0) {
	                                    this.items.splice(i, 1);
	                                }
	                            }
	                        }

	                        // new item, add now
	                        if (!found) {
	                            item = new cartItem(id, sku, name, price, qty, options);
	                            console.log("nEw Item..");
	                            console.log(item);
	                            this.items.push(item);
	                            console.log(this.items);
	                        }

	                        // save changes
	                        this.saveItems();

	                        // if($(e.target).attr('data-cart') !== 'plusUp' && $(e.target).attr('data-cart') !== 'minusDown'){
	                        // $(e.target).html('Added');
	                        // setTimeout(function(){
	                        // $(e.target).html('Add to Cart');
	                        // },1000);
	                        // }
	                    }
	                }
	            }, {
	                key: 'getTotalItemsOnlyPrice',
	                value: function getTotalItemsOnlyPrice() {
	                    var total = 0;
	                    for (var i = 0; i < this.items.length; i++) {
	                        var item = this.items[i];
	                        if (item.sku !== null) {
	                            total += item.quantity * item.price;
	                        }
	                    }

	                    if (this.discount < 1.0) {
	                        total = total * this.discount;
	                    }

	                    return parseFloat(total);
	                }
	            }, {
	                key: 'getTax',
	                value: function getTax() {
	                    if (!this.iswholesale) {

	                        if (this.isoutofState) {
	                            return 0.00;
	                        } else {
	                            return parseFloat(this.getTotalItemsOnlyPrice() * 0.04);
	                        }
	                    } else {
	                        return 0.00;
	                    }
	                }
	            }, {
	                key: 'getShipping',
	                value: function getShipping() {

	                    var total = 0;

	                    if (!this.iswholesale || !this.ispickup) {

	                        for (var i = 0; i < this.items.length; i++) {
	                            var item = this.items[i];
	                            if (item.sku !== null) {
	                                if (item.sku === 'XO1' || item.sku === 'XO2' || item.sku === 'XO3') {
	                                    total += 0.01 * item.quantity + 0.1;
	                                } else {
	                                    total += 0.01 * item.quantity + 0.1;
	                                }
	                            }
	                        }
	                    }
	                    return parseFloat(total);
	                }
	            }, {
	                key: 'getHandling',
	                value: function getHandling() {
	                    return parseFloat(0.00);
	                }
	            }, {
	                key: 'getShippingAndHandling',
	                value: function getShippingAndHandling() {
	                    var total = this.getHandling() + this.getShipping();
	                    return total;
	                }
	            }, {
	                key: 'getTotalPrice',
	                value: function getTotalPrice() {
	                    var total = 0;
	                    for (var i = 0; i < this.items.length; i++) {
	                        var item = this.items[i];
	                        if (item.sku !== null) {
	                            total += item.quantity * item.price;
	                        }
	                    }
	                    if (this.adv.advId > 0) {
	                        total = total + this.adv.calculateCost(this.adv.height * this.adv.width);
	                    }
	                    if (this.discount < 1.0) {
	                        total = total * this.discount;
	                    }

	                    return parseFloat(total);
	                }
	            }, {
	                key: 'getTotalTotal',
	                value: function getTotalTotal() {
	                    var total = this.getTotalPrice() + this.getShipping() + this.getTax();
	                    return total;
	                }
	            }, {
	                key: 'getTotalCount',
	                value: function getTotalCount() {
	                    var count = 0;
	                    for (var i = 0; i < this.items.length; i++) {
	                        var item = this.items[i];
	                        if (item.sku !== null) {
	                            count += item.quantity;
	                        }
	                    }
	                    if (this.adv.advId > 0) {
	                        count += 1;
	                    }

	                    return count;
	                }
	            }, {
	                key: 'clearItems',
	                value: function clearItems() {
	                    this.items = [];
	                    this.adv = [];
	                    this.saveItems();
	                }
	            }, {
	                key: 'addCheckoutParameters',
	                value: function addCheckoutParameters(serviceName, merchantID, options) {

	                    // check parameters
	                    if (serviceName !== "PayPal" && serviceName !== "Google") {
	                        throw "serviceName must be 'PayPal' or 'Google'.";
	                    }
	                    if (merchantID === null) {
	                        throw "A merchantID is required in order to checkout.";
	                    }

	                    // save parameters
	                    this.checkoutParameters[serviceName] = new checkoutParameters(serviceName, merchantID, options);
	                }
	            }, {
	                key: 'checkout',
	                value: function checkout(serviceName) {

	                    // select serviceName if we have to
	                    if (serviceName === null) {
	                        var p = this.checkoutParameters[Object.keys(this.checkoutParameters)[0]];
	                        serviceName = p.serviceName;
	                    }

	                    // sanity
	                    if (serviceName === null) {
	                        throw "Use the 'addCheckoutParameters' method to define at least one checkout service.";
	                    }

	                    // go to work
	                    var parms = this.checkoutParameters[serviceName];
	                    if (parms === null) {
	                        throw "Cannot get checkout parameters for '" + serviceName + "'.";
	                    }
	                    switch (parms.serviceName) {
	                        case "PayPal":
	                            this.checkoutPayPal(parms);
	                            break;
	                        case "Google":
	                            this.checkoutGoogle(parms);
	                            break;
	                        default:
	                            throw "Unknown checkout service: " + parms.serviceName;
	                    }
	                }

	                // // check out using PayPal
	                // // for details see:
	                // // www.paypal.com/cgi-bin/webscr?cmd=p/pdn/howto_checkout-outside

	            }, {
	                key: 'checkoutPayPal',
	                value: function checkoutPayPal(parms) {
	                    debugger;
	                    // global data
	                    var data = {
	                        cmd: "_cart",
	                        business: parms.merchantID,
	                        upload: "1"
	                    };

	                    console.log(data);
	                    console.log('Params ');
	                    console.log(parms);
	                    //<form action="https://www.sandbox.paypal.com/cgi-bin/webscr" method="post" target="_top">
	                    //<input type="hidden" name="cmd" value="_s-xclick">
	                    //<input type="hidden" name="hosted_button_id" value="ZGYAYTSM4SJ9L">
	                    //<input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_buynowCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
	                    //<img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
	                    //</form>

	                    if (window.location.host === 'localhost:3000') {
	                        data["return"] = 'http://' + window.location.host + '/paypalpaymentsuccess';
	                        data["cancel_return"] = 'http://' + window.location.host + '/store';
	                    } else if (window.location.hostname.substring(0, 3) === 'ec2') {
	                        data["return"] = 'https://ec2-35-164-131-142.us-west-2.compute.amazonaws.com/paypalpaymentsuccess';
	                        data["cancel_return"] = 'https://ec2-35-164-131-142.us-west-2.compute.amazonaws.com/store';
	                    } else {

	                        data["return"] = 'https://xonumia.io/paypalpaymentsuccess';
	                        data["cancel_return"] = 'https://xonumia.io/store';
	                    }

	                    data["cs"] = "#ff0000";
	                    data["cancel_return"] = 'https://ec2-35-164-131-142.us-west-2.compute.amazonaws.com/store';

	                    var ctr = 0;
	                    // item data
	                    for (var i = 0; i < this.items.length; i++) {
	                        var item = this.items[i];
	                        console.log(item);
	                        ctr = i + 1;
	                        data["item_number_" + ctr] = item.sku;
	                        data["item_name_" + ctr] = item.name;
	                        data["quantity_" + ctr] = item.quantity;

	                        if (this.discount < 1.0) {
	                            data["amount_" + ctr] = (item.price * this.discount).toFixed(2);
	                        } else {
	                            data["amount_" + ctr] = item.price.toFixed(2);
	                        }

	                        if (this.discountCode !== 'FREESHIP') {
	                            if (item.sku === 'PCW-00-9999' || item.sku === 'PCW-00-3001' || item.sku === 'PCW-00-3002') {
	                                data["shipping_" + ctr] = 7.00;
	                            } else {
	                                data["shipping_" + ctr] = 8.00;
	                            }
	                            data["shipping2_" + ctr] = 1.00;
	                        }
	                        data["handiling_" + ctr] = 0.0;
	                        if (this.iswholesale) {
	                            data["tax_" + ctr] = 0.00;
	                        } else {
	                            if (this.discount < 1.0) {
	                                data["tax_" + ctr] = (0.04 * item.price * this.discount).toFixed(2);
	                            } else {
	                                data["tax_" + ctr] = (0.04 * item.price).toFixed(2);
	                            }
	                        }
	                        var j = 0;
	                        for (var k in item.options) {
	                            console.log(item.options);
	                            data["on" + j + "_" + ctr] = item.options[k][0];
	                            j++;
	                        }
	                    }

	                    if (this.adv.advId > 0) {
	                        ctr += 1;
	                        var advId = this.adv.advId;
	                        console.log(advId);

	                        data["item_number_" + ctr] = advId;
	                        data["item_name_" + ctr] = 'adv';
	                        data["quantity_" + ctr] = 1;

	                        if (this.discount < 1.0) {
	                            data["amount_" + ctr] = (this.adv.calculateCost() * this.discount).toFixed(2);
	                        } else {
	                            data["amount_" + ctr] = this.adv.calculateCost().toFixed(2);
	                        }

	                        data["shipping_" + ctr] = 0.00;
	                        data["shipping2_" + ctr] = 0.00;

	                        data["handiling_" + ctr] = 0.00;
	                    }

	                    console.log(data);
	                    // build form
	                    var form = $('<form/></form>');
	                    form.attr("action", "https://www.sandbox.paypal.com/cgi-bin/webscr");
	                    form.attr("method", "POST");
	                    form.attr("style", "display:none;");
	                    this.addFormFields(form, data);
	                    //this.addFormFields(form, parms.options);
	                    $("body").append(form);

	                    // submit form
	                    // this.clearCart = clearCart == null || clearCart;
	                    console.log($(form));
	                    form.submit();
	                    form.remove();
	                }
	            }, {
	                key: 'addFormFields',
	                value: function addFormFields(form, data) {
	                    if (data !== null) {
	                        $.each(data, function (name, value) {
	                            if (value !== null) {
	                                var input = $("<input></input>").attr("type", "hidden").attr("name", name).val(value);
	                                form.append(input);
	                            }
	                        });
	                    }
	                }
	            }, {
	                key: 'toNumber',
	                value: function toNumber(value) {
	                    value = value * 1;
	                    return isNaN(value) ? 0 : value;
	                }
	            }, {
	                key: 'describe',
	                value: function describe() {
	                    console.log('THIS IS A SHOPPING CART');
	                }
	            }, {
	                key: 'setCoinBaseVerificationCode',
	                value: function setCoinBaseVerificationCode(verification_code) {
	                    console.log('SeT Cart verification_code Code');
	                    console.log(verification_code);

	                    this.coinbaseVerificationCode = verification_code;
	                }
	            }, {
	                key: 'coinbasegitbuttonObject',
	                value: function coinbasegitbuttonObject() {

	                    var cartDescript = "";

	                    var items = [];
	                    for (var i = 0; i < this.items.length; i++) {
	                        items.push({
	                            "name": this.items[i].name,
	                            "sku": this.items[i].sku,
	                            "price": this.items[i].price.toFixed(2),
	                            "currency": "USD",
	                            "quantity": this.items[i].quantity
	                        });
	                        cartDescript += this.items[i].name + "-  $" + this.items[i].price.toFixed(2) + " - qty: " + this.items[i].quantity + '\n';
	                    }
	                    if (this.adv.advId > 0) {
	                        items.push({
	                            "name": "adv_" + this.adv.advId,
	                            "sku": "XO_ADV_" + this.adv.advId,
	                            "price": this.adv.calculateCost().toFixed(2),
	                            "currency": "USD",
	                            "quantity": 1
	                        });

	                        cartDescript += "XO_ADV_" + this.adv.advId + "-  $" + this.adv.calculateCost().toFixed(2) + '\n';
	                    }

	                    var coinButtonObj = {};
	                    coinButtonObj.json = {
	                        "amount": this.getTotalTotal().toFixed(2),
	                        "currency": "USD",
	                        "type": "order",
	                        "name": "Xonumia Order: " + this.getCartId(),
	                        "description": cartDescript,
	                        "success_url": "https://xonumia.io",
	                        "cancel_url": "https://xonumia.io",
	                        "info_url": "https://xonumia.io",
	                        "auto_redirect": false,
	                        "collect_shipping_address": this.items.length > 0,
	                        "metadata": {
	                            "verificationCode": this.coinbaseVerificationCode,
	                            "items": JSON.stringify(items),
	                            "currency": "USD",
	                            "total": this.getTotalTotal().toFixed(2),
	                            "subtotal": this.getTotalPrice().toFixed(2),
	                            "tax": this.getTax().toFixed(2),
	                            "shipping": this.getShipping().toFixed(2),
	                            "handling_fee": this.getHandling().toFixed(2)

	                        }
	                    };

	                    return coinButtonObj;
	                }
	            }, {
	                key: 'getPaypalTransactionObject',
	                value: function getPaypalTransactionObject() {

	                    var items = [];
	                    for (var i = 0; i < this.items.length; i++) {
	                        items.push({
	                            "name": this.items[i].name,
	                            "sku": this.items[i].sku,
	                            "price": this.items[i].price.toFixed(2),
	                            "currency": "USD",
	                            "quantity": this.items[i].quantity
	                        });
	                    }
	                    if (this.adv.advId > 0) {
	                        items.push({
	                            "name": "adv_" + this.adv.advId,
	                            "sku": "XO_ADV_" + this.adv.advId,
	                            "price": this.adv.calculateCost().toFixed(2),
	                            "currency": "USD",
	                            "quantity": 1
	                        });
	                    }

	                    console.log('getPaypaltransObject This ');
	                    console.log(this);
	                    var paypalTransObject = {
	                        "intent": "sale",
	                        "payer": {
	                            "payment_method": "paypal"
	                        },
	                        "redirect_urls": {
	                            "return_url": "https://xonumia.io",
	                            "cancel_url": "https://xonumia.io"
	                        },
	                        "transactions": [{
	                            "item_list": {
	                                "items": items
	                            },
	                            "amount": {
	                                "currency": "USD",
	                                "total": this.getTotalTotal().toFixed(2),
	                                "details": {
	                                    "subtotal": this.getTotalPrice().toFixed(2),
	                                    "tax": this.getTax().toFixed(2),
	                                    "shipping": this.getShipping().toFixed(2),
	                                    "handling_fee": this.getHandling().toFixed(2)
	                                }

	                            },
	                            "description": "Payment to Xonumia."
	                        }]
	                    };
	                    console.log(paypalTransObject);
	                    return paypalTransObject;
	                }
	            }, {
	                key: 'printTransaction',
	                value: function printTransaction() {
	                    var receipt = {};
	                    receipt.total = this.getTotalTotal().toFixed(2);
	                    receipt.details = {
	                        "subtotal": this.getTotalPrice().toFixed(2),
	                        "tax": this.getTax().toFixed(2),
	                        "shipping": this.getShipping().toFixed(2),
	                        "handling_fee": this.getHandling().toFixed(2)
	                    };

	                    var items = [];
	                    for (var i = 0; i < this.items.length; i++) {
	                        items.push({
	                            "name": this.items[i].name,
	                            "sku": this.items[i].sku,
	                            "price": this.items[i].price.toFixed(2),
	                            "currency": "USD",
	                            "quantity": this.items[i].quantity
	                        });
	                    }
	                    receipt.hasAdv = false;

	                    if (this.adv.advId > 0) {
	                        receipt.hasAdv = true;
	                        items.push({
	                            "name": "adv_" + this.adv.advId,
	                            "sku": "XO_ADV_" + this.adv.advId,
	                            "price": this.adv.calculateCost().toFixed(2),
	                            "currency": "USD",
	                            "quantity": 1
	                        });
	                    }

	                    if (receipt.hasAdv) {
	                        receipt.adv = {};
	                        receipt.adv.userId = User.id;
	                        receipt.adv.advId = this.adv.advId;
	                        receipt.adv.amount = this.adv.calculateCost().toFixed(2);
	                        receipt.adv.method = 0;
	                        receipt.adv.status = 0;
	                        receipt.adv.transId = '';

	                        if (this.coinbaseVerificationCode !== '') {
	                            receipt.adv.verificationCode = this.coinbaseVerificationCode;
	                        } else {
	                            receipt.adv.verificationCode = '';
	                        }
	                    }

	                    receipt.items = items;

	                    return receipt;
	                }
	            }]);

	            return ShoppingCart;
	        }();

	        service = new ShoppingCart();
	        service.addCheckoutParameters("PayPal", "travis.g-facilitator@paradigmmotion.com");

	        return service;
	    }]);
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	//Global Variables Service

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.service = function () {
	  'use strict';

	  angular.module('Services').factory('Merch', ['$http', '$q', 'User', function ($http, $q, User) {

	    var service = {};

	    service.getStore = function () {
	      var defered = $q.defer();

	      var getStoreXhrCallConfig = {
	        method: 'GET',
	        url: 'api/v1/merch',
	        //params: null,
	        //data: loginData,
	        headers: { auth: User.token },
	        //eventHandlers: {},
	        //uploadEventHandlers: {},
	        //xsrfHeaderName: '',
	        //xsrfCookieName: '',
	        //transformRequest: function(data, headersGetter) {},
	        //tranformResponse: function(data, headersGetter, status){},
	        //paramSerializer: '',
	        //cache: false,
	        //timeout: null,
	        //withCredentials: false,
	        responseType: "json"
	      };

	      $http(getStoreXhrCallConfig).then(function (resp) {

	        defered.resolve(resp.data);
	      }, function (err) {

	        defered.reject(err);
	      });

	      return defered.promise;
	    };

	    service.getProduct = function (id) {
	      var defered = $q.defer();

	      var getStoreXhrCallConfig = {
	        method: 'GET',
	        url: 'api/v1/merch/' + id,
	        //params: null,
	        //data: loginData,
	        headers: { auth: User.token },
	        //eventHandlers: {},
	        //uploadEventHandlers: {},
	        //xsrfHeaderName: '',
	        //xsrfCookieName: '',
	        //transformRequest: function(data, headersGetter) {},
	        //tranformResponse: function(data, headersGetter, status){},
	        //paramSerializer: '',
	        //cache: false,
	        //timeout: null,
	        //withCredentials: false,
	        responseType: "json"
	      };

	      $http(getStoreXhrCallConfig).then(function (resp) {

	        defered.resolve(resp.data[0]);
	      }, function (err) {

	        defered.reject(err);
	      });

	      return defered.promise;
	    };

	    return service;
	  }]);
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	//Global Variables Service

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.service = function () {
	  'use strict';

	  angular.module('Services').factory('Sponsorship', ['$http', '$q', 'User', function ($http, $q, User) {

	    var service = {};

	    service.getStore = function () {
	      var defered = $q.defer();

	      var getSponsorshipsXhrCallConfig = {
	        method: 'GET',
	        url: '/api/v1/adv',
	        //params: null,
	        //data: loginData,
	        headers: { auth: User.token },
	        //eventHandlers: {},
	        //uploadEventHandlers: {},
	        //xsrfHeaderName: '',
	        //xsrfCookieName: '',
	        //transformRequest: function(data, headersGetter) {},
	        //tranformResponse: function(data, headersGetter, status){},
	        //paramSerializer: '',
	        //cache: false,
	        //timeout: null,
	        //withCredentials: false,
	        responseType: "json"
	      };

	      $http(getSponsorshipsXhrCallConfig).then(function (resp) {

	        defered.resolve(resp.data);
	      }, function (err) {

	        defered.reject(err);
	      });

	      return defered.promise;
	    };

	    return service;
	  }]);
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	    'use strict';

	    angular.module('Controllers').controller('MainController', ['$scope', '$rootScope', 'User', 'Auth', '$state', 'Cart', function ($scope, $rootScope, User, Auth, $state, Cart) {
	        //console.log("LoginController");
	        //console.log(Global);
	        //console.log(User);
	        var self = this;

	        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams, options) {
	            console.log('StateChangeStart');
	            console.log(event);
	            console.log(toState);
	            console.log(toParams);
	            console.log(fromState);
	            console.log(fromParams);
	            console.log(options);
	            self.movileNavOpen = false;
	        });

	        User.isTokenValid();

	        self.user = User;

	        self.mobileNavOpen = false;
	        self.navClick = function () {

	            var x = document.getElementById("myTopnav");
	            if (self.movileNavOpen) {
	                self.movileNavOpen = false;
	            } else {
	                self.movileNavOpen = true;
	            }
	        };

	        self.mobileNaveClass = function () {
	            if (self.movileNavOpen) {
	                return { 'responsive': true };
	            } else {
	                return { 'responsive': false };
	            }
	        };

	        self.logout = function () {

	            User.logout(User.token);

	            $state.go('login');
	        };

	        self.isAdmin = false;

	        $scope.$on('UserLoggedIn', function () {
	            self.checkAdmin();
	            self.isLoggedIn = true;
	        });

	        $scope.$on('UserLoggedOut', function () {

	            self.isLoggedIn = false;
	            self.isAdmin = false;
	        });

	        self.checkAdmin = function () {
	            Auth.adminAuthenticate().then(function (resp) {
	                console.log("AUTH RESSP");
	                console.log(resp);
	                self.isAdmin = true;
	            }, function (err) {
	                console.log('Auth Error');
	                console.log('');
	                self.isAdmin = false;
	            });
	        };

	        self.checkAdmin();

	        self.cart = Cart;
	    }]);
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(21);

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	var io = __webpack_require__(22);
	var SAT = __webpack_require__(76);

	var VectCollision = SAT.Vector;
	var CircleCollision = SAT.Circle;

	var quadtree = __webpack_require__(78);

	var gameconfig = __webpack_require__(79);

	//var Canvas = require('../canvas');

	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('XonumiaController', ['$window', '$scope', 'loggedin', '$http', '$q', '$state', 'Global', 'User', 'Canvas', '$rootScope', '$timeout', 'Matrix', 'Levels', 'Draw', 'Cart', function ($window, $scope, loggedin, $http, $q, $state, Global, User, Canvas, $rootScope, $timeout, Matrix, Levels, Draw, Cart) {
	    //console.log("XonumiaController");

	    var self = this; //Controller THIS

	    if (!!$state.params.level) {
	      self.levelSelect = $state.params.level;
	    } else {
	      self.levelSelect = '1';
	    }

	    var socket;
	    var reason;

	    var player;
	    var playerSentMoves = [];

	    var timeNow = Date.now();
	    var lastTime = timeNow;
	    var dt = 0.02;
	    var moveId = 0;

	    var xnum = [];
	    var xbit = [];

	    var xflags = [];
	    var xflagsFound = 0;

	    var xnumClientCollision = [];
	    var xbitClientCollision = [];

	    var viruses = [];
	    var fireFood = [];
	    var users = [];
	    self.leaderboardXbits = [];
	    self.leaderboardXnums = [];
	    var target;

	    var visibleBorderSetting;
	    var showMassSetting;
	    var continuitySetting;
	    var roundFoodSetting;
	    var c;
	    var graph;

	    var cvstemp;
	    var tempCtx;

	    var restartButton;

	    var zoom = 100;
	    var cellCountInView;

	    var map = {};
	    map.tiles = [];
	    map.start = [];
	    map.finish = [];

	    var mapBuilds = [];
	    self.levels = [];

	    self.canSendMoveInputs = false;

	    self.levelSelectName = '';

	    self.showLeaderBoard = false;
	    self.showXbitLeaderBoard = false;

	    var loadgif = document.getElementById('loading');

	    Global.advs = [];
	    Global.playerFinishMapOnce = true;

	    __webpack_require__(80).method();

	    function startGame() {

	      if (!socket) {
	        socket = io({ query: "userId=" + User.id + "&level=" + self.levelSelect });
	        setupSocket(socket);
	      }
	      socket.emit('spawn', player);
	      window.canvas.socket = socket;
	      Global.socket = socket;
	    }

	    $('body').on('contextmenu', '#cvs', function (e) {
	      return false;
	    });

	    function initializeGame() {

	      Global.gameStart = false;
	      Global.playerFinishMapOnce = true;

	      loadgif.style.display = 'block';

	      socket = null;

	      player = {
	        id: -1,
	        userId: User.id,
	        x: 0.5,
	        y: 0.5,
	        screenWidth: Global.screenWidth,
	        screenHeight: Global.screenHeight,
	        target: { x: 0, y: 0 },
	        cellMoves: {
	          l: false,
	          u: false,
	          r: false,
	          d: false
	        },
	        level: self.levelSelect,
	        levelBounds: [],
	        playerConfig: {
	          border: 2,
	          textColor: '#FFFFFF',
	          textBorder: '#000000',
	          textBorderSize: 3,
	          defaultSize: 30,
	          bodyColorR: 255,
	          bodyColorG: 0,
	          bodyColorB: 0,
	          bodyColorA: 0.8,
	          borderColorR: 0,
	          borderColorG: 255,
	          borderColorB: 0,
	          borderColorA: 0.8
	        },
	        xnums: [],
	        xNumsVal: function xNumsVal() {
	          var value = 0;
	          for (var i = 0; i < player.xnums.length; i++) {
	            value = value + player.xnums[i].valDollar;
	          }
	          return Math.round(value, 2);
	        },
	        xnumsLength: 0,
	        xnumsVal: 0,
	        xbits: 0
	      };

	      player.maptree = quadtree(0, 0, 5, 5);

	      Global.player = player;

	      users = [];

	      //target = {x: 0, y: 0};
	      //Global.target = target;
	      //console.log(Global.target);

	      window.canvas = Canvas.getCanvas();

	      c = window.canvas.cv;

	      graph = c.getContext('2d');

	      Global.updateScreenDims();
	      setCellCount();

	      cvstemp = document.getElementById('cvsTempMemory');
	      tempCtx = cvstemp.getContext('2d');
	      cvstemp.width = Global.screenWidth;
	      cvstemp.height = Global.screenHeight;

	      Global.advs = [];
	      map.tiles = [];

	      Global.displayname = User.username;

	      getLevels().then(function (resp) {

	        console.log("GET LEVELS RESP");
	        console.log(resp);

	        startGame();
	      }, function (err) {
	        console.log('Get LEVELS Err');
	        console.log(err);
	      });

	      getAdvs();
	    }

	    function initLevelChange() {

	      Global.gameStart = false;
	      self.canSendMoveInputs = false;
	      Global.needNewGlobalMap = true;
	      Global.playerFinishMapOnce = true;
	      player.x = 0.5;

	      player.y = 0.5;
	      player.cellX = 0.5;
	      player.cellY = 0.5;
	      player.speed = 0;
	      Global.player = player;
	      window.canvas.target.x = 0;
	      window.canvas.target.y = 0;

	      users = [];

	      playerSentMoves = [];

	      Global.advs = [];
	      map.tiles = [];

	      getLevels().then(function (resp) {

	        startGame();
	      }, function (err) {
	        console.log('Get LEVELS Err');
	        console.log(err);
	      });
	      getAdvs();
	    }

	    function setMatrix() {

	      Matrix.reset();
	      if (Global.screenWidth > Global.screenHeight) {

	        Matrix.scale([1 / cellCountInView * (zoom / 100) * Global.screenHeight, -1 / cellCountInView * (zoom / 100) * Global.screenHeight, 1]); //Flips device coords to logical coors Y UP
	        Matrix.translate([0, Global.screenHeight, 0]); // Moves Draw COORDS down to bottom left of device

	        Global.screenCellsWidth = Global.screenWidth / Global.screenHeight * cellCountInView * (100 / zoom);
	        Global.screenCellsHeight = cellCountInView * (100 / zoom);
	      } else {

	        Matrix.scale([1 / cellCountInView * (zoom / 100) * Global.screenWidth, -1 / cellCountInView * (zoom / 100) * Global.screenWidth, 1]); //Flips device coords to logical coors Y UP
	        Matrix.translate([0, Global.screenWidth * (Global.screenHeight / Global.screenWidth), 0]); // Moves Draw COORDS down to bottom left of device

	        Global.screenCellsWidth = cellCountInView * (100 / zoom);
	        Global.screenCellsHeight = Global.screenWidth / Global.screenHeight * cellCountInView * (100 / zoom);
	      }

	      Matrix.translate([Global.screenWidth / 2, -Global.screenHeight / 2, 0]); //// Makes View Local Coordinates Center Screen
	      console.log('SETMATRIX PLAYER ', player);
	      var playerPos = Matrix.map([player.x, player.y, 1]);

	      console.log("PLAYRE POS ", playerPos);

	      playerPos = Matrix.map([player.x, player.y, 1]);
	      Matrix.translate([-playerPos[0] + Global.screenWidth / 2, Global.screenHeight / 2 - playerPos[1], 0]);

	      console.log('SETMATRIX PLAYER after Matrix map... ', player);
	      // Matrix.translate([-playerPos[0]/2, -playerPos[1]/2, 0]);   //Moves Screen to Offset Position

	    }

	    self.logout = function () {

	      Global.gameStart = false;

	      if (Global.animLoopHandle) {
	        window.cancelAnimationFrame(Global.animLoopHandle);
	        Global.animLoopHandle = undefined;
	      }
	      socket.emit('logout', player);

	      //window.canvas.reenviar = false;
	      socket.close();
	      User.logout(User.token);
	      $state.go('login');
	    };

	    self.refresh = function () {

	      socket.emit('resetPos');

	      window.canvas.target.x = 0;
	      window.canvas.target.y = 0;

	      initLevelChange();
	    };

	    self.openMapIntroModal = function () {
	      $('#mapIntroModal').modal({ backdrop: 'static', keyboard: false });
	      $('#mapIntroModal').modal('show');

	      Global.gameStart = false;
	    };

	    self.closeMapIntroDialog = function () {
	      if (self.mapStart) {
	        $('#mapIntroModal').modal('hide');
	        self.openMapStartInfoModal();
	      } else {
	        $('#mapIntroModal').modal('hide');
	        Global.gameStart = true;
	      }
	    };

	    self.openMapStartInfoModal = function () {
	      $('#mapStartModal').modal({ backdrop: 'static', keyboard: false });
	      $('#mapStartModal').modal('show');
	      Global.gameStart = false;
	    };

	    self.closeMapStartInfoDialog = function () {
	      $('#mapStartModal').modal('hide');
	      Global.gameStart = true;
	    };

	    self.openMapEndNoticeModal = function () {

	      if (Global.playerFinishedMap && Global.playerFinishMapOnce) {
	        console.log('OPEN ENd Notice Dialog');
	        $('#mapEndModal').modal({ backdrop: 'static', keyboard: false });
	        $('#mapEndModal').modal('show');
	        Global.playerFinishedMap = false;
	        Global.playerFinishMapOnce = false;
	      }
	    };

	    self.closeMapEndNoticeDialog = function () {
	      console.log("Close End Notice Dialog");
	      $('#mapEndModal').modal('hide');
	      $('#mapEndModal').on('hidden.bs.modal', function () {
	        Global.playerFinishedMap = false;
	        self.goto('dashboard');
	      });
	    };

	    function setupSocket(socket) {
	      // Handle ping.

	      socket.on('pongcheck', function () {

	        var latency = Date.now() - Global.startPingTime;
	        //console.log('Latency: ' + latency + 'ms');
	        // window.chat.addSystemLine('Ping: ' + latency + 'ms');
	      });

	      // Handle error.
	      socket.on('connect_failed', function () {
	        socket.close();
	        Global.disconnected = true;
	        //console.log('connection failed');
	      });

	      socket.on('disconnect', function () {
	        socket.close();
	        Global.disconnected = true;
	        //console.log('Disconnect..');
	      });

	      // Handle connection.
	      socket.on('welcome', function (playerServer) {
	        console.log("WELCOME ");
	        console.log(playerServer);

	        player.id = playerServer.id;
	        player.name = Global.displayname;
	        player.screenWidth = Global.screenWidth;
	        player.screenHeight = Global.screenHeight;
	        player.screenCellsWidth = Global.screenCellsWidth;
	        player.screenCellsHeight = Global.screenCellsHeight;
	        player.token = User.token;
	        player.target = window.canvas.target;
	        player.x = playerServer.x;
	        player.y = playerServer.y;
	        player.speed = playerServer.speed;
	        player.radius = playerServer.radius;
	        player.levelBounds = playerServer.levelBounds;
	        player.xnumsLength = playerServer.xnumlength;

	        player.xbits = playerServer.xbits;
	        Global.player = player;

	        socket.emit('gotit', player);
	        moveId = 0;

	        c.focus();
	      });

	      socket.on('startGame', function (data) {
	        Global.disconnected = false;
	        console.log('START GAME');
	        console.log(data);
	        self.levelSelect = data.level;
	        console.log('Set Level Select from Strat Game..');
	        console.log(self.levelSelect);
	        $scope.$apply();

	        map.tiles = data.map.tiles;
	        map.tiles.forEach(function (t) {
	          var ti = { x: t.locX, y: t.locY, w: 1, h: 1, gu: t.gu, gr: t.gr, gd: t.gd, gl: t.gl };
	          player.maptree.put(ti);
	        });
	        console.log('START GAME SELF');

	        self.mapIntro = data.map.mapIntro;
	        self.mapStart = data.map.startSquare;
	        self.mapEnd = data.map.endSquare;
	        console.log(self);

	        if (data.x !== '' && data.x !== undefined && data.x !== null) {
	          console.log("SETTING START CELL!");
	          console.log(data.map.startSquare);
	          console.log(data);
	          player.x = data.x;
	          player.y = data.y;
	          player.cellX = data.cellX;
	          player.cellY = data.cellY;
	        }
	        if (data.map.startXtile !== '' && data.map.startXtile !== undefined && data.map.startXtile !== null) {
	          map.start = [data.map.startXtile, data.map.startYtile];
	        }

	        if (data.map.finishXtile !== '' && data.map.finishXtile !== undefined && data.map.finishXtile !== null) {
	          map.finish = [data.map.finishXtile, data.map.finishYtile];
	        }

	        if (data.map.finishXtile !== '' && data.map.finishXtile !== undefined && data.map.finishXtile !== null && data.map.startXtile !== '' && data.map.startXtile !== undefined && data.map.startXtile !== null) {

	          xflagsCreate(data.levelBounds);

	          player.hasAllThreeFlags = data.hasAllThreeFlags;
	          console.log('Has All Three Flags !!??');
	          console.log(player.hasAllThreeFlags);
	        }

	        loadgif.style.display = 'none';

	        setMatrix();
	        $scope.$apply();
	        if (self.mapIntro) {
	          self.openMapIntroModal();
	        } else if (self.mapStart) {
	          self.openMapStartInfoModal();
	        } else {
	          Global.gameStart = true;
	        }

	        self.canSendMoveInputs = true;

	        if (!Global.animLoopHandle) {
	          animloop();
	        }
	        refreshLevelPulseVal();
	      });

	      socket.on('levelChangeWelcome', function (data) {
	        console.log('LevelChangeWelcome socketCallback');
	        console.log(data);
	        initLevelChange();
	      });

	      socket.on('playerDied', function (data) {
	        //console.log("Player Died");
	        //  window.chat.addSystemLine('{GAME} - <b>' + (data.name.length < 1 ? 'An unnamed cell' : data.name) + '</b> was eaten.');
	      });

	      socket.on('playerDisconnect', function (data) {
	        //console.log('PlayerDisconnect');

	        //  window.chat.addSystemLine('{GAME} - <b>' + (data.name.length < 1 ? 'An unnamed cell' : data.name) + '</b> disconnected.');
	      });

	      socket.on('leaderboardXbits', function (data) {
	        self.leaderboardXbits = data;
	        $scope.$apply();
	      });

	      socket.on('leaderboardXnums', function (data) {
	        self.leaderboardXnums = data;
	        $scope.$apply();
	      });

	      socket.on('serverMSG', function (data) {
	        // window.chat.addSystemLine(data);
	        //console.log('ServerMSG');
	        //console.log(data);
	      });

	      socket.on('setAdvHasInterest', function (data) {
	        console.log('SET ADV HAS INTERST');
	        console.log(data);

	        ///update advHasInterst
	        for (var i = 0; i < Global.advs.length; i++) {
	          if (Global.advs[i].id === data.advId) {
	            Global.advs[i].sponsorshipInterest = true;
	          }
	        }
	      });

	      // Handle movement.
	      socket.on('serverTellPlayerMove', function (userData, xnumList, xbitList) {

	        var playerData;
	        for (var i = 0; i < userData.length; i++) {
	          if (typeof userData[i].id === "undefined") {
	            playerData = userData.splice(i, 1)[0];
	            break;
	          }
	        }

	        if (playerData.foundFinish && Global.playerFinishMapOnce) {

	          ///finish Confirmed!///
	          Global.gameStart = false;
	          socket.emit('logout', player);
	          self.openMapEndNoticeModal();
	        }

	        player.playerConfig = playerData.playerConfig;
	        player.xnumsLength = playerData.xnumsLength;

	        player.xnumsVal = playerData.xnumsVal;
	        player.xbits = playerData.xbits;

	        player.levelBounds = playerData.levelBounds;

	        if (playerData.moreMapTiles) {

	          Global.needNewGlobalMap = true;

	          map.tiles = [];
	          map.tiles = playerData.newTiles;

	          player.maptree.clear();
	          map.tiles.forEach(function (t) {
	            var ti = { x: t.locX, y: t.locY, w: 1, h: 1, gu: t.gu, gr: t.gr, gd: t.gd, gl: t.gl };
	            player.maptree.put(ti);
	          });
	        }

	        var processedLength = playerData.processedMoves.length;

	        var sentmovesLength = playerSentMoves.length;

	        if (processedLength > 0 && sentmovesLength > 0) {

	          var AuthoritiveMove = playerData.processedMoves[processedLength - 1];

	          var moveIdDiff = AuthoritiveMove.moveId - playerSentMoves[0].moveId;

	          if (moveIdDiff >= 0) {

	            var q = 0;
	            while (moveIdDiff > 0 && q < 1000) {
	              playerSentMoves.splice(0, 1);
	              q++;
	              moveIdDiff = AuthoritiveMove.moveId - playerSentMoves[0].moveId;
	            }

	            var serverMatchesPrediction = false;
	            ////ShortCircuit Solution..

	            var stabilized = true;

	            if (playerSentMoves[0].moveId === AuthoritiveMove.moveId) {

	              if (Math.abs(playerSentMoves[0].clientPostMoveX - AuthoritiveMove.postMoveX) < 0.001 && Math.abs(playerSentMoves[0].clientPostMoveY - AuthoritiveMove.postMoveY) < 0.001) {

	                serverMatchesPrediction = true; /// Sweeet then no need for more reconciliation..

	              }

	              if (Math.abs(playerSentMoves[0].clientPostMoveX - AuthoritiveMove.postMoveX) > 1 || Math.abs(playerSentMoves[0].clientPostMoveY - AuthoritiveMove.postMoveY) > 1) {

	                //stabilized = false;
	              }
	            }

	            if (!serverMatchesPrediction && stabilized) {

	              playerSentMoves[0].clientPostMoveX = AuthoritiveMove.postMoveX;
	              playerSentMoves[0].clientPostMoveY = AuthoritiveMove.postMoveY;

	              console.log('REPLAY FORWARD MOVES - Server Reconsiliation');

	              var sentmvlength = playerSentMoves.length;

	              for (var i = 1; i < sentmvlength; i++) {

	                playerSentMoves[i].clientPostMoveX = playerSentMoves[i - 1].clientPostMoveX + (playerSentMoves[i].clientPostMoveX - playerSentMoves[i].clientPreMoveX);
	                playerSentMoves[i].clientPostMoveY = playerSentMoves[i - 1].clientPostMoveY + (playerSentMoves[i].clientPostMoveY - playerSentMoves[i].clientPreMoveY);
	              }

	              player.x = playerSentMoves[sentmvlength - 1].clientPostMoveX;
	              player.y = playerSentMoves[sentmvlength - 1].clientPostMoveY;

	              setMatrix();
	            }

	            ///////////////////////////////////////////////////////////////////
	            ////Algorithm to chop playerSentMoves Array by what was processed..
	            playerSentMoves.splice(0, 1);
	          } else {
	            player.x = AuthoritiveMove.postMoveX;
	            player.y = AuthoritiveMove.postMoveY;
	            setMatrix();
	          }
	        }

	        //console.log('XNUM');
	        //console.log(xnumList);

	        xnum = [];
	        xbit = [];
	        users = [];
	        users = userData; ///All other users in view!!!


	        var foundXnList = [];
	        xnumList = xnumList.filter(function (xn) {
	          var xncollisionLen = xnumClientCollision.length;

	          for (var i = 0; i < xncollisionLen; i++) {
	            if (xnumClientCollision[i].id === xn.id) {
	              foundXnList.push(xnumClientCollision[i]);
	              return false;
	            }
	          }

	          return true;
	        });

	        xnumClientCollision = foundXnList;

	        xnum = xnumList; ///Xnums in view!!!


	        var foundXbList = [];
	        xbitList = xbitList.filter(function (xn) {
	          var xbcollisionLen = xbitClientCollision.length;

	          for (var i = 0; i < xbcollisionLen; i++) {
	            if (xbitClientCollision[i].id === xn.id) {
	              foundXbList.push(xbitClientCollision[i]);
	              return false;
	            }
	          }

	          return true;
	        });

	        xbitClientCollision = foundXbList;

	        xbit = xbitList;
	      });

	      // Death.
	      socket.on('RIP', function () {
	        Global.gameStart = false;
	        Global.died = true;
	        window.setTimeout(function () {

	          Global.died = false;
	          if (Global.animLoopHandle) {
	            window.cancelAnimationFrame(Global.animLoopHandle);
	            Global.animLoopHandle = undefined;
	          }
	        }, 2500);
	        //socekt.save();
	        // socket.close();
	      });

	      socket.on('kick', function (data) {
	        Global.gameStart = false;
	        reason = data;
	        Global.kicked = true;
	        window.setTimeout(function () {

	          Global.kicked = false;
	          if (Global.animLoopHandle) {
	            window.cancelAnimationFrame(Global.animLoopHandle);
	            Global.animLoopHandle = undefined;
	          }
	        }, 2500);

	        socket.close();
	      });
	    } ///END OF SOCKET SETUP


	    function valueInRange(min, max, value) {
	      return Math.min(max, Math.max(min, value));
	    }

	    /////////////////////////////////////////////////////
	    window.requestAnimFrame = function () {
	      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
	        window.setTimeout(callback, 1000 / 60);
	      };
	    }();

	    window.cancelAnimFrame = function (handle) {
	      return window.cancelAnimationFrame || window.mozCancelAnimationFrame;
	    }();

	    function animloop() {
	      Global.animLoopHandle = window.requestAnimFrame(animloop);
	      gameLoop();
	      moveLoop();
	    }

	    function updatePlayerCellMoves(player) {

	      var searchCells = player.maptree.get({ x: player.x, y: player.y, w: 3, h: 3 });

	      var searchCellLength = searchCells.length;

	      var cell = {};
	      for (var i = 0; i < searchCellLength; i++) {
	        if (searchCells[i].x === player.cellX && searchCells[i].y === player.cellY) {
	          cell = searchCells[i];
	          break;
	        }
	      }

	      if (!!cell) {
	        player.cellMoves.l = !cell.gl;
	        player.cellMoves.r = !cell.gr;
	        player.cellMoves.u = !cell.gu;
	        player.cellMoves.d = !cell.gd;

	        return cell;
	      } else {

	        return false;
	      }
	    }

	    function getAcceptableTarget(player, target, cell) {

	      if (!!cell) {

	        player.cellMoves.l = !cell.gl;
	        player.cellMoves.r = !cell.gr;
	        player.cellMoves.u = !cell.gu;
	        player.cellMoves.d = !cell.gd;

	        if (!player.cellMoves.l && player.x - player.radius <= cell.x - 0.5) {
	          if (target.x < 0) {
	            target.x = 0;
	          }
	        }
	        if (!player.cellMoves.u && player.y + player.radius >= cell.y + 0.5) {
	          if (target.y > 0) {
	            target.y = 0;
	          }
	        }
	        if (!player.cellMoves.r && player.x + player.radius >= cell.x + 0.5) {
	          if (target.x > 0) {
	            target.x = 0;
	          }
	        }
	        if (!player.cellMoves.d && player.y - player.radius <= cell.y - 0.5) {
	          if (target.y < 0) {
	            target.y = 0;
	          }
	        }
	      } else {
	        console.log("NO CELL FOUND IN CELL BUFFER!!!");
	        player.cellMoves.l = true;
	        player.cellMoves.r = true;
	        player.cellMoves.u = true;
	        player.cellMoves.d = true;
	      }

	      return target;
	    }

	    function adjustInMaze(player, cell) {

	      if (!!cell) {

	        player.cellMoves.l = !cell.gl;
	        player.cellMoves.r = !cell.gr;
	        player.cellMoves.u = !cell.gu;
	        player.cellMoves.d = !cell.gd;

	        if (!player.cellMoves.l && player.x - player.radius <= cell.x - 0.5) {

	          player.x = cell.x + player.radius - 0.5;
	        }
	        if (!player.cellMoves.u && player.y + player.radius >= cell.y + 0.5) {

	          player.y = cell.y - player.radius + 0.5;
	        }
	        if (!player.cellMoves.r && player.x + player.radius >= cell.x + 0.5) {

	          player.x = cell.x - player.radius + 0.5;
	        }
	        if (!player.cellMoves.d && player.y - player.radius <= cell.y - 0.5) {

	          player.y = cell.y + player.radius - 0.5;
	        }
	      } else {

	        player.cellMoves.l = true;
	        player.cellMoves.r = true;
	        player.cellMoves.u = true;
	        player.cellMoves.d = true;
	      }
	    }

	    function maintainInBounds(player) {

	      if (player.x + player.radius >= player.levelBounds[1]) {
	        player.x = player.levelBounds[1] - player.radius;
	      }

	      if (player.x - player.radius <= player.levelBounds[3]) {
	        player.x = player.levelBounds[3] + player.radius;
	      }
	      if (player.y + player.radius >= player.levelBounds[0]) {
	        player.y = player.levelBounds[0] - player.radius;
	      }

	      if (player.y - player.radius <= player.levelBounds[2]) {
	        player.y = player.levelBounds[2] + player.radius;
	      }
	    }

	    function movePlayer(movement) {

	      player.cellX = Math.floor(player.x) + 0.5;
	      player.cellY = Math.floor(player.y) + 0.5;

	      var currentCellMove = updatePlayerCellMoves(player);

	      var target = {
	        x: player.x - player.x + movement.target.x,
	        y: player.y - player.y - movement.target.y
	      };

	      target = getAcceptableTarget(player, target, currentCellMove);

	      var dist = Math.sqrt(Math.pow(target.y, 2) + Math.pow(target.x, 2));
	      var deg = Math.atan2(target.y, target.x);

	      player.speed = dist * 0.01;

	      if (player.speed >= 2.0) {
	        player.speed = 2.0;
	      }

	      var deltaY = player.speed * Math.sin(deg) * movement.dt;
	      var deltaX = player.speed * Math.cos(deg) * movement.dt;

	      if (target.x === 0) {
	        deltaX = 0;
	      }
	      if (target.y === 0) {
	        deltaY = 0;
	      }

	      if (!isNaN(deltaY)) {
	        player.y += deltaY;
	      }
	      if (!isNaN(deltaX)) {
	        player.x += deltaX;
	      }

	      adjustInMaze(player, currentCellMove);

	      maintainInBounds(player);
	    }

	    function xnumPlayerCollision(player) {

	      var searchXnums = xnum;

	      var xnumcollision = false;
	      var searchXnumsLength = searchXnums.length;
	      var collidedxnum = {};

	      for (var i = 0; i < searchXnumsLength; i++) {
	        if (searchXnums[i].locX === player.cellX && searchXnums[i].locY === player.cellY) {
	          collidedxnum = searchXnums[i];
	          xnumClientCollision.push(collidedxnum);
	          xnumcollision = true;
	          break;
	        }
	      }

	      if (xnumcollision) {
	        console.log('client side collision');
	        console.log(collidedxnum.id);
	        xnum = xnum.filter(function (x) {

	          return x.id !== collidedxnum.id;
	        });
	      }
	    }

	    function xbitPlayerCollision(player) {
	      var searchXbits = xbit;

	      var xbitcollision = false;
	      var searchXbitsLength = searchXbits.length;
	      var collidedxbit = {};

	      for (var i = 0; i < searchXbitsLength; i++) {
	        if (searchXbits[i].locX === player.cellX && searchXbits[i].locY === player.cellY) {
	          collidedxbit = searchXbits[i];

	          xbitClientCollision.push(collidedxbit);
	          xbitcollision = true;
	          break;
	        }
	      }

	      if (xbitcollision) {
	        xbit = xbit.filter(function (x) {

	          return x.id !== collidedxbit.id;
	        });
	      }
	    }

	    function xflagsCollision(player) {
	      for (var i = 0; i < xflags.length; i++) {
	        if (xflags[i].x === player.cellX && xflags[i].y === player.cellY) {
	          xflags.splice(i, 1);
	          xflagsFound++;
	          if (xflagsFound === 3) {
	            socket.emit('foundAllFlags', { player: player });
	          }
	          break;
	        }
	      }
	    }

	    function moveLoop() {

	      if (!Global.disconnected) {
	        if (Global.gameStart && self.canSendMoveInputs) {

	          timeNow = Date.now();
	          dt = (timeNow - lastTime) / 1000;
	          lastTime = timeNow;
	          moveId++;

	          var moveUpdates = { 'target': window.canvas.target, 'dt': dt, moveId: moveId };

	          var pmapoffset = Matrix.map([player.x, player.y, 1]);

	          moveUpdates.clientPreMoveX = player.x;
	          moveUpdates.clientPreMoveY = player.y;

	          movePlayer(moveUpdates);

	          moveUpdates.clientPostMoveX = player.x;
	          moveUpdates.clientPostMoveY = player.y;

	          playerSentMoves.push(moveUpdates);
	          socket.emit('0', moveUpdates); // playerSendTarget "Heartbeat".


	          var pdatamapoffset = Matrix.map([player.x, player.y, 1]);
	          var xoffset = pmapoffset[0] - pdatamapoffset[0];
	          var yoffset = pmapoffset[1] - pdatamapoffset[1];

	          Matrix.translate([xoffset, yoffset, 0]); //Moves Screen to Offset Position
	        }
	        //Client Side Collision Detection!
	        xnumPlayerCollision(player);
	        xbitPlayerCollision(player);
	        xflagsCollision(player);

	        if (map.finish.length > 0) {
	          if (map.finish[0] === player.cellX && map.finish[1] === player.cellY) {
	            if (xflagsFound === 3) {
	              Global.gameStart = false;
	              Global.playerFinishedMap = true;
	            } else {
	              self.NeedMoreXFlagsModal();
	            }
	          }
	        }
	      }
	    }

	    Global.needNewGlobalMap = true;
	    var gamelooptimeNow = Date.now();
	    var gameloopdt = 0;
	    var gamelooplastTime = gamelooptimeNow;
	    var gameTime = gameloopdt;

	    var drawName = true;
	    var drawXnumInfo = false;
	    var drawXnumOffuntil = false;

	    function gameTimeState(gameTime) {
	      /////Set Game Variables based on run time of the game... ie.. turn name off after 15 seconds..
	      //then turn on drawXnum after 20 seconds for 5 seconds.

	      switch (true) {
	        case gameTime < 15:
	          drawName = true;
	          drawXnumInfo = false;
	          break;
	        case gameTime >= 20 && gameTime < 35:
	          drawName = false;
	          drawXnumInfo = true;
	          break;
	        default:
	          drawName = false;
	          drawXnumInfo = false;
	          break;
	      }
	    }

	    function gameLoop() {
	      gamelooptimeNow = Date.now();
	      gameloopdt = (gamelooptimeNow - gamelooplastTime) / 1000;
	      gamelooplastTime = gamelooptimeNow;

	      if (Global.died) {
	        graph.fillStyle = '#333333';
	        graph.fillRect(0, 0, Global.screenWidth, Global.screenHeight);

	        graph.textAlign = 'center';
	        graph.fillStyle = '#FFFFFF';
	        graph.font = 'bold 30px sans-serif';
	        graph.fillText('You died!', Global.screenWidth / 2, Global.screenHeight / 3);
	      } else if (!Global.disconnected) {
	        if (Global.gameStart) {

	          gameTime = gameTime + gameloopdt;
	          gameTimeState(gameTime);

	          graph.fillStyle = Global.backgroundColor;
	          graph.fillRect(0, 0, Global.screenWidth, Global.screenHeight);

	          Draw.drawBounds(graph, player.levelBounds);

	          Draw.drawMap(graph, map);

	          //  if(Global.needNewGlobalMap){

	          //  Draw.createMapImage(graph, map);

	          //  }

	          //  Draw.drawMapImage(graph);


	          if (!!map.start[0] && !!map.start[1]) {
	            Draw.drawStartCell(graph, map.start);
	          }

	          if (!!map.finish[0] && !!map.finish[1]) {
	            Draw.drawFinishCell(graph, map.finish);
	          }

	          Draw.drawAdvs(graph, Global.advs, zoom, tempCtx);

	          Draw.drawOtherPlayers(graph, users, player);
	          Draw.drawXnum(graph, xnum);
	          Draw.drawXbit(graph, xbit);
	          Draw.draXflags(graph, xflags);
	          Draw.drawPlayer(graph, player, drawName, drawXnumInfo);

	          if (Global.isAdvClick) {
	            console.log('IS AN ADV CLICK!!!!');
	            Global.isAdvClick = false;
	            self.buyAdvModal();
	          }

	          if (Global.isAdvClickforLink) {
	            console.log('IS AN ADV CLICK FOR LINK!!!!');
	            Global.isAdvClickforLink = false;
	            self.AdvClickforLinkModal();
	          }

	          if (!!map.finish[0] && !!map.finish[1] && !!map.start[0] && !!map.start[1]) {
	            Draw.drawCaptureFlagsReadout(graph, xflagsFound);
	          }
	        } else {

	          if (Global.playerFinishedMap) {
	            graph.fillStyle = '#333333';
	            graph.fillRect(0, 0, Global.screenWidth, Global.screenHeight);

	            graph.textAlign = 'center';
	            graph.fillStyle = '#FFFFFF';
	            graph.font = 'bold 30px sans-serif';
	            graph.fillText('Maze Complete!!', Global.screenWidth / 2, Global.screenHeight / 3);
	            loadgif.style.display = 'block';
	          } else {
	            graph.fillStyle = '#333333';
	            graph.fillRect(0, 0, Global.screenWidth, Global.screenHeight);

	            graph.textAlign = 'center';
	            graph.fillStyle = '#FFFFFF';
	            graph.font = 'bold 30px sans-serif';
	            graph.fillText('Game Over!', Global.screenWidth / 2, Global.screenHeight / 3);
	          }
	        }
	      } else {
	        graph.fillStyle = '#333333';
	        graph.fillRect(0, 0, Global.screenWidth, Global.screenHeight);

	        graph.textAlign = 'center';
	        graph.fillStyle = '#FFFFFF';
	        graph.font = 'bold 30px sans-serif';
	        if (Global.kicked) {
	          if (reason !== '') {
	            graph.fillText('You were kicked for:', Global.screenWidth / 2, Global.screenHeight / 3 - 20);
	            graph.fillText(reason, Global.screenWidth / 2, Global.screenHeight / 3 + 20);
	          } else {
	            graph.fillText('You were kicked!', Global.screenWidth / 2, Global.screenHeight / 3);
	          }
	        } else {
	          if (!Global.gameStart) {
	            graph.fillText('Disconnected!', Global.screenWidth / 2, Global.screenHeight / 3);
	          } else {
	            graph.fillText('Connecting...', Global.screenWidth / 2, Global.screenHeight / 3);
	          }
	        }
	      }
	    }

	    function randomInRange(from, to) {
	      return Math.floor(Math.random() * (to - from)) + from;
	    }

	    function randomPosition(bounds) {
	      return {
	        x: randomInRange(bounds[3] + 0.5, bounds[1] - 0.5),
	        y: randomInRange(bounds[2] + 0.5, bounds[0] - 0.5)
	      };
	    }

	    function xflagsCreate(bounds) {

	      console.log('Create XFlags!');
	      console.log(bounds);

	      xflags[0] = randomPosition(bounds);
	      xflags[1] = randomPosition(bounds);
	      xflags[2] = randomPosition(bounds);

	      xflagsFound = 0;
	      console.log('XFLAGS ARRAY');
	      console.log(xflags);
	    }

	    function setCellCount() {

	      switch (true) {
	        case Global.screen_min_dim() < 400:
	          cellCountInView = 6;
	          break;
	        case Global.screen_min_dim() >= 400 && Global.screen_min_dim() < 600:
	          cellCountInView = 8;
	          break;
	        default:
	          cellCountInView = 12;
	          break;
	      }

	      console.log("CELL COUONT IN VIEW");
	      console.log(cellCountInView);
	    }

	    // window.addEventListener('resize', resize);

	    angular.element($window).bind('resize', function () {
	      //Any time you attach event to $window with angular it becomes application wide Thus.. if state..

	      if ($state.is('play')) {

	        Global.updateScreenDims();

	        if (!socket) return;

	        player.screenWidth = Global.screenWidth;
	        c.width = Global.screenWidth;
	        player.screenHeight = Global.screenHeight;
	        c.height = Global.screenHeight;

	        setCellCount();

	        //self.initScreen();
	        setMatrix();
	        console.log('Global ScreenCellsWidth');
	        console.log(Global.screenCellsWidth);

	        player.screenCellsWidth = Global.screenCellsWidth;
	        player.screenCellsHeight = Global.screenCellsHeight;

	        socket.emit('windowResized', { screenWidth: Global.screenWidth, screenHeight: Global.screenHeight, screenCellsWidth: Global.screenCellsWidth, screenCellsHeight: Global.screenCellsHeight });
	        // $scope.$apply();
	      }
	    });

	    var needMoreXFlagsModalOpen = false;

	    self.NeedMoreXFlagsModal = function () {

	      if (!needMoreXFlagsModalOpen) {
	        needMoreXFlagsModalOpen = true;
	        loadgif.style.display = 'block';
	        $('#NeedMoreXFlags').modal({ backdrop: 'static', keyboard: false });
	        $('#NeedMoreXFlags').modal('show');
	        Global.gameStart = false;
	      }
	    };

	    self.AdvClickforLinkModal = function () {
	      loadgif.style.display = 'block';
	      $('#AdvClickForLink').modal({ backdrop: 'static', keyboard: false });
	      $('#AdvClickForLink').modal('show');
	      Global.gameStart = false;
	      self.advClickforLink = Global.advClickforLink;
	    };

	    self.buyAdvModal = function () {
	      loadgif.style.display = 'block';
	      $('#buyAdvModal').modal({ backdrop: 'static', keyboard: false });
	      $('#buyAdvModal').modal('show');
	      Global.gameStart = false;
	    };

	    self.closeDialog = function () {
	      loadgif.style.display = 'none';
	      Global.gameStart = true;

	      $timeout(function () {
	        needMoreXFlagsModalOpen = false;
	      }, 10000);
	    };

	    self.goBuyAdv = function (route) {

	      $('#buyAdvModal').modal('hide');

	      if (Global.animLoopHandle) {
	        window.cancelAnimFrame(Global.animLoopHandle);
	        Global.animLoopHandle = undefined;
	      }

	      Global.gameStart = false;

	      Cart.addAdv(Global.advBuy.id, Global.advBuy.locX, Global.advBuy.locY, Global.advBuy.width, Global.advBuy.height, self.levelSelect);
	      $('#buyAdvModal').on('hidden.bs.modal', function () {
	        console.log('Ad Vi ID');
	        console.log(Global.advBuy.id);
	        socket.emit('advHasInterest', { advId: Global.advBuy.id });
	        socket.close();
	        $state.go(route);
	      });
	    };

	    self.goto = function (route) {
	      if (Global.animLoopHandle) {
	        window.cancelAnimFrame(Global.animLoopHandle);
	        Global.animLoopHandle = undefined;
	      }

	      Global.gameStart = false;
	      socket.close();

	      $state.go(route);
	    };

	    self.initScreen = function () {

	      var minScreenDim = Global.screen_min_dim();

	      loadgif.style.height = Math.floor(minScreenDim * 0.2) + "px";

	      loadgif.style.width = Math.floor(minScreenDim * 0.2) + "px";
	      loadgif.style.position = 'absolute';
	      loadgif.style.top = Global.screenHeight / 2 - Math.floor(minScreenDim * 0.2) / 2 + 'px';
	      loadgif.style.left = Global.screenWidth / 2 - Math.floor(minScreenDim * 0.2) / 2 + 'px';
	    };

	    function getUser() {

	      var showPmlogo = $timeout(function () {

	        User.isTokenValid().then(function (usr) {

	          User.username = usr.username;
	          User.email = usr.email;
	          User.id = usr.id;
	          //console.log(Global);

	          //initializeGame();

	          Global.gameStart = true;

	          if (Global.animLoopHandle) {
	            window.cancelAnimationFrame(Global.animLoopHandle);
	            Global.animLoopHandle = undefined;
	          }

	          // Global.init();
	          initializeGame();
	        }, function (err) {
	          //console.log('UserToken Loing ERR');
	          //console.log(err);
	          if (Global.animLoopHandle) {
	            cancelAnimFrame(Global.animLoopHandle);
	            Global.animLoopHandle = undefined;
	          }

	          $timeout.cancel(showPmlogo);
	          $state.go('login');
	        });

	        loadgif.src = 'img/loading.gif';
	      }, 1000);
	    }

	    function getMapTiles() {
	      var defered = $q.defer();
	      loadgif.style.display = 'block';
	      map.tiles = [];

	      var url = 'api/v1/tile?level=' + self.levelSelect + '&locX=0&locY=0&w=' + Math.floor(2 * Global.screenWidth) + '&h=' + Math.floor(2 * Global.screenHeight);
	      Levels.getMapTiles(url).then(function (resp) {
	        mapBuilds = []; ///Clear anything that has been updated.
	        map.tiles = resp;

	        map.tiles.forEach(function (t) {
	          var ti = { x: t.locX, y: t.locY, w: 1, h: 1, gu: t.gu, gr: t.gr, gd: t.gd, gl: t.gl };
	          player.maptree.put(ti);
	        });

	        defered.resolve('Done TILES');

	        //drawWorld();
	      }, function (err) {
	        console.log('GET MAP ERROR');
	        console.log(err);
	        defered.reject('Token Not Valid');
	      });

	      return defered.promise;
	    }

	    function getAdvs() {
	      loadgif.style.display = 'block';
	      Global.advs = [];

	      var url = 'api/v1/adv?level=' + self.levelSelect;
	      Levels.getAdvs(url).then(function (resp) {
	        console.log('Get adVs');
	        console.log(resp);
	        Global.advs = resp;

	        loadgif.style.display = 'none';
	      }, function (err) {
	        console.log('GET advs ERROR');
	        console.log(err);
	        loadgif.style.display = 'none';
	      });
	    }

	    //////PULSE UP STUFF///////

	    self.levelPulse = 0;

	    self.levelPulseIsClickable = false;
	    function refreshLevelPulseVal() {
	      self.levelPulseIsClickable = false;
	      $http.get('api/v1/mapPulseByMapId/' + self.levelSelect, { headers: { auth: User.token } }).then(function (resp) {
	        console.log('Response from mapPulse GET');
	        console.log(resp);
	        self.levelPulse = resp.data;
	      }, function (err) {
	        console.log('Response from mapPulse GET Err');
	        console.log(err);
	      });

	      $http.get('api/v1/mapPulseClickAvailable/' + self.levelSelect, { headers: { auth: User.token } }).then(function (resp) {
	        console.log('Response from mapPulse GET ClickAvailable');
	        console.log(resp);
	        self.levelPulseIsClickable = false;
	      }, function (err) {
	        console.log('Response from mapPulse GET ClickAvailable Err');
	        console.log(err);
	        self.levelPulseIsClickable = true;
	      });
	    }

	    self.pulseUpLevel = function () {
	      console.log('PulseUp Level Select');
	      console.log(self.levelSelect);
	      $http.post('api/v1/mapPulse', { mapId: self.levelSelect }, { headers: { auth: User.token } }).then(function (resp) {
	        console.log('Response from mapPulse Post');
	        console.log(resp);
	        refreshLevelPulseVal();
	      }, function (err) {
	        console.log('Response from mapPulse Post Err');
	        console.log(err);
	      });
	    };

	    /////////////////////////


	    self.pageUp = function () {
	      self.page = self.page + 1;
	      getLevels();
	      //initLevelChange();
	      // .then(function(){
	      //    initLevelChange();
	      // });
	    };

	    self.pageDwn = function () {
	      self.page = self.page - 1;
	      if (self.page < 0) {
	        self.page = 0;
	      }
	      //initLevelChange();
	      getLevels();
	      // .then(function(){
	      //   self.levelChange();
	      // });
	    };

	    self.page = 0;

	    self.orderByChange = function () {
	      self.page = 0;
	      getLevels();
	    };

	    self.orderByPulse = false;

	    function getLevels() {
	      var defered = $q.defer();

	      loadgif.style.display = 'block';

	      var url = 'api/v1/maps';

	      if (self.orderByPulse) {
	        url += '?page=' + self.page + '&orderBy=1';
	      } else {

	        url += '?page=' + self.page;
	      }

	      Levels.getLevels(url).then(function (resp) {

	        self.levels = resp;

	        var levelFound = false;
	        var levelArrLength = self.levels.length;
	        for (var i = 0; i < levelArrLength; i++) {
	          if (self.levelSelect === self.levels[i].id.toString()) {
	            self.levelSelectName = self.levels[i].mapname;
	            levelFound = true;
	            console.log(self.levels[i]);

	            break;
	          }
	        }

	        if (!levelFound) {
	          self.levelSelect = self.levels[0].id.toString();
	        }

	        player.maptree = quadtree(player.levelBounds[3], player.levelBounds[0], player.levelBounds[1] - player.levelBounds[3], player.levelBounds[0] - player.levelBounds[2]);

	        defered.resolve('Done Getting LEVELS');
	      }, function (err) {

	        console.log('GET LEVELS ERROR');
	        console.log(err);
	        defered.reject('Token Not Valid');
	      });

	      return defered.promise;
	    }

	    self.leaderBoardToggle = function () {
	      if (self.showLeaderBoard) {
	        self.showLeaderBoard = false;
	      } else {
	        self.showLeaderBoard = true;
	      }
	    };

	    self.showXbitsorXnums = function (which) {

	      if (which === 0) {
	        self.showXbitLeaderBoard = true;
	      } else {
	        self.showXbitLeaderBoard = false;
	      }
	    };

	    self.openLevelSelectModal = function () {
	      $('#levelSelectModalPlay').modal({ backdrop: 'static', keyboard: false });
	      $('#levelSelectModalPlay').modal('show');
	      Global.gameStart = false;
	      self.canSendMoveInputs = false;
	    };

	    self.levelChange = function () {
	      console.log("CHANGE LEVEL");
	      self.levelSelect = $('#playlevelSelect').val();
	      console.log(self.levelSelect);
	      player.level = self.levelSelect;
	      if (Global.animLoopHandle) {
	        window.cancelAnimFrame(Global.animLoopHandle);
	        Global.animLoopHandle = undefined;
	      }

	      socket.emit('changeLevel', { player: player, level: self.levelSelect });

	      Global.startGame = false;

	      self.initScreen();

	      //playerPos = Matrix.map([player.x, player.y, 1]);
	      console.log('Player pos level CHange', player);

	      //   Matrix.translate([playerPos[0], -playerPos[1], 0]);
	      //Matrix.translate([Global.screenWidth/2, -Global.screenHeight/2, 0]); 
	    };

	    self.initScreen();
	    if (loggedin) {

	      User.username = loggedin.username;
	      User.email = loggedin.email;
	      User.id = loggedin.id;
	      //console.log(Global);

	      //initializeGame();

	      Global.gameStart = true;

	      if (Global.animLoopHandle) {
	        window.cancelAnimationFrame(Global.animLoopHandle);
	        Global.animLoopHandle = undefined;
	      }

	      // Global.init();
	      initializeGame();
	    } else {
	      getUser();
	    }
	  }]);
	};

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*!
	 * Bootstrap v3.3.7 (http://getbootstrap.com)
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under the MIT license
	 */

	if (typeof jQuery === 'undefined') {
	  throw new Error('Bootstrap\'s JavaScript requires jQuery');
	}

	+function ($) {
	  'use strict';

	  var version = $.fn.jquery.split(' ')[0].split('.');
	  if (version[0] < 2 && version[1] < 9 || version[0] == 1 && version[1] == 9 && version[2] < 1 || version[0] > 3) {
	    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4');
	  }
	}(jQuery);

	/* ========================================================================
	 * Bootstrap: transition.js v3.3.7
	 * http://getbootstrap.com/javascript/#transitions
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	+function ($) {
	  'use strict';

	  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
	  // ============================================================

	  function transitionEnd() {
	    var el = document.createElement('bootstrap');

	    var transEndEventNames = {
	      WebkitTransition: 'webkitTransitionEnd',
	      MozTransition: 'transitionend',
	      OTransition: 'oTransitionEnd otransitionend',
	      transition: 'transitionend'
	    };

	    for (var name in transEndEventNames) {
	      if (el.style[name] !== undefined) {
	        return { end: transEndEventNames[name] };
	      }
	    }

	    return false; // explicit for ie8 (  ._.)
	  }

	  // http://blog.alexmaccaw.com/css-transitions
	  $.fn.emulateTransitionEnd = function (duration) {
	    var called = false;
	    var $el = this;
	    $(this).one('bsTransitionEnd', function () {
	      called = true;
	    });
	    var callback = function callback() {
	      if (!called) $($el).trigger($.support.transition.end);
	    };
	    setTimeout(callback, duration);
	    return this;
	  };

	  $(function () {
	    $.support.transition = transitionEnd();

	    if (!$.support.transition) return;

	    $.event.special.bsTransitionEnd = {
	      bindType: $.support.transition.end,
	      delegateType: $.support.transition.end,
	      handle: function handle(e) {
	        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
	      }
	    };
	  });
	}(jQuery);

	/* ========================================================================
	 * Bootstrap: alert.js v3.3.7
	 * http://getbootstrap.com/javascript/#alerts
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	+function ($) {
	  'use strict';

	  // ALERT CLASS DEFINITION
	  // ======================

	  var dismiss = '[data-dismiss="alert"]';
	  var Alert = function Alert(el) {
	    $(el).on('click', dismiss, this.close);
	  };

	  Alert.VERSION = '3.3.7';

	  Alert.TRANSITION_DURATION = 150;

	  Alert.prototype.close = function (e) {
	    var $this = $(this);
	    var selector = $this.attr('data-target');

	    if (!selector) {
	      selector = $this.attr('href');
	      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
	    }

	    var $parent = $(selector === '#' ? [] : selector);

	    if (e) e.preventDefault();

	    if (!$parent.length) {
	      $parent = $this.closest('.alert');
	    }

	    $parent.trigger(e = $.Event('close.bs.alert'));

	    if (e.isDefaultPrevented()) return;

	    $parent.removeClass('in');

	    function removeElement() {
	      // detach from parent, fire event then clean up data
	      $parent.detach().trigger('closed.bs.alert').remove();
	    }

	    $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();
	  };

	  // ALERT PLUGIN DEFINITION
	  // =======================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.alert');

	      if (!data) $this.data('bs.alert', data = new Alert(this));
	      if (typeof option == 'string') data[option].call($this);
	    });
	  }

	  var old = $.fn.alert;

	  $.fn.alert = Plugin;
	  $.fn.alert.Constructor = Alert;

	  // ALERT NO CONFLICT
	  // =================

	  $.fn.alert.noConflict = function () {
	    $.fn.alert = old;
	    return this;
	  };

	  // ALERT DATA-API
	  // ==============

	  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);
	}(jQuery);

	/* ========================================================================
	 * Bootstrap: button.js v3.3.7
	 * http://getbootstrap.com/javascript/#buttons
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	+function ($) {
	  'use strict';

	  // BUTTON PUBLIC CLASS DEFINITION
	  // ==============================

	  var Button = function Button(element, options) {
	    this.$element = $(element);
	    this.options = $.extend({}, Button.DEFAULTS, options);
	    this.isLoading = false;
	  };

	  Button.VERSION = '3.3.7';

	  Button.DEFAULTS = {
	    loadingText: 'loading...'
	  };

	  Button.prototype.setState = function (state) {
	    var d = 'disabled';
	    var $el = this.$element;
	    var val = $el.is('input') ? 'val' : 'html';
	    var data = $el.data();

	    state += 'Text';

	    if (data.resetText == null) $el.data('resetText', $el[val]());

	    // push to event loop to allow forms to submit
	    setTimeout($.proxy(function () {
	      $el[val](data[state] == null ? this.options[state] : data[state]);

	      if (state == 'loadingText') {
	        this.isLoading = true;
	        $el.addClass(d).attr(d, d).prop(d, true);
	      } else if (this.isLoading) {
	        this.isLoading = false;
	        $el.removeClass(d).removeAttr(d).prop(d, false);
	      }
	    }, this), 0);
	  };

	  Button.prototype.toggle = function () {
	    var changed = true;
	    var $parent = this.$element.closest('[data-toggle="buttons"]');

	    if ($parent.length) {
	      var $input = this.$element.find('input');
	      if ($input.prop('type') == 'radio') {
	        if ($input.prop('checked')) changed = false;
	        $parent.find('.active').removeClass('active');
	        this.$element.addClass('active');
	      } else if ($input.prop('type') == 'checkbox') {
	        if ($input.prop('checked') !== this.$element.hasClass('active')) changed = false;
	        this.$element.toggleClass('active');
	      }
	      $input.prop('checked', this.$element.hasClass('active'));
	      if (changed) $input.trigger('change');
	    } else {
	      this.$element.attr('aria-pressed', !this.$element.hasClass('active'));
	      this.$element.toggleClass('active');
	    }
	  };

	  // BUTTON PLUGIN DEFINITION
	  // ========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.button');
	      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

	      if (!data) $this.data('bs.button', data = new Button(this, options));

	      if (option == 'toggle') data.toggle();else if (option) data.setState(option);
	    });
	  }

	  var old = $.fn.button;

	  $.fn.button = Plugin;
	  $.fn.button.Constructor = Button;

	  // BUTTON NO CONFLICT
	  // ==================

	  $.fn.button.noConflict = function () {
	    $.fn.button = old;
	    return this;
	  };

	  // BUTTON DATA-API
	  // ===============

	  $(document).on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
	    var $btn = $(e.target).closest('.btn');
	    Plugin.call($btn, 'toggle');
	    if (!$(e.target).is('input[type="radio"], input[type="checkbox"]')) {
	      // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
	      e.preventDefault();
	      // The target component still receive the focus
	      if ($btn.is('input,button')) $btn.trigger('focus');else $btn.find('input:visible,button:visible').first().trigger('focus');
	    }
	  }).on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
	    $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));
	  });
	}(jQuery);

	/* ========================================================================
	 * Bootstrap: carousel.js v3.3.7
	 * http://getbootstrap.com/javascript/#carousel
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	+function ($) {
	  'use strict';

	  // CAROUSEL CLASS DEFINITION
	  // =========================

	  var Carousel = function Carousel(element, options) {
	    this.$element = $(element);
	    this.$indicators = this.$element.find('.carousel-indicators');
	    this.options = options;
	    this.paused = null;
	    this.sliding = null;
	    this.interval = null;
	    this.$active = null;
	    this.$items = null;

	    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this));

	    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));
	  };

	  Carousel.VERSION = '3.3.7';

	  Carousel.TRANSITION_DURATION = 600;

	  Carousel.DEFAULTS = {
	    interval: 5000,
	    pause: 'hover',
	    wrap: true,
	    keyboard: true
	  };

	  Carousel.prototype.keydown = function (e) {
	    if (/input|textarea/i.test(e.target.tagName)) return;
	    switch (e.which) {
	      case 37:
	        this.prev();break;
	      case 39:
	        this.next();break;
	      default:
	        return;
	    }

	    e.preventDefault();
	  };

	  Carousel.prototype.cycle = function (e) {
	    e || (this.paused = false);

	    this.interval && clearInterval(this.interval);

	    this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));

	    return this;
	  };

	  Carousel.prototype.getItemIndex = function (item) {
	    this.$items = item.parent().children('.item');
	    return this.$items.index(item || this.$active);
	  };

	  Carousel.prototype.getItemForDirection = function (direction, active) {
	    var activeIndex = this.getItemIndex(active);
	    var willWrap = direction == 'prev' && activeIndex === 0 || direction == 'next' && activeIndex == this.$items.length - 1;
	    if (willWrap && !this.options.wrap) return active;
	    var delta = direction == 'prev' ? -1 : 1;
	    var itemIndex = (activeIndex + delta) % this.$items.length;
	    return this.$items.eq(itemIndex);
	  };

	  Carousel.prototype.to = function (pos) {
	    var that = this;
	    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));

	    if (pos > this.$items.length - 1 || pos < 0) return;

	    if (this.sliding) return this.$element.one('slid.bs.carousel', function () {
	      that.to(pos);
	    }); // yes, "slid"
	    if (activeIndex == pos) return this.pause().cycle();

	    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));
	  };

	  Carousel.prototype.pause = function (e) {
	    e || (this.paused = true);

	    if (this.$element.find('.next, .prev').length && $.support.transition) {
	      this.$element.trigger($.support.transition.end);
	      this.cycle(true);
	    }

	    this.interval = clearInterval(this.interval);

	    return this;
	  };

	  Carousel.prototype.next = function () {
	    if (this.sliding) return;
	    return this.slide('next');
	  };

	  Carousel.prototype.prev = function () {
	    if (this.sliding) return;
	    return this.slide('prev');
	  };

	  Carousel.prototype.slide = function (type, next) {
	    var $active = this.$element.find('.item.active');
	    var $next = next || this.getItemForDirection(type, $active);
	    var isCycling = this.interval;
	    var direction = type == 'next' ? 'left' : 'right';
	    var that = this;

	    if ($next.hasClass('active')) return this.sliding = false;

	    var relatedTarget = $next[0];
	    var slideEvent = $.Event('slide.bs.carousel', {
	      relatedTarget: relatedTarget,
	      direction: direction
	    });
	    this.$element.trigger(slideEvent);
	    if (slideEvent.isDefaultPrevented()) return;

	    this.sliding = true;

	    isCycling && this.pause();

	    if (this.$indicators.length) {
	      this.$indicators.find('.active').removeClass('active');
	      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
	      $nextIndicator && $nextIndicator.addClass('active');
	    }

	    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }); // yes, "slid"
	    if ($.support.transition && this.$element.hasClass('slide')) {
	      $next.addClass(type);
	      $next[0].offsetWidth; // force reflow
	      $active.addClass(direction);
	      $next.addClass(direction);
	      $active.one('bsTransitionEnd', function () {
	        $next.removeClass([type, direction].join(' ')).addClass('active');
	        $active.removeClass(['active', direction].join(' '));
	        that.sliding = false;
	        setTimeout(function () {
	          that.$element.trigger(slidEvent);
	        }, 0);
	      }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);
	    } else {
	      $active.removeClass('active');
	      $next.addClass('active');
	      this.sliding = false;
	      this.$element.trigger(slidEvent);
	    }

	    isCycling && this.cycle();

	    return this;
	  };

	  // CAROUSEL PLUGIN DEFINITION
	  // ==========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.carousel');
	      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);
	      var action = typeof option == 'string' ? option : options.slide;

	      if (!data) $this.data('bs.carousel', data = new Carousel(this, options));
	      if (typeof option == 'number') data.to(option);else if (action) data[action]();else if (options.interval) data.pause().cycle();
	    });
	  }

	  var old = $.fn.carousel;

	  $.fn.carousel = Plugin;
	  $.fn.carousel.Constructor = Carousel;

	  // CAROUSEL NO CONFLICT
	  // ====================

	  $.fn.carousel.noConflict = function () {
	    $.fn.carousel = old;
	    return this;
	  };

	  // CAROUSEL DATA-API
	  // =================

	  var clickHandler = function clickHandler(e) {
	    var href;
	    var $this = $(this);
	    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')); // strip for ie7
	    if (!$target.hasClass('carousel')) return;
	    var options = $.extend({}, $target.data(), $this.data());
	    var slideIndex = $this.attr('data-slide-to');
	    if (slideIndex) options.interval = false;

	    Plugin.call($target, options);

	    if (slideIndex) {
	      $target.data('bs.carousel').to(slideIndex);
	    }

	    e.preventDefault();
	  };

	  $(document).on('click.bs.carousel.data-api', '[data-slide]', clickHandler).on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler);

	  $(window).on('load', function () {
	    $('[data-ride="carousel"]').each(function () {
	      var $carousel = $(this);
	      Plugin.call($carousel, $carousel.data());
	    });
	  });
	}(jQuery);

	/* ========================================================================
	 * Bootstrap: collapse.js v3.3.7
	 * http://getbootstrap.com/javascript/#collapse
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	/* jshint latedef: false */

	+function ($) {
	  'use strict';

	  // COLLAPSE PUBLIC CLASS DEFINITION
	  // ================================

	  var Collapse = function Collapse(element, options) {
	    this.$element = $(element);
	    this.options = $.extend({}, Collapse.DEFAULTS, options);
	    this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' + '[data-toggle="collapse"][data-target="#' + element.id + '"]');
	    this.transitioning = null;

	    if (this.options.parent) {
	      this.$parent = this.getParent();
	    } else {
	      this.addAriaAndCollapsedClass(this.$element, this.$trigger);
	    }

	    if (this.options.toggle) this.toggle();
	  };

	  Collapse.VERSION = '3.3.7';

	  Collapse.TRANSITION_DURATION = 350;

	  Collapse.DEFAULTS = {
	    toggle: true
	  };

	  Collapse.prototype.dimension = function () {
	    var hasWidth = this.$element.hasClass('width');
	    return hasWidth ? 'width' : 'height';
	  };

	  Collapse.prototype.show = function () {
	    if (this.transitioning || this.$element.hasClass('in')) return;

	    var activesData;
	    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing');

	    if (actives && actives.length) {
	      activesData = actives.data('bs.collapse');
	      if (activesData && activesData.transitioning) return;
	    }

	    var startEvent = $.Event('show.bs.collapse');
	    this.$element.trigger(startEvent);
	    if (startEvent.isDefaultPrevented()) return;

	    if (actives && actives.length) {
	      Plugin.call(actives, 'hide');
	      activesData || actives.data('bs.collapse', null);
	    }

	    var dimension = this.dimension();

	    this.$element.removeClass('collapse').addClass('collapsing')[dimension](0).attr('aria-expanded', true);

	    this.$trigger.removeClass('collapsed').attr('aria-expanded', true);

	    this.transitioning = 1;

	    var complete = function complete() {
	      this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');
	      this.transitioning = 0;
	      this.$element.trigger('shown.bs.collapse');
	    };

	    if (!$.support.transition) return complete.call(this);

	    var scrollSize = $.camelCase(['scroll', dimension].join('-'));

	    this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
	  };

	  Collapse.prototype.hide = function () {
	    if (this.transitioning || !this.$element.hasClass('in')) return;

	    var startEvent = $.Event('hide.bs.collapse');
	    this.$element.trigger(startEvent);
	    if (startEvent.isDefaultPrevented()) return;

	    var dimension = this.dimension();

	    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;

	    this.$element.addClass('collapsing').removeClass('collapse in').attr('aria-expanded', false);

	    this.$trigger.addClass('collapsed').attr('aria-expanded', false);

	    this.transitioning = 1;

	    var complete = function complete() {
	      this.transitioning = 0;
	      this.$element.removeClass('collapsing').addClass('collapse').trigger('hidden.bs.collapse');
	    };

	    if (!$.support.transition) return complete.call(this);

	    this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
	  };

	  Collapse.prototype.toggle = function () {
	    this[this.$element.hasClass('in') ? 'hide' : 'show']();
	  };

	  Collapse.prototype.getParent = function () {
	    return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function (i, element) {
	      var $element = $(element);
	      this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);
	    }, this)).end();
	  };

	  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
	    var isOpen = $element.hasClass('in');

	    $element.attr('aria-expanded', isOpen);
	    $trigger.toggleClass('collapsed', !isOpen).attr('aria-expanded', isOpen);
	  };

	  function getTargetFromTrigger($trigger) {
	    var href;
	    var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''); // strip for ie7

	    return $(target);
	  }

	  // COLLAPSE PLUGIN DEFINITION
	  // ==========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.collapse');
	      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);

	      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false;
	      if (!data) $this.data('bs.collapse', data = new Collapse(this, options));
	      if (typeof option == 'string') data[option]();
	    });
	  }

	  var old = $.fn.collapse;

	  $.fn.collapse = Plugin;
	  $.fn.collapse.Constructor = Collapse;

	  // COLLAPSE NO CONFLICT
	  // ====================

	  $.fn.collapse.noConflict = function () {
	    $.fn.collapse = old;
	    return this;
	  };

	  // COLLAPSE DATA-API
	  // =================

	  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
	    var $this = $(this);

	    if (!$this.attr('data-target')) e.preventDefault();

	    var $target = getTargetFromTrigger($this);
	    var data = $target.data('bs.collapse');
	    var option = data ? 'toggle' : $this.data();

	    Plugin.call($target, option);
	  });
	}(jQuery);

	/* ========================================================================
	 * Bootstrap: dropdown.js v3.3.7
	 * http://getbootstrap.com/javascript/#dropdowns
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	+function ($) {
	  'use strict';

	  // DROPDOWN CLASS DEFINITION
	  // =========================

	  var backdrop = '.dropdown-backdrop';
	  var toggle = '[data-toggle="dropdown"]';
	  var Dropdown = function Dropdown(element) {
	    $(element).on('click.bs.dropdown', this.toggle);
	  };

	  Dropdown.VERSION = '3.3.7';

	  function getParent($this) {
	    var selector = $this.attr('data-target');

	    if (!selector) {
	      selector = $this.attr('href');
	      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
	    }

	    var $parent = selector && $(selector);

	    return $parent && $parent.length ? $parent : $this.parent();
	  }

	  function clearMenus(e) {
	    if (e && e.which === 3) return;
	    $(backdrop).remove();
	    $(toggle).each(function () {
	      var $this = $(this);
	      var $parent = getParent($this);
	      var relatedTarget = { relatedTarget: this };

	      if (!$parent.hasClass('open')) return;

	      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return;

	      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));

	      if (e.isDefaultPrevented()) return;

	      $this.attr('aria-expanded', 'false');
	      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget));
	    });
	  }

	  Dropdown.prototype.toggle = function (e) {
	    var $this = $(this);

	    if ($this.is('.disabled, :disabled')) return;

	    var $parent = getParent($this);
	    var isActive = $parent.hasClass('open');

	    clearMenus();

	    if (!isActive) {
	      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
	        // if mobile we use a backdrop because click events don't delegate
	        $(document.createElement('div')).addClass('dropdown-backdrop').insertAfter($(this)).on('click', clearMenus);
	      }

	      var relatedTarget = { relatedTarget: this };
	      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));

	      if (e.isDefaultPrevented()) return;

	      $this.trigger('focus').attr('aria-expanded', 'true');

	      $parent.toggleClass('open').trigger($.Event('shown.bs.dropdown', relatedTarget));
	    }

	    return false;
	  };

	  Dropdown.prototype.keydown = function (e) {
	    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return;

	    var $this = $(this);

	    e.preventDefault();
	    e.stopPropagation();

	    if ($this.is('.disabled, :disabled')) return;

	    var $parent = getParent($this);
	    var isActive = $parent.hasClass('open');

	    if (!isActive && e.which != 27 || isActive && e.which == 27) {
	      if (e.which == 27) $parent.find(toggle).trigger('focus');
	      return $this.trigger('click');
	    }

	    var desc = ' li:not(.disabled):visible a';
	    var $items = $parent.find('.dropdown-menu' + desc);

	    if (!$items.length) return;

	    var index = $items.index(e.target);

	    if (e.which == 38 && index > 0) index--; // up
	    if (e.which == 40 && index < $items.length - 1) index++; // down
	    if (!~index) index = 0;

	    $items.eq(index).trigger('focus');
	  };

	  // DROPDOWN PLUGIN DEFINITION
	  // ==========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.dropdown');

	      if (!data) $this.data('bs.dropdown', data = new Dropdown(this));
	      if (typeof option == 'string') data[option].call($this);
	    });
	  }

	  var old = $.fn.dropdown;

	  $.fn.dropdown = Plugin;
	  $.fn.dropdown.Constructor = Dropdown;

	  // DROPDOWN NO CONFLICT
	  // ====================

	  $.fn.dropdown.noConflict = function () {
	    $.fn.dropdown = old;
	    return this;
	  };

	  // APPLY TO STANDARD DROPDOWN ELEMENTS
	  // ===================================

	  $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {
	    e.stopPropagation();
	  }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown);
	}(jQuery);

	/* ========================================================================
	 * Bootstrap: modal.js v3.3.7
	 * http://getbootstrap.com/javascript/#modals
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	+function ($) {
	  'use strict';

	  // MODAL CLASS DEFINITION
	  // ======================

	  var Modal = function Modal(element, options) {
	    this.options = options;
	    this.$body = $(document.body);
	    this.$element = $(element);
	    this.$dialog = this.$element.find('.modal-dialog');
	    this.$backdrop = null;
	    this.isShown = null;
	    this.originalBodyPad = null;
	    this.scrollbarWidth = 0;
	    this.ignoreBackdropClick = false;

	    if (this.options.remote) {
	      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {
	        this.$element.trigger('loaded.bs.modal');
	      }, this));
	    }
	  };

	  Modal.VERSION = '3.3.7';

	  Modal.TRANSITION_DURATION = 300;
	  Modal.BACKDROP_TRANSITION_DURATION = 150;

	  Modal.DEFAULTS = {
	    backdrop: true,
	    keyboard: true,
	    show: true
	  };

	  Modal.prototype.toggle = function (_relatedTarget) {
	    return this.isShown ? this.hide() : this.show(_relatedTarget);
	  };

	  Modal.prototype.show = function (_relatedTarget) {
	    var that = this;
	    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });

	    this.$element.trigger(e);

	    if (this.isShown || e.isDefaultPrevented()) return;

	    this.isShown = true;

	    this.checkScrollbar();
	    this.setScrollbar();
	    this.$body.addClass('modal-open');

	    this.escape();
	    this.resize();

	    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));

	    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
	      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
	        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true;
	      });
	    });

	    this.backdrop(function () {
	      var transition = $.support.transition && that.$element.hasClass('fade');

	      if (!that.$element.parent().length) {
	        that.$element.appendTo(that.$body); // don't move modals dom position
	      }

	      that.$element.show().scrollTop(0);

	      that.adjustDialog();

	      if (transition) {
	        that.$element[0].offsetWidth; // force reflow
	      }

	      that.$element.addClass('in');

	      that.enforceFocus();

	      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });

	      transition ? that.$dialog // wait for modal to slide in
	      .one('bsTransitionEnd', function () {
	        that.$element.trigger('focus').trigger(e);
	      }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);
	    });
	  };

	  Modal.prototype.hide = function (e) {
	    if (e) e.preventDefault();

	    e = $.Event('hide.bs.modal');

	    this.$element.trigger(e);

	    if (!this.isShown || e.isDefaultPrevented()) return;

	    this.isShown = false;

	    this.escape();
	    this.resize();

	    $(document).off('focusin.bs.modal');

	    this.$element.removeClass('in').off('click.dismiss.bs.modal').off('mouseup.dismiss.bs.modal');

	    this.$dialog.off('mousedown.dismiss.bs.modal');

	    $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();
	  };

	  Modal.prototype.enforceFocus = function () {
	    $(document).off('focusin.bs.modal') // guard against infinite focus loop
	    .on('focusin.bs.modal', $.proxy(function (e) {
	      if (document !== e.target && this.$element[0] !== e.target && !this.$element.has(e.target).length) {
	        this.$element.trigger('focus');
	      }
	    }, this));
	  };

	  Modal.prototype.escape = function () {
	    if (this.isShown && this.options.keyboard) {
	      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
	        e.which == 27 && this.hide();
	      }, this));
	    } else if (!this.isShown) {
	      this.$element.off('keydown.dismiss.bs.modal');
	    }
	  };

	  Modal.prototype.resize = function () {
	    if (this.isShown) {
	      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));
	    } else {
	      $(window).off('resize.bs.modal');
	    }
	  };

	  Modal.prototype.hideModal = function () {
	    var that = this;
	    this.$element.hide();
	    this.backdrop(function () {
	      that.$body.removeClass('modal-open');
	      that.resetAdjustments();
	      that.resetScrollbar();
	      that.$element.trigger('hidden.bs.modal');
	    });
	  };

	  Modal.prototype.removeBackdrop = function () {
	    this.$backdrop && this.$backdrop.remove();
	    this.$backdrop = null;
	  };

	  Modal.prototype.backdrop = function (callback) {
	    var that = this;
	    var animate = this.$element.hasClass('fade') ? 'fade' : '';

	    if (this.isShown && this.options.backdrop) {
	      var doAnimate = $.support.transition && animate;

	      this.$backdrop = $(document.createElement('div')).addClass('modal-backdrop ' + animate).appendTo(this.$body);

	      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
	        if (this.ignoreBackdropClick) {
	          this.ignoreBackdropClick = false;
	          return;
	        }
	        if (e.target !== e.currentTarget) return;
	        this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide();
	      }, this));

	      if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow

	      this.$backdrop.addClass('in');

	      if (!callback) return;

	      doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();
	    } else if (!this.isShown && this.$backdrop) {
	      this.$backdrop.removeClass('in');

	      var callbackRemove = function callbackRemove() {
	        that.removeBackdrop();
	        callback && callback();
	      };
	      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();
	    } else if (callback) {
	      callback();
	    }
	  };

	  // these following methods are used to handle overflowing modals

	  Modal.prototype.handleUpdate = function () {
	    this.adjustDialog();
	  };

	  Modal.prototype.adjustDialog = function () {
	    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;

	    this.$element.css({
	      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
	      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
	    });
	  };

	  Modal.prototype.resetAdjustments = function () {
	    this.$element.css({
	      paddingLeft: '',
	      paddingRight: ''
	    });
	  };

	  Modal.prototype.checkScrollbar = function () {
	    var fullWindowWidth = window.innerWidth;
	    if (!fullWindowWidth) {
	      // workaround for missing window.innerWidth in IE8
	      var documentElementRect = document.documentElement.getBoundingClientRect();
	      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
	    }
	    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
	    this.scrollbarWidth = this.measureScrollbar();
	  };

	  Modal.prototype.setScrollbar = function () {
	    var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);
	    this.originalBodyPad = document.body.style.paddingRight || '';
	    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth);
	  };

	  Modal.prototype.resetScrollbar = function () {
	    this.$body.css('padding-right', this.originalBodyPad);
	  };

	  Modal.prototype.measureScrollbar = function () {
	    // thx walsh
	    var scrollDiv = document.createElement('div');
	    scrollDiv.className = 'modal-scrollbar-measure';
	    this.$body.append(scrollDiv);
	    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	    this.$body[0].removeChild(scrollDiv);
	    return scrollbarWidth;
	  };

	  // MODAL PLUGIN DEFINITION
	  // =======================

	  function Plugin(option, _relatedTarget) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.modal');
	      var options = $.extend({}, Modal.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);

	      if (!data) $this.data('bs.modal', data = new Modal(this, options));
	      if (typeof option == 'string') data[option](_relatedTarget);else if (options.show) data.show(_relatedTarget);
	    });
	  }

	  var old = $.fn.modal;

	  $.fn.modal = Plugin;
	  $.fn.modal.Constructor = Modal;

	  // MODAL NO CONFLICT
	  // =================

	  $.fn.modal.noConflict = function () {
	    $.fn.modal = old;
	    return this;
	  };

	  // MODAL DATA-API
	  // ==============

	  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
	    var $this = $(this);
	    var href = $this.attr('href');
	    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, '')); // strip for ie7
	    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());

	    if ($this.is('a')) e.preventDefault();

	    $target.one('show.bs.modal', function (showEvent) {
	      if (showEvent.isDefaultPrevented()) return; // only register focus restorer if modal will actually get shown
	      $target.one('hidden.bs.modal', function () {
	        $this.is(':visible') && $this.trigger('focus');
	      });
	    });
	    Plugin.call($target, option, this);
	  });
	}(jQuery);

	/* ========================================================================
	 * Bootstrap: tooltip.js v3.3.7
	 * http://getbootstrap.com/javascript/#tooltip
	 * Inspired by the original jQuery.tipsy by Jason Frame
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	+function ($) {
	  'use strict';

	  // TOOLTIP PUBLIC CLASS DEFINITION
	  // ===============================

	  var Tooltip = function Tooltip(element, options) {
	    this.type = null;
	    this.options = null;
	    this.enabled = null;
	    this.timeout = null;
	    this.hoverState = null;
	    this.$element = null;
	    this.inState = null;

	    this.init('tooltip', element, options);
	  };

	  Tooltip.VERSION = '3.3.7';

	  Tooltip.TRANSITION_DURATION = 150;

	  Tooltip.DEFAULTS = {
	    animation: true,
	    placement: 'top',
	    selector: false,
	    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
	    trigger: 'hover focus',
	    title: '',
	    delay: 0,
	    html: false,
	    container: false,
	    viewport: {
	      selector: 'body',
	      padding: 0
	    }
	  };

	  Tooltip.prototype.init = function (type, element, options) {
	    this.enabled = true;
	    this.type = type;
	    this.$element = $(element);
	    this.options = this.getOptions(options);
	    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport);
	    this.inState = { click: false, hover: false, focus: false };

	    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
	      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!');
	    }

	    var triggers = this.options.trigger.split(' ');

	    for (var i = triggers.length; i--;) {
	      var trigger = triggers[i];

	      if (trigger == 'click') {
	        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
	      } else if (trigger != 'manual') {
	        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';
	        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';

	        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
	        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
	      }
	    }

	    this.options.selector ? this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' }) : this.fixTitle();
	  };

	  Tooltip.prototype.getDefaults = function () {
	    return Tooltip.DEFAULTS;
	  };

	  Tooltip.prototype.getOptions = function (options) {
	    options = $.extend({}, this.getDefaults(), this.$element.data(), options);

	    if (options.delay && typeof options.delay == 'number') {
	      options.delay = {
	        show: options.delay,
	        hide: options.delay
	      };
	    }

	    return options;
	  };

	  Tooltip.prototype.getDelegateOptions = function () {
	    var options = {};
	    var defaults = this.getDefaults();

	    this._options && $.each(this._options, function (key, value) {
	      if (defaults[key] != value) options[key] = value;
	    });

	    return options;
	  };

	  Tooltip.prototype.enter = function (obj) {
	    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

	    if (!self) {
	      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
	      $(obj.currentTarget).data('bs.' + this.type, self);
	    }

	    if (obj instanceof $.Event) {
	      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true;
	    }

	    if (self.tip().hasClass('in') || self.hoverState == 'in') {
	      self.hoverState = 'in';
	      return;
	    }

	    clearTimeout(self.timeout);

	    self.hoverState = 'in';

	    if (!self.options.delay || !self.options.delay.show) return self.show();

	    self.timeout = setTimeout(function () {
	      if (self.hoverState == 'in') self.show();
	    }, self.options.delay.show);
	  };

	  Tooltip.prototype.isInStateTrue = function () {
	    for (var key in this.inState) {
	      if (this.inState[key]) return true;
	    }

	    return false;
	  };

	  Tooltip.prototype.leave = function (obj) {
	    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

	    if (!self) {
	      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
	      $(obj.currentTarget).data('bs.' + this.type, self);
	    }

	    if (obj instanceof $.Event) {
	      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false;
	    }

	    if (self.isInStateTrue()) return;

	    clearTimeout(self.timeout);

	    self.hoverState = 'out';

	    if (!self.options.delay || !self.options.delay.hide) return self.hide();

	    self.timeout = setTimeout(function () {
	      if (self.hoverState == 'out') self.hide();
	    }, self.options.delay.hide);
	  };

	  Tooltip.prototype.show = function () {
	    var e = $.Event('show.bs.' + this.type);

	    if (this.hasContent() && this.enabled) {
	      this.$element.trigger(e);

	      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
	      if (e.isDefaultPrevented() || !inDom) return;
	      var that = this;

	      var $tip = this.tip();

	      var tipId = this.getUID(this.type);

	      this.setContent();
	      $tip.attr('id', tipId);
	      this.$element.attr('aria-describedby', tipId);

	      if (this.options.animation) $tip.addClass('fade');

	      var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;

	      var autoToken = /\s?auto?\s?/i;
	      var autoPlace = autoToken.test(placement);
	      if (autoPlace) placement = placement.replace(autoToken, '') || 'top';

	      $tip.detach().css({ top: 0, left: 0, display: 'block' }).addClass(placement).data('bs.' + this.type, this);

	      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
	      this.$element.trigger('inserted.bs.' + this.type);

	      var pos = this.getPosition();
	      var actualWidth = $tip[0].offsetWidth;
	      var actualHeight = $tip[0].offsetHeight;

	      if (autoPlace) {
	        var orgPlacement = placement;
	        var viewportDim = this.getPosition(this.$viewport);

	        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' : placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' : placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' : placement;

	        $tip.removeClass(orgPlacement).addClass(placement);
	      }

	      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);

	      this.applyPlacement(calculatedOffset, placement);

	      var complete = function complete() {
	        var prevHoverState = that.hoverState;
	        that.$element.trigger('shown.bs.' + that.type);
	        that.hoverState = null;

	        if (prevHoverState == 'out') that.leave(that);
	      };

	      $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
	    }
	  };

	  Tooltip.prototype.applyPlacement = function (offset, placement) {
	    var $tip = this.tip();
	    var width = $tip[0].offsetWidth;
	    var height = $tip[0].offsetHeight;

	    // manually read margins because getBoundingClientRect includes difference
	    var marginTop = parseInt($tip.css('margin-top'), 10);
	    var marginLeft = parseInt($tip.css('margin-left'), 10);

	    // we must check for NaN for ie 8/9
	    if (isNaN(marginTop)) marginTop = 0;
	    if (isNaN(marginLeft)) marginLeft = 0;

	    offset.top += marginTop;
	    offset.left += marginLeft;

	    // $.fn.offset doesn't round pixel values
	    // so we use setOffset directly with our own function B-0
	    $.offset.setOffset($tip[0], $.extend({
	      using: function using(props) {
	        $tip.css({
	          top: Math.round(props.top),
	          left: Math.round(props.left)
	        });
	      }
	    }, offset), 0);

	    $tip.addClass('in');

	    // check to see if placing tip in new offset caused the tip to resize itself
	    var actualWidth = $tip[0].offsetWidth;
	    var actualHeight = $tip[0].offsetHeight;

	    if (placement == 'top' && actualHeight != height) {
	      offset.top = offset.top + height - actualHeight;
	    }

	    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);

	    if (delta.left) offset.left += delta.left;else offset.top += delta.top;

	    var isVertical = /top|bottom/.test(placement);
	    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
	    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';

	    $tip.offset(offset);
	    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
	  };

	  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
	    this.arrow().css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isVertical ? 'top' : 'left', '');
	  };

	  Tooltip.prototype.setContent = function () {
	    var $tip = this.tip();
	    var title = this.getTitle();

	    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
	    $tip.removeClass('fade in top bottom left right');
	  };

	  Tooltip.prototype.hide = function (callback) {
	    var that = this;
	    var $tip = $(this.$tip);
	    var e = $.Event('hide.bs.' + this.type);

	    function complete() {
	      if (that.hoverState != 'in') $tip.detach();
	      if (that.$element) {
	        // TODO: Check whether guarding this code with this `if` is really necessary.
	        that.$element.removeAttr('aria-describedby').trigger('hidden.bs.' + that.type);
	      }
	      callback && callback();
	    }

	    this.$element.trigger(e);

	    if (e.isDefaultPrevented()) return;

	    $tip.removeClass('in');

	    $.support.transition && $tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();

	    this.hoverState = null;

	    return this;
	  };

	  Tooltip.prototype.fixTitle = function () {
	    var $e = this.$element;
	    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
	      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
	    }
	  };

	  Tooltip.prototype.hasContent = function () {
	    return this.getTitle();
	  };

	  Tooltip.prototype.getPosition = function ($element) {
	    $element = $element || this.$element;

	    var el = $element[0];
	    var isBody = el.tagName == 'BODY';

	    var elRect = el.getBoundingClientRect();
	    if (elRect.width == null) {
	      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
	      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });
	    }
	    var isSvg = window.SVGElement && el instanceof window.SVGElement;
	    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
	    // See https://github.com/twbs/bootstrap/issues/20280
	    var elOffset = isBody ? { top: 0, left: 0 } : isSvg ? null : $element.offset();
	    var scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() };
	    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null;

	    return $.extend({}, elRect, scroll, outerDims, elOffset);
	  };

	  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
	    return placement == 'bottom' ? { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'top' ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'left' ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
	    /* placement == 'right' */{ top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };
	  };

	  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
	    var delta = { top: 0, left: 0 };
	    if (!this.$viewport) return delta;

	    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
	    var viewportDimensions = this.getPosition(this.$viewport);

	    if (/right|left/.test(placement)) {
	      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
	      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
	      if (topEdgeOffset < viewportDimensions.top) {
	        // top overflow
	        delta.top = viewportDimensions.top - topEdgeOffset;
	      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
	        // bottom overflow
	        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
	      }
	    } else {
	      var leftEdgeOffset = pos.left - viewportPadding;
	      var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
	      if (leftEdgeOffset < viewportDimensions.left) {
	        // left overflow
	        delta.left = viewportDimensions.left - leftEdgeOffset;
	      } else if (rightEdgeOffset > viewportDimensions.right) {
	        // right overflow
	        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
	      }
	    }

	    return delta;
	  };

	  Tooltip.prototype.getTitle = function () {
	    var title;
	    var $e = this.$element;
	    var o = this.options;

	    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);

	    return title;
	  };

	  Tooltip.prototype.getUID = function (prefix) {
	    do {
	      prefix += ~~(Math.random() * 1000000);
	    } while (document.getElementById(prefix));
	    return prefix;
	  };

	  Tooltip.prototype.tip = function () {
	    if (!this.$tip) {
	      this.$tip = $(this.options.template);
	      if (this.$tip.length != 1) {
	        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!');
	      }
	    }
	    return this.$tip;
	  };

	  Tooltip.prototype.arrow = function () {
	    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');
	  };

	  Tooltip.prototype.enable = function () {
	    this.enabled = true;
	  };

	  Tooltip.prototype.disable = function () {
	    this.enabled = false;
	  };

	  Tooltip.prototype.toggleEnabled = function () {
	    this.enabled = !this.enabled;
	  };

	  Tooltip.prototype.toggle = function (e) {
	    var self = this;
	    if (e) {
	      self = $(e.currentTarget).data('bs.' + this.type);
	      if (!self) {
	        self = new this.constructor(e.currentTarget, this.getDelegateOptions());
	        $(e.currentTarget).data('bs.' + this.type, self);
	      }
	    }

	    if (e) {
	      self.inState.click = !self.inState.click;
	      if (self.isInStateTrue()) self.enter(self);else self.leave(self);
	    } else {
	      self.tip().hasClass('in') ? self.leave(self) : self.enter(self);
	    }
	  };

	  Tooltip.prototype.destroy = function () {
	    var that = this;
	    clearTimeout(this.timeout);
	    this.hide(function () {
	      that.$element.off('.' + that.type).removeData('bs.' + that.type);
	      if (that.$tip) {
	        that.$tip.detach();
	      }
	      that.$tip = null;
	      that.$arrow = null;
	      that.$viewport = null;
	      that.$element = null;
	    });
	  };

	  // TOOLTIP PLUGIN DEFINITION
	  // =========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.tooltip');
	      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

	      if (!data && /destroy|hide/.test(option)) return;
	      if (!data) $this.data('bs.tooltip', data = new Tooltip(this, options));
	      if (typeof option == 'string') data[option]();
	    });
	  }

	  var old = $.fn.tooltip;

	  $.fn.tooltip = Plugin;
	  $.fn.tooltip.Constructor = Tooltip;

	  // TOOLTIP NO CONFLICT
	  // ===================

	  $.fn.tooltip.noConflict = function () {
	    $.fn.tooltip = old;
	    return this;
	  };
	}(jQuery);

	/* ========================================================================
	 * Bootstrap: popover.js v3.3.7
	 * http://getbootstrap.com/javascript/#popovers
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	+function ($) {
	  'use strict';

	  // POPOVER PUBLIC CLASS DEFINITION
	  // ===============================

	  var Popover = function Popover(element, options) {
	    this.init('popover', element, options);
	  };

	  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js');

	  Popover.VERSION = '3.3.7';

	  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
	    placement: 'right',
	    trigger: 'click',
	    content: '',
	    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
	  });

	  // NOTE: POPOVER EXTENDS tooltip.js
	  // ================================

	  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);

	  Popover.prototype.constructor = Popover;

	  Popover.prototype.getDefaults = function () {
	    return Popover.DEFAULTS;
	  };

	  Popover.prototype.setContent = function () {
	    var $tip = this.tip();
	    var title = this.getTitle();
	    var content = this.getContent();

	    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
	    $tip.find('.popover-content').children().detach().end()[// we use append for html objects to maintain js events
	    this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);

	    $tip.removeClass('fade top bottom left right in');

	    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
	    // this manually by checking the contents.
	    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide();
	  };

	  Popover.prototype.hasContent = function () {
	    return this.getTitle() || this.getContent();
	  };

	  Popover.prototype.getContent = function () {
	    var $e = this.$element;
	    var o = this.options;

	    return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
	  };

	  Popover.prototype.arrow = function () {
	    return this.$arrow = this.$arrow || this.tip().find('.arrow');
	  };

	  // POPOVER PLUGIN DEFINITION
	  // =========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.popover');
	      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

	      if (!data && /destroy|hide/.test(option)) return;
	      if (!data) $this.data('bs.popover', data = new Popover(this, options));
	      if (typeof option == 'string') data[option]();
	    });
	  }

	  var old = $.fn.popover;

	  $.fn.popover = Plugin;
	  $.fn.popover.Constructor = Popover;

	  // POPOVER NO CONFLICT
	  // ===================

	  $.fn.popover.noConflict = function () {
	    $.fn.popover = old;
	    return this;
	  };
	}(jQuery);

	/* ========================================================================
	 * Bootstrap: scrollspy.js v3.3.7
	 * http://getbootstrap.com/javascript/#scrollspy
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	+function ($) {
	  'use strict';

	  // SCROLLSPY CLASS DEFINITION
	  // ==========================

	  function ScrollSpy(element, options) {
	    this.$body = $(document.body);
	    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);
	    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
	    this.selector = (this.options.target || '') + ' .nav li > a';
	    this.offsets = [];
	    this.targets = [];
	    this.activeTarget = null;
	    this.scrollHeight = 0;

	    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this));
	    this.refresh();
	    this.process();
	  }

	  ScrollSpy.VERSION = '3.3.7';

	  ScrollSpy.DEFAULTS = {
	    offset: 10
	  };

	  ScrollSpy.prototype.getScrollHeight = function () {
	    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
	  };

	  ScrollSpy.prototype.refresh = function () {
	    var that = this;
	    var offsetMethod = 'offset';
	    var offsetBase = 0;

	    this.offsets = [];
	    this.targets = [];
	    this.scrollHeight = this.getScrollHeight();

	    if (!$.isWindow(this.$scrollElement[0])) {
	      offsetMethod = 'position';
	      offsetBase = this.$scrollElement.scrollTop();
	    }

	    this.$body.find(this.selector).map(function () {
	      var $el = $(this);
	      var href = $el.data('target') || $el.attr('href');
	      var $href = /^#./.test(href) && $(href);

	      return $href && $href.length && $href.is(':visible') && [[$href[offsetMethod]().top + offsetBase, href]] || null;
	    }).sort(function (a, b) {
	      return a[0] - b[0];
	    }).each(function () {
	      that.offsets.push(this[0]);
	      that.targets.push(this[1]);
	    });
	  };

	  ScrollSpy.prototype.process = function () {
	    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
	    var scrollHeight = this.getScrollHeight();
	    var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
	    var offsets = this.offsets;
	    var targets = this.targets;
	    var activeTarget = this.activeTarget;
	    var i;

	    if (this.scrollHeight != scrollHeight) {
	      this.refresh();
	    }

	    if (scrollTop >= maxScroll) {
	      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
	    }

	    if (activeTarget && scrollTop < offsets[0]) {
	      this.activeTarget = null;
	      return this.clear();
	    }

	    for (i = offsets.length; i--;) {
	      activeTarget != targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i]);
	    }
	  };

	  ScrollSpy.prototype.activate = function (target) {
	    this.activeTarget = target;

	    this.clear();

	    var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';

	    var active = $(selector).parents('li').addClass('active');

	    if (active.parent('.dropdown-menu').length) {
	      active = active.closest('li.dropdown').addClass('active');
	    }

	    active.trigger('activate.bs.scrollspy');
	  };

	  ScrollSpy.prototype.clear = function () {
	    $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');
	  };

	  // SCROLLSPY PLUGIN DEFINITION
	  // ===========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.scrollspy');
	      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

	      if (!data) $this.data('bs.scrollspy', data = new ScrollSpy(this, options));
	      if (typeof option == 'string') data[option]();
	    });
	  }

	  var old = $.fn.scrollspy;

	  $.fn.scrollspy = Plugin;
	  $.fn.scrollspy.Constructor = ScrollSpy;

	  // SCROLLSPY NO CONFLICT
	  // =====================

	  $.fn.scrollspy.noConflict = function () {
	    $.fn.scrollspy = old;
	    return this;
	  };

	  // SCROLLSPY DATA-API
	  // ==================

	  $(window).on('load.bs.scrollspy.data-api', function () {
	    $('[data-spy="scroll"]').each(function () {
	      var $spy = $(this);
	      Plugin.call($spy, $spy.data());
	    });
	  });
	}(jQuery);

	/* ========================================================================
	 * Bootstrap: tab.js v3.3.7
	 * http://getbootstrap.com/javascript/#tabs
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	+function ($) {
	  'use strict';

	  // TAB CLASS DEFINITION
	  // ====================

	  var Tab = function Tab(element) {
	    // jscs:disable requireDollarBeforejQueryAssignment
	    this.element = $(element);
	    // jscs:enable requireDollarBeforejQueryAssignment
	  };

	  Tab.VERSION = '3.3.7';

	  Tab.TRANSITION_DURATION = 150;

	  Tab.prototype.show = function () {
	    var $this = this.element;
	    var $ul = $this.closest('ul:not(.dropdown-menu)');
	    var selector = $this.data('target');

	    if (!selector) {
	      selector = $this.attr('href');
	      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
	    }

	    if ($this.parent('li').hasClass('active')) return;

	    var $previous = $ul.find('.active:last a');
	    var hideEvent = $.Event('hide.bs.tab', {
	      relatedTarget: $this[0]
	    });
	    var showEvent = $.Event('show.bs.tab', {
	      relatedTarget: $previous[0]
	    });

	    $previous.trigger(hideEvent);
	    $this.trigger(showEvent);

	    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return;

	    var $target = $(selector);

	    this.activate($this.closest('li'), $ul);
	    this.activate($target, $target.parent(), function () {
	      $previous.trigger({
	        type: 'hidden.bs.tab',
	        relatedTarget: $this[0]
	      });
	      $this.trigger({
	        type: 'shown.bs.tab',
	        relatedTarget: $previous[0]
	      });
	    });
	  };

	  Tab.prototype.activate = function (element, container, callback) {
	    var $active = container.find('> .active');
	    var transition = callback && $.support.transition && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length);

	    function next() {
	      $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', false);

	      element.addClass('active').find('[data-toggle="tab"]').attr('aria-expanded', true);

	      if (transition) {
	        element[0].offsetWidth; // reflow for transition
	        element.addClass('in');
	      } else {
	        element.removeClass('fade');
	      }

	      if (element.parent('.dropdown-menu').length) {
	        element.closest('li.dropdown').addClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', true);
	      }

	      callback && callback();
	    }

	    $active.length && transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();

	    $active.removeClass('in');
	  };

	  // TAB PLUGIN DEFINITION
	  // =====================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.tab');

	      if (!data) $this.data('bs.tab', data = new Tab(this));
	      if (typeof option == 'string') data[option]();
	    });
	  }

	  var old = $.fn.tab;

	  $.fn.tab = Plugin;
	  $.fn.tab.Constructor = Tab;

	  // TAB NO CONFLICT
	  // ===============

	  $.fn.tab.noConflict = function () {
	    $.fn.tab = old;
	    return this;
	  };

	  // TAB DATA-API
	  // ============

	  var clickHandler = function clickHandler(e) {
	    e.preventDefault();
	    Plugin.call($(this), 'show');
	  };

	  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler).on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler);
	}(jQuery);

	/* ========================================================================
	 * Bootstrap: affix.js v3.3.7
	 * http://getbootstrap.com/javascript/#affix
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	+function ($) {
	  'use strict';

	  // AFFIX CLASS DEFINITION
	  // ======================

	  var Affix = function Affix(element, options) {
	    this.options = $.extend({}, Affix.DEFAULTS, options);

	    this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));

	    this.$element = $(element);
	    this.affixed = null;
	    this.unpin = null;
	    this.pinnedOffset = null;

	    this.checkPosition();
	  };

	  Affix.VERSION = '3.3.7';

	  Affix.RESET = 'affix affix-top affix-bottom';

	  Affix.DEFAULTS = {
	    offset: 0,
	    target: window
	  };

	  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
	    var scrollTop = this.$target.scrollTop();
	    var position = this.$element.offset();
	    var targetHeight = this.$target.height();

	    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false;

	    if (this.affixed == 'bottom') {
	      if (offsetTop != null) return scrollTop + this.unpin <= position.top ? false : 'bottom';
	      return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';
	    }

	    var initializing = this.affixed == null;
	    var colliderTop = initializing ? scrollTop : position.top;
	    var colliderHeight = initializing ? targetHeight : height;

	    if (offsetTop != null && scrollTop <= offsetTop) return 'top';
	    if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom) return 'bottom';

	    return false;
	  };

	  Affix.prototype.getPinnedOffset = function () {
	    if (this.pinnedOffset) return this.pinnedOffset;
	    this.$element.removeClass(Affix.RESET).addClass('affix');
	    var scrollTop = this.$target.scrollTop();
	    var position = this.$element.offset();
	    return this.pinnedOffset = position.top - scrollTop;
	  };

	  Affix.prototype.checkPositionWithEventLoop = function () {
	    setTimeout($.proxy(this.checkPosition, this), 1);
	  };

	  Affix.prototype.checkPosition = function () {
	    if (!this.$element.is(':visible')) return;

	    var height = this.$element.height();
	    var offset = this.options.offset;
	    var offsetTop = offset.top;
	    var offsetBottom = offset.bottom;
	    var scrollHeight = Math.max($(document).height(), $(document.body).height());

	    if ((typeof offset === 'undefined' ? 'undefined' : _typeof(offset)) != 'object') offsetBottom = offsetTop = offset;
	    if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element);
	    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element);

	    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);

	    if (this.affixed != affix) {
	      if (this.unpin != null) this.$element.css('top', '');

	      var affixType = 'affix' + (affix ? '-' + affix : '');
	      var e = $.Event(affixType + '.bs.affix');

	      this.$element.trigger(e);

	      if (e.isDefaultPrevented()) return;

	      this.affixed = affix;
	      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;

	      this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');
	    }

	    if (affix == 'bottom') {
	      this.$element.offset({
	        top: scrollHeight - height - offsetBottom
	      });
	    }
	  };

	  // AFFIX PLUGIN DEFINITION
	  // =======================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.affix');
	      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

	      if (!data) $this.data('bs.affix', data = new Affix(this, options));
	      if (typeof option == 'string') data[option]();
	    });
	  }

	  var old = $.fn.affix;

	  $.fn.affix = Plugin;
	  $.fn.affix.Constructor = Affix;

	  // AFFIX NO CONFLICT
	  // =================

	  $.fn.affix.noConflict = function () {
	    $.fn.affix = old;
	    return this;
	  };

	  // AFFIX DATA-API
	  // ==============

	  $(window).on('load', function () {
	    $('[data-spy="affix"]').each(function () {
	      var $spy = $(this);
	      var data = $spy.data();

	      data.offset = data.offset || {};

	      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom;
	      if (data.offsetTop != null) data.offset.top = data.offsetTop;

	      Plugin.call($spy, data);
	    });
	  });
	}(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * Module dependencies.
	 */

	var url = __webpack_require__(23);
	var parser = __webpack_require__(29);
	var Manager = __webpack_require__(39);
	var debug = __webpack_require__(25)('socket.io-client');

	/**
	 * Module exports.
	 */

	module.exports = exports = lookup;

	/**
	 * Managers cache.
	 */

	var cache = exports.managers = {};

	/**
	 * Looks up an existing `Manager` for multiplexing.
	 * If the user summons:
	 *
	 *   `io('http://localhost/a');`
	 *   `io('http://localhost/b');`
	 *
	 * We reuse the existing instance based on same scheme/port/host,
	 * and we initialize sockets for each namespace.
	 *
	 * @api public
	 */

	function lookup(uri, opts) {
	  if ((typeof uri === 'undefined' ? 'undefined' : _typeof(uri)) === 'object') {
	    opts = uri;
	    uri = undefined;
	  }

	  opts = opts || {};

	  var parsed = url(uri);
	  var source = parsed.source;
	  var id = parsed.id;
	  var path = parsed.path;
	  var sameNamespace = cache[id] && path in cache[id].nsps;
	  var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;

	  var io;

	  if (newConnection) {
	    debug('ignoring socket cache for %s', source);
	    io = Manager(source, opts);
	  } else {
	    if (!cache[id]) {
	      debug('new io instance for %s', source);
	      cache[id] = Manager(source, opts);
	    }
	    io = cache[id];
	  }
	  if (parsed.query && !opts.query) {
	    opts.query = parsed.query;
	  } else if (opts && 'object' === _typeof(opts.query)) {
	    opts.query = encodeQueryString(opts.query);
	  }
	  return io.socket(parsed.path, opts);
	}
	/**
	 *  Helper method to parse query objects to string.
	 * @param {object} query
	 * @returns {string}
	 */
	function encodeQueryString(obj) {
	  var str = [];
	  for (var p in obj) {
	    if (obj.hasOwnProperty(p)) {
	      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
	    }
	  }
	  return str.join('&');
	}
	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = parser.protocol;

	/**
	 * `connect`.
	 *
	 * @param {String} uri
	 * @api public
	 */

	exports.connect = lookup;

	/**
	 * Expose constructors for standalone build.
	 *
	 * @api public
	 */

	exports.Manager = __webpack_require__(39);
	exports.Socket = __webpack_require__(70);

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	/**
	 * Module dependencies.
	 */

	var parseuri = __webpack_require__(24);
	var debug = __webpack_require__(25)('socket.io-client:url');

	/**
	 * Module exports.
	 */

	module.exports = url;

	/**
	 * URL parser.
	 *
	 * @param {String} url
	 * @param {Object} An object meant to mimic window.location.
	 *                 Defaults to window.location.
	 * @api public
	 */

	function url(uri, loc) {
	  var obj = uri;

	  // default to window.location
	  loc = loc || global.location;
	  if (null == uri) uri = loc.protocol + '//' + loc.host;

	  // relative path support
	  if ('string' === typeof uri) {
	    if ('/' === uri.charAt(0)) {
	      if ('/' === uri.charAt(1)) {
	        uri = loc.protocol + uri;
	      } else {
	        uri = loc.host + uri;
	      }
	    }

	    if (!/^(https?|wss?):\/\//.test(uri)) {
	      debug('protocol-less url %s', uri);
	      if ('undefined' !== typeof loc) {
	        uri = loc.protocol + '//' + uri;
	      } else {
	        uri = 'https://' + uri;
	      }
	    }

	    // parse
	    debug('parse %s', uri);
	    obj = parseuri(uri);
	  }

	  // make sure we treat `localhost:80` and `localhost` equally
	  if (!obj.port) {
	    if (/^(http|ws)$/.test(obj.protocol)) {
	      obj.port = '80';
	    } else if (/^(http|ws)s$/.test(obj.protocol)) {
	      obj.port = '443';
	    }
	  }

	  obj.path = obj.path || '/';

	  var ipv6 = obj.host.indexOf(':') !== -1;
	  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

	  // define unique id
	  obj.id = obj.protocol + '://' + host + ':' + obj.port;
	  // define href
	  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : ':' + obj.port);

	  return obj;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 24 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */

	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];

	module.exports = function parseuri(str) {
	    var src = str,
	        b = str.indexOf('['),
	        e = str.indexOf(']');

	    if (b != -1 && e != -1) {
	        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
	    }

	    var m = re.exec(str || ''),
	        uri = {},
	        i = 14;

	    while (i--) {
	        uri[parts[i]] = m[i] || '';
	    }

	    if (b != -1 && e != -1) {
	        uri.source = src;
	        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
	        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
	        uri.ipv6uri = true;
	    }

	    return uri;
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(27);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	  return typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style ||
	  // is firebug? http://stackoverflow.com/a/398120/376773
	  window.console && (console.firebug || console.exception && console.table) ||
	  // is firefox >= v31?
	  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	  navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31;
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function (v) {
	  try {
	    return JSON.stringify(v);
	  } catch (err) {
	    return '[UnexpectedJSONParseError]: ' + err.message;
	  }
	};

	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function (match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === (typeof console === 'undefined' ? 'undefined' : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch (e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    return exports.storage.debug;
	  } catch (e) {}

	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	  if (typeof process !== 'undefined' && 'env' in process) {
	    return process.env.DEBUG;
	  }
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)))

/***/ },
/* 26 */
/***/ function(module, exports) {

	'use strict';

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout() {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	})();
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while (len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () {
	    return '/';
	};
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function () {
	    return 0;
	};

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug.debug = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(28);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {}
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function (match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    // apply env-specific formatting
	    args = exports.formatArgs.apply(self, args);

	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/[\\^$+?.()|[\]{}]/g, '\\$&').replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

/***/ },
/* 28 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function (val, options) {
	  options = options || {};
	  var type = typeof val === 'undefined' ? 'undefined' : _typeof(val);
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 10000) {
	    return;
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) {
	    return;
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Module dependencies.
	 */

	var debug = __webpack_require__(30)('socket.io-parser');
	var json = __webpack_require__(33);
	var Emitter = __webpack_require__(35);
	var binary = __webpack_require__(36);
	var isBuf = __webpack_require__(38);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = 4;

	/**
	 * Packet types.
	 *
	 * @api public
	 */

	exports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'ACK', 'ERROR', 'BINARY_EVENT', 'BINARY_ACK'];

	/**
	 * Packet type `connect`.
	 *
	 * @api public
	 */

	exports.CONNECT = 0;

	/**
	 * Packet type `disconnect`.
	 *
	 * @api public
	 */

	exports.DISCONNECT = 1;

	/**
	 * Packet type `event`.
	 *
	 * @api public
	 */

	exports.EVENT = 2;

	/**
	 * Packet type `ack`.
	 *
	 * @api public
	 */

	exports.ACK = 3;

	/**
	 * Packet type `error`.
	 *
	 * @api public
	 */

	exports.ERROR = 4;

	/**
	 * Packet type 'binary event'
	 *
	 * @api public
	 */

	exports.BINARY_EVENT = 5;

	/**
	 * Packet type `binary ack`. For acks with binary arguments.
	 *
	 * @api public
	 */

	exports.BINARY_ACK = 6;

	/**
	 * Encoder constructor.
	 *
	 * @api public
	 */

	exports.Encoder = Encoder;

	/**
	 * Decoder constructor.
	 *
	 * @api public
	 */

	exports.Decoder = Decoder;

	/**
	 * A socket.io Encoder instance
	 *
	 * @api public
	 */

	function Encoder() {}

	/**
	 * Encode a packet as a single string if non-binary, or as a
	 * buffer sequence, depending on packet type.
	 *
	 * @param {Object} obj - packet object
	 * @param {Function} callback - function to handle encodings (likely engine.write)
	 * @return Calls callback with Array of encodings
	 * @api public
	 */

	Encoder.prototype.encode = function (obj, callback) {
	  debug('encoding packet %j', obj);

	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    encodeAsBinary(obj, callback);
	  } else {
	    var encoding = encodeAsString(obj);
	    callback([encoding]);
	  }
	};

	/**
	 * Encode packet as string.
	 *
	 * @param {Object} packet
	 * @return {String} encoded
	 * @api private
	 */

	function encodeAsString(obj) {
	  var str = '';
	  var nsp = false;

	  // first is type
	  str += obj.type;

	  // attachments if we have them
	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    str += obj.attachments;
	    str += '-';
	  }

	  // if we have a namespace other than `/`
	  // we append it followed by a comma `,`
	  if (obj.nsp && '/' != obj.nsp) {
	    nsp = true;
	    str += obj.nsp;
	  }

	  // immediately followed by the id
	  if (null != obj.id) {
	    if (nsp) {
	      str += ',';
	      nsp = false;
	    }
	    str += obj.id;
	  }

	  // json data
	  if (null != obj.data) {
	    if (nsp) str += ',';
	    str += json.stringify(obj.data);
	  }

	  debug('encoded %j as %s', obj, str);
	  return str;
	}

	/**
	 * Encode packet as 'buffer sequence' by removing blobs, and
	 * deconstructing packet into object with placeholders and
	 * a list of buffers.
	 *
	 * @param {Object} packet
	 * @return {Buffer} encoded
	 * @api private
	 */

	function encodeAsBinary(obj, callback) {

	  function writeEncoding(bloblessData) {
	    var deconstruction = binary.deconstructPacket(bloblessData);
	    var pack = encodeAsString(deconstruction.packet);
	    var buffers = deconstruction.buffers;

	    buffers.unshift(pack); // add packet info to beginning of data list
	    callback(buffers); // write all the buffers
	  }

	  binary.removeBlobs(obj, writeEncoding);
	}

	/**
	 * A socket.io Decoder instance
	 *
	 * @return {Object} decoder
	 * @api public
	 */

	function Decoder() {
	  this.reconstructor = null;
	}

	/**
	 * Mix in `Emitter` with Decoder.
	 */

	Emitter(Decoder.prototype);

	/**
	 * Decodes an ecoded packet string into packet JSON.
	 *
	 * @param {String} obj - encoded packet
	 * @return {Object} packet
	 * @api public
	 */

	Decoder.prototype.add = function (obj) {
	  var packet;
	  if ('string' == typeof obj) {
	    packet = decodeString(obj);
	    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) {
	      // binary packet's json
	      this.reconstructor = new BinaryReconstructor(packet);

	      // no attachments, labeled binary but no binary data to follow
	      if (this.reconstructor.reconPack.attachments === 0) {
	        this.emit('decoded', packet);
	      }
	    } else {
	      // non-binary full packet
	      this.emit('decoded', packet);
	    }
	  } else if (isBuf(obj) || obj.base64) {
	    // raw binary data
	    if (!this.reconstructor) {
	      throw new Error('got binary data when not reconstructing a packet');
	    } else {
	      packet = this.reconstructor.takeBinaryData(obj);
	      if (packet) {
	        // received final buffer
	        this.reconstructor = null;
	        this.emit('decoded', packet);
	      }
	    }
	  } else {
	    throw new Error('Unknown type: ' + obj);
	  }
	};

	/**
	 * Decode a packet String (JSON data)
	 *
	 * @param {String} str
	 * @return {Object} packet
	 * @api private
	 */

	function decodeString(str) {
	  var p = {};
	  var i = 0;

	  // look up type
	  p.type = Number(str.charAt(0));
	  if (null == exports.types[p.type]) return error();

	  // look up attachments if type binary
	  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
	    var buf = '';
	    while (str.charAt(++i) != '-') {
	      buf += str.charAt(i);
	      if (i == str.length) break;
	    }
	    if (buf != Number(buf) || str.charAt(i) != '-') {
	      throw new Error('Illegal attachments');
	    }
	    p.attachments = Number(buf);
	  }

	  // look up namespace (if any)
	  if ('/' == str.charAt(i + 1)) {
	    p.nsp = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (',' == c) break;
	      p.nsp += c;
	      if (i == str.length) break;
	    }
	  } else {
	    p.nsp = '/';
	  }

	  // look up id
	  var next = str.charAt(i + 1);
	  if ('' !== next && Number(next) == next) {
	    p.id = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (null == c || Number(c) != c) {
	        --i;
	        break;
	      }
	      p.id += str.charAt(i);
	      if (i == str.length) break;
	    }
	    p.id = Number(p.id);
	  }

	  // look up json data
	  if (str.charAt(++i)) {
	    p = tryParse(p, str.substr(i));
	  }

	  debug('decoded %s as %j', str, p);
	  return p;
	}

	function tryParse(p, str) {
	  try {
	    p.data = json.parse(str);
	  } catch (e) {
	    return error();
	  }
	  return p;
	};

	/**
	 * Deallocates a parser's resources
	 *
	 * @api public
	 */

	Decoder.prototype.destroy = function () {
	  if (this.reconstructor) {
	    this.reconstructor.finishedReconstruction();
	  }
	};

	/**
	 * A manager of a binary event's 'buffer sequence'. Should
	 * be constructed whenever a packet of type BINARY_EVENT is
	 * decoded.
	 *
	 * @param {Object} packet
	 * @return {BinaryReconstructor} initialized reconstructor
	 * @api private
	 */

	function BinaryReconstructor(packet) {
	  this.reconPack = packet;
	  this.buffers = [];
	}

	/**
	 * Method to be called when binary data received from connection
	 * after a BINARY_EVENT packet.
	 *
	 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	 * @return {null | Object} returns null if more binary data is expected or
	 *   a reconstructed packet object if all buffers have been received.
	 * @api private
	 */

	BinaryReconstructor.prototype.takeBinaryData = function (binData) {
	  this.buffers.push(binData);
	  if (this.buffers.length == this.reconPack.attachments) {
	    // done with buffer list
	    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
	    this.finishedReconstruction();
	    return packet;
	  }
	  return null;
	};

	/**
	 * Cleans up binary packet reconstruction variables.
	 *
	 * @api private
	 */

	BinaryReconstructor.prototype.finishedReconstruction = function () {
	  this.reconPack = null;
	  this.buffers = [];
	};

	function error(data) {
	  return {
	    type: exports.ERROR,
	    data: 'parser error'
	  };
	}

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(31);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return 'WebkitAppearance' in document.documentElement.style ||
	  // is firebug? http://stackoverflow.com/a/398120/376773
	  window.console && (console.firebug || console.exception && console.table) ||
	  // is firefox >= v31?
	  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	  navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31;
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function (v) {
	  return JSON.stringify(v);
	};

	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function (match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === (typeof console === 'undefined' ? 'undefined' : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch (e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch (e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(32);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {}
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function (match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

/***/ },
/* 32 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function (val, options) {
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long ? long(val) : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
	;(function () {
	  // Detect the `define` function exposed by asynchronous module loaders. The
	  // strict `define` check is necessary for compatibility with `r.js`.
	  var isLoader = "function" === "function" && __webpack_require__(34);

	  // A set of types used to distinguish objects from primitives.
	  var objectTypes = {
	    "function": true,
	    "object": true
	  };

	  // Detect the `exports` object exposed by CommonJS implementations.
	  var freeExports = objectTypes[ false ? "undefined" : _typeof(exports)] && exports && !exports.nodeType && exports;

	  // Use the `global` object exposed by Node (including Browserify via
	  // `insert-module-globals`), Narwhal, and Ringo as the default context,
	  // and the `window` object in browsers. Rhino exports a `global` function
	  // instead.
	  var root = objectTypes[typeof window === "undefined" ? "undefined" : _typeof(window)] && window || this,
	      freeGlobal = freeExports && objectTypes[ false ? "undefined" : _typeof(module)] && module && !module.nodeType && (typeof global === "undefined" ? "undefined" : _typeof(global)) == "object" && global;

	  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
	    root = freeGlobal;
	  }

	  // Public: Initializes JSON 3 using the given `context` object, attaching the
	  // `stringify` and `parse` functions to the specified `exports` object.
	  function runInContext(context, exports) {
	    context || (context = root["Object"]());
	    exports || (exports = root["Object"]());

	    // Native constructor aliases.
	    var Number = context["Number"] || root["Number"],
	        String = context["String"] || root["String"],
	        Object = context["Object"] || root["Object"],
	        Date = context["Date"] || root["Date"],
	        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
	        TypeError = context["TypeError"] || root["TypeError"],
	        Math = context["Math"] || root["Math"],
	        nativeJSON = context["JSON"] || root["JSON"];

	    // Delegate to the native `stringify` and `parse` implementations.
	    if ((typeof nativeJSON === "undefined" ? "undefined" : _typeof(nativeJSON)) == "object" && nativeJSON) {
	      exports.stringify = nativeJSON.stringify;
	      exports.parse = nativeJSON.parse;
	    }

	    // Convenience aliases.
	    var objectProto = Object.prototype,
	        getClass = objectProto.toString,
	        _isProperty,
	        _forEach,
	        undef;

	    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
	    var isExtended = new Date(-3509827334573292);
	    try {
	      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
	      // results for certain dates in Opera >= 10.53.
	      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
	      // Safari < 2.0.2 stores the internal millisecond time value correctly,
	      // but clips the values returned by the date methods to the range of
	      // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
	      isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
	    } catch (exception) {}

	    // Internal: Determines whether the native `JSON.stringify` and `parse`
	    // implementations are spec-compliant. Based on work by Ken Snyder.
	    function has(name) {
	      if (has[name] !== undef) {
	        // Return cached feature test result.
	        return has[name];
	      }
	      var isSupported;
	      if (name == "bug-string-char-index") {
	        // IE <= 7 doesn't support accessing string characters using square
	        // bracket notation. IE 8 only supports this for primitives.
	        isSupported = "a"[0] != "a";
	      } else if (name == "json") {
	        // Indicates whether both `JSON.stringify` and `JSON.parse` are
	        // supported.
	        isSupported = has("json-stringify") && has("json-parse");
	      } else {
	        var value,
	            serialized = "{\"a\":[1,true,false,null,\"\\u0000\\b\\n\\f\\r\\t\"]}";
	        // Test `JSON.stringify`.
	        if (name == "json-stringify") {
	          var stringify = exports.stringify,
	              stringifySupported = typeof stringify == "function" && isExtended;
	          if (stringifySupported) {
	            // A test function object with a custom `toJSON` method.
	            (value = function value() {
	              return 1;
	            }).toJSON = value;
	            try {
	              stringifySupported =
	              // Firefox 3.1b1 and b2 serialize string, number, and boolean
	              // primitives as object literals.
	              stringify(0) === "0" &&
	              // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
	              // literals.
	              stringify(new Number()) === "0" && stringify(new String()) == '""' &&
	              // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
	              // does not define a canonical JSON representation (this applies to
	              // objects with `toJSON` properties as well, *unless* they are nested
	              // within an object or array).
	              stringify(getClass) === undef &&
	              // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
	              // FF 3.1b3 pass this test.
	              stringify(undef) === undef &&
	              // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
	              // respectively, if the value is omitted entirely.
	              stringify() === undef &&
	              // FF 3.1b1, 2 throw an error if the given value is not a number,
	              // string, array, object, Boolean, or `null` literal. This applies to
	              // objects with custom `toJSON` methods as well, unless they are nested
	              // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
	              // methods entirely.
	              stringify(value) === "1" && stringify([value]) == "[1]" &&
	              // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
	              // `"[null]"`.
	              stringify([undef]) == "[null]" &&
	              // YUI 3.0.0b1 fails to serialize `null` literals.
	              stringify(null) == "null" &&
	              // FF 3.1b1, 2 halts serialization if an array contains a function:
	              // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
	              // elides non-JSON values from objects and arrays, unless they
	              // define custom `toJSON` methods.
	              stringify([undef, getClass, null]) == "[null,null,null]" &&
	              // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
	              // where character escape codes are expected (e.g., `\b` => `\u0008`).
	              stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
	              // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
	              stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
	              // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
	              // serialize extended years.
	              stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
	              // The milliseconds are optional in ES 5, but required in 5.1.
	              stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
	              // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
	              // four-digit years instead of six-digit years. Credits: @Yaffle.
	              stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
	              // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
	              // values less than 1000. Credits: @Yaffle.
	              stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
	            } catch (exception) {
	              stringifySupported = false;
	            }
	          }
	          isSupported = stringifySupported;
	        }
	        // Test `JSON.parse`.
	        if (name == "json-parse") {
	          var parse = exports.parse;
	          if (typeof parse == "function") {
	            try {
	              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
	              // Conforming implementations should also coerce the initial argument to
	              // a string prior to parsing.
	              if (parse("0") === 0 && !parse(false)) {
	                // Simple parsing test.
	                value = parse(serialized);
	                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
	                if (parseSupported) {
	                  try {
	                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
	                    parseSupported = !parse('"\t"');
	                  } catch (exception) {}
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
	                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
	                      // certain octal literals.
	                      parseSupported = parse("01") !== 1;
	                    } catch (exception) {}
	                  }
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
	                      // points. These environments, along with FF 3.1b1 and 2,
	                      // also allow trailing commas in JSON objects and arrays.
	                      parseSupported = parse("1.") !== 1;
	                    } catch (exception) {}
	                  }
	                }
	              }
	            } catch (exception) {
	              parseSupported = false;
	            }
	          }
	          isSupported = parseSupported;
	        }
	      }
	      return has[name] = !!isSupported;
	    }

	    if (!has("json")) {
	      // Common `[[Class]]` name aliases.
	      var functionClass = "[object Function]",
	          dateClass = "[object Date]",
	          numberClass = "[object Number]",
	          stringClass = "[object String]",
	          arrayClass = "[object Array]",
	          booleanClass = "[object Boolean]";

	      // Detect incomplete support for accessing string characters by index.
	      var charIndexBuggy = has("bug-string-char-index");

	      // Define additional utility methods if the `Date` methods are buggy.
	      if (!isExtended) {
	        var floor = Math.floor;
	        // A mapping between the months of the year and the number of days between
	        // January 1st and the first of the respective month.
	        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
	        // Internal: Calculates the number of days between the Unix epoch and the
	        // first day of the given month.
	        var getDay = function getDay(year, month) {
	          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
	        };
	      }

	      // Internal: Determines if a property is a direct property of the given
	      // object. Delegates to the native `Object#hasOwnProperty` method.
	      if (!(_isProperty = objectProto.hasOwnProperty)) {
	        _isProperty = function isProperty(property) {
	          var members = {},
	              constructor;
	          if ((members.__proto__ = null, members.__proto__ = {
	            // The *proto* property cannot be set multiple times in recent
	            // versions of Firefox and SeaMonkey.
	            "toString": 1
	          }, members).toString != getClass) {
	            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
	            // supports the mutable *proto* property.
	            _isProperty = function isProperty(property) {
	              // Capture and break the object's prototype chain (see section 8.6.2
	              // of the ES 5.1 spec). The parenthesized expression prevents an
	              // unsafe transformation by the Closure Compiler.
	              var original = this.__proto__,
	                  result = property in (this.__proto__ = null, this);
	              // Restore the original prototype chain.
	              this.__proto__ = original;
	              return result;
	            };
	          } else {
	            // Capture a reference to the top-level `Object` constructor.
	            constructor = members.constructor;
	            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
	            // other environments.
	            _isProperty = function isProperty(property) {
	              var parent = (this.constructor || constructor).prototype;
	              return property in this && !(property in parent && this[property] === parent[property]);
	            };
	          }
	          members = null;
	          return _isProperty.call(this, property);
	        };
	      }

	      // Internal: Normalizes the `for...in` iteration algorithm across
	      // environments. Each enumerated key is yielded to a `callback` function.
	      _forEach = function forEach(object, callback) {
	        var size = 0,
	            Properties,
	            members,
	            property;

	        // Tests for bugs in the current environment's `for...in` algorithm. The
	        // `valueOf` property inherits the non-enumerable flag from
	        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
	        (Properties = function Properties() {
	          this.valueOf = 0;
	        }).prototype.valueOf = 0;

	        // Iterate over a new instance of the `Properties` class.
	        members = new Properties();
	        for (property in members) {
	          // Ignore all properties inherited from `Object.prototype`.
	          if (_isProperty.call(members, property)) {
	            size++;
	          }
	        }
	        Properties = members = null;

	        // Normalize the iteration algorithm.
	        if (!size) {
	          // A list of non-enumerable properties inherited from `Object.prototype`.
	          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
	          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
	          // properties.
	          _forEach = function forEach(object, callback) {
	            var isFunction = getClass.call(object) == functionClass,
	                property,
	                length;
	            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[_typeof(object.hasOwnProperty)] && object.hasOwnProperty || _isProperty;
	            for (property in object) {
	              // Gecko <= 1.0 enumerates the `prototype` property of functions under
	              // certain conditions; IE does not.
	              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for each non-enumerable property.
	            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property)) {}
	          };
	        } else if (size == 2) {
	          // Safari <= 2.0.4 enumerates shadowed properties twice.
	          _forEach = function forEach(object, callback) {
	            // Create a set of iterated properties.
	            var members = {},
	                isFunction = getClass.call(object) == functionClass,
	                property;
	            for (property in object) {
	              // Store each property name to prevent double enumeration. The
	              // `prototype` property of functions is not enumerated due to cross-
	              // environment inconsistencies.
	              if (!(isFunction && property == "prototype") && !_isProperty.call(members, property) && (members[property] = 1) && _isProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	          };
	        } else {
	          // No bugs detected; use the standard `for...in` algorithm.
	          _forEach = function forEach(object, callback) {
	            var isFunction = getClass.call(object) == functionClass,
	                property,
	                isConstructor;
	            for (property in object) {
	              if (!(isFunction && property == "prototype") && _isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for the `constructor` property due to
	            // cross-environment inconsistencies.
	            if (isConstructor || _isProperty.call(object, property = "constructor")) {
	              callback(property);
	            }
	          };
	        }
	        return _forEach(object, callback);
	      };

	      // Public: Serializes a JavaScript `value` as a JSON string. The optional
	      // `filter` argument may specify either a function that alters how object and
	      // array members are serialized, or an array of strings and numbers that
	      // indicates which properties should be serialized. The optional `width`
	      // argument may be either a string or number that specifies the indentation
	      // level of the output.
	      if (!has("json-stringify")) {
	        // Internal: A map of control characters and their escaped equivalents.
	        var Escapes = {
	          92: "\\\\",
	          34: '\\"',
	          8: "\\b",
	          12: "\\f",
	          10: "\\n",
	          13: "\\r",
	          9: "\\t"
	        };

	        // Internal: Converts `value` into a zero-padded string such that its
	        // length is at least equal to `width`. The `width` must be <= 6.
	        var leadingZeroes = "000000";
	        var toPaddedString = function toPaddedString(width, value) {
	          // The `|| 0` expression is necessary to work around a bug in
	          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
	          return (leadingZeroes + (value || 0)).slice(-width);
	        };

	        // Internal: Double-quotes a string `value`, replacing all ASCII control
	        // characters (characters with code unit values between 0 and 31) with
	        // their escaped equivalents. This is an implementation of the
	        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
	        var unicodePrefix = "\\u00";
	        var quote = function quote(value) {
	          var result = '"',
	              index = 0,
	              length = value.length,
	              useCharIndex = !charIndexBuggy || length > 10;
	          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
	          for (; index < length; index++) {
	            var charCode = value.charCodeAt(index);
	            // If the character is a control character, append its Unicode or
	            // shorthand escape sequence; otherwise, append the character as-is.
	            switch (charCode) {
	              case 8:case 9:case 10:case 12:case 13:case 34:case 92:
	                result += Escapes[charCode];
	                break;
	              default:
	                if (charCode < 32) {
	                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
	                  break;
	                }
	                result += useCharIndex ? symbols[index] : value.charAt(index);
	            }
	          }
	          return result + '"';
	        };

	        // Internal: Recursively serializes an object. Implements the
	        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
	        var serialize = function serialize(property, object, callback, properties, whitespace, indentation, stack) {
	          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
	          try {
	            // Necessary for host object support.
	            value = object[property];
	          } catch (exception) {}
	          if ((typeof value === "undefined" ? "undefined" : _typeof(value)) == "object" && value) {
	            className = getClass.call(value);
	            if (className == dateClass && !_isProperty.call(value, "toJSON")) {
	              if (value > -1 / 0 && value < 1 / 0) {
	                // Dates are serialized according to the `Date#toJSON` method
	                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
	                // for the ISO 8601 date time string format.
	                if (getDay) {
	                  // Manually compute the year, month, date, hours, minutes,
	                  // seconds, and milliseconds if the `getUTC*` methods are
	                  // buggy. Adapted from @Yaffle's `date-shim` project.
	                  date = floor(value / 864e5);
	                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++) {}
	                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++) {}
	                  date = 1 + date - getDay(year, month);
	                  // The `time` value specifies the time within the day (see ES
	                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
	                  // to compute `A modulo B`, as the `%` operator does not
	                  // correspond to the `modulo` operation for negative numbers.
	                  time = (value % 864e5 + 864e5) % 864e5;
	                  // The hours, minutes, seconds, and milliseconds are obtained by
	                  // decomposing the time within the day. See section 15.9.1.10.
	                  hours = floor(time / 36e5) % 24;
	                  minutes = floor(time / 6e4) % 60;
	                  seconds = floor(time / 1e3) % 60;
	                  milliseconds = time % 1e3;
	                } else {
	                  year = value.getUTCFullYear();
	                  month = value.getUTCMonth();
	                  date = value.getUTCDate();
	                  hours = value.getUTCHours();
	                  minutes = value.getUTCMinutes();
	                  seconds = value.getUTCSeconds();
	                  milliseconds = value.getUTCMilliseconds();
	                }
	                // Serialize extended years correctly.
	                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
	                // Months, dates, hours, minutes, and seconds should have two
	                // digits; milliseconds should have three.
	                "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
	                // Milliseconds are optional in ES 5.0, but required in 5.1.
	                "." + toPaddedString(3, milliseconds) + "Z";
	              } else {
	                value = null;
	              }
	            } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || _isProperty.call(value, "toJSON"))) {
	              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
	              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
	              // ignores all `toJSON` methods on these objects unless they are
	              // defined directly on an instance.
	              value = value.toJSON(property);
	            }
	          }
	          if (callback) {
	            // If a replacement function was provided, call it to obtain the value
	            // for serialization.
	            value = callback.call(object, property, value);
	          }
	          if (value === null) {
	            return "null";
	          }
	          className = getClass.call(value);
	          if (className == booleanClass) {
	            // Booleans are represented literally.
	            return "" + value;
	          } else if (className == numberClass) {
	            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
	            // `"null"`.
	            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
	          } else if (className == stringClass) {
	            // Strings are double-quoted and escaped.
	            return quote("" + value);
	          }
	          // Recursively serialize objects and arrays.
	          if ((typeof value === "undefined" ? "undefined" : _typeof(value)) == "object") {
	            // Check for cyclic structures. This is a linear search; performance
	            // is inversely proportional to the number of unique nested objects.
	            for (length = stack.length; length--;) {
	              if (stack[length] === value) {
	                // Cyclic structures cannot be serialized by `JSON.stringify`.
	                throw TypeError();
	              }
	            }
	            // Add the object to the stack of traversed objects.
	            stack.push(value);
	            results = [];
	            // Save the current indentation level and indent one additional level.
	            prefix = indentation;
	            indentation += whitespace;
	            if (className == arrayClass) {
	              // Recursively serialize array elements.
	              for (index = 0, length = value.length; index < length; index++) {
	                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
	                results.push(element === undef ? "null" : element);
	              }
	              result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
	            } else {
	              // Recursively serialize object members. Members are selected from
	              // either a user-specified list of property names, or the object
	              // itself.
	              _forEach(properties || value, function (property) {
	                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
	                if (element !== undef) {
	                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
	                  // is not the empty string, let `member` {quote(property) + ":"}
	                  // be the concatenation of `member` and the `space` character."
	                  // The "`space` character" refers to the literal space
	                  // character, not the `space` {width} argument provided to
	                  // `JSON.stringify`.
	                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
	                }
	              });
	              result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
	            }
	            // Remove the object from the traversed object stack.
	            stack.pop();
	            return result;
	          }
	        };

	        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
	        exports.stringify = function (source, filter, width) {
	          var whitespace, callback, properties, className;
	          if (objectTypes[typeof filter === "undefined" ? "undefined" : _typeof(filter)] && filter) {
	            if ((className = getClass.call(filter)) == functionClass) {
	              callback = filter;
	            } else if (className == arrayClass) {
	              // Convert the property names array into a makeshift set.
	              properties = {};
	              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1)) {}
	            }
	          }
	          if (width) {
	            if ((className = getClass.call(width)) == numberClass) {
	              // Convert the `width` to an integer and create a string containing
	              // `width` number of space characters.
	              if ((width -= width % 1) > 0) {
	                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ") {}
	              }
	            } else if (className == stringClass) {
	              whitespace = width.length <= 10 ? width : width.slice(0, 10);
	            }
	          }
	          // Opera <= 7.54u2 discards the values associated with empty string keys
	          // (`""`) only if they are used directly within an object member list
	          // (e.g., `!("" in { "": 1})`).
	          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
	        };
	      }

	      // Public: Parses a JSON source string.
	      if (!has("json-parse")) {
	        var fromCharCode = String.fromCharCode;

	        // Internal: A map of escaped control characters and their unescaped
	        // equivalents.
	        var Unescapes = {
	          92: "\\",
	          34: '"',
	          47: "/",
	          98: "\b",
	          116: "\t",
	          110: "\n",
	          102: "\f",
	          114: "\r"
	        };

	        // Internal: Stores the parser state.
	        var Index, Source;

	        // Internal: Resets the parser state and throws a `SyntaxError`.
	        var abort = function abort() {
	          Index = Source = null;
	          throw SyntaxError();
	        };

	        // Internal: Returns the next token, or `"$"` if the parser has reached
	        // the end of the source string. A token may be a string, number, `null`
	        // literal, or Boolean literal.
	        var lex = function lex() {
	          var source = Source,
	              length = source.length,
	              value,
	              begin,
	              position,
	              isSigned,
	              charCode;
	          while (Index < length) {
	            charCode = source.charCodeAt(Index);
	            switch (charCode) {
	              case 9:case 10:case 13:case 32:
	                // Skip whitespace tokens, including tabs, carriage returns, line
	                // feeds, and space characters.
	                Index++;
	                break;
	              case 123:case 125:case 91:case 93:case 58:case 44:
	                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
	                // the current position.
	                value = charIndexBuggy ? source.charAt(Index) : source[Index];
	                Index++;
	                return value;
	              case 34:
	                // `"` delimits a JSON string; advance to the next character and
	                // begin parsing the string. String tokens are prefixed with the
	                // sentinel `@` character to distinguish them from punctuators and
	                // end-of-string tokens.
	                for (value = "@", Index++; Index < length;) {
	                  charCode = source.charCodeAt(Index);
	                  if (charCode < 32) {
	                    // Unescaped ASCII control characters (those with a code unit
	                    // less than the space character) are not permitted.
	                    abort();
	                  } else if (charCode == 92) {
	                    // A reverse solidus (`\`) marks the beginning of an escaped
	                    // control character (including `"`, `\`, and `/`) or Unicode
	                    // escape sequence.
	                    charCode = source.charCodeAt(++Index);
	                    switch (charCode) {
	                      case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:
	                        // Revive escaped control characters.
	                        value += Unescapes[charCode];
	                        Index++;
	                        break;
	                      case 117:
	                        // `\u` marks the beginning of a Unicode escape sequence.
	                        // Advance to the first character and validate the
	                        // four-digit code point.
	                        begin = ++Index;
	                        for (position = Index + 4; Index < position; Index++) {
	                          charCode = source.charCodeAt(Index);
	                          // A valid sequence comprises four hexdigits (case-
	                          // insensitive) that form a single hexadecimal value.
	                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
	                            // Invalid Unicode escape sequence.
	                            abort();
	                          }
	                        }
	                        // Revive the escaped character.
	                        value += fromCharCode("0x" + source.slice(begin, Index));
	                        break;
	                      default:
	                        // Invalid escape sequence.
	                        abort();
	                    }
	                  } else {
	                    if (charCode == 34) {
	                      // An unescaped double-quote character marks the end of the
	                      // string.
	                      break;
	                    }
	                    charCode = source.charCodeAt(Index);
	                    begin = Index;
	                    // Optimize for the common case where a string is valid.
	                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
	                      charCode = source.charCodeAt(++Index);
	                    }
	                    // Append the string as-is.
	                    value += source.slice(begin, Index);
	                  }
	                }
	                if (source.charCodeAt(Index) == 34) {
	                  // Advance to the next character and return the revived string.
	                  Index++;
	                  return value;
	                }
	                // Unterminated string.
	                abort();
	              default:
	                // Parse numbers and literals.
	                begin = Index;
	                // Advance past the negative sign, if one is specified.
	                if (charCode == 45) {
	                  isSigned = true;
	                  charCode = source.charCodeAt(++Index);
	                }
	                // Parse an integer or floating-point value.
	                if (charCode >= 48 && charCode <= 57) {
	                  // Leading zeroes are interpreted as octal literals.
	                  if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
	                    // Illegal octal literal.
	                    abort();
	                  }
	                  isSigned = false;
	                  // Parse the integer component.
	                  for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++) {}
	                  // Floats cannot contain a leading decimal point; however, this
	                  // case is already accounted for by the parser.
	                  if (source.charCodeAt(Index) == 46) {
	                    position = ++Index;
	                    // Parse the decimal component.
	                    for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}
	                    if (position == Index) {
	                      // Illegal trailing decimal.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Parse exponents. The `e` denoting the exponent is
	                  // case-insensitive.
	                  charCode = source.charCodeAt(Index);
	                  if (charCode == 101 || charCode == 69) {
	                    charCode = source.charCodeAt(++Index);
	                    // Skip past the sign following the exponent, if one is
	                    // specified.
	                    if (charCode == 43 || charCode == 45) {
	                      Index++;
	                    }
	                    // Parse the exponential component.
	                    for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}
	                    if (position == Index) {
	                      // Illegal empty exponent.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Coerce the parsed value to a JavaScript number.
	                  return +source.slice(begin, Index);
	                }
	                // A negative sign may only precede numbers.
	                if (isSigned) {
	                  abort();
	                }
	                // `true`, `false`, and `null` literals.
	                if (source.slice(Index, Index + 4) == "true") {
	                  Index += 4;
	                  return true;
	                } else if (source.slice(Index, Index + 5) == "false") {
	                  Index += 5;
	                  return false;
	                } else if (source.slice(Index, Index + 4) == "null") {
	                  Index += 4;
	                  return null;
	                }
	                // Unrecognized token.
	                abort();
	            }
	          }
	          // Return the sentinel `$` character if the parser has reached the end
	          // of the source string.
	          return "$";
	        };

	        // Internal: Parses a JSON `value` token.
	        var get = function get(value) {
	          var results, hasMembers;
	          if (value == "$") {
	            // Unexpected end of input.
	            abort();
	          }
	          if (typeof value == "string") {
	            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
	              // Remove the sentinel `@` character.
	              return value.slice(1);
	            }
	            // Parse object and array literals.
	            if (value == "[") {
	              // Parses a JSON array, returning a new JavaScript array.
	              results = [];
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing square bracket marks the end of the array literal.
	                if (value == "]") {
	                  break;
	                }
	                // If the array literal contains elements, the current token
	                // should be a comma separating the previous element from the
	                // next.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "]") {
	                      // Unexpected trailing `,` in array literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each array element.
	                    abort();
	                  }
	                }
	                // Elisions and leading commas are not permitted.
	                if (value == ",") {
	                  abort();
	                }
	                results.push(get(value));
	              }
	              return results;
	            } else if (value == "{") {
	              // Parses a JSON object, returning a new JavaScript object.
	              results = {};
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing curly brace marks the end of the object literal.
	                if (value == "}") {
	                  break;
	                }
	                // If the object literal contains members, the current token
	                // should be a comma separator.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "}") {
	                      // Unexpected trailing `,` in object literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each object member.
	                    abort();
	                  }
	                }
	                // Leading commas are not permitted, object property names must be
	                // double-quoted strings, and a `:` must separate each property
	                // name and value.
	                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
	                  abort();
	                }
	                results[value.slice(1)] = get(lex());
	              }
	              return results;
	            }
	            // Unexpected token encountered.
	            abort();
	          }
	          return value;
	        };

	        // Internal: Updates a traversed object member.
	        var update = function update(source, property, callback) {
	          var element = walk(source, property, callback);
	          if (element === undef) {
	            delete source[property];
	          } else {
	            source[property] = element;
	          }
	        };

	        // Internal: Recursively traverses a parsed JSON object, invoking the
	        // `callback` function for each value. This is an implementation of the
	        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
	        var walk = function walk(source, property, callback) {
	          var value = source[property],
	              length;
	          if ((typeof value === "undefined" ? "undefined" : _typeof(value)) == "object" && value) {
	            // `forEach` can't be used to traverse an array in Opera <= 8.54
	            // because its `Object#hasOwnProperty` implementation returns `false`
	            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
	            if (getClass.call(value) == arrayClass) {
	              for (length = value.length; length--;) {
	                update(value, length, callback);
	              }
	            } else {
	              _forEach(value, function (property) {
	                update(value, property, callback);
	              });
	            }
	          }
	          return callback.call(source, property, value);
	        };

	        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
	        exports.parse = function (source, callback) {
	          var result, value;
	          Index = 0;
	          Source = "" + source;
	          result = get(lex());
	          // If a JSON string contains multiple tokens, it is invalid.
	          if (lex() != "$") {
	            abort();
	          }
	          // Reset the parser state.
	          Index = Source = null;
	          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
	        };
	      }
	    }

	    exports["runInContext"] = runInContext;
	    return exports;
	  }

	  if (freeExports && !isLoader) {
	    // Export for CommonJS environments.
	    runInContext(root, freeExports);
	  } else {
	    // Export for web browsers and JavaScript engines.
	    var nativeJSON = root.JSON,
	        previousJSON = root["JSON3"],
	        isRestored = false;

	    var JSON3 = runInContext(root, root["JSON3"] = {
	      // Public: Restores the original value of the global `JSON` object and
	      // returns a reference to the `JSON3` object.
	      "noConflict": function noConflict() {
	        if (!isRestored) {
	          isRestored = true;
	          root.JSON = nativeJSON;
	          root["JSON3"] = previousJSON;
	          nativeJSON = previousJSON = null;
	        }
	        return JSON3;
	      }
	    });

	    root.JSON = {
	      "parse": JSON3.parse,
	      "stringify": JSON3.stringify
	    };
	  }

	  // Export for asynchronous module loaders.
	  if (isLoader) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return JSON3;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}).call(undefined);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module), (function() { return this; }())))

/***/ },
/* 34 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 35 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || []).push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function (event, fn) {
	  var self = this;
	  this._callbacks = this._callbacks || {};

	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function (event) {
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1),
	      callbacks = this._callbacks[event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function (event) {
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function (event) {
	  return !!this.listeners(event).length;
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*global Blob,File*/

	/**
	 * Module requirements
	 */

	var isArray = __webpack_require__(37);
	var isBuf = __webpack_require__(38);

	/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */

	exports.deconstructPacket = function (packet) {
	  var buffers = [];
	  var packetData = packet.data;

	  function _deconstructPacket(data) {
	    if (!data) return data;

	    if (isBuf(data)) {
	      var placeholder = { _placeholder: true, num: buffers.length };
	      buffers.push(data);
	      return placeholder;
	    } else if (isArray(data)) {
	      var newData = new Array(data.length);
	      for (var i = 0; i < data.length; i++) {
	        newData[i] = _deconstructPacket(data[i]);
	      }
	      return newData;
	    } else if ('object' == (typeof data === 'undefined' ? 'undefined' : _typeof(data)) && !(data instanceof Date)) {
	      var newData = {};
	      for (var key in data) {
	        newData[key] = _deconstructPacket(data[key]);
	      }
	      return newData;
	    }
	    return data;
	  }

	  var pack = packet;
	  pack.data = _deconstructPacket(packetData);
	  pack.attachments = buffers.length; // number of binary 'attachments'
	  return { packet: pack, buffers: buffers };
	};

	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */

	exports.reconstructPacket = function (packet, buffers) {
	  var curPlaceHolder = 0;

	  function _reconstructPacket(data) {
	    if (data && data._placeholder) {
	      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
	      return buf;
	    } else if (isArray(data)) {
	      for (var i = 0; i < data.length; i++) {
	        data[i] = _reconstructPacket(data[i]);
	      }
	      return data;
	    } else if (data && 'object' == (typeof data === 'undefined' ? 'undefined' : _typeof(data))) {
	      for (var key in data) {
	        data[key] = _reconstructPacket(data[key]);
	      }
	      return data;
	    }
	    return data;
	  }

	  packet.data = _reconstructPacket(packet.data);
	  packet.attachments = undefined; // no longer useful
	  return packet;
	};

	/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */

	exports.removeBlobs = function (data, callback) {
	  function _removeBlobs(obj, curKey, containingObject) {
	    if (!obj) return obj;

	    // convert any blob
	    if (global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
	      pendingBlobs++;

	      // async filereader
	      var fileReader = new FileReader();
	      fileReader.onload = function () {
	        // this.result == arraybuffer
	        if (containingObject) {
	          containingObject[curKey] = this.result;
	        } else {
	          bloblessData = this.result;
	        }

	        // if nothing pending its callback time
	        if (! --pendingBlobs) {
	          callback(bloblessData);
	        }
	      };

	      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
	    } else if (isArray(obj)) {
	      // handle array
	      for (var i = 0; i < obj.length; i++) {
	        _removeBlobs(obj[i], i, obj);
	      }
	    } else if (obj && 'object' == (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) && !isBuf(obj)) {
	      // and object
	      for (var key in obj) {
	        _removeBlobs(obj[key], key, obj);
	      }
	    }
	  }

	  var pendingBlobs = 0;
	  var bloblessData = data;
	  _removeBlobs(bloblessData);
	  if (!pendingBlobs) {
	    callback(bloblessData);
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 37 */
/***/ function(module, exports) {

	'use strict';

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};

/***/ },
/* 38 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	module.exports = isBuf;

	/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */

	function isBuf(obj) {
	  return global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * Module dependencies.
	 */

	var eio = __webpack_require__(40);
	var Socket = __webpack_require__(70);
	var Emitter = __webpack_require__(71);
	var parser = __webpack_require__(29);
	var on = __webpack_require__(73);
	var bind = __webpack_require__(74);
	var debug = __webpack_require__(25)('socket.io-client:manager');
	var indexOf = __webpack_require__(68);
	var Backoff = __webpack_require__(75);

	/**
	 * IE6+ hasOwnProperty
	 */

	var has = Object.prototype.hasOwnProperty;

	/**
	 * Module exports
	 */

	module.exports = Manager;

	/**
	 * `Manager` constructor.
	 *
	 * @param {String} engine instance or engine uri/opts
	 * @param {Object} options
	 * @api public
	 */

	function Manager(uri, opts) {
	  if (!(this instanceof Manager)) return new Manager(uri, opts);
	  if (uri && 'object' === (typeof uri === 'undefined' ? 'undefined' : _typeof(uri))) {
	    opts = uri;
	    uri = undefined;
	  }
	  opts = opts || {};

	  opts.path = opts.path || '/socket.io';
	  this.nsps = {};
	  this.subs = [];
	  this.opts = opts;
	  this.reconnection(opts.reconnection !== false);
	  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
	  this.reconnectionDelay(opts.reconnectionDelay || 1000);
	  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
	  this.randomizationFactor(opts.randomizationFactor || 0.5);
	  this.backoff = new Backoff({
	    min: this.reconnectionDelay(),
	    max: this.reconnectionDelayMax(),
	    jitter: this.randomizationFactor()
	  });
	  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
	  this.readyState = 'closed';
	  this.uri = uri;
	  this.connecting = [];
	  this.lastPing = null;
	  this.encoding = false;
	  this.packetBuffer = [];
	  this.encoder = new parser.Encoder();
	  this.decoder = new parser.Decoder();
	  this.autoConnect = opts.autoConnect !== false;
	  if (this.autoConnect) this.open();
	}

	/**
	 * Propagate given event to sockets and emit on `this`
	 *
	 * @api private
	 */

	Manager.prototype.emitAll = function () {
	  this.emit.apply(this, arguments);
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
	    }
	  }
	};

	/**
	 * Update `socket.id` of all sockets
	 *
	 * @api private
	 */

	Manager.prototype.updateSocketIds = function () {
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].id = this.engine.id;
	    }
	  }
	};

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Manager.prototype);

	/**
	 * Sets the `reconnection` config.
	 *
	 * @param {Boolean} true/false if it should automatically reconnect
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnection = function (v) {
	  if (!arguments.length) return this._reconnection;
	  this._reconnection = !!v;
	  return this;
	};

	/**
	 * Sets the reconnection attempts config.
	 *
	 * @param {Number} max reconnection attempts before giving up
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionAttempts = function (v) {
	  if (!arguments.length) return this._reconnectionAttempts;
	  this._reconnectionAttempts = v;
	  return this;
	};

	/**
	 * Sets the delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelay = function (v) {
	  if (!arguments.length) return this._reconnectionDelay;
	  this._reconnectionDelay = v;
	  this.backoff && this.backoff.setMin(v);
	  return this;
	};

	Manager.prototype.randomizationFactor = function (v) {
	  if (!arguments.length) return this._randomizationFactor;
	  this._randomizationFactor = v;
	  this.backoff && this.backoff.setJitter(v);
	  return this;
	};

	/**
	 * Sets the maximum delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelayMax = function (v) {
	  if (!arguments.length) return this._reconnectionDelayMax;
	  this._reconnectionDelayMax = v;
	  this.backoff && this.backoff.setMax(v);
	  return this;
	};

	/**
	 * Sets the connection timeout. `false` to disable
	 *
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.timeout = function (v) {
	  if (!arguments.length) return this._timeout;
	  this._timeout = v;
	  return this;
	};

	/**
	 * Starts trying to reconnect if reconnection is enabled and we have not
	 * started reconnecting yet
	 *
	 * @api private
	 */

	Manager.prototype.maybeReconnectOnOpen = function () {
	  // Only try to reconnect if it's the first time we're connecting
	  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
	    // keeps reconnection from firing twice for the same reconnection loop
	    this.reconnect();
	  }
	};

	/**
	 * Sets the current transport `socket`.
	 *
	 * @param {Function} optional, callback
	 * @return {Manager} self
	 * @api public
	 */

	Manager.prototype.open = Manager.prototype.connect = function (fn, opts) {
	  debug('readyState %s', this.readyState);
	  if (~this.readyState.indexOf('open')) return this;

	  debug('opening %s', this.uri);
	  this.engine = eio(this.uri, this.opts);
	  var socket = this.engine;
	  var self = this;
	  this.readyState = 'opening';
	  this.skipReconnect = false;

	  // emit `open`
	  var openSub = on(socket, 'open', function () {
	    self.onopen();
	    fn && fn();
	  });

	  // emit `connect_error`
	  var errorSub = on(socket, 'error', function (data) {
	    debug('connect_error');
	    self.cleanup();
	    self.readyState = 'closed';
	    self.emitAll('connect_error', data);
	    if (fn) {
	      var err = new Error('Connection error');
	      err.data = data;
	      fn(err);
	    } else {
	      // Only do this if there is no fn to handle the error
	      self.maybeReconnectOnOpen();
	    }
	  });

	  // emit `connect_timeout`
	  if (false !== this._timeout) {
	    var timeout = this._timeout;
	    debug('connect attempt will timeout after %d', timeout);

	    // set timer
	    var timer = setTimeout(function () {
	      debug('connect attempt timed out after %d', timeout);
	      openSub.destroy();
	      socket.close();
	      socket.emit('error', 'timeout');
	      self.emitAll('connect_timeout', timeout);
	    }, timeout);

	    this.subs.push({
	      destroy: function destroy() {
	        clearTimeout(timer);
	      }
	    });
	  }

	  this.subs.push(openSub);
	  this.subs.push(errorSub);

	  return this;
	};

	/**
	 * Called upon transport open.
	 *
	 * @api private
	 */

	Manager.prototype.onopen = function () {
	  debug('open');

	  // clear old subs
	  this.cleanup();

	  // mark as open
	  this.readyState = 'open';
	  this.emit('open');

	  // add new subs
	  var socket = this.engine;
	  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
	  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
	  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
	  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
	  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
	  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
	};

	/**
	 * Called upon a ping.
	 *
	 * @api private
	 */

	Manager.prototype.onping = function () {
	  this.lastPing = new Date();
	  this.emitAll('ping');
	};

	/**
	 * Called upon a packet.
	 *
	 * @api private
	 */

	Manager.prototype.onpong = function () {
	  this.emitAll('pong', new Date() - this.lastPing);
	};

	/**
	 * Called with data.
	 *
	 * @api private
	 */

	Manager.prototype.ondata = function (data) {
	  this.decoder.add(data);
	};

	/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */

	Manager.prototype.ondecoded = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon socket error.
	 *
	 * @api private
	 */

	Manager.prototype.onerror = function (err) {
	  debug('error', err);
	  this.emitAll('error', err);
	};

	/**
	 * Creates a new socket for the given `nsp`.
	 *
	 * @return {Socket}
	 * @api public
	 */

	Manager.prototype.socket = function (nsp, opts) {
	  var socket = this.nsps[nsp];
	  if (!socket) {
	    socket = new Socket(this, nsp, opts);
	    this.nsps[nsp] = socket;
	    var self = this;
	    socket.on('connecting', onConnecting);
	    socket.on('connect', function () {
	      socket.id = self.engine.id;
	    });

	    if (this.autoConnect) {
	      // manually call here since connecting evnet is fired before listening
	      onConnecting();
	    }
	  }

	  function onConnecting() {
	    if (!~indexOf(self.connecting, socket)) {
	      self.connecting.push(socket);
	    }
	  }

	  return socket;
	};

	/**
	 * Called upon a socket close.
	 *
	 * @param {Socket} socket
	 */

	Manager.prototype.destroy = function (socket) {
	  var index = indexOf(this.connecting, socket);
	  if (~index) this.connecting.splice(index, 1);
	  if (this.connecting.length) return;

	  this.close();
	};

	/**
	 * Writes a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Manager.prototype.packet = function (packet) {
	  debug('writing packet %j', packet);
	  var self = this;
	  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

	  if (!self.encoding) {
	    // encode, then write to engine with result
	    self.encoding = true;
	    this.encoder.encode(packet, function (encodedPackets) {
	      for (var i = 0; i < encodedPackets.length; i++) {
	        self.engine.write(encodedPackets[i], packet.options);
	      }
	      self.encoding = false;
	      self.processPacketQueue();
	    });
	  } else {
	    // add packet to the queue
	    self.packetBuffer.push(packet);
	  }
	};

	/**
	 * If packet buffer is non-empty, begins encoding the
	 * next packet in line.
	 *
	 * @api private
	 */

	Manager.prototype.processPacketQueue = function () {
	  if (this.packetBuffer.length > 0 && !this.encoding) {
	    var pack = this.packetBuffer.shift();
	    this.packet(pack);
	  }
	};

	/**
	 * Clean up transport subscriptions and packet buffer.
	 *
	 * @api private
	 */

	Manager.prototype.cleanup = function () {
	  debug('cleanup');

	  var subsLength = this.subs.length;
	  for (var i = 0; i < subsLength; i++) {
	    var sub = this.subs.shift();
	    sub.destroy();
	  }

	  this.packetBuffer = [];
	  this.encoding = false;
	  this.lastPing = null;

	  this.decoder.destroy();
	};

	/**
	 * Close the current socket.
	 *
	 * @api private
	 */

	Manager.prototype.close = Manager.prototype.disconnect = function () {
	  debug('disconnect');
	  this.skipReconnect = true;
	  this.reconnecting = false;
	  if ('opening' === this.readyState) {
	    // `onclose` will not fire because
	    // an open event never happened
	    this.cleanup();
	  }
	  this.backoff.reset();
	  this.readyState = 'closed';
	  if (this.engine) this.engine.close();
	};

	/**
	 * Called upon engine close.
	 *
	 * @api private
	 */

	Manager.prototype.onclose = function (reason) {
	  debug('onclose');

	  this.cleanup();
	  this.backoff.reset();
	  this.readyState = 'closed';
	  this.emit('close', reason);

	  if (this._reconnection && !this.skipReconnect) {
	    this.reconnect();
	  }
	};

	/**
	 * Attempt a reconnection.
	 *
	 * @api private
	 */

	Manager.prototype.reconnect = function () {
	  if (this.reconnecting || this.skipReconnect) return this;

	  var self = this;

	  if (this.backoff.attempts >= this._reconnectionAttempts) {
	    debug('reconnect failed');
	    this.backoff.reset();
	    this.emitAll('reconnect_failed');
	    this.reconnecting = false;
	  } else {
	    var delay = this.backoff.duration();
	    debug('will wait %dms before reconnect attempt', delay);

	    this.reconnecting = true;
	    var timer = setTimeout(function () {
	      if (self.skipReconnect) return;

	      debug('attempting reconnect');
	      self.emitAll('reconnect_attempt', self.backoff.attempts);
	      self.emitAll('reconnecting', self.backoff.attempts);

	      // check again for the case socket closed in above events
	      if (self.skipReconnect) return;

	      self.open(function (err) {
	        if (err) {
	          debug('reconnect attempt error');
	          self.reconnecting = false;
	          self.reconnect();
	          self.emitAll('reconnect_error', err.data);
	        } else {
	          debug('reconnect success');
	          self.onreconnect();
	        }
	      });
	    }, delay);

	    this.subs.push({
	      destroy: function destroy() {
	        clearTimeout(timer);
	      }
	    });
	  }
	};

	/**
	 * Called upon successful reconnect.
	 *
	 * @api private
	 */

	Manager.prototype.onreconnect = function () {
	  var attempt = this.backoff.attempts;
	  this.reconnecting = false;
	  this.backoff.reset();
	  this.updateSocketIds();
	  this.emitAll('reconnect', attempt);
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(41);

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(42);

	/**
	 * Exports parser
	 *
	 * @api public
	 *
	 */
	module.exports.parser = __webpack_require__(49);

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * Module dependencies.
	 */

	var transports = __webpack_require__(43);
	var Emitter = __webpack_require__(58);
	var debug = __webpack_require__(62)('engine.io-client:socket');
	var index = __webpack_require__(68);
	var parser = __webpack_require__(49);
	var parseuri = __webpack_require__(24);
	var parsejson = __webpack_require__(69);
	var parseqs = __webpack_require__(59);

	/**
	 * Module exports.
	 */

	module.exports = Socket;

	/**
	 * Socket constructor.
	 *
	 * @param {String|Object} uri or options
	 * @param {Object} options
	 * @api public
	 */

	function Socket(uri, opts) {
	  if (!(this instanceof Socket)) return new Socket(uri, opts);

	  opts = opts || {};

	  if (uri && 'object' === (typeof uri === 'undefined' ? 'undefined' : _typeof(uri))) {
	    opts = uri;
	    uri = null;
	  }

	  if (uri) {
	    uri = parseuri(uri);
	    opts.hostname = uri.host;
	    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
	    opts.port = uri.port;
	    if (uri.query) opts.query = uri.query;
	  } else if (opts.host) {
	    opts.hostname = parseuri(opts.host).host;
	  }

	  this.secure = null != opts.secure ? opts.secure : global.location && 'https:' === location.protocol;

	  if (opts.hostname && !opts.port) {
	    // if no port is specified manually, use the protocol default
	    opts.port = this.secure ? '443' : '80';
	  }

	  this.agent = opts.agent || false;
	  this.hostname = opts.hostname || (global.location ? location.hostname : 'localhost');
	  this.port = opts.port || (global.location && location.port ? location.port : this.secure ? 443 : 80);
	  this.query = opts.query || {};
	  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
	  this.upgrade = false !== opts.upgrade;
	  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
	  this.forceJSONP = !!opts.forceJSONP;
	  this.jsonp = false !== opts.jsonp;
	  this.forceBase64 = !!opts.forceBase64;
	  this.enablesXDR = !!opts.enablesXDR;
	  this.timestampParam = opts.timestampParam || 't';
	  this.timestampRequests = opts.timestampRequests;
	  this.transports = opts.transports || ['polling', 'websocket'];
	  this.readyState = '';
	  this.writeBuffer = [];
	  this.prevBufferLen = 0;
	  this.policyPort = opts.policyPort || 843;
	  this.rememberUpgrade = opts.rememberUpgrade || false;
	  this.binaryType = null;
	  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
	  this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;

	  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
	  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
	    this.perMessageDeflate.threshold = 1024;
	  }

	  // SSL options for Node.js client
	  this.pfx = opts.pfx || null;
	  this.key = opts.key || null;
	  this.passphrase = opts.passphrase || null;
	  this.cert = opts.cert || null;
	  this.ca = opts.ca || null;
	  this.ciphers = opts.ciphers || null;
	  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;
	  this.forceNode = !!opts.forceNode;

	  // other options for Node.js client
	  var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global;
	  if (freeGlobal.global === freeGlobal) {
	    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
	      this.extraHeaders = opts.extraHeaders;
	    }

	    if (opts.localAddress) {
	      this.localAddress = opts.localAddress;
	    }
	  }

	  // set on handshake
	  this.id = null;
	  this.upgrades = null;
	  this.pingInterval = null;
	  this.pingTimeout = null;

	  // set on heartbeat
	  this.pingIntervalTimer = null;
	  this.pingTimeoutTimer = null;

	  this.open();
	}

	Socket.priorWebsocketSuccess = false;

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Socket.prototype);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	Socket.protocol = parser.protocol; // this is an int

	/**
	 * Expose deps for legacy compatibility
	 * and standalone browser access.
	 */

	Socket.Socket = Socket;
	Socket.Transport = __webpack_require__(48);
	Socket.transports = __webpack_require__(43);
	Socket.parser = __webpack_require__(49);

	/**
	 * Creates transport of the given type.
	 *
	 * @param {String} transport name
	 * @return {Transport}
	 * @api private
	 */

	Socket.prototype.createTransport = function (name) {
	  debug('creating transport "%s"', name);
	  var query = clone(this.query);

	  // append engine.io protocol identifier
	  query.EIO = parser.protocol;

	  // transport name
	  query.transport = name;

	  // session id if we already have one
	  if (this.id) query.sid = this.id;

	  var transport = new transports[name]({
	    agent: this.agent,
	    hostname: this.hostname,
	    port: this.port,
	    secure: this.secure,
	    path: this.path,
	    query: query,
	    forceJSONP: this.forceJSONP,
	    jsonp: this.jsonp,
	    forceBase64: this.forceBase64,
	    enablesXDR: this.enablesXDR,
	    timestampRequests: this.timestampRequests,
	    timestampParam: this.timestampParam,
	    policyPort: this.policyPort,
	    socket: this,
	    pfx: this.pfx,
	    key: this.key,
	    passphrase: this.passphrase,
	    cert: this.cert,
	    ca: this.ca,
	    ciphers: this.ciphers,
	    rejectUnauthorized: this.rejectUnauthorized,
	    perMessageDeflate: this.perMessageDeflate,
	    extraHeaders: this.extraHeaders,
	    forceNode: this.forceNode,
	    localAddress: this.localAddress
	  });

	  return transport;
	};

	function clone(obj) {
	  var o = {};
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      o[i] = obj[i];
	    }
	  }
	  return o;
	}

	/**
	 * Initializes transport to use and starts probe.
	 *
	 * @api private
	 */
	Socket.prototype.open = function () {
	  var transport;
	  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
	    transport = 'websocket';
	  } else if (0 === this.transports.length) {
	    // Emit error on next tick so it can be listened to
	    var self = this;
	    setTimeout(function () {
	      self.emit('error', 'No transports available');
	    }, 0);
	    return;
	  } else {
	    transport = this.transports[0];
	  }
	  this.readyState = 'opening';

	  // Retry with the next transport if the transport is disabled (jsonp: false)
	  try {
	    transport = this.createTransport(transport);
	  } catch (e) {
	    this.transports.shift();
	    this.open();
	    return;
	  }

	  transport.open();
	  this.setTransport(transport);
	};

	/**
	 * Sets the current transport. Disables the existing one (if any).
	 *
	 * @api private
	 */

	Socket.prototype.setTransport = function (transport) {
	  debug('setting transport %s', transport.name);
	  var self = this;

	  if (this.transport) {
	    debug('clearing existing transport %s', this.transport.name);
	    this.transport.removeAllListeners();
	  }

	  // set up transport
	  this.transport = transport;

	  // set up transport listeners
	  transport.on('drain', function () {
	    self.onDrain();
	  }).on('packet', function (packet) {
	    self.onPacket(packet);
	  }).on('error', function (e) {
	    self.onError(e);
	  }).on('close', function () {
	    self.onClose('transport close');
	  });
	};

	/**
	 * Probes a transport.
	 *
	 * @param {String} transport name
	 * @api private
	 */

	Socket.prototype.probe = function (name) {
	  debug('probing transport "%s"', name);
	  var transport = this.createTransport(name, { probe: 1 });
	  var failed = false;
	  var self = this;

	  Socket.priorWebsocketSuccess = false;

	  function onTransportOpen() {
	    if (self.onlyBinaryUpgrades) {
	      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
	      failed = failed || upgradeLosesBinary;
	    }
	    if (failed) return;

	    debug('probe transport "%s" opened', name);
	    transport.send([{ type: 'ping', data: 'probe' }]);
	    transport.once('packet', function (msg) {
	      if (failed) return;
	      if ('pong' === msg.type && 'probe' === msg.data) {
	        debug('probe transport "%s" pong', name);
	        self.upgrading = true;
	        self.emit('upgrading', transport);
	        if (!transport) return;
	        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

	        debug('pausing current transport "%s"', self.transport.name);
	        self.transport.pause(function () {
	          if (failed) return;
	          if ('closed' === self.readyState) return;
	          debug('changing transport and sending upgrade packet');

	          cleanup();

	          self.setTransport(transport);
	          transport.send([{ type: 'upgrade' }]);
	          self.emit('upgrade', transport);
	          transport = null;
	          self.upgrading = false;
	          self.flush();
	        });
	      } else {
	        debug('probe transport "%s" failed', name);
	        var err = new Error('probe error');
	        err.transport = transport.name;
	        self.emit('upgradeError', err);
	      }
	    });
	  }

	  function freezeTransport() {
	    if (failed) return;

	    // Any callback called by transport should be ignored since now
	    failed = true;

	    cleanup();

	    transport.close();
	    transport = null;
	  }

	  // Handle any error that happens while probing
	  function onerror(err) {
	    var error = new Error('probe error: ' + err);
	    error.transport = transport.name;

	    freezeTransport();

	    debug('probe transport "%s" failed because of error: %s', name, err);

	    self.emit('upgradeError', error);
	  }

	  function onTransportClose() {
	    onerror('transport closed');
	  }

	  // When the socket is closed while we're probing
	  function onclose() {
	    onerror('socket closed');
	  }

	  // When the socket is upgraded while we're probing
	  function onupgrade(to) {
	    if (transport && to.name !== transport.name) {
	      debug('"%s" works - aborting "%s"', to.name, transport.name);
	      freezeTransport();
	    }
	  }

	  // Remove all listeners on the transport and on self
	  function cleanup() {
	    transport.removeListener('open', onTransportOpen);
	    transport.removeListener('error', onerror);
	    transport.removeListener('close', onTransportClose);
	    self.removeListener('close', onclose);
	    self.removeListener('upgrading', onupgrade);
	  }

	  transport.once('open', onTransportOpen);
	  transport.once('error', onerror);
	  transport.once('close', onTransportClose);

	  this.once('close', onclose);
	  this.once('upgrading', onupgrade);

	  transport.open();
	};

	/**
	 * Called when connection is deemed open.
	 *
	 * @api public
	 */

	Socket.prototype.onOpen = function () {
	  debug('socket open');
	  this.readyState = 'open';
	  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
	  this.emit('open');
	  this.flush();

	  // we check for `readyState` in case an `open`
	  // listener already closed the socket
	  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
	    debug('starting upgrade probes');
	    for (var i = 0, l = this.upgrades.length; i < l; i++) {
	      this.probe(this.upgrades[i]);
	    }
	  }
	};

	/**
	 * Handles a packet.
	 *
	 * @api private
	 */

	Socket.prototype.onPacket = function (packet) {
	  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
	    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

	    this.emit('packet', packet);

	    // Socket is live - any packet counts
	    this.emit('heartbeat');

	    switch (packet.type) {
	      case 'open':
	        this.onHandshake(parsejson(packet.data));
	        break;

	      case 'pong':
	        this.setPing();
	        this.emit('pong');
	        break;

	      case 'error':
	        var err = new Error('server error');
	        err.code = packet.data;
	        this.onError(err);
	        break;

	      case 'message':
	        this.emit('data', packet.data);
	        this.emit('message', packet.data);
	        break;
	    }
	  } else {
	    debug('packet received with socket readyState "%s"', this.readyState);
	  }
	};

	/**
	 * Called upon handshake completion.
	 *
	 * @param {Object} handshake obj
	 * @api private
	 */

	Socket.prototype.onHandshake = function (data) {
	  this.emit('handshake', data);
	  this.id = data.sid;
	  this.transport.query.sid = data.sid;
	  this.upgrades = this.filterUpgrades(data.upgrades);
	  this.pingInterval = data.pingInterval;
	  this.pingTimeout = data.pingTimeout;
	  this.onOpen();
	  // In case open handler closes socket
	  if ('closed' === this.readyState) return;
	  this.setPing();

	  // Prolong liveness of socket on heartbeat
	  this.removeListener('heartbeat', this.onHeartbeat);
	  this.on('heartbeat', this.onHeartbeat);
	};

	/**
	 * Resets ping timeout.
	 *
	 * @api private
	 */

	Socket.prototype.onHeartbeat = function (timeout) {
	  clearTimeout(this.pingTimeoutTimer);
	  var self = this;
	  self.pingTimeoutTimer = setTimeout(function () {
	    if ('closed' === self.readyState) return;
	    self.onClose('ping timeout');
	  }, timeout || self.pingInterval + self.pingTimeout);
	};

	/**
	 * Pings server every `this.pingInterval` and expects response
	 * within `this.pingTimeout` or closes connection.
	 *
	 * @api private
	 */

	Socket.prototype.setPing = function () {
	  var self = this;
	  clearTimeout(self.pingIntervalTimer);
	  self.pingIntervalTimer = setTimeout(function () {
	    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
	    self.ping();
	    self.onHeartbeat(self.pingTimeout);
	  }, self.pingInterval);
	};

	/**
	* Sends a ping packet.
	*
	* @api private
	*/

	Socket.prototype.ping = function () {
	  var self = this;
	  this.sendPacket('ping', function () {
	    self.emit('ping');
	  });
	};

	/**
	 * Called on `drain` event
	 *
	 * @api private
	 */

	Socket.prototype.onDrain = function () {
	  this.writeBuffer.splice(0, this.prevBufferLen);

	  // setting prevBufferLen = 0 is very important
	  // for example, when upgrading, upgrade packet is sent over,
	  // and a nonzero prevBufferLen could cause problems on `drain`
	  this.prevBufferLen = 0;

	  if (0 === this.writeBuffer.length) {
	    this.emit('drain');
	  } else {
	    this.flush();
	  }
	};

	/**
	 * Flush write buffers.
	 *
	 * @api private
	 */

	Socket.prototype.flush = function () {
	  if ('closed' !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
	    debug('flushing %d packets in socket', this.writeBuffer.length);
	    this.transport.send(this.writeBuffer);
	    // keep track of current length of writeBuffer
	    // splice writeBuffer and callbackBuffer on `drain`
	    this.prevBufferLen = this.writeBuffer.length;
	    this.emit('flush');
	  }
	};

	/**
	 * Sends a message.
	 *
	 * @param {String} message.
	 * @param {Function} callback function.
	 * @param {Object} options.
	 * @return {Socket} for chaining.
	 * @api public
	 */

	Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
	  this.sendPacket('message', msg, options, fn);
	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {String} packet type.
	 * @param {String} data.
	 * @param {Object} options.
	 * @param {Function} callback function.
	 * @api private
	 */

	Socket.prototype.sendPacket = function (type, data, options, fn) {
	  if ('function' === typeof data) {
	    fn = data;
	    data = undefined;
	  }

	  if ('function' === typeof options) {
	    fn = options;
	    options = null;
	  }

	  if ('closing' === this.readyState || 'closed' === this.readyState) {
	    return;
	  }

	  options = options || {};
	  options.compress = false !== options.compress;

	  var packet = {
	    type: type,
	    data: data,
	    options: options
	  };
	  this.emit('packetCreate', packet);
	  this.writeBuffer.push(packet);
	  if (fn) this.once('flush', fn);
	  this.flush();
	};

	/**
	 * Closes the connection.
	 *
	 * @api private
	 */

	Socket.prototype.close = function () {
	  if ('opening' === this.readyState || 'open' === this.readyState) {
	    this.readyState = 'closing';

	    var self = this;

	    if (this.writeBuffer.length) {
	      this.once('drain', function () {
	        if (this.upgrading) {
	          waitForUpgrade();
	        } else {
	          close();
	        }
	      });
	    } else if (this.upgrading) {
	      waitForUpgrade();
	    } else {
	      close();
	    }
	  }

	  function close() {
	    self.onClose('forced close');
	    debug('socket closing - telling transport to close');
	    self.transport.close();
	  }

	  function cleanupAndClose() {
	    self.removeListener('upgrade', cleanupAndClose);
	    self.removeListener('upgradeError', cleanupAndClose);
	    close();
	  }

	  function waitForUpgrade() {
	    // wait for upgrade to finish since we can't send packets while pausing a transport
	    self.once('upgrade', cleanupAndClose);
	    self.once('upgradeError', cleanupAndClose);
	  }

	  return this;
	};

	/**
	 * Called upon transport error
	 *
	 * @api private
	 */

	Socket.prototype.onError = function (err) {
	  debug('socket error %j', err);
	  Socket.priorWebsocketSuccess = false;
	  this.emit('error', err);
	  this.onClose('transport error', err);
	};

	/**
	 * Called upon transport close.
	 *
	 * @api private
	 */

	Socket.prototype.onClose = function (reason, desc) {
	  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
	    debug('socket close with reason: "%s"', reason);
	    var self = this;

	    // clear timers
	    clearTimeout(this.pingIntervalTimer);
	    clearTimeout(this.pingTimeoutTimer);

	    // stop event from firing again for transport
	    this.transport.removeAllListeners('close');

	    // ensure transport won't stay open
	    this.transport.close();

	    // ignore further transport communication
	    this.transport.removeAllListeners();

	    // set ready state
	    this.readyState = 'closed';

	    // clear session id
	    this.id = null;

	    // emit close event
	    this.emit('close', reason, desc);

	    // clean buffers after, so users can still
	    // grab the buffers on `close` event
	    self.writeBuffer = [];
	    self.prevBufferLen = 0;
	  }
	};

	/**
	 * Filters upgrades, returning only those matching client transports.
	 *
	 * @param {Array} server upgrades
	 * @api private
	 *
	 */

	Socket.prototype.filterUpgrades = function (upgrades) {
	  var filteredUpgrades = [];
	  for (var i = 0, j = upgrades.length; i < j; i++) {
	    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
	  }
	  return filteredUpgrades;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	/**
	 * Module dependencies
	 */

	var XMLHttpRequest = __webpack_require__(44);
	var XHR = __webpack_require__(46);
	var JSONP = __webpack_require__(65);
	var websocket = __webpack_require__(66);

	/**
	 * Export transports.
	 */

	exports.polling = polling;
	exports.websocket = websocket;

	/**
	 * Polling transport polymorphic constructor.
	 * Decides on xhr vs jsonp based on feature detection.
	 *
	 * @api private
	 */

	function polling(opts) {
	  var xhr;
	  var xd = false;
	  var xs = false;
	  var jsonp = false !== opts.jsonp;

	  if (global.location) {
	    var isSSL = 'https:' === location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    xd = opts.hostname !== location.hostname || port !== opts.port;
	    xs = opts.secure !== isSSL;
	  }

	  opts.xdomain = xd;
	  opts.xscheme = xs;
	  xhr = new XMLHttpRequest(opts);

	  if ('open' in xhr && !opts.forceJSONP) {
	    return new XHR(opts);
	  } else {
	    if (!jsonp) throw new Error('JSONP disabled');
	    return new JSONP(opts);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	// browser shim for xmlhttprequest module

	var hasCORS = __webpack_require__(45);

	module.exports = function (opts) {
	  var xdomain = opts.xdomain;

	  // scheme must be same when usign XDomainRequest
	  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
	  var xscheme = opts.xscheme;

	  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
	  // https://github.com/Automattic/engine.io-client/pull/217
	  var enablesXDR = opts.enablesXDR;

	  // XMLHttpRequest can be disabled on IE
	  try {
	    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
	      return new XMLHttpRequest();
	    }
	  } catch (e) {}

	  // Use XDomainRequest for IE8 if enablesXDR is true
	  // because loading bar keeps flashing when using jsonp-polling
	  // https://github.com/yujiosaka/socke.io-ie8-loading-example
	  try {
	    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
	      return new XDomainRequest();
	    }
	  } catch (e) {}

	  if (!xdomain) {
	    try {
	      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
	    } catch (e) {}
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 45 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Module exports.
	 *
	 * Logic borrowed from Modernizr:
	 *
	 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
	 */

	try {
	  module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();
	} catch (err) {
	  // if XMLHttp support is disabled in IE then it will throw
	  // when trying to create
	  module.exports = false;
	}

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	/**
	 * Module requirements.
	 */

	var XMLHttpRequest = __webpack_require__(44);
	var Polling = __webpack_require__(47);
	var Emitter = __webpack_require__(58);
	var inherit = __webpack_require__(60);
	var debug = __webpack_require__(62)('engine.io-client:polling-xhr');

	/**
	 * Module exports.
	 */

	module.exports = XHR;
	module.exports.Request = Request;

	/**
	 * Empty function
	 */

	function empty() {}

	/**
	 * XHR Polling constructor.
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function XHR(opts) {
	  Polling.call(this, opts);
	  this.requestTimeout = opts.requestTimeout;

	  if (global.location) {
	    var isSSL = 'https:' === location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    this.xd = opts.hostname !== global.location.hostname || port !== opts.port;
	    this.xs = opts.secure !== isSSL;
	  } else {
	    this.extraHeaders = opts.extraHeaders;
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit(XHR, Polling);

	/**
	 * XHR supports binary
	 */

	XHR.prototype.supportsBinary = true;

	/**
	 * Creates a request.
	 *
	 * @param {String} method
	 * @api private
	 */

	XHR.prototype.request = function (opts) {
	  opts = opts || {};
	  opts.uri = this.uri();
	  opts.xd = this.xd;
	  opts.xs = this.xs;
	  opts.agent = this.agent || false;
	  opts.supportsBinary = this.supportsBinary;
	  opts.enablesXDR = this.enablesXDR;

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  opts.requestTimeout = this.requestTimeout;

	  // other options for Node.js client
	  opts.extraHeaders = this.extraHeaders;

	  return new Request(opts);
	};

	/**
	 * Sends data.
	 *
	 * @param {String} data to send.
	 * @param {Function} called upon flush.
	 * @api private
	 */

	XHR.prototype.doWrite = function (data, fn) {
	  var isBinary = typeof data !== 'string' && data !== undefined;
	  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
	  var self = this;
	  req.on('success', fn);
	  req.on('error', function (err) {
	    self.onError('xhr post error', err);
	  });
	  this.sendXhr = req;
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	XHR.prototype.doPoll = function () {
	  debug('xhr poll');
	  var req = this.request();
	  var self = this;
	  req.on('data', function (data) {
	    self.onData(data);
	  });
	  req.on('error', function (err) {
	    self.onError('xhr poll error', err);
	  });
	  this.pollXhr = req;
	};

	/**
	 * Request constructor
	 *
	 * @param {Object} options
	 * @api public
	 */

	function Request(opts) {
	  this.method = opts.method || 'GET';
	  this.uri = opts.uri;
	  this.xd = !!opts.xd;
	  this.xs = !!opts.xs;
	  this.async = false !== opts.async;
	  this.data = undefined !== opts.data ? opts.data : null;
	  this.agent = opts.agent;
	  this.isBinary = opts.isBinary;
	  this.supportsBinary = opts.supportsBinary;
	  this.enablesXDR = opts.enablesXDR;
	  this.requestTimeout = opts.requestTimeout;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;

	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;

	  this.create();
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Request.prototype);

	/**
	 * Creates the XHR object and sends the request.
	 *
	 * @api private
	 */

	Request.prototype.create = function () {
	  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  var xhr = this.xhr = new XMLHttpRequest(opts);
	  var self = this;

	  try {
	    debug('xhr open %s: %s', this.method, this.uri);
	    xhr.open(this.method, this.uri, this.async);
	    try {
	      if (this.extraHeaders) {
	        xhr.setDisableHeaderCheck(true);
	        for (var i in this.extraHeaders) {
	          if (this.extraHeaders.hasOwnProperty(i)) {
	            xhr.setRequestHeader(i, this.extraHeaders[i]);
	          }
	        }
	      }
	    } catch (e) {}
	    if (this.supportsBinary) {
	      // This has to be done after open because Firefox is stupid
	      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
	      xhr.responseType = 'arraybuffer';
	    }

	    if ('POST' === this.method) {
	      try {
	        if (this.isBinary) {
	          xhr.setRequestHeader('Content-type', 'application/octet-stream');
	        } else {
	          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
	        }
	      } catch (e) {}
	    }

	    try {
	      xhr.setRequestHeader('Accept', '*/*');
	    } catch (e) {}

	    // ie6 check
	    if ('withCredentials' in xhr) {
	      xhr.withCredentials = true;
	    }

	    if (this.requestTimeout) {
	      xhr.timeout = this.requestTimeout;
	    }

	    if (this.hasXDR()) {
	      xhr.onload = function () {
	        self.onLoad();
	      };
	      xhr.onerror = function () {
	        self.onError(xhr.responseText);
	      };
	    } else {
	      xhr.onreadystatechange = function () {
	        if (4 !== xhr.readyState) return;
	        if (200 === xhr.status || 1223 === xhr.status) {
	          self.onLoad();
	        } else {
	          // make sure the `error` event handler that's user-set
	          // does not throw in the same tick and gets caught here
	          setTimeout(function () {
	            self.onError(xhr.status);
	          }, 0);
	        }
	      };
	    }

	    debug('xhr data %s', this.data);
	    xhr.send(this.data);
	  } catch (e) {
	    // Need to defer since .create() is called directly fhrom the constructor
	    // and thus the 'error' event can only be only bound *after* this exception
	    // occurs.  Therefore, also, we cannot throw here at all.
	    setTimeout(function () {
	      self.onError(e);
	    }, 0);
	    return;
	  }

	  if (global.document) {
	    this.index = Request.requestsCount++;
	    Request.requests[this.index] = this;
	  }
	};

	/**
	 * Called upon successful response.
	 *
	 * @api private
	 */

	Request.prototype.onSuccess = function () {
	  this.emit('success');
	  this.cleanup();
	};

	/**
	 * Called if we have data.
	 *
	 * @api private
	 */

	Request.prototype.onData = function (data) {
	  this.emit('data', data);
	  this.onSuccess();
	};

	/**
	 * Called upon error.
	 *
	 * @api private
	 */

	Request.prototype.onError = function (err) {
	  this.emit('error', err);
	  this.cleanup(true);
	};

	/**
	 * Cleans up house.
	 *
	 * @api private
	 */

	Request.prototype.cleanup = function (fromError) {
	  if ('undefined' === typeof this.xhr || null === this.xhr) {
	    return;
	  }
	  // xmlhttprequest
	  if (this.hasXDR()) {
	    this.xhr.onload = this.xhr.onerror = empty;
	  } else {
	    this.xhr.onreadystatechange = empty;
	  }

	  if (fromError) {
	    try {
	      this.xhr.abort();
	    } catch (e) {}
	  }

	  if (global.document) {
	    delete Request.requests[this.index];
	  }

	  this.xhr = null;
	};

	/**
	 * Called upon load.
	 *
	 * @api private
	 */

	Request.prototype.onLoad = function () {
	  var data;
	  try {
	    var contentType;
	    try {
	      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
	    } catch (e) {}
	    if (contentType === 'application/octet-stream') {
	      data = this.xhr.response || this.xhr.responseText;
	    } else {
	      if (!this.supportsBinary) {
	        data = this.xhr.responseText;
	      } else {
	        try {
	          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
	        } catch (e) {
	          var ui8Arr = new Uint8Array(this.xhr.response);
	          var dataArray = [];
	          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
	            dataArray.push(ui8Arr[idx]);
	          }

	          data = String.fromCharCode.apply(null, dataArray);
	        }
	      }
	    }
	  } catch (e) {
	    this.onError(e);
	  }
	  if (null != data) {
	    this.onData(data);
	  }
	};

	/**
	 * Check if it has XDomainRequest.
	 *
	 * @api private
	 */

	Request.prototype.hasXDR = function () {
	  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
	};

	/**
	 * Aborts the request.
	 *
	 * @api public
	 */

	Request.prototype.abort = function () {
	  this.cleanup();
	};

	/**
	 * Aborts pending requests when unloading the window. This is needed to prevent
	 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
	 * emitted.
	 */

	Request.requestsCount = 0;
	Request.requests = {};

	if (global.document) {
	  if (global.attachEvent) {
	    global.attachEvent('onunload', unloadHandler);
	  } else if (global.addEventListener) {
	    global.addEventListener('beforeunload', unloadHandler, false);
	  }
	}

	function unloadHandler() {
	  for (var i in Request.requests) {
	    if (Request.requests.hasOwnProperty(i)) {
	      Request.requests[i].abort();
	    }
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Module dependencies.
	 */

	var Transport = __webpack_require__(48);
	var parseqs = __webpack_require__(59);
	var parser = __webpack_require__(49);
	var inherit = __webpack_require__(60);
	var yeast = __webpack_require__(61);
	var debug = __webpack_require__(62)('engine.io-client:polling');

	/**
	 * Module exports.
	 */

	module.exports = Polling;

	/**
	 * Is XHR2 supported?
	 */

	var hasXHR2 = function () {
	  var XMLHttpRequest = __webpack_require__(44);
	  var xhr = new XMLHttpRequest({ xdomain: false });
	  return null != xhr.responseType;
	}();

	/**
	 * Polling interface.
	 *
	 * @param {Object} opts
	 * @api private
	 */

	function Polling(opts) {
	  var forceBase64 = opts && opts.forceBase64;
	  if (!hasXHR2 || forceBase64) {
	    this.supportsBinary = false;
	  }
	  Transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(Polling, Transport);

	/**
	 * Transport name.
	 */

	Polling.prototype.name = 'polling';

	/**
	 * Opens the socket (triggers polling). We write a PING message to determine
	 * when the transport is open.
	 *
	 * @api private
	 */

	Polling.prototype.doOpen = function () {
	  this.poll();
	};

	/**
	 * Pauses polling.
	 *
	 * @param {Function} callback upon buffers are flushed and transport is paused
	 * @api private
	 */

	Polling.prototype.pause = function (onPause) {
	  var self = this;

	  this.readyState = 'pausing';

	  function pause() {
	    debug('paused');
	    self.readyState = 'paused';
	    onPause();
	  }

	  if (this.polling || !this.writable) {
	    var total = 0;

	    if (this.polling) {
	      debug('we are currently polling - waiting to pause');
	      total++;
	      this.once('pollComplete', function () {
	        debug('pre-pause polling complete');
	        --total || pause();
	      });
	    }

	    if (!this.writable) {
	      debug('we are currently writing - waiting to pause');
	      total++;
	      this.once('drain', function () {
	        debug('pre-pause writing complete');
	        --total || pause();
	      });
	    }
	  } else {
	    pause();
	  }
	};

	/**
	 * Starts polling cycle.
	 *
	 * @api public
	 */

	Polling.prototype.poll = function () {
	  debug('polling');
	  this.polling = true;
	  this.doPoll();
	  this.emit('poll');
	};

	/**
	 * Overloads onData to detect payloads.
	 *
	 * @api private
	 */

	Polling.prototype.onData = function (data) {
	  var self = this;
	  debug('polling got data %s', data);
	  var callback = function callback(packet, index, total) {
	    // if its the first message we consider the transport open
	    if ('opening' === self.readyState) {
	      self.onOpen();
	    }

	    // if its a close packet, we close the ongoing requests
	    if ('close' === packet.type) {
	      self.onClose();
	      return false;
	    }

	    // otherwise bypass onData and handle the message
	    self.onPacket(packet);
	  };

	  // decode payload
	  parser.decodePayload(data, this.socket.binaryType, callback);

	  // if an event did not trigger closing
	  if ('closed' !== this.readyState) {
	    // if we got data we're not polling
	    this.polling = false;
	    this.emit('pollComplete');

	    if ('open' === this.readyState) {
	      this.poll();
	    } else {
	      debug('ignoring poll - transport state "%s"', this.readyState);
	    }
	  }
	};

	/**
	 * For polling, send a close packet.
	 *
	 * @api private
	 */

	Polling.prototype.doClose = function () {
	  var self = this;

	  function close() {
	    debug('writing close packet');
	    self.write([{ type: 'close' }]);
	  }

	  if ('open' === this.readyState) {
	    debug('transport open - closing');
	    close();
	  } else {
	    // in case we're trying to close while
	    // handshaking is in progress (GH-164)
	    debug('transport not open - deferring close');
	    this.once('open', close);
	  }
	};

	/**
	 * Writes a packets payload.
	 *
	 * @param {Array} data packets
	 * @param {Function} drain callback
	 * @api private
	 */

	Polling.prototype.write = function (packets) {
	  var self = this;
	  this.writable = false;
	  var callbackfn = function callbackfn() {
	    self.writable = true;
	    self.emit('drain');
	  };

	  parser.encodePayload(packets, this.supportsBinary, function (data) {
	    self.doWrite(data, callbackfn);
	  });
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	Polling.prototype.uri = function () {
	  var query = this.query || {};
	  var schema = this.secure ? 'https' : 'http';
	  var port = '';

	  // cache busting is forced
	  if (false !== this.timestampRequests) {
	    query[this.timestampParam] = yeast();
	  }

	  if (!this.supportsBinary && !query.sid) {
	    query.b64 = 1;
	  }

	  query = parseqs.encode(query);

	  // avoid port if default for schema
	  if (this.port && ('https' === schema && Number(this.port) !== 443 || 'http' === schema && Number(this.port) !== 80)) {
	    port = ':' + this.port;
	  }

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Module dependencies.
	 */

	var parser = __webpack_require__(49);
	var Emitter = __webpack_require__(58);

	/**
	 * Module exports.
	 */

	module.exports = Transport;

	/**
	 * Transport abstract constructor.
	 *
	 * @param {Object} options.
	 * @api private
	 */

	function Transport(opts) {
	  this.path = opts.path;
	  this.hostname = opts.hostname;
	  this.port = opts.port;
	  this.secure = opts.secure;
	  this.query = opts.query;
	  this.timestampParam = opts.timestampParam;
	  this.timestampRequests = opts.timestampRequests;
	  this.readyState = '';
	  this.agent = opts.agent || false;
	  this.socket = opts.socket;
	  this.enablesXDR = opts.enablesXDR;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;
	  this.forceNode = opts.forceNode;

	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;
	  this.localAddress = opts.localAddress;
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Transport.prototype);

	/**
	 * Emits an error.
	 *
	 * @param {String} str
	 * @return {Transport} for chaining
	 * @api public
	 */

	Transport.prototype.onError = function (msg, desc) {
	  var err = new Error(msg);
	  err.type = 'TransportError';
	  err.description = desc;
	  this.emit('error', err);
	  return this;
	};

	/**
	 * Opens the transport.
	 *
	 * @api public
	 */

	Transport.prototype.open = function () {
	  if ('closed' === this.readyState || '' === this.readyState) {
	    this.readyState = 'opening';
	    this.doOpen();
	  }

	  return this;
	};

	/**
	 * Closes the transport.
	 *
	 * @api private
	 */

	Transport.prototype.close = function () {
	  if ('opening' === this.readyState || 'open' === this.readyState) {
	    this.doClose();
	    this.onClose();
	  }

	  return this;
	};

	/**
	 * Sends multiple packets.
	 *
	 * @param {Array} packets
	 * @api private
	 */

	Transport.prototype.send = function (packets) {
	  if ('open' === this.readyState) {
	    this.write(packets);
	  } else {
	    throw new Error('Transport not open');
	  }
	};

	/**
	 * Called upon open
	 *
	 * @api private
	 */

	Transport.prototype.onOpen = function () {
	  this.readyState = 'open';
	  this.writable = true;
	  this.emit('open');
	};

	/**
	 * Called with data.
	 *
	 * @param {String} data
	 * @api private
	 */

	Transport.prototype.onData = function (data) {
	  var packet = parser.decodePacket(data, this.socket.binaryType);
	  this.onPacket(packet);
	};

	/**
	 * Called with a decoded packet.
	 */

	Transport.prototype.onPacket = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon close.
	 *
	 * @api private
	 */

	Transport.prototype.onClose = function () {
	  this.readyState = 'closed';
	  this.emit('close');
	};

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	/**
	 * Module dependencies.
	 */

	var keys = __webpack_require__(50);
	var hasBinary = __webpack_require__(51);
	var sliceBuffer = __webpack_require__(53);
	var after = __webpack_require__(54);
	var utf8 = __webpack_require__(55);

	var base64encoder;
	if (global && global.ArrayBuffer) {
	  base64encoder = __webpack_require__(56);
	}

	/**
	 * Check if we are running an android browser. That requires us to use
	 * ArrayBuffer with polling transports...
	 *
	 * http://ghinda.net/jpeg-blob-ajax-android/
	 */

	var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

	/**
	 * Check if we are running in PhantomJS.
	 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
	 * https://github.com/ariya/phantomjs/issues/11395
	 * @type boolean
	 */
	var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

	/**
	 * When true, avoids using Blobs to encode payloads.
	 * @type boolean
	 */
	var dontSendBlobs = isAndroid || isPhantomJS;

	/**
	 * Current protocol version.
	 */

	exports.protocol = 3;

	/**
	 * Packet types.
	 */

	var packets = exports.packets = {
	  open: 0 // non-ws
	  , close: 1 // non-ws
	  , ping: 2,
	  pong: 3,
	  message: 4,
	  upgrade: 5,
	  noop: 6
	};

	var packetslist = keys(packets);

	/**
	 * Premade error packet.
	 */

	var err = { type: 'error', data: 'parser error' };

	/**
	 * Create a blob api even for blob builder when vendor prefixes exist
	 */

	var Blob = __webpack_require__(57);

	/**
	 * Encodes a packet.
	 *
	 *     <packet type id> [ <data> ]
	 *
	 * Example:
	 *
	 *     5hello world
	 *     3
	 *     4
	 *
	 * Binary is encoded in an identical principle
	 *
	 * @api private
	 */

	exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
	  if ('function' == typeof supportsBinary) {
	    callback = supportsBinary;
	    supportsBinary = false;
	  }

	  if ('function' == typeof utf8encode) {
	    callback = utf8encode;
	    utf8encode = null;
	  }

	  var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;

	  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
	    return encodeArrayBuffer(packet, supportsBinary, callback);
	  } else if (Blob && data instanceof global.Blob) {
	    return encodeBlob(packet, supportsBinary, callback);
	  }

	  // might be an object with { base64: true, data: dataAsBase64String }
	  if (data && data.base64) {
	    return encodeBase64Object(packet, callback);
	  }

	  // Sending data as a utf-8 string
	  var encoded = packets[packet.type];

	  // data fragment is optional
	  if (undefined !== packet.data) {
	    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
	  }

	  return callback('' + encoded);
	};

	function encodeBase64Object(packet, callback) {
	  // packet data is an object { base64: true, data: dataAsBase64String }
	  var message = 'b' + exports.packets[packet.type] + packet.data.data;
	  return callback(message);
	}

	/**
	 * Encode packet helpers for binary types
	 */

	function encodeArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var data = packet.data;
	  var contentArray = new Uint8Array(data);
	  var resultBuffer = new Uint8Array(1 + data.byteLength);

	  resultBuffer[0] = packets[packet.type];
	  for (var i = 0; i < contentArray.length; i++) {
	    resultBuffer[i + 1] = contentArray[i];
	  }

	  return callback(resultBuffer.buffer);
	}

	function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var fr = new FileReader();
	  fr.onload = function () {
	    packet.data = fr.result;
	    exports.encodePacket(packet, supportsBinary, true, callback);
	  };
	  return fr.readAsArrayBuffer(packet.data);
	}

	function encodeBlob(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  if (dontSendBlobs) {
	    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
	  }

	  var length = new Uint8Array(1);
	  length[0] = packets[packet.type];
	  var blob = new Blob([length.buffer, packet.data]);

	  return callback(blob);
	}

	/**
	 * Encodes a packet with binary data in a base64 string
	 *
	 * @param {Object} packet, has `type` and `data`
	 * @return {String} base64 encoded message
	 */

	exports.encodeBase64Packet = function (packet, callback) {
	  var message = 'b' + exports.packets[packet.type];
	  if (Blob && packet.data instanceof global.Blob) {
	    var fr = new FileReader();
	    fr.onload = function () {
	      var b64 = fr.result.split(',')[1];
	      callback(message + b64);
	    };
	    return fr.readAsDataURL(packet.data);
	  }

	  var b64data;
	  try {
	    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
	  } catch (e) {
	    // iPhone Safari doesn't let you apply with typed arrays
	    var typed = new Uint8Array(packet.data);
	    var basic = new Array(typed.length);
	    for (var i = 0; i < typed.length; i++) {
	      basic[i] = typed[i];
	    }
	    b64data = String.fromCharCode.apply(null, basic);
	  }
	  message += global.btoa(b64data);
	  return callback(message);
	};

	/**
	 * Decodes a packet. Changes format to Blob if requested.
	 *
	 * @return {Object} with `type` and `data` (if any)
	 * @api private
	 */

	exports.decodePacket = function (data, binaryType, utf8decode) {
	  if (data === undefined) {
	    return err;
	  }
	  // String data
	  if (typeof data == 'string') {
	    if (data.charAt(0) == 'b') {
	      return exports.decodeBase64Packet(data.substr(1), binaryType);
	    }

	    if (utf8decode) {
	      data = tryDecode(data);
	      if (data === false) {
	        return err;
	      }
	    }
	    var type = data.charAt(0);

	    if (Number(type) != type || !packetslist[type]) {
	      return err;
	    }

	    if (data.length > 1) {
	      return { type: packetslist[type], data: data.substring(1) };
	    } else {
	      return { type: packetslist[type] };
	    }
	  }

	  var asArray = new Uint8Array(data);
	  var type = asArray[0];
	  var rest = sliceBuffer(data, 1);
	  if (Blob && binaryType === 'blob') {
	    rest = new Blob([rest]);
	  }
	  return { type: packetslist[type], data: rest };
	};

	function tryDecode(data) {
	  try {
	    data = utf8.decode(data);
	  } catch (e) {
	    return false;
	  }
	  return data;
	}

	/**
	 * Decodes a packet encoded in a base64 string
	 *
	 * @param {String} base64 encoded message
	 * @return {Object} with `type` and `data` (if any)
	 */

	exports.decodeBase64Packet = function (msg, binaryType) {
	  var type = packetslist[msg.charAt(0)];
	  if (!base64encoder) {
	    return { type: type, data: { base64: true, data: msg.substr(1) } };
	  }

	  var data = base64encoder.decode(msg.substr(1));

	  if (binaryType === 'blob' && Blob) {
	    data = new Blob([data]);
	  }

	  return { type: type, data: data };
	};

	/**
	 * Encodes multiple messages (payload).
	 *
	 *     <length>:data
	 *
	 * Example:
	 *
	 *     11:hello world2:hi
	 *
	 * If any contents are binary, they will be encoded as base64 strings. Base64
	 * encoded strings are marked with a b before the length specifier
	 *
	 * @param {Array} packets
	 * @api private
	 */

	exports.encodePayload = function (packets, supportsBinary, callback) {
	  if (typeof supportsBinary == 'function') {
	    callback = supportsBinary;
	    supportsBinary = null;
	  }

	  var isBinary = hasBinary(packets);

	  if (supportsBinary && isBinary) {
	    if (Blob && !dontSendBlobs) {
	      return exports.encodePayloadAsBlob(packets, callback);
	    }

	    return exports.encodePayloadAsArrayBuffer(packets, callback);
	  }

	  if (!packets.length) {
	    return callback('0:');
	  }

	  function setLengthHeader(message) {
	    return message.length + ':' + message;
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function (message) {
	      doneCallback(null, setLengthHeader(message));
	    });
	  }

	  map(packets, encodeOne, function (err, results) {
	    return callback(results.join(''));
	  });
	};

	/**
	 * Async array map using after
	 */

	function map(ary, each, done) {
	  var result = new Array(ary.length);
	  var next = after(ary.length, done);

	  var eachWithIndex = function eachWithIndex(i, el, cb) {
	    each(el, function (error, msg) {
	      result[i] = msg;
	      cb(error, result);
	    });
	  };

	  for (var i = 0; i < ary.length; i++) {
	    eachWithIndex(i, ary[i], next);
	  }
	}

	/*
	 * Decodes data when a payload is maybe expected. Possible binary contents are
	 * decoded from their base64 representation
	 *
	 * @param {String} data, callback method
	 * @api public
	 */

	exports.decodePayload = function (data, binaryType, callback) {
	  if (typeof data != 'string') {
	    return exports.decodePayloadAsBinary(data, binaryType, callback);
	  }

	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var packet;
	  if (data == '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	  var length = '',
	      n,
	      msg;

	  for (var i = 0, l = data.length; i < l; i++) {
	    var chr = data.charAt(i);

	    if (':' != chr) {
	      length += chr;
	    } else {
	      if ('' == length || length != (n = Number(length))) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }

	      msg = data.substr(i + 1, n);

	      if (length != msg.length) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }

	      if (msg.length) {
	        packet = exports.decodePacket(msg, binaryType, true);

	        if (err.type == packet.type && err.data == packet.data) {
	          // parser error in individual packet - ignoring payload
	          return callback(err, 0, 1);
	        }

	        var ret = callback(packet, i + n, l);
	        if (false === ret) return;
	      }

	      // advance cursor
	      i += n;
	      length = '';
	    }
	  }

	  if (length != '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }
	};

	/**
	 * Encodes multiple messages (payload) as binary.
	 *
	 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
	 * 255><data>
	 *
	 * Example:
	 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
	 *
	 * @param {Array} packets
	 * @return {ArrayBuffer} encoded payload
	 * @api private
	 */

	exports.encodePayloadAsArrayBuffer = function (packets, callback) {
	  if (!packets.length) {
	    return callback(new ArrayBuffer(0));
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function (data) {
	      return doneCallback(null, data);
	    });
	  }

	  map(packets, encodeOne, function (err, encodedPackets) {
	    var totalLength = encodedPackets.reduce(function (acc, p) {
	      var len;
	      if (typeof p === 'string') {
	        len = p.length;
	      } else {
	        len = p.byteLength;
	      }
	      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
	    }, 0);

	    var resultArray = new Uint8Array(totalLength);

	    var bufferIndex = 0;
	    encodedPackets.forEach(function (p) {
	      var isString = typeof p === 'string';
	      var ab = p;
	      if (isString) {
	        var view = new Uint8Array(p.length);
	        for (var i = 0; i < p.length; i++) {
	          view[i] = p.charCodeAt(i);
	        }
	        ab = view.buffer;
	      }

	      if (isString) {
	        // not true binary
	        resultArray[bufferIndex++] = 0;
	      } else {
	        // true binary
	        resultArray[bufferIndex++] = 1;
	      }

	      var lenStr = ab.byteLength.toString();
	      for (var i = 0; i < lenStr.length; i++) {
	        resultArray[bufferIndex++] = parseInt(lenStr[i]);
	      }
	      resultArray[bufferIndex++] = 255;

	      var view = new Uint8Array(ab);
	      for (var i = 0; i < view.length; i++) {
	        resultArray[bufferIndex++] = view[i];
	      }
	    });

	    return callback(resultArray.buffer);
	  });
	};

	/**
	 * Encode as Blob
	 */

	exports.encodePayloadAsBlob = function (packets, callback) {
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function (encoded) {
	      var binaryIdentifier = new Uint8Array(1);
	      binaryIdentifier[0] = 1;
	      if (typeof encoded === 'string') {
	        var view = new Uint8Array(encoded.length);
	        for (var i = 0; i < encoded.length; i++) {
	          view[i] = encoded.charCodeAt(i);
	        }
	        encoded = view.buffer;
	        binaryIdentifier[0] = 0;
	      }

	      var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;

	      var lenStr = len.toString();
	      var lengthAry = new Uint8Array(lenStr.length + 1);
	      for (var i = 0; i < lenStr.length; i++) {
	        lengthAry[i] = parseInt(lenStr[i]);
	      }
	      lengthAry[lenStr.length] = 255;

	      if (Blob) {
	        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
	        doneCallback(null, blob);
	      }
	    });
	  }

	  map(packets, encodeOne, function (err, results) {
	    return callback(new Blob(results));
	  });
	};

	/*
	 * Decodes data when a payload is maybe expected. Strings are decoded by
	 * interpreting each byte as a key code for entries marked to start with 0. See
	 * description of encodePayloadAsBinary
	 *
	 * @param {ArrayBuffer} data, callback method
	 * @api public
	 */

	exports.decodePayloadAsBinary = function (data, binaryType, callback) {
	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var bufferTail = data;
	  var buffers = [];

	  var numberTooLong = false;
	  while (bufferTail.byteLength > 0) {
	    var tailArray = new Uint8Array(bufferTail);
	    var isString = tailArray[0] === 0;
	    var msgLength = '';

	    for (var i = 1;; i++) {
	      if (tailArray[i] == 255) break;

	      if (msgLength.length > 310) {
	        numberTooLong = true;
	        break;
	      }

	      msgLength += tailArray[i];
	    }

	    if (numberTooLong) return callback(err, 0, 1);

	    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
	    msgLength = parseInt(msgLength);

	    var msg = sliceBuffer(bufferTail, 0, msgLength);
	    if (isString) {
	      try {
	        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
	      } catch (e) {
	        // iPhone Safari doesn't let you apply to typed arrays
	        var typed = new Uint8Array(msg);
	        msg = '';
	        for (var i = 0; i < typed.length; i++) {
	          msg += String.fromCharCode(typed[i]);
	        }
	      }
	    }

	    buffers.push(msg);
	    bufferTail = sliceBuffer(bufferTail, msgLength);
	  }

	  var total = buffers.length;
	  buffers.forEach(function (buffer, i) {
	    callback(exports.decodePacket(buffer, binaryType, true), i, total);
	  });
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 50 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Gets the keys for an object.
	 *
	 * @return {Array} keys
	 * @api private
	 */

	module.exports = Object.keys || function keys(obj) {
	  var arr = [];
	  var has = Object.prototype.hasOwnProperty;

	  for (var i in obj) {
	    if (has.call(obj, i)) {
	      arr.push(i);
	    }
	  }
	  return arr;
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*
	 * Module requirements.
	 */

	var isArray = __webpack_require__(52);

	/**
	 * Module exports.
	 */

	module.exports = hasBinary;

	/**
	 * Checks for binary data.
	 *
	 * Right now only Buffer and ArrayBuffer are supported..
	 *
	 * @param {Object} anything
	 * @api public
	 */

	function hasBinary(data) {

	  function _hasBinary(obj) {
	    if (!obj) return false;

	    if (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer || global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
	      return true;
	    }

	    if (isArray(obj)) {
	      for (var i = 0; i < obj.length; i++) {
	        if (_hasBinary(obj[i])) {
	          return true;
	        }
	      }
	    } else if (obj && 'object' == (typeof obj === 'undefined' ? 'undefined' : _typeof(obj))) {
	      // see: https://github.com/Automattic/has-binary/pull/4
	      if (obj.toJSON && 'function' == typeof obj.toJSON) {
	        obj = obj.toJSON();
	      }

	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  return _hasBinary(data);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 52 */
/***/ function(module, exports) {

	'use strict';

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};

/***/ },
/* 53 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * An abstraction for slicing an arraybuffer even when
	 * ArrayBuffer.prototype.slice is not supported
	 *
	 * @api public
	 */

	module.exports = function (arraybuffer, start, end) {
	  var bytes = arraybuffer.byteLength;
	  start = start || 0;
	  end = end || bytes;

	  if (arraybuffer.slice) {
	    return arraybuffer.slice(start, end);
	  }

	  if (start < 0) {
	    start += bytes;
	  }
	  if (end < 0) {
	    end += bytes;
	  }
	  if (end > bytes) {
	    end = bytes;
	  }

	  if (start >= bytes || start >= end || bytes === 0) {
	    return new ArrayBuffer(0);
	  }

	  var abv = new Uint8Array(arraybuffer);
	  var result = new Uint8Array(end - start);
	  for (var i = start, ii = 0; i < end; i++, ii++) {
	    result[ii] = abv[i];
	  }
	  return result.buffer;
	};

/***/ },
/* 54 */
/***/ function(module, exports) {

	'use strict';

	module.exports = after;

	function after(count, callback, err_cb) {
	    var bail = false;
	    err_cb = err_cb || noop;
	    proxy.count = count;

	    return count === 0 ? callback() : proxy;

	    function proxy(err, result) {
	        if (proxy.count <= 0) {
	            throw new Error('after called too many times');
	        }
	        --proxy.count;

	        // after first error, rest are passed to err_cb
	        if (err) {
	            bail = true;
	            callback(err);
	            // future error callbacks will go to error handler
	            callback = err_cb;
	        } else if (proxy.count === 0 && !bail) {
	            callback(null, result);
	        }
	    }
	}

	function noop() {}

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*! https://mths.be/wtf8 v1.0.0 by @mathias */
	;(function (root) {

		// Detect free variables `exports`
		var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports;

		// Detect free variable `module`
		var freeModule = ( false ? 'undefined' : _typeof(module)) == 'object' && module && module.exports == freeExports && module;

		// Detect free variable `global`, from Node.js or Browserified code,
		// and use it as `root`
		var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		/*--------------------------------------------------------------------------*/

		var stringFromCharCode = String.fromCharCode;

		// Taken from https://mths.be/punycode
		function ucs2decode(string) {
			var output = [];
			var counter = 0;
			var length = string.length;
			var value;
			var extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) {
						// low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		// Taken from https://mths.be/punycode
		function ucs2encode(array) {
			var length = array.length;
			var index = -1;
			var value;
			var output = '';
			while (++index < length) {
				value = array[index];
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
			}
			return output;
		}

		/*--------------------------------------------------------------------------*/

		function createByte(codePoint, shift) {
			return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
		}

		function encodeCodePoint(codePoint) {
			if ((codePoint & 0xFFFFFF80) == 0) {
				// 1-byte sequence
				return stringFromCharCode(codePoint);
			}
			var symbol = '';
			if ((codePoint & 0xFFFFF800) == 0) {
				// 2-byte sequence
				symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
			} else if ((codePoint & 0xFFFF0000) == 0) {
				// 3-byte sequence
				symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
				symbol += createByte(codePoint, 6);
			} else if ((codePoint & 0xFFE00000) == 0) {
				// 4-byte sequence
				symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
				symbol += createByte(codePoint, 12);
				symbol += createByte(codePoint, 6);
			}
			symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
			return symbol;
		}

		function wtf8encode(string) {
			var codePoints = ucs2decode(string);
			var length = codePoints.length;
			var index = -1;
			var codePoint;
			var byteString = '';
			while (++index < length) {
				codePoint = codePoints[index];
				byteString += encodeCodePoint(codePoint);
			}
			return byteString;
		}

		/*--------------------------------------------------------------------------*/

		function readContinuationByte() {
			if (byteIndex >= byteCount) {
				throw Error('Invalid byte index');
			}

			var continuationByte = byteArray[byteIndex] & 0xFF;
			byteIndex++;

			if ((continuationByte & 0xC0) == 0x80) {
				return continuationByte & 0x3F;
			}

			// If we end up here, it’s not a continuation byte.
			throw Error('Invalid continuation byte');
		}

		function decodeSymbol() {
			var byte1;
			var byte2;
			var byte3;
			var byte4;
			var codePoint;

			if (byteIndex > byteCount) {
				throw Error('Invalid byte index');
			}

			if (byteIndex == byteCount) {
				return false;
			}

			// Read the first byte.
			byte1 = byteArray[byteIndex] & 0xFF;
			byteIndex++;

			// 1-byte sequence (no continuation bytes)
			if ((byte1 & 0x80) == 0) {
				return byte1;
			}

			// 2-byte sequence
			if ((byte1 & 0xE0) == 0xC0) {
				var byte2 = readContinuationByte();
				codePoint = (byte1 & 0x1F) << 6 | byte2;
				if (codePoint >= 0x80) {
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}

			// 3-byte sequence (may include unpaired surrogates)
			if ((byte1 & 0xF0) == 0xE0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;
				if (codePoint >= 0x0800) {
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}

			// 4-byte sequence
			if ((byte1 & 0xF8) == 0xF0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				byte4 = readContinuationByte();
				codePoint = (byte1 & 0x0F) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;
				if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
					return codePoint;
				}
			}

			throw Error('Invalid WTF-8 detected');
		}

		var byteArray;
		var byteCount;
		var byteIndex;
		function wtf8decode(byteString) {
			byteArray = ucs2decode(byteString);
			byteCount = byteArray.length;
			byteIndex = 0;
			var codePoints = [];
			var tmp;
			while ((tmp = decodeSymbol()) !== false) {
				codePoints.push(tmp);
			}
			return ucs2encode(codePoints);
		}

		/*--------------------------------------------------------------------------*/

		var wtf8 = {
			'version': '1.0.0',
			'encode': wtf8encode,
			'decode': wtf8decode
		};

		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if ("function" == 'function' && _typeof(__webpack_require__(34)) == 'object' && __webpack_require__(34)) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return wtf8;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && !freeExports.nodeType) {
			if (freeModule) {
				// in Node.js or RingoJS v0.8.0+
				freeModule.exports = wtf8;
			} else {
				// in Narwhal or RingoJS v0.7.0-
				var object = {};
				var hasOwnProperty = object.hasOwnProperty;
				for (var key in wtf8) {
					hasOwnProperty.call(wtf8, key) && (freeExports[key] = wtf8[key]);
				}
			}
		} else {
			// in Rhino or a web browser
			root.wtf8 = wtf8;
		}
	})(undefined);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module), (function() { return this; }())))

/***/ },
/* 56 */
/***/ function(module, exports) {

	"use strict";

	/*
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */
	(function () {
	  "use strict";

	  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

	  // Use a lookup table to find the index.
	  var lookup = new Uint8Array(256);
	  for (var i = 0; i < chars.length; i++) {
	    lookup[chars.charCodeAt(i)] = i;
	  }

	  exports.encode = function (arraybuffer) {
	    var bytes = new Uint8Array(arraybuffer),
	        i,
	        len = bytes.length,
	        base64 = "";

	    for (i = 0; i < len; i += 3) {
	      base64 += chars[bytes[i] >> 2];
	      base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
	      base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
	      base64 += chars[bytes[i + 2] & 63];
	    }

	    if (len % 3 === 2) {
	      base64 = base64.substring(0, base64.length - 1) + "=";
	    } else if (len % 3 === 1) {
	      base64 = base64.substring(0, base64.length - 2) + "==";
	    }

	    return base64;
	  };

	  exports.decode = function (base64) {
	    var bufferLength = base64.length * 0.75,
	        len = base64.length,
	        i,
	        p = 0,
	        encoded1,
	        encoded2,
	        encoded3,
	        encoded4;

	    if (base64[base64.length - 1] === "=") {
	      bufferLength--;
	      if (base64[base64.length - 2] === "=") {
	        bufferLength--;
	      }
	    }

	    var arraybuffer = new ArrayBuffer(bufferLength),
	        bytes = new Uint8Array(arraybuffer);

	    for (i = 0; i < len; i += 4) {
	      encoded1 = lookup[base64.charCodeAt(i)];
	      encoded2 = lookup[base64.charCodeAt(i + 1)];
	      encoded3 = lookup[base64.charCodeAt(i + 2)];
	      encoded4 = lookup[base64.charCodeAt(i + 3)];

	      bytes[p++] = encoded1 << 2 | encoded2 >> 4;
	      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
	      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
	    }

	    return arraybuffer;
	  };
	})();

/***/ },
/* 57 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	/**
	 * Create a blob builder even when vendor prefixes exist
	 */

	var BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MSBlobBuilder || global.MozBlobBuilder;

	/**
	 * Check if Blob constructor is supported
	 */

	var blobSupported = function () {
	  try {
	    var a = new Blob(['hi']);
	    return a.size === 2;
	  } catch (e) {
	    return false;
	  }
	}();

	/**
	 * Check if Blob constructor supports ArrayBufferViews
	 * Fails in Safari 6, so we need to map to ArrayBuffers there.
	 */

	var blobSupportsArrayBufferView = blobSupported && function () {
	  try {
	    var b = new Blob([new Uint8Array([1, 2])]);
	    return b.size === 2;
	  } catch (e) {
	    return false;
	  }
	}();

	/**
	 * Check if BlobBuilder is supported
	 */

	var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;

	/**
	 * Helper function that maps ArrayBufferViews to ArrayBuffers
	 * Used by BlobBuilder constructor and old browsers that didn't
	 * support it in the Blob constructor.
	 */

	function mapArrayBufferViews(ary) {
	  for (var i = 0; i < ary.length; i++) {
	    var chunk = ary[i];
	    if (chunk.buffer instanceof ArrayBuffer) {
	      var buf = chunk.buffer;

	      // if this is a subarray, make a copy so we only
	      // include the subarray region from the underlying buffer
	      if (chunk.byteLength !== buf.byteLength) {
	        var copy = new Uint8Array(chunk.byteLength);
	        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
	        buf = copy.buffer;
	      }

	      ary[i] = buf;
	    }
	  }
	}

	function BlobBuilderConstructor(ary, options) {
	  options = options || {};

	  var bb = new BlobBuilder();
	  mapArrayBufferViews(ary);

	  for (var i = 0; i < ary.length; i++) {
	    bb.append(ary[i]);
	  }

	  return options.type ? bb.getBlob(options.type) : bb.getBlob();
	};

	function BlobConstructor(ary, options) {
	  mapArrayBufferViews(ary);
	  return new Blob(ary, options || {});
	};

	module.exports = function () {
	  if (blobSupported) {
	    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
	  } else if (blobBuilderSupported) {
	    return BlobBuilderConstructor;
	  } else {
	    return undefined;
	  }
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Expose `Emitter`.
	 */

	if (true) {
	  module.exports = Emitter;
	}

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function (event, fn) {
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function (event) {
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1),
	      callbacks = this._callbacks['$' + event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function (event) {
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function (event) {
	  return !!this.listeners(event).length;
	};

/***/ },
/* 59 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */

	exports.encode = function (obj) {
	  var str = '';

	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      if (str.length) str += '&';
	      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
	    }
	  }

	  return str;
	};

	/**
	 * Parses a simple querystring into an object
	 *
	 * @param {String} qs
	 * @api private
	 */

	exports.decode = function (qs) {
	  var qry = {};
	  var pairs = qs.split('&');
	  for (var i = 0, l = pairs.length; i < l; i++) {
	    var pair = pairs[i].split('=');
	    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
	  }
	  return qry;
	};

/***/ },
/* 60 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (a, b) {
	  var fn = function fn() {};
	  fn.prototype = b.prototype;
	  a.prototype = new fn();
	  a.prototype.constructor = a;
	};

/***/ },
/* 61 */
/***/ function(module, exports) {

	'use strict';

	var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),
	    length = 64,
	    map = {},
	    seed = 0,
	    i = 0,
	    prev;

	/**
	 * Return a string representing the specified number.
	 *
	 * @param {Number} num The number to convert.
	 * @returns {String} The string representation of the number.
	 * @api public
	 */
	function encode(num) {
	  var encoded = '';

	  do {
	    encoded = alphabet[num % length] + encoded;
	    num = Math.floor(num / length);
	  } while (num > 0);

	  return encoded;
	}

	/**
	 * Return the integer value specified by the given string.
	 *
	 * @param {String} str The string to convert.
	 * @returns {Number} The integer value represented by the string.
	 * @api public
	 */
	function decode(str) {
	  var decoded = 0;

	  for (i = 0; i < str.length; i++) {
	    decoded = decoded * length + map[str.charAt(i)];
	  }

	  return decoded;
	}

	/**
	 * Yeast: A tiny growing id generator.
	 *
	 * @returns {String} A unique id.
	 * @api public
	 */
	function yeast() {
	  var now = encode(+new Date());

	  if (now !== prev) return seed = 0, prev = now;
	  return now + '.' + encode(seed++);
	}

	//
	// Map each character to its index.
	//
	for (; i < length; i++) {
	  map[alphabet[i]] = i;
	} //
	// Expose the `yeast`, `encode` and `decode` functions.
	//
	yeast.encode = encode;
	yeast.decode = decode;
	module.exports = yeast;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(63);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	  return typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style ||
	  // is firebug? http://stackoverflow.com/a/398120/376773
	  window.console && (console.firebug || console.exception && console.table) ||
	  // is firefox >= v31?
	  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	  navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31;
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function (v) {
	  try {
	    return JSON.stringify(v);
	  } catch (err) {
	    return '[UnexpectedJSONParseError]: ' + err.message;
	  }
	};

	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function (match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === (typeof console === 'undefined' ? 'undefined' : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch (e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    return exports.storage.debug;
	  } catch (e) {}

	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	  if (typeof process !== 'undefined' && 'env' in process) {
	    return process.env.DEBUG;
	  }
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug.debug = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(64);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {}
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function (match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    // apply env-specific formatting
	    args = exports.formatArgs.apply(self, args);

	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/[\\^$+?.()|[\]{}]/g, '\\$&').replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

/***/ },
/* 64 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function (val, options) {
	  options = options || {};
	  var type = typeof val === 'undefined' ? 'undefined' : _typeof(val);
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 10000) {
	    return;
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) {
	    return;
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	/**
	 * Module requirements.
	 */

	var Polling = __webpack_require__(47);
	var inherit = __webpack_require__(60);

	/**
	 * Module exports.
	 */

	module.exports = JSONPPolling;

	/**
	 * Cached regular expressions.
	 */

	var rNewline = /\n/g;
	var rEscapedNewline = /\\n/g;

	/**
	 * Global JSONP callbacks.
	 */

	var callbacks;

	/**
	 * Noop.
	 */

	function empty() {}

	/**
	 * JSONP Polling constructor.
	 *
	 * @param {Object} opts.
	 * @api public
	 */

	function JSONPPolling(opts) {
	  Polling.call(this, opts);

	  this.query = this.query || {};

	  // define global callbacks array if not present
	  // we do this here (lazily) to avoid unneeded global pollution
	  if (!callbacks) {
	    // we need to consider multiple engines in the same page
	    if (!global.___eio) global.___eio = [];
	    callbacks = global.___eio;
	  }

	  // callback identifier
	  this.index = callbacks.length;

	  // add callback to jsonp global
	  var self = this;
	  callbacks.push(function (msg) {
	    self.onData(msg);
	  });

	  // append to query string
	  this.query.j = this.index;

	  // prevent spurious errors from being emitted when the window is unloaded
	  if (global.document && global.addEventListener) {
	    global.addEventListener('beforeunload', function () {
	      if (self.script) self.script.onerror = empty;
	    }, false);
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit(JSONPPolling, Polling);

	/*
	 * JSONP only supports binary as base64 encoded strings
	 */

	JSONPPolling.prototype.supportsBinary = false;

	/**
	 * Closes the socket.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doClose = function () {
	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  if (this.form) {
	    this.form.parentNode.removeChild(this.form);
	    this.form = null;
	    this.iframe = null;
	  }

	  Polling.prototype.doClose.call(this);
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doPoll = function () {
	  var self = this;
	  var script = document.createElement('script');

	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  script.async = true;
	  script.src = this.uri();
	  script.onerror = function (e) {
	    self.onError('jsonp poll error', e);
	  };

	  var insertAt = document.getElementsByTagName('script')[0];
	  if (insertAt) {
	    insertAt.parentNode.insertBefore(script, insertAt);
	  } else {
	    (document.head || document.body).appendChild(script);
	  }
	  this.script = script;

	  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

	  if (isUAgecko) {
	    setTimeout(function () {
	      var iframe = document.createElement('iframe');
	      document.body.appendChild(iframe);
	      document.body.removeChild(iframe);
	    }, 100);
	  }
	};

	/**
	 * Writes with a hidden iframe.
	 *
	 * @param {String} data to send
	 * @param {Function} called upon flush.
	 * @api private
	 */

	JSONPPolling.prototype.doWrite = function (data, fn) {
	  var self = this;

	  if (!this.form) {
	    var form = document.createElement('form');
	    var area = document.createElement('textarea');
	    var id = this.iframeId = 'eio_iframe_' + this.index;
	    var iframe;

	    form.className = 'socketio';
	    form.style.position = 'absolute';
	    form.style.top = '-1000px';
	    form.style.left = '-1000px';
	    form.target = id;
	    form.method = 'POST';
	    form.setAttribute('accept-charset', 'utf-8');
	    area.name = 'd';
	    form.appendChild(area);
	    document.body.appendChild(form);

	    this.form = form;
	    this.area = area;
	  }

	  this.form.action = this.uri();

	  function complete() {
	    initIframe();
	    fn();
	  }

	  function initIframe() {
	    if (self.iframe) {
	      try {
	        self.form.removeChild(self.iframe);
	      } catch (e) {
	        self.onError('jsonp polling iframe removal error', e);
	      }
	    }

	    try {
	      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
	      iframe = document.createElement(html);
	    } catch (e) {
	      iframe = document.createElement('iframe');
	      iframe.name = self.iframeId;
	      iframe.src = 'javascript:0';
	    }

	    iframe.id = self.iframeId;

	    self.form.appendChild(iframe);
	    self.iframe = iframe;
	  }

	  initIframe();

	  // escape \n to prevent it from being converted into \r\n by some UAs
	  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
	  data = data.replace(rEscapedNewline, '\\\n');
	  this.area.value = data.replace(rNewline, '\\n');

	  try {
	    this.form.submit();
	  } catch (e) {}

	  if (this.iframe.attachEvent) {
	    this.iframe.onreadystatechange = function () {
	      if (self.iframe.readyState === 'complete') {
	        complete();
	      }
	    };
	  } else {
	    this.iframe.onload = complete;
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	/**
	 * Module dependencies.
	 */

	var Transport = __webpack_require__(48);
	var parser = __webpack_require__(49);
	var parseqs = __webpack_require__(59);
	var inherit = __webpack_require__(60);
	var yeast = __webpack_require__(61);
	var debug = __webpack_require__(62)('engine.io-client:websocket');
	var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
	var NodeWebSocket;
	if (typeof window === 'undefined') {
	  try {
	    NodeWebSocket = __webpack_require__(67);
	  } catch (e) {}
	}

	/**
	 * Get either the `WebSocket` or `MozWebSocket` globals
	 * in the browser or try to resolve WebSocket-compatible
	 * interface exposed by `ws` for Node-like environment.
	 */

	var WebSocket = BrowserWebSocket;
	if (!WebSocket && typeof window === 'undefined') {
	  WebSocket = NodeWebSocket;
	}

	/**
	 * Module exports.
	 */

	module.exports = WS;

	/**
	 * WebSocket transport constructor.
	 *
	 * @api {Object} connection options
	 * @api public
	 */

	function WS(opts) {
	  var forceBase64 = opts && opts.forceBase64;
	  if (forceBase64) {
	    this.supportsBinary = false;
	  }
	  this.perMessageDeflate = opts.perMessageDeflate;
	  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
	  if (!this.usingBrowserWebSocket) {
	    WebSocket = NodeWebSocket;
	  }
	  Transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(WS, Transport);

	/**
	 * Transport name.
	 *
	 * @api public
	 */

	WS.prototype.name = 'websocket';

	/*
	 * WebSockets support binary
	 */

	WS.prototype.supportsBinary = true;

	/**
	 * Opens socket.
	 *
	 * @api private
	 */

	WS.prototype.doOpen = function () {
	  if (!this.check()) {
	    // let probe timeout
	    return;
	  }

	  var uri = this.uri();
	  var protocols = void 0;
	  var opts = {
	    agent: this.agent,
	    perMessageDeflate: this.perMessageDeflate
	  };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  if (this.extraHeaders) {
	    opts.headers = this.extraHeaders;
	  }
	  if (this.localAddress) {
	    opts.localAddress = this.localAddress;
	  }

	  try {
	    this.ws = this.usingBrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);
	  } catch (err) {
	    return this.emit('error', err);
	  }

	  if (this.ws.binaryType === undefined) {
	    this.supportsBinary = false;
	  }

	  if (this.ws.supports && this.ws.supports.binary) {
	    this.supportsBinary = true;
	    this.ws.binaryType = 'nodebuffer';
	  } else {
	    this.ws.binaryType = 'arraybuffer';
	  }

	  this.addEventListeners();
	};

	/**
	 * Adds event listeners to the socket
	 *
	 * @api private
	 */

	WS.prototype.addEventListeners = function () {
	  var self = this;

	  this.ws.onopen = function () {
	    self.onOpen();
	  };
	  this.ws.onclose = function () {
	    self.onClose();
	  };
	  this.ws.onmessage = function (ev) {
	    self.onData(ev.data);
	  };
	  this.ws.onerror = function (e) {
	    self.onError('websocket error', e);
	  };
	};

	/**
	 * Writes data to socket.
	 *
	 * @param {Array} array of packets.
	 * @api private
	 */

	WS.prototype.write = function (packets) {
	  var self = this;
	  this.writable = false;

	  // encodePacket efficient as it uses WS framing
	  // no need for encodePayload
	  var total = packets.length;
	  for (var i = 0, l = total; i < l; i++) {
	    (function (packet) {
	      parser.encodePacket(packet, self.supportsBinary, function (data) {
	        if (!self.usingBrowserWebSocket) {
	          // always create a new object (GH-437)
	          var opts = {};
	          if (packet.options) {
	            opts.compress = packet.options.compress;
	          }

	          if (self.perMessageDeflate) {
	            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;
	            if (len < self.perMessageDeflate.threshold) {
	              opts.compress = false;
	            }
	          }
	        }

	        // Sometimes the websocket has already been closed but the browser didn't
	        // have a chance of informing us about it yet, in that case send will
	        // throw an error
	        try {
	          if (self.usingBrowserWebSocket) {
	            // TypeError is thrown when passing the second argument on Safari
	            self.ws.send(data);
	          } else {
	            self.ws.send(data, opts);
	          }
	        } catch (e) {
	          debug('websocket closed before onclose event');
	        }

	        --total || done();
	      });
	    })(packets[i]);
	  }

	  function done() {
	    self.emit('flush');

	    // fake drain
	    // defer to next tick to allow Socket to clear writeBuffer
	    setTimeout(function () {
	      self.writable = true;
	      self.emit('drain');
	    }, 0);
	  }
	};

	/**
	 * Called upon close
	 *
	 * @api private
	 */

	WS.prototype.onClose = function () {
	  Transport.prototype.onClose.call(this);
	};

	/**
	 * Closes socket.
	 *
	 * @api private
	 */

	WS.prototype.doClose = function () {
	  if (typeof this.ws !== 'undefined') {
	    this.ws.close();
	  }
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	WS.prototype.uri = function () {
	  var query = this.query || {};
	  var schema = this.secure ? 'wss' : 'ws';
	  var port = '';

	  // avoid port if default for schema
	  if (this.port && ('wss' === schema && Number(this.port) !== 443 || 'ws' === schema && Number(this.port) !== 80)) {
	    port = ':' + this.port;
	  }

	  // append timestamp to URI
	  if (this.timestampRequests) {
	    query[this.timestampParam] = yeast();
	  }

	  // communicate binary support capabilities
	  if (!this.supportsBinary) {
	    query.b64 = 1;
	  }

	  query = parseqs.encode(query);

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};

	/**
	 * Feature detection for WebSocket.
	 *
	 * @return {Boolean} whether this transport is available.
	 * @api public
	 */

	WS.prototype.check = function () {
	  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 67 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 68 */
/***/ function(module, exports) {

	"use strict";

	var indexOf = [].indexOf;

	module.exports = function (arr, obj) {
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 69 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	/**
	 * JSON parse.
	 *
	 * @see Based on jQuery#parseJSON (MIT) and JSON2
	 * @api private
	 */

	var rvalidchars = /^[\],:{}\s]*$/;
	var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
	var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
	var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
	var rtrimLeft = /^\s+/;
	var rtrimRight = /\s+$/;

	module.exports = function parsejson(data) {
	  if ('string' != typeof data || !data) {
	    return null;
	  }

	  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

	  // Attempt to parse using the native JSON parser first
	  if (global.JSON && JSON.parse) {
	    return JSON.parse(data);
	  }

	  if (rvalidchars.test(data.replace(rvalidescape, '@').replace(rvalidtokens, ']').replace(rvalidbraces, ''))) {
	    return new Function('return ' + data)();
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Module dependencies.
	 */

	var parser = __webpack_require__(29);
	var Emitter = __webpack_require__(71);
	var toArray = __webpack_require__(72);
	var on = __webpack_require__(73);
	var bind = __webpack_require__(74);
	var debug = __webpack_require__(25)('socket.io-client:socket');
	var hasBin = __webpack_require__(51);

	/**
	 * Module exports.
	 */

	module.exports = exports = Socket;

	/**
	 * Internal events (blacklisted).
	 * These events can't be emitted by the user.
	 *
	 * @api private
	 */

	var events = {
	  connect: 1,
	  connect_error: 1,
	  connect_timeout: 1,
	  connecting: 1,
	  disconnect: 1,
	  error: 1,
	  reconnect: 1,
	  reconnect_attempt: 1,
	  reconnect_failed: 1,
	  reconnect_error: 1,
	  reconnecting: 1,
	  ping: 1,
	  pong: 1
	};

	/**
	 * Shortcut to `Emitter#emit`.
	 */

	var emit = Emitter.prototype.emit;

	/**
	 * `Socket` constructor.
	 *
	 * @api public
	 */

	function Socket(io, nsp, opts) {
	  this.io = io;
	  this.nsp = nsp;
	  this.json = this; // compat
	  this.ids = 0;
	  this.acks = {};
	  this.receiveBuffer = [];
	  this.sendBuffer = [];
	  this.connected = false;
	  this.disconnected = true;
	  if (opts && opts.query) {
	    this.query = opts.query;
	  }
	  if (this.io.autoConnect) this.open();
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Socket.prototype);

	/**
	 * Subscribe to open, close and packet events
	 *
	 * @api private
	 */

	Socket.prototype.subEvents = function () {
	  if (this.subs) return;

	  var io = this.io;
	  this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];
	};

	/**
	 * "Opens" the socket.
	 *
	 * @api public
	 */

	Socket.prototype.open = Socket.prototype.connect = function () {
	  if (this.connected) return this;

	  this.subEvents();
	  this.io.open(); // ensure open
	  if ('open' === this.io.readyState) this.onopen();
	  this.emit('connecting');
	  return this;
	};

	/**
	 * Sends a `message` event.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.send = function () {
	  var args = toArray(arguments);
	  args.unshift('message');
	  this.emit.apply(this, args);
	  return this;
	};

	/**
	 * Override `emit`.
	 * If the event is in `events`, it's emitted normally.
	 *
	 * @param {String} event name
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.emit = function (ev) {
	  if (events.hasOwnProperty(ev)) {
	    emit.apply(this, arguments);
	    return this;
	  }

	  var args = toArray(arguments);
	  var parserType = parser.EVENT; // default
	  if (hasBin(args)) {
	    parserType = parser.BINARY_EVENT;
	  } // binary
	  var packet = { type: parserType, data: args };

	  packet.options = {};
	  packet.options.compress = !this.flags || false !== this.flags.compress;

	  // event ack callback
	  if ('function' === typeof args[args.length - 1]) {
	    debug('emitting packet with ack id %d', this.ids);
	    this.acks[this.ids] = args.pop();
	    packet.id = this.ids++;
	  }

	  if (this.connected) {
	    this.packet(packet);
	  } else {
	    this.sendBuffer.push(packet);
	  }

	  delete this.flags;

	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.packet = function (packet) {
	  packet.nsp = this.nsp;
	  this.io.packet(packet);
	};

	/**
	 * Called upon engine `open`.
	 *
	 * @api private
	 */

	Socket.prototype.onopen = function () {
	  debug('transport is open - connecting');

	  // write connect packet if necessary
	  if ('/' !== this.nsp) {
	    if (this.query) {
	      this.packet({ type: parser.CONNECT, query: this.query });
	    } else {
	      this.packet({ type: parser.CONNECT });
	    }
	  }
	};

	/**
	 * Called upon engine `close`.
	 *
	 * @param {String} reason
	 * @api private
	 */

	Socket.prototype.onclose = function (reason) {
	  debug('close (%s)', reason);
	  this.connected = false;
	  this.disconnected = true;
	  delete this.id;
	  this.emit('disconnect', reason);
	};

	/**
	 * Called with socket packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onpacket = function (packet) {
	  if (packet.nsp !== this.nsp) return;

	  switch (packet.type) {
	    case parser.CONNECT:
	      this.onconnect();
	      break;

	    case parser.EVENT:
	      this.onevent(packet);
	      break;

	    case parser.BINARY_EVENT:
	      this.onevent(packet);
	      break;

	    case parser.ACK:
	      this.onack(packet);
	      break;

	    case parser.BINARY_ACK:
	      this.onack(packet);
	      break;

	    case parser.DISCONNECT:
	      this.ondisconnect();
	      break;

	    case parser.ERROR:
	      this.emit('error', packet.data);
	      break;
	  }
	};

	/**
	 * Called upon a server event.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onevent = function (packet) {
	  var args = packet.data || [];
	  debug('emitting event %j', args);

	  if (null != packet.id) {
	    debug('attaching ack callback to event');
	    args.push(this.ack(packet.id));
	  }

	  if (this.connected) {
	    emit.apply(this, args);
	  } else {
	    this.receiveBuffer.push(args);
	  }
	};

	/**
	 * Produces an ack callback to emit with an event.
	 *
	 * @api private
	 */

	Socket.prototype.ack = function (id) {
	  var self = this;
	  var sent = false;
	  return function () {
	    // prevent double callbacks
	    if (sent) return;
	    sent = true;
	    var args = toArray(arguments);
	    debug('sending ack %j', args);

	    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
	    self.packet({
	      type: type,
	      id: id,
	      data: args
	    });
	  };
	};

	/**
	 * Called upon a server acknowlegement.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onack = function (packet) {
	  var ack = this.acks[packet.id];
	  if ('function' === typeof ack) {
	    debug('calling ack %s with %j', packet.id, packet.data);
	    ack.apply(this, packet.data);
	    delete this.acks[packet.id];
	  } else {
	    debug('bad ack %s', packet.id);
	  }
	};

	/**
	 * Called upon server connect.
	 *
	 * @api private
	 */

	Socket.prototype.onconnect = function () {
	  this.connected = true;
	  this.disconnected = false;
	  this.emit('connect');
	  this.emitBuffered();
	};

	/**
	 * Emit buffered events (received and emitted).
	 *
	 * @api private
	 */

	Socket.prototype.emitBuffered = function () {
	  var i;
	  for (i = 0; i < this.receiveBuffer.length; i++) {
	    emit.apply(this, this.receiveBuffer[i]);
	  }
	  this.receiveBuffer = [];

	  for (i = 0; i < this.sendBuffer.length; i++) {
	    this.packet(this.sendBuffer[i]);
	  }
	  this.sendBuffer = [];
	};

	/**
	 * Called upon server disconnect.
	 *
	 * @api private
	 */

	Socket.prototype.ondisconnect = function () {
	  debug('server disconnect (%s)', this.nsp);
	  this.destroy();
	  this.onclose('io server disconnect');
	};

	/**
	 * Called upon forced client/server side disconnections,
	 * this method ensures the manager stops tracking us and
	 * that reconnections don't get triggered for this.
	 *
	 * @api private.
	 */

	Socket.prototype.destroy = function () {
	  if (this.subs) {
	    // clean subscriptions to avoid reconnections
	    for (var i = 0; i < this.subs.length; i++) {
	      this.subs[i].destroy();
	    }
	    this.subs = null;
	  }

	  this.io.destroy(this);
	};

	/**
	 * Disconnects the socket manually.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.close = Socket.prototype.disconnect = function () {
	  if (this.connected) {
	    debug('performing disconnect (%s)', this.nsp);
	    this.packet({ type: parser.DISCONNECT });
	  }

	  // remove socket from pool
	  this.destroy();

	  if (this.connected) {
	    // fire events
	    this.onclose('io client disconnect');
	  }
	  return this;
	};

	/**
	 * Sets the compress flag.
	 *
	 * @param {Boolean} if `true`, compresses the sending data
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.compress = function (compress) {
	  this.flags = this.flags || {};
	  this.flags.compress = compress;
	  return this;
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Expose `Emitter`.
	 */

	if (true) {
	  module.exports = Emitter;
	}

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function (event, fn) {
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function (event) {
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1),
	      callbacks = this._callbacks['$' + event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function (event) {
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function (event) {
	  return !!this.listeners(event).length;
	};

/***/ },
/* 72 */
/***/ function(module, exports) {

	"use strict";

	module.exports = toArray;

	function toArray(list, index) {
	    var array = [];

	    index = index || 0;

	    for (var i = index || 0; i < list.length; i++) {
	        array[i - index] = list[i];
	    }

	    return array;
	}

/***/ },
/* 73 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Module exports.
	 */

	module.exports = on;

	/**
	 * Helper for subscriptions.
	 *
	 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
	 * @param {String} event name
	 * @param {Function} callback
	 * @api public
	 */

	function on(obj, ev, fn) {
	  obj.on(ev, fn);
	  return {
	    destroy: function destroy() {
	      obj.removeListener(ev, fn);
	    }
	  };
	}

/***/ },
/* 74 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Slice reference.
	 */

	var slice = [].slice;

	/**
	 * Bind `obj` to `fn`.
	 *
	 * @param {Object} obj
	 * @param {Function|String} fn or string
	 * @return {Function}
	 * @api public
	 */

	module.exports = function (obj, fn) {
	  if ('string' == typeof fn) fn = obj[fn];
	  if ('function' != typeof fn) throw new Error('bind() requires a function');
	  var args = slice.call(arguments, 2);
	  return function () {
	    return fn.apply(obj, args.concat(slice.call(arguments)));
	  };
	};

/***/ },
/* 75 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Expose `Backoff`.
	 */

	module.exports = Backoff;

	/**
	 * Initialize backoff timer with `opts`.
	 *
	 * - `min` initial timeout in milliseconds [100]
	 * - `max` max timeout [10000]
	 * - `jitter` [0]
	 * - `factor` [2]
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function Backoff(opts) {
	  opts = opts || {};
	  this.ms = opts.min || 100;
	  this.max = opts.max || 10000;
	  this.factor = opts.factor || 2;
	  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
	  this.attempts = 0;
	}

	/**
	 * Return the backoff duration.
	 *
	 * @return {Number}
	 * @api public
	 */

	Backoff.prototype.duration = function () {
	  var ms = this.ms * Math.pow(this.factor, this.attempts++);
	  if (this.jitter) {
	    var rand = Math.random();
	    var deviation = Math.floor(rand * this.jitter * ms);
	    ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
	  }
	  return Math.min(ms, this.max) | 0;
	};

	/**
	 * Reset the number of attempts.
	 *
	 * @api public
	 */

	Backoff.prototype.reset = function () {
	  this.attempts = 0;
	};

	/**
	 * Set the minimum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMin = function (min) {
	  this.ms = min;
	};

	/**
	 * Set the maximum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMax = function (max) {
	  this.max = max;
	};

	/**
	 * Set the jitter
	 *
	 * @api public
	 */

	Backoff.prototype.setJitter = function (jitter) {
	  this.jitter = jitter;
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	// Version 0.5.0 - Copyright 2012 - 2015 -  Jim Riecken <jimr@jimr.ca>
	//
	// Released under the MIT License - https://github.com/jriecken/sat-js
	//
	// A simple library for determining intersections of circles and
	// polygons using the Separating Axis Theorem.
	/** @preserve SAT.js - Version 0.5.0 - Copyright 2012 - 2015 - Jim Riecken <jimr@jimr.ca> - released under the MIT License. https://github.com/jriecken/sat-js */

	/*global define: false, module: false*/
	/*jshint shadow:true, sub:true, forin:true, noarg:true, noempty:true, 
	  eqeqeq:true, bitwise:true, strict:true, undef:true, 
	  curly:true, browser:true */

	// Create a UMD wrapper for SAT. Works in:
	//
	//  - Plain browser via global SAT variable
	//  - AMD loader (like require.js)
	//  - Node.js
	//
	// The quoted properties all over the place are used so that the Closure Compiler
	// does not mangle the exposed API in advanced mode.
	/**
	 * @param {*} root - The global scope
	 * @param {Function} factory - Factory that creates SAT module
	 */
	(function (root, factory) {
	  "use strict";

	  if ("function" === 'function' && __webpack_require__(77)['amd']) {
	    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (( false ? 'undefined' : _typeof(exports)) === 'object') {
	    module['exports'] = factory();
	  } else {
	    root['SAT'] = factory();
	  }
	})(undefined, function () {
	  "use strict";

	  var SAT = {};

	  //
	  // ## Vector
	  //
	  // Represents a vector in two dimensions with `x` and `y` properties.


	  // Create a new Vector, optionally passing in the `x` and `y` coordinates. If
	  // a coordinate is not specified, it will be set to `0`
	  /** 
	   * @param {?number=} x The x position.
	   * @param {?number=} y The y position.
	   * @constructor
	   */
	  function Vector(x, y) {
	    this['x'] = x || 0;
	    this['y'] = y || 0;
	  }
	  SAT['Vector'] = Vector;
	  // Alias `Vector` as `V`
	  SAT['V'] = Vector;

	  // Copy the values of another Vector into this one.
	  /**
	   * @param {Vector} other The other Vector.
	   * @return {Vector} This for chaining.
	   */
	  Vector.prototype['copy'] = Vector.prototype.copy = function (other) {
	    this['x'] = other['x'];
	    this['y'] = other['y'];
	    return this;
	  };

	  // Create a new vector with the same coordinates as this on.
	  /**
	   * @return {Vector} The new cloned vector
	   */
	  Vector.prototype['clone'] = Vector.prototype.clone = function () {
	    return new Vector(this['x'], this['y']);
	  };

	  // Change this vector to be perpendicular to what it was before. (Effectively
	  // roatates it 90 degrees in a clockwise direction)
	  /**
	   * @return {Vector} This for chaining.
	   */
	  Vector.prototype['perp'] = Vector.prototype.perp = function () {
	    var x = this['x'];
	    this['x'] = this['y'];
	    this['y'] = -x;
	    return this;
	  };

	  // Rotate this vector (counter-clockwise) by the specified angle (in radians).
	  /**
	   * @param {number} angle The angle to rotate (in radians)
	   * @return {Vector} This for chaining.
	   */
	  Vector.prototype['rotate'] = Vector.prototype.rotate = function (angle) {
	    var x = this['x'];
	    var y = this['y'];
	    this['x'] = x * Math.cos(angle) - y * Math.sin(angle);
	    this['y'] = x * Math.sin(angle) + y * Math.cos(angle);
	    return this;
	  };

	  // Reverse this vector.
	  /**
	   * @return {Vector} This for chaining.
	   */
	  Vector.prototype['reverse'] = Vector.prototype.reverse = function () {
	    this['x'] = -this['x'];
	    this['y'] = -this['y'];
	    return this;
	  };

	  // Normalize this vector.  (make it have length of `1`)
	  /**
	   * @return {Vector} This for chaining.
	   */
	  Vector.prototype['normalize'] = Vector.prototype.normalize = function () {
	    var d = this.len();
	    if (d > 0) {
	      this['x'] = this['x'] / d;
	      this['y'] = this['y'] / d;
	    }
	    return this;
	  };

	  // Add another vector to this one.
	  /**
	   * @param {Vector} other The other Vector.
	   * @return {Vector} This for chaining.
	   */
	  Vector.prototype['add'] = Vector.prototype.add = function (other) {
	    this['x'] += other['x'];
	    this['y'] += other['y'];
	    return this;
	  };

	  // Subtract another vector from this one.
	  /**
	   * @param {Vector} other The other Vector.
	   * @return {Vector} This for chaiing.
	   */
	  Vector.prototype['sub'] = Vector.prototype.sub = function (other) {
	    this['x'] -= other['x'];
	    this['y'] -= other['y'];
	    return this;
	  };

	  // Scale this vector. An independant scaling factor can be provided
	  // for each axis, or a single scaling factor that will scale both `x` and `y`.
	  /**
	   * @param {number} x The scaling factor in the x direction.
	   * @param {?number=} y The scaling factor in the y direction.  If this
	   *   is not specified, the x scaling factor will be used.
	   * @return {Vector} This for chaining.
	   */
	  Vector.prototype['scale'] = Vector.prototype.scale = function (x, y) {
	    this['x'] *= x;
	    this['y'] *= y || x;
	    return this;
	  };

	  // Project this vector on to another vector.
	  /**
	   * @param {Vector} other The vector to project onto.
	   * @return {Vector} This for chaining.
	   */
	  Vector.prototype['project'] = Vector.prototype.project = function (other) {
	    var amt = this.dot(other) / other.len2();
	    this['x'] = amt * other['x'];
	    this['y'] = amt * other['y'];
	    return this;
	  };

	  // Project this vector onto a vector of unit length. This is slightly more efficient
	  // than `project` when dealing with unit vectors.
	  /**
	   * @param {Vector} other The unit vector to project onto.
	   * @return {Vector} This for chaining.
	   */
	  Vector.prototype['projectN'] = Vector.prototype.projectN = function (other) {
	    var amt = this.dot(other);
	    this['x'] = amt * other['x'];
	    this['y'] = amt * other['y'];
	    return this;
	  };

	  // Reflect this vector on an arbitrary axis.
	  /**
	   * @param {Vector} axis The vector representing the axis.
	   * @return {Vector} This for chaining.
	   */
	  Vector.prototype['reflect'] = Vector.prototype.reflect = function (axis) {
	    var x = this['x'];
	    var y = this['y'];
	    this.project(axis).scale(2);
	    this['x'] -= x;
	    this['y'] -= y;
	    return this;
	  };

	  // Reflect this vector on an arbitrary axis (represented by a unit vector). This is
	  // slightly more efficient than `reflect` when dealing with an axis that is a unit vector.
	  /**
	   * @param {Vector} axis The unit vector representing the axis.
	   * @return {Vector} This for chaining.
	   */
	  Vector.prototype['reflectN'] = Vector.prototype.reflectN = function (axis) {
	    var x = this['x'];
	    var y = this['y'];
	    this.projectN(axis).scale(2);
	    this['x'] -= x;
	    this['y'] -= y;
	    return this;
	  };

	  // Get the dot product of this vector and another.
	  /**
	   * @param {Vector}  other The vector to dot this one against.
	   * @return {number} The dot product.
	   */
	  Vector.prototype['dot'] = Vector.prototype.dot = function (other) {
	    return this['x'] * other['x'] + this['y'] * other['y'];
	  };

	  // Get the squared length of this vector.
	  /**
	   * @return {number} The length^2 of this vector.
	   */
	  Vector.prototype['len2'] = Vector.prototype.len2 = function () {
	    return this.dot(this);
	  };

	  // Get the length of this vector.
	  /**
	   * @return {number} The length of this vector.
	   */
	  Vector.prototype['len'] = Vector.prototype.len = function () {
	    return Math.sqrt(this.len2());
	  };

	  // ## Circle
	  //
	  // Represents a circle with a position and a radius.

	  // Create a new circle, optionally passing in a position and/or radius. If no position
	  // is given, the circle will be at `(0,0)`. If no radius is provided, the circle will
	  // have a radius of `0`.
	  /**
	   * @param {Vector=} pos A vector representing the position of the center of the circle
	   * @param {?number=} r The radius of the circle
	   * @constructor
	   */
	  function Circle(pos, r) {
	    this['pos'] = pos || new Vector();
	    this['r'] = r || 0;
	  }
	  SAT['Circle'] = Circle;

	  // Compute the axis-aligned bounding box (AABB) of this Circle.
	  //
	  // Note: Returns a _new_ `Polygon` each time you call this.
	  /**
	   * @return {Polygon} The AABB
	   */
	  Circle.prototype['getAABB'] = Circle.prototype.getAABB = function () {
	    var r = this['r'];
	    var corner = this["pos"].clone().sub(new Vector(r, r));
	    return new Box(corner, r * 2, r * 2).toPolygon();
	  };

	  // ## Polygon
	  //
	  // Represents a *convex* polygon with any number of points (specified in counter-clockwise order)
	  //
	  // Note: Do _not_ manually change the `points`, `angle`, or `offset` properties. Use the
	  // provided setters. Otherwise the calculated properties will not be updated correctly.
	  //
	  // `pos` can be changed directly.

	  // Create a new polygon, passing in a position vector, and an array of points (represented
	  // by vectors relative to the position vector). If no position is passed in, the position
	  // of the polygon will be `(0,0)`.
	  /**
	   * @param {Vector=} pos A vector representing the origin of the polygon. (all other
	   *   points are relative to this one)
	   * @param {Array.<Vector>=} points An array of vectors representing the points in the polygon,
	   *   in counter-clockwise order.
	   * @constructor
	   */
	  function Polygon(pos, points) {
	    this['pos'] = pos || new Vector();
	    this['angle'] = 0;
	    this['offset'] = new Vector();
	    this.setPoints(points || []);
	  }
	  SAT['Polygon'] = Polygon;

	  // Set the points of the polygon.
	  /**
	   * @param {Array.<Vector>=} points An array of vectors representing the points in the polygon,
	   *   in counter-clockwise order.
	   * @return {Polygon} This for chaining.
	   */
	  Polygon.prototype['setPoints'] = Polygon.prototype.setPoints = function (points) {
	    // Only re-allocate if this is a new polygon or the number of points has changed.
	    var lengthChanged = !this['points'] || this['points'].length !== points.length;
	    if (lengthChanged) {
	      var i;
	      var calcPoints = this['calcPoints'] = [];
	      var edges = this['edges'] = [];
	      var normals = this['normals'] = [];
	      // Allocate the vector arrays for the calculated properties
	      for (i = 0; i < points.length; i++) {
	        calcPoints.push(new Vector());
	        edges.push(new Vector());
	        normals.push(new Vector());
	      }
	    }
	    this['points'] = points;
	    this._recalc();
	    return this;
	  };

	  // Set the current rotation angle of the polygon.
	  /**
	   * @param {number} angle The current rotation angle (in radians).
	   * @return {Polygon} This for chaining.
	   */
	  Polygon.prototype['setAngle'] = Polygon.prototype.setAngle = function (angle) {
	    this['angle'] = angle;
	    this._recalc();
	    return this;
	  };

	  // Set the current offset to apply to the `points` before applying the `angle` rotation.
	  /**
	   * @param {Vector} offset The new offset vector.
	   * @return {Polygon} This for chaining.
	   */
	  Polygon.prototype['setOffset'] = Polygon.prototype.setOffset = function (offset) {
	    this['offset'] = offset;
	    this._recalc();
	    return this;
	  };

	  // Rotates this polygon counter-clockwise around the origin of *its local coordinate system* (i.e. `pos`).
	  //
	  // Note: This changes the **original** points (so any `angle` will be applied on top of this rotation).
	  /**
	   * @param {number} angle The angle to rotate (in radians)
	   * @return {Polygon} This for chaining.
	   */
	  Polygon.prototype['rotate'] = Polygon.prototype.rotate = function (angle) {
	    var points = this['points'];
	    var len = points.length;
	    for (var i = 0; i < len; i++) {
	      points[i].rotate(angle);
	    }
	    this._recalc();
	    return this;
	  };

	  // Translates the points of this polygon by a specified amount relative to the origin of *its own coordinate
	  // system* (i.e. `pos`).
	  //
	  // This is most useful to change the "center point" of a polygon. If you just want to move the whole polygon, change
	  // the coordinates of `pos`.
	  //
	  // Note: This changes the **original** points (so any `offset` will be applied on top of this translation)
	  /**
	   * @param {number} x The horizontal amount to translate.
	   * @param {number} y The vertical amount to translate.
	   * @return {Polygon} This for chaining.
	   */
	  Polygon.prototype['translate'] = Polygon.prototype.translate = function (x, y) {
	    var points = this['points'];
	    var len = points.length;
	    for (var i = 0; i < len; i++) {
	      points[i].x += x;
	      points[i].y += y;
	    }
	    this._recalc();
	    return this;
	  };

	  // Computes the calculated collision polygon. Applies the `angle` and `offset` to the original points then recalculates the
	  // edges and normals of the collision polygon.
	  /**
	   * @return {Polygon} This for chaining.
	   */
	  Polygon.prototype._recalc = function () {
	    // Calculated points - this is what is used for underlying collisions and takes into account
	    // the angle/offset set on the polygon.
	    var calcPoints = this['calcPoints'];
	    // The edges here are the direction of the `n`th edge of the polygon, relative to
	    // the `n`th point. If you want to draw a given edge from the edge value, you must
	    // first translate to the position of the starting point.
	    var edges = this['edges'];
	    // The normals here are the direction of the normal for the `n`th edge of the polygon, relative
	    // to the position of the `n`th point. If you want to draw an edge normal, you must first
	    // translate to the position of the starting point.
	    var normals = this['normals'];
	    // Copy the original points array and apply the offset/angle
	    var points = this['points'];
	    var offset = this['offset'];
	    var angle = this['angle'];
	    var len = points.length;
	    var i;
	    for (i = 0; i < len; i++) {
	      var calcPoint = calcPoints[i].copy(points[i]);
	      calcPoint.x += offset.x;
	      calcPoint.y += offset.y;
	      if (angle !== 0) {
	        calcPoint.rotate(angle);
	      }
	    }
	    // Calculate the edges/normals
	    for (i = 0; i < len; i++) {
	      var p1 = calcPoints[i];
	      var p2 = i < len - 1 ? calcPoints[i + 1] : calcPoints[0];
	      var e = edges[i].copy(p2).sub(p1);
	      normals[i].copy(e).perp().normalize();
	    }
	    return this;
	  };

	  // Compute the axis-aligned bounding box. Any current state
	  // (translations/rotations) will be applied before constructing the AABB.
	  //
	  // Note: Returns a _new_ `Polygon` each time you call this.
	  /**
	   * @return {Polygon} The AABB
	   */
	  Polygon.prototype["getAABB"] = Polygon.prototype.getAABB = function () {
	    var points = this["calcPoints"];
	    var len = points.length;
	    var xMin = points[0]["x"];
	    var yMin = points[0]["y"];
	    var xMax = points[0]["x"];
	    var yMax = points[0]["y"];
	    for (var i = 1; i < len; i++) {
	      var point = points[i];
	      if (point["x"] < xMin) {
	        xMin = point["x"];
	      } else if (point["x"] > xMax) {
	        xMax = point["x"];
	      }
	      if (point["y"] < yMin) {
	        yMin = point["y"];
	      } else if (point["y"] > yMax) {
	        yMax = point["y"];
	      }
	    }
	    return new Box(this["pos"].clone().add(new Vector(xMin, yMin)), xMax - xMin, yMax - yMin).toPolygon();
	  };

	  // ## Box
	  //
	  // Represents an axis-aligned box, with a width and height.


	  // Create a new box, with the specified position, width, and height. If no position
	  // is given, the position will be `(0,0)`. If no width or height are given, they will
	  // be set to `0`.
	  /**
	   * @param {Vector=} pos A vector representing the top-left of the box.
	   * @param {?number=} w The width of the box.
	   * @param {?number=} h The height of the box.
	   * @constructor
	   */
	  function Box(pos, w, h) {
	    this['pos'] = pos || new Vector();
	    this['w'] = w || 0;
	    this['h'] = h || 0;
	  }
	  SAT['Box'] = Box;

	  // Returns a polygon whose edges are the same as this box.
	  /**
	   * @return {Polygon} A new Polygon that represents this box.
	   */
	  Box.prototype['toPolygon'] = Box.prototype.toPolygon = function () {
	    var pos = this['pos'];
	    var w = this['w'];
	    var h = this['h'];
	    return new Polygon(new Vector(pos['x'], pos['y']), [new Vector(), new Vector(w, 0), new Vector(w, h), new Vector(0, h)]);
	  };

	  // ## Response
	  //
	  // An object representing the result of an intersection. Contains:
	  //  - The two objects participating in the intersection
	  //  - The vector representing the minimum change necessary to extract the first object
	  //    from the second one (as well as a unit vector in that direction and the magnitude
	  //    of the overlap)
	  //  - Whether the first object is entirely inside the second, and vice versa.
	  /**
	   * @constructor
	   */
	  function Response() {
	    this['a'] = null;
	    this['b'] = null;
	    this['overlapN'] = new Vector();
	    this['overlapV'] = new Vector();
	    this.clear();
	  }
	  SAT['Response'] = Response;

	  // Set some values of the response back to their defaults.  Call this between tests if
	  // you are going to reuse a single Response object for multiple intersection tests (recommented
	  // as it will avoid allcating extra memory)
	  /**
	   * @return {Response} This for chaining
	   */
	  Response.prototype['clear'] = Response.prototype.clear = function () {
	    this['aInB'] = true;
	    this['bInA'] = true;
	    this['overlap'] = Number.MAX_VALUE;
	    return this;
	  };

	  // ## Object Pools

	  // A pool of `Vector` objects that are used in calculations to avoid
	  // allocating memory.
	  /**
	   * @type {Array.<Vector>}
	   */
	  var T_VECTORS = [];
	  for (var i = 0; i < 10; i++) {
	    T_VECTORS.push(new Vector());
	  }

	  // A pool of arrays of numbers used in calculations to avoid allocating
	  // memory.
	  /**
	   * @type {Array.<Array.<number>>}
	   */
	  var T_ARRAYS = [];
	  for (var i = 0; i < 5; i++) {
	    T_ARRAYS.push([]);
	  }

	  // Temporary response used for polygon hit detection.
	  /**
	   * @type {Response}
	   */
	  var T_RESPONSE = new Response();

	  // Unit square polygon used for polygon hit detection.
	  /**
	   * @type {Polygon}
	   */
	  var UNIT_SQUARE = new Box(new Vector(), 1, 1).toPolygon();

	  // ## Helper Functions

	  // Flattens the specified array of points onto a unit vector axis,
	  // resulting in a one dimensional range of the minimum and
	  // maximum value on that axis.
	  /**
	   * @param {Array.<Vector>} points The points to flatten.
	   * @param {Vector} normal The unit vector axis to flatten on.
	   * @param {Array.<number>} result An array.  After calling this function,
	   *   result[0] will be the minimum value,
	   *   result[1] will be the maximum value.
	   */
	  function flattenPointsOn(points, normal, result) {
	    var min = Number.MAX_VALUE;
	    var max = -Number.MAX_VALUE;
	    var len = points.length;
	    for (var i = 0; i < len; i++) {
	      // The magnitude of the projection of the point onto the normal
	      var dot = points[i].dot(normal);
	      if (dot < min) {
	        min = dot;
	      }
	      if (dot > max) {
	        max = dot;
	      }
	    }
	    result[0] = min;result[1] = max;
	  }

	  // Check whether two convex polygons are separated by the specified
	  // axis (must be a unit vector).
	  /**
	   * @param {Vector} aPos The position of the first polygon.
	   * @param {Vector} bPos The position of the second polygon.
	   * @param {Array.<Vector>} aPoints The points in the first polygon.
	   * @param {Array.<Vector>} bPoints The points in the second polygon.
	   * @param {Vector} axis The axis (unit sized) to test against.  The points of both polygons
	   *   will be projected onto this axis.
	   * @param {Response=} response A Response object (optional) which will be populated
	   *   if the axis is not a separating axis.
	   * @return {boolean} true if it is a separating axis, false otherwise.  If false,
	   *   and a response is passed in, information about how much overlap and
	   *   the direction of the overlap will be populated.
	   */
	  function isSeparatingAxis(aPos, bPos, aPoints, bPoints, axis, response) {
	    var rangeA = T_ARRAYS.pop();
	    var rangeB = T_ARRAYS.pop();
	    // The magnitude of the offset between the two polygons
	    var offsetV = T_VECTORS.pop().copy(bPos).sub(aPos);
	    var projectedOffset = offsetV.dot(axis);
	    // Project the polygons onto the axis.
	    flattenPointsOn(aPoints, axis, rangeA);
	    flattenPointsOn(bPoints, axis, rangeB);
	    // Move B's range to its position relative to A.
	    rangeB[0] += projectedOffset;
	    rangeB[1] += projectedOffset;
	    // Check if there is a gap. If there is, this is a separating axis and we can stop
	    if (rangeA[0] > rangeB[1] || rangeB[0] > rangeA[1]) {
	      T_VECTORS.push(offsetV);
	      T_ARRAYS.push(rangeA);
	      T_ARRAYS.push(rangeB);
	      return true;
	    }
	    // This is not a separating axis. If we're calculating a response, calculate the overlap.
	    if (response) {
	      var overlap = 0;
	      // A starts further left than B
	      if (rangeA[0] < rangeB[0]) {
	        response['aInB'] = false;
	        // A ends before B does. We have to pull A out of B
	        if (rangeA[1] < rangeB[1]) {
	          overlap = rangeA[1] - rangeB[0];
	          response['bInA'] = false;
	          // B is fully inside A.  Pick the shortest way out.
	        } else {
	          var option1 = rangeA[1] - rangeB[0];
	          var option2 = rangeB[1] - rangeA[0];
	          overlap = option1 < option2 ? option1 : -option2;
	        }
	        // B starts further left than A
	      } else {
	        response['bInA'] = false;
	        // B ends before A ends. We have to push A out of B
	        if (rangeA[1] > rangeB[1]) {
	          overlap = rangeA[0] - rangeB[1];
	          response['aInB'] = false;
	          // A is fully inside B.  Pick the shortest way out.
	        } else {
	          var option1 = rangeA[1] - rangeB[0];
	          var option2 = rangeB[1] - rangeA[0];
	          overlap = option1 < option2 ? option1 : -option2;
	        }
	      }
	      // If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.
	      var absOverlap = Math.abs(overlap);
	      if (absOverlap < response['overlap']) {
	        response['overlap'] = absOverlap;
	        response['overlapN'].copy(axis);
	        if (overlap < 0) {
	          response['overlapN'].reverse();
	        }
	      }
	    }
	    T_VECTORS.push(offsetV);
	    T_ARRAYS.push(rangeA);
	    T_ARRAYS.push(rangeB);
	    return false;
	  }

	  // Calculates which Vornoi region a point is on a line segment.
	  // It is assumed that both the line and the point are relative to `(0,0)`
	  //
	  //            |       (0)      |
	  //     (-1)  [S]--------------[E]  (1)
	  //            |       (0)      |
	  /**
	   * @param {Vector} line The line segment.
	   * @param {Vector} point The point.
	   * @return  {number} LEFT_VORNOI_REGION (-1) if it is the left region, 
	   *          MIDDLE_VORNOI_REGION (0) if it is the middle region, 
	   *          RIGHT_VORNOI_REGION (1) if it is the right region.
	   */
	  function vornoiRegion(line, point) {
	    var len2 = line.len2();
	    var dp = point.dot(line);
	    // If the point is beyond the start of the line, it is in the
	    // left vornoi region.
	    if (dp < 0) {
	      return LEFT_VORNOI_REGION;
	    }
	    // If the point is beyond the end of the line, it is in the
	    // right vornoi region.
	    else if (dp > len2) {
	        return RIGHT_VORNOI_REGION;
	      }
	      // Otherwise, it's in the middle one.
	      else {
	          return MIDDLE_VORNOI_REGION;
	        }
	  }
	  // Constants for Vornoi regions
	  /**
	   * @const
	   */
	  var LEFT_VORNOI_REGION = -1;
	  /**
	   * @const
	   */
	  var MIDDLE_VORNOI_REGION = 0;
	  /**
	   * @const
	   */
	  var RIGHT_VORNOI_REGION = 1;

	  // ## Collision Tests

	  // Check if a point is inside a circle.
	  /**
	   * @param {Vector} p The point to test.
	   * @param {Circle} c The circle to test.
	   * @return {boolean} true if the point is inside the circle, false if it is not.
	   */
	  function pointInCircle(p, c) {
	    var differenceV = T_VECTORS.pop().copy(p).sub(c['pos']);
	    var radiusSq = c['r'] * c['r'];
	    var distanceSq = differenceV.len2();
	    T_VECTORS.push(differenceV);
	    // If the distance between is smaller than the radius then the point is inside the circle.
	    return distanceSq <= radiusSq;
	  }
	  SAT['pointInCircle'] = pointInCircle;

	  // Check if a point is inside a convex polygon.
	  /**
	   * @param {Vector} p The point to test.
	   * @param {Polygon} poly The polygon to test.
	   * @return {boolean} true if the point is inside the polygon, false if it is not.
	   */
	  function pointInPolygon(p, poly) {
	    UNIT_SQUARE['pos'].copy(p);
	    T_RESPONSE.clear();
	    var result = testPolygonPolygon(UNIT_SQUARE, poly, T_RESPONSE);
	    if (result) {
	      result = T_RESPONSE['aInB'];
	    }
	    return result;
	  }
	  SAT['pointInPolygon'] = pointInPolygon;

	  // Check if two circles collide.
	  /**
	   * @param {Circle} a The first circle.
	   * @param {Circle} b The second circle.
	   * @param {Response=} response Response object (optional) that will be populated if
	   *   the circles intersect.
	   * @return {boolean} true if the circles intersect, false if they don't. 
	   */
	  function testCircleCircle(a, b, response) {
	    // Check if the distance between the centers of the two
	    // circles is greater than their combined radius.
	    var differenceV = T_VECTORS.pop().copy(b['pos']).sub(a['pos']);
	    var totalRadius = a['r'] + b['r'];
	    var totalRadiusSq = totalRadius * totalRadius;
	    var distanceSq = differenceV.len2();
	    // If the distance is bigger than the combined radius, they don't intersect.
	    if (distanceSq > totalRadiusSq) {
	      T_VECTORS.push(differenceV);
	      return false;
	    }
	    // They intersect.  If we're calculating a response, calculate the overlap.
	    if (response) {
	      var dist = Math.sqrt(distanceSq);
	      response['a'] = a;
	      response['b'] = b;
	      response['overlap'] = totalRadius - dist;
	      response['overlapN'].copy(differenceV.normalize());
	      response['overlapV'].copy(differenceV).scale(response['overlap']);
	      response['aInB'] = a['r'] <= b['r'] && dist <= b['r'] - a['r'];
	      response['bInA'] = b['r'] <= a['r'] && dist <= a['r'] - b['r'];
	    }
	    T_VECTORS.push(differenceV);
	    return true;
	  }
	  SAT['testCircleCircle'] = testCircleCircle;

	  // Check if a polygon and a circle collide.
	  /**
	   * @param {Polygon} polygon The polygon.
	   * @param {Circle} circle The circle.
	   * @param {Response=} response Response object (optional) that will be populated if
	   *   they interset.
	   * @return {boolean} true if they intersect, false if they don't.
	   */
	  function testPolygonCircle(polygon, circle, response) {
	    // Get the position of the circle relative to the polygon.
	    var circlePos = T_VECTORS.pop().copy(circle['pos']).sub(polygon['pos']);
	    var radius = circle['r'];
	    var radius2 = radius * radius;
	    var points = polygon['calcPoints'];
	    var len = points.length;
	    var edge = T_VECTORS.pop();
	    var point = T_VECTORS.pop();

	    // For each edge in the polygon:
	    for (var i = 0; i < len; i++) {
	      var next = i === len - 1 ? 0 : i + 1;
	      var prev = i === 0 ? len - 1 : i - 1;
	      var overlap = 0;
	      var overlapN = null;

	      // Get the edge.
	      edge.copy(polygon['edges'][i]);
	      // Calculate the center of the circle relative to the starting point of the edge.
	      point.copy(circlePos).sub(points[i]);

	      // If the distance between the center of the circle and the point
	      // is bigger than the radius, the polygon is definitely not fully in
	      // the circle.
	      if (response && point.len2() > radius2) {
	        response['aInB'] = false;
	      }

	      // Calculate which Vornoi region the center of the circle is in.
	      var region = vornoiRegion(edge, point);
	      // If it's the left region:
	      if (region === LEFT_VORNOI_REGION) {
	        // We need to make sure we're in the RIGHT_VORNOI_REGION of the previous edge.
	        edge.copy(polygon['edges'][prev]);
	        // Calculate the center of the circle relative the starting point of the previous edge
	        var point2 = T_VECTORS.pop().copy(circlePos).sub(points[prev]);
	        region = vornoiRegion(edge, point2);
	        if (region === RIGHT_VORNOI_REGION) {
	          // It's in the region we want.  Check if the circle intersects the point.
	          var dist = point.len();
	          if (dist > radius) {
	            // No intersection
	            T_VECTORS.push(circlePos);
	            T_VECTORS.push(edge);
	            T_VECTORS.push(point);
	            T_VECTORS.push(point2);
	            return false;
	          } else if (response) {
	            // It intersects, calculate the overlap.
	            response['bInA'] = false;
	            overlapN = point.normalize();
	            overlap = radius - dist;
	          }
	        }
	        T_VECTORS.push(point2);
	        // If it's the right region:
	      } else if (region === RIGHT_VORNOI_REGION) {
	        // We need to make sure we're in the left region on the next edge
	        edge.copy(polygon['edges'][next]);
	        // Calculate the center of the circle relative to the starting point of the next edge.
	        point.copy(circlePos).sub(points[next]);
	        region = vornoiRegion(edge, point);
	        if (region === LEFT_VORNOI_REGION) {
	          // It's in the region we want.  Check if the circle intersects the point.
	          var dist = point.len();
	          if (dist > radius) {
	            // No intersection
	            T_VECTORS.push(circlePos);
	            T_VECTORS.push(edge);
	            T_VECTORS.push(point);
	            return false;
	          } else if (response) {
	            // It intersects, calculate the overlap.
	            response['bInA'] = false;
	            overlapN = point.normalize();
	            overlap = radius - dist;
	          }
	        }
	        // Otherwise, it's the middle region:
	      } else {
	        // Need to check if the circle is intersecting the edge,
	        // Change the edge into its "edge normal".
	        var normal = edge.perp().normalize();
	        // Find the perpendicular distance between the center of the 
	        // circle and the edge.
	        var dist = point.dot(normal);
	        var distAbs = Math.abs(dist);
	        // If the circle is on the outside of the edge, there is no intersection.
	        if (dist > 0 && distAbs > radius) {
	          // No intersection
	          T_VECTORS.push(circlePos);
	          T_VECTORS.push(normal);
	          T_VECTORS.push(point);
	          return false;
	        } else if (response) {
	          // It intersects, calculate the overlap.
	          overlapN = normal;
	          overlap = radius - dist;
	          // If the center of the circle is on the outside of the edge, or part of the
	          // circle is on the outside, the circle is not fully inside the polygon.
	          if (dist >= 0 || overlap < 2 * radius) {
	            response['bInA'] = false;
	          }
	        }
	      }

	      // If this is the smallest overlap we've seen, keep it. 
	      // (overlapN may be null if the circle was in the wrong Vornoi region).
	      if (overlapN && response && Math.abs(overlap) < Math.abs(response['overlap'])) {
	        response['overlap'] = overlap;
	        response['overlapN'].copy(overlapN);
	      }
	    }

	    // Calculate the final overlap vector - based on the smallest overlap.
	    if (response) {
	      response['a'] = polygon;
	      response['b'] = circle;
	      response['overlapV'].copy(response['overlapN']).scale(response['overlap']);
	    }
	    T_VECTORS.push(circlePos);
	    T_VECTORS.push(edge);
	    T_VECTORS.push(point);
	    return true;
	  }
	  SAT['testPolygonCircle'] = testPolygonCircle;

	  // Check if a circle and a polygon collide.
	  //
	  // **NOTE:** This is slightly less efficient than polygonCircle as it just
	  // runs polygonCircle and reverses everything at the end.
	  /**
	   * @param {Circle} circle The circle.
	   * @param {Polygon} polygon The polygon.
	   * @param {Response=} response Response object (optional) that will be populated if
	   *   they interset.
	   * @return {boolean} true if they intersect, false if they don't.
	   */
	  function testCirclePolygon(circle, polygon, response) {
	    // Test the polygon against the circle.
	    var result = testPolygonCircle(polygon, circle, response);
	    if (result && response) {
	      // Swap A and B in the response.
	      var a = response['a'];
	      var aInB = response['aInB'];
	      response['overlapN'].reverse();
	      response['overlapV'].reverse();
	      response['a'] = response['b'];
	      response['b'] = a;
	      response['aInB'] = response['bInA'];
	      response['bInA'] = aInB;
	    }
	    return result;
	  }
	  SAT['testCirclePolygon'] = testCirclePolygon;

	  // Checks whether polygons collide.
	  /**
	   * @param {Polygon} a The first polygon.
	   * @param {Polygon} b The second polygon.
	   * @param {Response=} response Response object (optional) that will be populated if
	   *   they interset.
	   * @return {boolean} true if they intersect, false if they don't.
	   */
	  function testPolygonPolygon(a, b, response) {
	    var aPoints = a['calcPoints'];
	    var aLen = aPoints.length;
	    var bPoints = b['calcPoints'];
	    var bLen = bPoints.length;
	    // If any of the edge normals of A is a separating axis, no intersection.
	    for (var i = 0; i < aLen; i++) {
	      if (isSeparatingAxis(a['pos'], b['pos'], aPoints, bPoints, a['normals'][i], response)) {
	        return false;
	      }
	    }
	    // If any of the edge normals of B is a separating axis, no intersection.
	    for (var i = 0; i < bLen; i++) {
	      if (isSeparatingAxis(a['pos'], b['pos'], aPoints, bPoints, b['normals'][i], response)) {
	        return false;
	      }
	    }
	    // Since none of the edge normals of A or B are a separating axis, there is an intersection
	    // and we've already calculated the smallest overlap (in isSeparatingAxis).  Calculate the
	    // final overlap vector.
	    if (response) {
	      response['a'] = a;
	      response['b'] = b;
	      response['overlapV'].copy(response['overlapN']).scale(response['overlap']);
	    }
	    return true;
	  }
	  SAT['testPolygonPolygon'] = testPolygonPolygon;

	  return SAT;
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

/***/ },
/* 77 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	*
	* simple-quadtree is a minimal quadtree implementation that supports simple put, get,
	* remove and clear operations on objects having a x, y position and w, h dimension.
	*
	* Copyright (c) 2013 Antti Saarinen <antti.p.saarinen@gmail.com>
	* https://github.com/asaarinen/qtree
	*
	*/
	function QuadTree(x, y, w, h, options) {

	    if (typeof x != 'number' || isNaN(x)) x = 0;
	    if (typeof y != 'number' || isNaN(y)) y = 0;
	    if (typeof w != 'number' || isNaN(w)) w = 10;
	    if (typeof h != 'number' || isNaN(h)) h = 10;

	    var maxc = 25;
	    var leafratio = 0.5;
	    if (options) {
	        if (typeof options.maxchildren == 'number') if (options.maxchildren > 0) maxc = options.maxchildren;
	        if (typeof options.leafratio == 'number') if (options.leafratio >= 0) leafratio = options.leafratio;
	    }

	    // validate an input object
	    function validate(obj) {
	        if (!obj) return false;
	        if (typeof obj.x != 'number' || typeof obj.y != 'number' || typeof obj.w != 'number' || typeof obj.h != 'number') return false;
	        if (isNaN(obj.x) || isNaN(obj.y) || isNaN(obj.w) || isNaN(obj.h)) return false;
	        if (obj.w < 0 || obj.h < 0) return false;
	        return true;
	    }

	    // test for deep equality for x,y,w,h
	    function isequal(o1, o2) {
	        if (o1.x == o2.x && o1.y == o2.y && o1.w == o2.w && o1.h == o2.h) return true;
	        return false;
	    }

	    // create a new quadtree node
	    function createnode(x, y, w, h) {
	        return {
	            x: x,
	            y: y,
	            w: w,
	            h: h,
	            c: [],
	            l: [],
	            n: []
	        };
	    }

	    // root node used by this quadtree
	    var root = createnode(x, y, w, h);

	    // calculate distance between two points
	    function distance(x1, y1, x2, y2) {
	        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	    }

	    // calculate distance between a point and a line (segment)
	    function distancePL(x, y, x1, y1, dx1, dy1, len1) {
	        if (!len1) // in case length is not provided, assume a line 
	            len1 = -1;

	        // x = x1 + s * dx1 + t * dy1
	        // y = y1 + s * dy1 - t * dx1
	        // x * dy1 - y * dx1 = x1 * dy1 - y1 * dx1 + 
	        //                     t * ( dy1 * dy1 + dx1 * dx1 )
	        var t = dx1 * dx1 + dy1 * dy1;
	        if (t == 0) return null;else {
	            t = (x * dy1 - y * dx1 - x1 * dy1 + y1 * dx1) / t;
	            if (Math.abs(dx1) > Math.abs(dy1)) var s = (x - x1 - t * dy1) / dx1;else var s = (y - y1 + t * dx1) / dy1;
	            if (s >= 0 && s <= len1 || len1 < 0) return {
	                s: s,
	                t: t,
	                x: x1 + s * dx1,
	                y: y1 + s * dy1,
	                dist: Math.abs(t)
	            };else if (s < 0) {
	                var dist = distance(x, y, x1, y1);
	                return {
	                    s: s,
	                    dist: dist
	                };
	            } else {
	                var dist = distance(x, y, x1 + len1 * dx1, y1 + len1 * dy1);
	                return {
	                    s: s,
	                    dist: dist
	                };
	            }
	        }
	    }

	    // does a line and a rectangle overlap ?
	    function overlap_line(o1, o2, buf) {
	        if (!o1 || !o2) return true;
	        var dist = distancePL(o2.x + 0.5 * o2.w, o2.y + 0.5 * o2.h, o1.x, o1.y, o1.dx, o1.dy, o1.dist);
	        if (dist) {
	            dist.dist -= buf;
	            if (dist.dist < 0) return true;
	            if (dist.dist * dist.dist <= o2.w * o2.w + o2.h * o2.h) return true;
	        }
	        return false;
	    }

	    // do two rectangles overlap ?
	    function overlap_rect(o1, o2, buf) {
	        if (!o1 || !o2) return true;
	        if (o1.x + o1.w < o2.x - buf || o1.y + o1.h < o2.y - buf || o1.x - buf > o2.x + o2.w || o1.y - buf > o2.y + o2.h) return false;
	        return true;
	    }

	    function isleaf(node, obj) {

	        var leaf = false;
	        if (obj.w * obj.h > node.w * node.h * leafratio) leaf = true;

	        if (obj.x < node.x || obj.y < node.y || obj.x + obj.w > node.x + node.w || obj.y + obj.h > node.y + node.h) leaf = true;

	        var childnode = null;
	        for (var ni = 0; ni < node.n.length; ni++) {
	            if (overlap_rect(obj, node.n[ni], 0)) {
	                if (childnode) {
	                    // multiple hits
	                    leaf = true;
	                    break;
	                } else childnode = node.n[ni];
	            }
	        }return { leaf: leaf,
	            childnode: childnode };
	    }

	    // put an object to one of the child nodes of this node
	    function put_to_nodes(node, obj) {
	        var leaf = isleaf(node, obj);
	        if (leaf.leaf) node.l.push(obj);else if (leaf.childnode) _put(leaf.childnode, obj);else return;
	    }

	    function update_coords(obj, updatedcoords) {
	        obj.x = typeof updatedcoords.x == 'number' ? updatedcoords.x : obj.x;
	        obj.y = typeof updatedcoords.y == 'number' ? updatedcoords.y : obj.y;
	        obj.w = typeof updatedcoords.w == 'number' ? updatedcoords.w : obj.w;
	        obj.h = typeof updatedcoords.h == 'number' ? updatedcoords.h : obj.h;
	    }

	    function _update(node, obj, attr, updatedcoords) {
	        if ((typeof attr === 'undefined' ? 'undefined' : _typeof(attr)) == 'object' && typeof updatedcoords == 'undefined') {
	            updatedcoords = attr;
	            attr = false;
	        }

	        if (!validate(obj) || typeof updatedcoords == 'undefined') return false;

	        if (!attr) attr = false;else if (typeof attr != 'string') attr = 'id';

	        var count = 0;
	        for (var ci = 0; ci < node.c.length; ci++) {
	            if (attr && node.c[ci][attr] == obj[attr] || !attr && isequal(node.c[ci], obj)) {

	                // found the object to be updated
	                var orig = node.c[ci];
	                update_coords(orig, updatedcoords);

	                if (orig.x > node.x + node.w || orig.y > node.y + node.h || orig.x + orig.w < node.x || orig.y + orig.h < node.y) {

	                    // this object needs to be removed and added
	                    node.c.splice(ci, 1);
	                    _put(root, orig);
	                } // updated object is still inside same node

	                return true;
	            }
	        }for (var ci = 0; ci < node.l.length; ci++) {
	            if (attr && node.l[ci][attr] == obj[attr] || !attr && isequal(node.l[ci], obj)) {

	                var orig = node.l[ci];
	                update_coords(orig, updatedcoords);

	                // found the object to be updated
	                if (orig.x > node.x + node.w || orig.y > node.y + node.h || orig.x + orig.w < node.x || orig.y + orig.h < node.y) {

	                    // this object needs to be removed and added 
	                    node.l.splice(ci, 1);
	                    _put(root, orig);
	                } // updated object is still inside same node

	                return true;
	            }
	        }var leaf = isleaf(node, obj);
	        if (!leaf.leaf && leaf.childnode) if (_update(leaf.childnode, obj, attr)) return true;
	        return false;
	    }

	    // remove an object from this node
	    function _remove(node, obj, attr) {
	        if (!validate(obj)) return 0;

	        if (!attr) attr = false;else if (typeof attr != 'string') attr = 'id';

	        var count = 0;
	        for (var ci = 0; ci < node.c.length; ci++) {
	            if (attr && node.c[ci][attr] == obj[attr] || !attr && isequal(node.c[ci], obj)) {
	                count++;
	                node.c.splice(ci, 1);
	                ci--;
	            }
	        }for (var ci = 0; ci < node.l.length; ci++) {
	            if (attr && node.l[ci][attr] == obj[attr] || !attr && isequal(node.l[ci], obj)) {
	                count++;
	                node.l.splice(ci, 1);
	                ci--;
	            }
	        }var leaf = isleaf(node, obj);
	        if (!leaf.leaf && leaf.childnode) return count + _remove(leaf.childnode, obj, attr);
	        return count;
	    }

	    // put an object to this node
	    function _put(node, obj) {

	        if (!validate(obj)) return;

	        if (node.n.length == 0) {
	            node.c.push(obj);

	            // subdivide
	            if (node.c.length > maxc) {
	                var w2 = node.w / 2;
	                var h2 = node.h / 2;
	                node.n.push(createnode(node.x, node.y, w2, h2), createnode(node.x + w2, node.y, w2, h2), createnode(node.x, node.y + h2, w2, h2), createnode(node.x + w2, node.y + h2, w2, h2));
	                for (var ci = 0; ci < node.c.length; ci++) {
	                    put_to_nodes(node, node.c[ci]);
	                }node.c = [];
	            }
	        } else put_to_nodes(node, obj);
	    }

	    // iterate through all objects in this node matching given overlap
	    // function
	    function getter(overlapfun, node, obj, buf, strict, callbackOrArray) {
	        for (var li = 0; li < node.l.length; li++) {
	            if (!strict || overlapfun(obj, node.l[li], buf)) if ((typeof callbackOrArray === 'undefined' ? 'undefined' : _typeof(callbackOrArray)) == 'object') callbackOrArray.push(node.l[li]);else if (!callbackOrArray(node.l[li])) return false;
	        }for (var li = 0; li < node.c.length; li++) {
	            if (!strict || overlapfun(obj, node.c[li], buf)) if ((typeof callbackOrArray === 'undefined' ? 'undefined' : _typeof(callbackOrArray)) == 'object') callbackOrArray.push(node.c[li]);else if (!callbackOrArray(node.c[li])) return false;
	        }for (var ni = 0; ni < node.n.length; ni++) {
	            if (overlapfun(obj, node.n[ni], buf)) {
	                if ((typeof callbackOrArray === 'undefined' ? 'undefined' : _typeof(callbackOrArray)) == 'object') callbackOrArray.concat(getter(overlapfun, node.n[ni], obj, buf, strict, callbackOrArray));else if (!getter(overlapfun, node.n[ni], obj, buf, strict, callbackOrArray)) return false;
	            }
	        }
	        return true;
	    }

	    // iterate through all objects in this node matching the given rectangle
	    function get_rect(node, obj, buf, callbackOrArray) {
	        return getter(overlap_rect, node, obj, buf, true, callbackOrArray);
	    }

	    // iterate through all objects in this node matching the given
	    // line (segment)
	    function get_line(node, obj, buf, callbackOrArray) {
	        return getter(overlap_line, node, obj, buf, false, callbackOrArray);
	    }

	    // iterate through all objects in this node matching given
	    // geometry, either a rectangle or a line segment
	    function _get(node, obj, buf, callbackOrArray) {

	        if ((typeof buf == 'function' || (typeof buf === 'undefined' ? 'undefined' : _typeof(buf)) == 'object') && typeof callbackOrArray == 'undefined') {
	            callbackOrArray = buf;
	            buf = 0;
	        }
	        if (typeof callbackOrArray == 'undefined') {
	            callbackOrArray = [];
	            buf = 0;
	        }
	        if (obj == null) get_rect(node, obj, buf, callbackOrArray);else if (typeof obj.x == 'number' && typeof obj.y == 'number' && !isNaN(obj.x) && !isNaN(obj.y)) {
	            if (typeof obj.dx == 'number' && typeof obj.dy == 'number' && !isNaN(obj.dx) && !isNaN(obj.dy)) get_line(node, obj, buf, callbackOrArray);else if (typeof obj.w == 'number' && typeof obj.h == 'number' && !isNaN(obj.w) && !isNaN(obj.h)) get_rect(node, obj, buf, callbackOrArray);
	        }
	        if ((typeof callbackOrArray === 'undefined' ? 'undefined' : _typeof(callbackOrArray)) == 'object') return callbackOrArray;
	    }

	    // return the object interface
	    return {
	        get: function get(obj, buf, callbackOrArray) {
	            return _get(root, obj, buf, callbackOrArray);
	        },
	        put: function put(obj) {
	            _put(root, obj);
	        },
	        update: function update(obj, attr, updatedcoords) {
	            return _update(root, obj, attr, updatedcoords);
	        },
	        remove: function remove(obj, attr) {
	            return _remove(root, obj, attr);
	        },
	        clear: function clear() {
	            root = createnode(x, y, w, h);
	        },
	        stringify: function stringify() {
	            var strobj = {
	                x: x, y: y, w: w, h: h,
	                maxc: maxc,
	                leafratio: leafratio,
	                root: root
	            };
	            try {
	                return JSON.stringify(strobj);
	            } catch (err) {
	                // could not stringify
	                // probably due to objects included in qtree being non-stringifiable
	                return null;
	            }
	        },
	        parse: function parse(str) {
	            if (typeof str == 'string') str = JSON.parse(str);

	            x = str.x;
	            y = str.y;
	            w = str.w;
	            h = str.h;
	            maxc = str.maxc;
	            leafratio = str.leafratio;
	            root = str.root;
	        }
	    };
	}

	// for use within node.js
	if (true) module.exports = QuadTree;

/***/ },
/* 79 */
/***/ function(module, exports) {

	module.exports = {
		"port": 3000,
		"xnumVal": 1,
		"defaultXnumRadius": 0.3,
		"xnumSides": 6,
		"fireFood": 20,
		"limitSplit": 16,
		"defaultPlayerRadius": 0.4,
		"adminPass": "DEFAULT",
		"slowBase": 4.5,
		"logChat": 0,
		"networkUpdateFactor": 40,
		"maxHeartbeatInterval": 5000,
		"xnumUniformDisposition": true,
		"virusUniformDisposition": false,
		"newPlayerInitialPosition": "farthest",
		"mergeTimer": 15
	};

/***/ },
/* 80 */
/***/ function(module, exports) {

	'use strict';

	module.exports.method = function () {

	  console.log('TEST method Extraction');
	};

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	   'use strict';

	   angular.module('Controllers').controller('LoginController', ['$window', '$state', 'Global', 'User', function ($window, $state, Global, User) {
	      //console.log("LoginController");
	      //console.log(Global);
	      //console.log(User);
	      var self = this;

	      self.loginError = '';

	      self.initScreen = function () {};

	      self.loader = false;

	      var username_or_email = $('#username_or_email');
	      var userPassword = $('#password');

	      var loginBtn = $('#loginButton');

	      self.login = function () {
	         self.loader = true;
	         var u_o_e = username_or_email.val();
	         var p = userPassword.val();

	         User.login(u_o_e, p).then(function (resp) {
	            //console.log('Login Resp');
	            //console.log(resp);
	            self.loader = false;
	            $state.go('play');
	            self.loginError = '';
	         }, function (err) {
	            console.log("Login ERR");
	            console.log(err);
	            self.loginError = "An Error Occured While Trying to Login";

	            self.loader = false;
	         });
	      };

	      loginBtn.click(function () {

	         self.login();
	      });

	      //var settingsMenu = document.getElementById('settingsButton');

	      var instructions = document.getElementById('instructions');

	      // settingsMenu.onclick = function () {
	      //   if (settings.style.maxHeight == '300px') {
	      //     settings.style.maxHeight = '0px';
	      // } else {
	      //     settings.style.maxHeight = '300px';
	      // }
	      //};

	      username_or_email.on('keypress', function (e) {
	         var key = e.which || e.keyCode;
	         // //console.log(key);
	         if (key === Global.KEY_ENTER) {
	            self.login();
	         }
	      });
	      userPassword.on('keypress', function (e) {
	         var key = e.which || e.keyCode;
	         // //console.log(key);
	         if (key === Global.KEY_ENTER) {
	            self.login();
	         }
	      });

	      angular.element($window).bind('resize', function () {
	         //Any time you attach event to $window with angular it becomes application wide Thus.. if state..
	         if ($state.is('login')) {
	            Global.updateScreenDims();
	            self.initScreen();
	         }
	      });

	      self.initScreen();
	   }]);
	};

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	   'use strict';

	   angular.module('Controllers').controller('SignupController', ['$window', '$state', 'Global', 'User', function ($window, $state, Global, User) {
	      //console.log("SignupController");
	      //console.log(Global);
	      //console.log(User);
	      var self = this;

	      self.initScreen = function () {};

	      var username = $('#username');
	      var email = $('#email');
	      var userPassword = $('#password');

	      var signupBtn = $('#signupButton');

	      self.signup = function () {

	         var u = username.val();
	         var e = email.val();
	         var p = userPassword.val();

	         User.signup(u, e, p).then(function (resp) {
	            //console.log('Signup Resp');
	            //console.log(resp);
	            //console.log(u, p);

	            User.login(e, p).then(function (resp) {
	               //console.log('Login Resp');
	               //console.log(resp);

	               $state.go('play');
	            }, function (err) {
	               //console.log("Login ERR");
	               //console.log(err);
	            });
	         }, function (err) {
	            //console.log("Signup ERR");
	            //console.log(err);
	         });
	      };

	      // btnS = document.getElementById('spectateButton'),
	      // nickErrorText = document.querySelector('#startMenu .input-error');

	      //btnS.onclick = function () {
	      //    startGame('spectate');
	      // };

	      signupBtn.click(function () {
	         self.signup();
	      });

	      //var settingsMenu = document.getElementById('settingsButton');

	      var instructions = document.getElementById('instructions');

	      // settingsMenu.onclick = function () {
	      //   if (settings.style.maxHeight == '300px') {
	      //     settings.style.maxHeight = '0px';
	      // } else {
	      //     settings.style.maxHeight = '300px';
	      // }
	      //};

	      username.on('keypress', function (e) {
	         var key = e.which || e.keyCode;
	         // //console.log(key);
	         if (key === Global.KEY_ENTER) {
	            self.signup();
	         }
	      });
	      email.on('keypress', function (e) {
	         var key = e.which || e.keyCode;
	         // //console.log(key);
	         if (key === Global.KEY_ENTER) {
	            self.signup();
	         }
	      });
	      userPassword.on('keypress', function (e) {
	         var key = e.which || e.keyCode;
	         // //console.log(key);
	         if (key === Global.KEY_ENTER) {
	            self.signup();
	         }
	      });

	      angular.element($window).bind('resize', function () {
	         //Any time you attach event to $window with angular it becomes application wide Thus.. if state..
	         if ($state.is('signup')) {
	            Global.updateScreenDims();
	            self.initScreen();
	         }
	      });

	      self.initScreen();
	   }]);
	};

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	//var io = require('socket.io-client');


	__webpack_require__(84);

	//import 'bootstrap/dist/js/bootstrap';


	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('BuilderController', ['$window', '$http', '$q', '$state', 'Global', 'User', '$rootScope', '$timeout', 'Matrix', 'Levels', 'Draw', 'Auth', function ($window, $http, $q, $state, Global, User, $rootScope, $timeout, Matrix, Levels, Draw, Auth) {
	    //console.log("XonumiaController");
	    var self = this;

	    console.log("BODY OF BUILDER CONTROLLER CALLED");

	    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams, options) {
	      //console.log('StateChangeStart');
	      //console.log(event);
	      //console.log(toState);
	      //console.log(toParams);
	      //console.log(fromState);
	      //console.log(fromParams);
	      //console.log(options);

	    });

	    //Matrix.scale(2.0);


	    var zoom = 100;
	    var cellCountInView = 20;

	    var viewOffsetX = 0;
	    var viewOffsetY = 0;

	    var centerX = 0;
	    var centerY = 0;

	    var viewBoundBufferThreashold = [];

	    var selectCells = [];

	    var hoverCell = [];
	    var map = {};

	    var cvstemp;
	    var tempCtx;

	    map.tiles = [];
	    map.start = [];
	    map.finish = [];

	    var mapBuilds = [];
	    self.levels = [];

	    self.levelSelect = '1';

	    var levelName = document.getElementById('addLevel');
	    self.levelSelectName = '';

	    self.thereIsAModalOpen = false;

	    self.isCrowdSourced = false;
	    self.crowdSourceAble = function () {

	      if (parseInt(self.levelSelect) < 30) {
	        return false;
	      }

	      var levelArryLen = self.levels.length;

	      for (var i = 0; i < levelArryLen; i++) {
	        if (parseInt(self.levelSelect) === self.levels[i].id) {
	          if (self.levels[i].userId === 0) {
	            return false;
	          }
	          if (self.levels[i].userId === User.id) {
	            return true;
	          }
	        }
	      }

	      return false;
	    };

	    self.isAdmin = false;
	    Auth.adminAuthenticate().then(function (resp) {
	      self.isAdmin = true;
	    });

	    var advs = [];

	    var loadingGif = $('#loading');

	    function drawWorld() {
	      self.initScreen();

	      var ctx = c.getContext("2d");
	      //   ctx.fillStyle = "#222";
	      // ctx.fillRect(0, 0,  c.width,  c.height);
	      ctx.clearRect(0, 0, c.width, c.height);

	      if (zoom > 180) {
	        Draw.drawGrid(ctx, zoom);
	      }
	      Draw.drawWorldCoordinateSystem(ctx, zoom);

	      Draw.drawMap(ctx, map);

	      Draw.drawAdvs(ctx, advs, zoom, tempCtx);

	      if (!!map.start[0] && !!map.start[1]) {
	        Draw.drawStartCell(ctx, map.start);
	      }

	      if (!!map.finish[0] && !!map.finish[1]) {
	        Draw.drawFinishCell(ctx, map.finish);
	      }

	      Draw.drawSelectedCells(ctx, selectCells);

	      Draw.drawHoverCell(ctx, hoverCell);
	    }

	    function addToSelectCellList(obj) {

	      var isin = false;

	      var numinSelectCells = selectCells.length;

	      for (var i = 0; i < numinSelectCells; i++) {
	        if (obj.locX === selectCells[i].locX && obj.locY === selectCells[i].locY) {
	          isin = true;
	          break;
	        }
	      }

	      if (!isin) {
	        selectCells.push(obj);
	      }
	    }

	    self.setTilesAsAdvTiles = function (locX, locY, width, height) {

	      for (var i = 0; i < width; i++) {

	        for (var j = 0; j < height; j++) {
	          var tileObj = { locX: locX + i, locY: locY - j, isAdv: true, color_r: 255, color_g: 255, color_b: 255, color_a: 0, mapId: parseInt(self.levelSelect) };

	          var tileXhrCallConfig = {
	            method: 'POST',
	            url: 'api/v1/tile',
	            data: tileObj,
	            headers: { auth: User.token },
	            responseType: "json"
	          };

	          setTilesHTTPcall(tileXhrCallConfig);

	          addAdvToMap(tileObj);
	        }
	      }
	      loadingGif.hide();

	      advs.push({ locX: locX, locY: locY, width: width, height: height, img: 'sponsorshipavailable.png', available: true });
	      drawWorld();
	    };

	    function setTilesHTTPcall(tileXhrCallConfig) {
	      $http(tileXhrCallConfig).then(function (resp) {

	        loadingGif.hide();
	      }, function (err) {
	        console.log('SAVING ERR');
	        console.log(err);
	        loadingGif.hide();
	      });
	    }

	    self.removeAdvFromTiles = function (locX, locY, width, height) {

	      for (var i = 0; i < width; i++) {

	        for (var j = 0; j < height; j++) {
	          var tileObj = { locX: locX + i, locY: locY - j, isAdv: false, color_r: 0, color_g: 0, color_b: 0, color_a: 0, mapId: parseInt(self.levelSelect) };

	          var tileXhrCallConfig = {
	            method: 'POST',
	            url: 'api/v1/tile',
	            data: tileObj,
	            headers: { auth: User.token },
	            responseType: "json"
	          };

	          removeAdvFromTilesXhr(tileXhrCallConfig);

	          removeAdvFromMap(tileObj);
	        }
	      }
	      loadingGif.hide();
	      console.log('ADV before filter');
	      console.log(advs);

	      advs = advs.filter(function (a) {
	        if (a.locX === locX && a.locY === locY) {
	          return false;
	        }
	        return true;
	      });

	      console.log(advs);

	      drawWorld();
	    };

	    function removeAdvFromTilesXhr(tileXhrCallConfig) {
	      $http(tileXhrCallConfig).then(function (resp) {

	        loadingGif.hide();
	      }, function (err) {
	        console.log('SAVING ERR');
	        console.log(err);
	        loadingGif.hide();
	      });
	    }

	    function removeAdvFromMap(obj) {
	      var isin = false;

	      var numinArr = map.tiles.length;
	      for (var i = 0; i < numinArr; i++) {
	        if (obj.locX === map.tiles[i].locX && obj.locY === map.tiles[i].locY) {

	          map.tiles[i].color_a = 0.0;

	          break;
	        }
	      }
	    }
	    self.deleteAdvInstance = function () {

	      var deleteAdvXhrCallConfig = {
	        method: 'DELETE',
	        url: 'api/v1/adv/?locX=' + self.removeAdvIs.locX + '&locY=' + self.removeAdvIs.locY,
	        headers: { auth: User.token },
	        responseType: "json"
	      };

	      $http(deleteAdvXhrCallConfig).then(function (resp) {

	        console.log('DELETE ADv ', resp);
	        loadingGif.hide();
	      }, function (err) {

	        console.log('SAVING ERR');
	        console.log(err);
	        loadingGif.hide();
	      });
	    };

	    self.deleteAdvForSure = function () {
	      self.deleteAdvInstance();
	      $('#deleteAdvWarningModal').modal('hide');
	      self.removeAdvFromTiles(self.removeAdvIs.locX, self.removeAdvIs.locY, self.removeAdvIs.width, self.removeAdvIs.height);
	      loadingGif.hide();
	      self.thereIsAModalOpen = false;
	    };

	    function addAdvToMap(obj) {
	      var isin = false;

	      var numinArr = map.tiles.length;
	      for (var i = 0; i < numinArr; i++) {
	        if (obj.locX === map.tiles[i].locX && obj.locY === map.tiles[i].locY) {

	          map.tiles[i].color_r = obj.color_r;
	          map.tiles[i].color_g = obj.color_g;
	          map.tiles[i].color_b = obj.color_b;
	          map.tiles[i].color_a = obj.color_a;

	          isin = true;
	          break;
	        }
	      }

	      if (!isin) {

	        map.tiles.push(obj);
	      }
	    }

	    function addToMap(obj) {
	      var isin = false;
	      var isinBuilds = false;
	      var numinArr = map.tiles.length;
	      var numinBArr = mapBuilds.length;
	      var k = 0;
	      for (var i = 0; i < numinArr; i++) {
	        if (obj.locX === map.tiles[i].locX && obj.locY === map.tiles[i].locY) {

	          if (obj.upclick === 1) {
	            map.tiles[i].gu = !map.tiles[i].gu;
	          }
	          if (obj.rightclick === 1) {
	            map.tiles[i].gr = !map.tiles[i].gr;
	          }
	          if (obj.downclick === 1) {
	            map.tiles[i].gd = !map.tiles[i].gd;
	          }
	          if (obj.leftclick === 1) {
	            map.tiles[i].gl = !map.tiles[i].gl;
	          }

	          map.tiles[i].color_r = self.color_r_selected;
	          map.tiles[i].color_g = self.color_g_selected;
	          map.tiles[i].color_b = self.color_b_selected;
	          map.tiles[i].color_a = self.color_a_selected;

	          isinBuilds = false;
	          numinBArr = mapBuilds.length;
	          for (k = 0; k < numinBArr; k++) {
	            if (mapBuilds[k] === i) {
	              isinBuilds = true;
	            }
	          }
	          if (!isinBuilds) {
	            mapBuilds.push(i);
	          }

	          isin = true;
	          break;
	        }
	      }

	      if (!isin) {
	        if (obj.upclick === 1) {
	          obj.gu = true;
	        } else {
	          obj.gu = false;
	        }

	        if (obj.rightclick === 1) {
	          obj.gr = true;
	        } else {
	          obj.gr = false;
	        }

	        if (obj.downclick === 1) {
	          obj.gd = true;
	        } else {
	          obj.gd = false;
	        }

	        if (obj.leftclick === 1) {
	          obj.gl = true;
	        } else {
	          obj.gl = false;
	        }
	        obj.color_r = self.color_r_selected;
	        obj.color_g = self.color_g_selected;
	        obj.color_b = self.color_b_selected;
	        obj.color_a = self.color_a_selected;

	        isinBuilds = false;
	        numinBArr = mapBuilds.length;
	        for (k = 0; k < numinBArr; k++) {
	          if (mapBuilds[k] === map.tiles.length) {
	            isinBuilds = true;
	          }
	        }
	        if (!isinBuilds) {
	          mapBuilds.push(i);
	        }

	        map.tiles.push(obj);
	      }

	      obj.upclick = 0;
	      obj.rightclick = 0;
	      obj.downclick = 0;
	      obj.leftclick = 0;
	    }

	    function syncSuroundingCell(obj, type, mapID) {

	      var isin = false;

	      var numinArr = map.tiles.length;
	      for (var i = 0; i < numinArr; i++) {
	        if (obj.locX === map.tiles[i].locX && obj.locY === map.tiles[i].locY) {

	          switch (type) {
	            case "upper":
	              map.tiles[i].gd = map.tiles[mapID].gu;
	              break;
	            case "right":

	              map.tiles[i].gl = map.tiles[mapID].gr;
	              break;
	            case "lower":
	              map.tiles[i].gu = map.tiles[mapID].gd;
	              break;
	            case "left":
	              map.tiles[i].gr = map.tiles[mapID].gl;
	              break;
	          }

	          mapBuilds.push(i);

	          isin = true;
	          break;
	        }
	      }

	      if (!isin) {

	        switch (type) {
	          case "upper":
	            obj.gd = map.tiles[mapID].gu;
	            break;
	          case "right":

	            obj.gl = map.tiles[mapID].gr;
	            break;
	          case "lower":
	            obj.gu = map.tiles[mapID].gd;
	            break;
	          case "left":
	            obj.gr = map.tiles[mapID].gl;
	            break;

	        }

	        obj.color_r = 0;
	        obj.color_g = 0;
	        obj.color_b = 0;
	        obj.color_a = 0;

	        mapBuilds.push(map.tiles.length);
	        map.tiles.push(obj);
	      }
	    }

	    function setMatrix() {
	      Matrix.reset();
	      if (Global.screenWidth > Global.screenHeight) {

	        Matrix.scale([1 / cellCountInView * (zoom / 100) * Global.screenHeight, -1 / cellCountInView * (zoom / 100) * Global.screenHeight, 1]); //Flips device coords to logical coors Y UP
	        Matrix.translate([0, Global.screenHeight, 0]); // Moves Draw COORDS down to bottom left of device

	        Global.screenCellsWidth = Global.screenWidth / Global.screenHeight * cellCountInView * (100 / 80);
	        Global.screenCellsHeight = cellCountInView * (100 / 80);
	      } else {

	        Matrix.scale([1 / cellCountInView * (zoom / 100) * Global.screenWidth, -1 / cellCountInView * (zoom / 100) * Global.screenWidth, 1]); //Flips device coords to logical coors Y UP
	        Matrix.translate([0, Global.screenWidth * (Global.screenHeight / Global.screenWidth), 0]); // Moves Draw COORDS down to bottom left of device

	        Global.screenCellsWidth = cellCountInView * (100 / 80);
	        Global.screenCellsHeight = Global.screenWidth / Global.screenHeight * cellCountInView * (100 / 80);
	      }

	      Matrix.translate([Global.screenWidth / 2, -Global.screenHeight / 2, 0]); //// Makes View Local Coordinates Center Screen
	      Matrix.translate([viewOffsetX * (zoom / 100), viewOffsetY * (zoom / 100), 0]); //Moves Screen to Offset Position

	      getCenter();
	      checkMapBuffer();
	    }

	    angular.element($window).bind('resize', function () {
	      //Any time you attach event to $window with angular it becomes application wide Thus.. if state..
	      if ($state.is('build')) {
	        Global.updateScreenDims();

	        setMatrix();
	        drawWorld();
	      }
	    });

	    function getCenter() {
	      var c = Matrix.inverseMap([viewOffsetX, viewOffsetY, 0]);

	      centerX = -c[0];
	      centerY = -c[1];
	    }

	    function viewBoundBufferThreasholdReset() {
	      viewBoundBufferThreashold = [centerY + Global.screenCellsHeight, centerX + Global.screenCellsWidth, centerY - Global.screenCellsHeight, centerX - Global.screenCellsWidth];
	    }

	    function checkMapBuffer() {
	      if (viewBoundBufferThreashold[0] === undefined) {
	        viewBoundBufferThreasholdReset();
	      }

	      if (viewBoundBufferThreashold[0] < centerY || viewBoundBufferThreashold[1] < centerX || viewBoundBufferThreashold[2] > centerY || viewBoundBufferThreashold[3] > centerX) {

	        viewBoundBufferThreasholdReset();
	        getMapTiles();
	      }
	    }

	    var shiftKEY = false;
	    var mouseDownForMove = false;
	    var mouseDownForSELECT = false;
	    var controllKEY = false;

	    var moveStartX = 0;
	    var moveStartY = 0;

	    var moveEndX = 0;
	    var moveEndY = 0;

	    var startPinch = 0;
	    var movePinch = 0;

	    var mousewheelevt = /Firefox/i.test(navigator.userAgent) ? "DOMMouseScroll" : "mousewheel"; //FF doesn't recognize mousewheel as of FF3.x


	    function wheelZoom(e) {
	      var evt = window.event || e; //equalize event object
	      var delta = evt.detail ? evt.detail * -120 : evt.wheelDelta; //delta returns +120 when wheel is scrolled up, -120 when scrolled down
	      //console.log("Wheel Zoom");
	      //console.log(zoom);

	      if (typeof delta === 'number') {
	        zoom = zoom + parseInt(delta / 12);
	      }
	      // console.log(zoom);

	      if (zoom < 80) {
	        zoom = 80;
	      }
	      if (zoom > 400) {
	        zoom = 400;
	      }
	      if (evt.preventDefault) {
	        //disable default wheel action of scrolling page
	        evt.preventDefault();
	      } else {
	        return false;
	      }
	      setMatrix();
	      drawWorld();
	    }

	    var throttle = function throttle(func, limit) {
	      var inThrottle, lastFunc, throttleTimer;
	      return function () {
	        var context = this,
	            args = arguments;
	        if (inThrottle) {
	          clearTimeout(lastFunc);
	          return lastFunc = setTimeout(function () {
	            func.apply(context, args);
	            inThrottle = false;
	          }, limit);
	        } else {
	          func.apply(context, args);
	          inThrottle = true;
	          return throttleTimer = setTimeout(function () {
	            return inThrottle = false;
	          }, limit);
	        }
	      };
	    };

	    var c = document.getElementById("buildcvs");

	    self.initScreen = function () {

	      Global.updateScreenDims();

	      c.width = Global.screenWidth;

	      c.height = Global.screenHeight;

	      cvstemp = document.getElementById('cvsBuildTempMemory');
	      cvstemp.width = Global.screenWidth;
	      cvstemp.height = Global.screenHeight;

	      tempCtx = cvstemp.getContext('2d');
	    };

	    if (c.attachEvent) {
	      //if IE (and Opera depending on user setting)

	      c.attachEvent("on" + mousewheelevt, throttle(wheelZoom, 100));
	    } else if (c.addEventListener) {
	      //WC3 browsers

	      c.addEventListener(mousewheelevt, throttle(wheelZoom, 100), false);
	      c.addEventListener("touchstart", handleTouchStart, false);
	      c.addEventListener("touchmove", throttle(handleTouchMove, 100), false);
	    }
	    // c.addEventListener("touchend", handleTouchUp, false);


	    angular.element(window).bind('keydown', xonumiaKeyDown);

	    var wasPinch;
	    function handleTouchStart(e) {
	      var touches = e.changedTouches;

	      if (touches.length === 1) {
	        moveStartX = touches[0].pageX;
	        moveStartY = touches[0].pageY;

	        moveEndX = touches[0].pageX;
	        moveEndY = touches[0].pageY;
	        if (wasPinch) {
	          $timeout(function () {
	            wasPinch = false;
	          }, 300);
	        }
	      }
	      if (touches.length === 2) {
	        startPinch = Math.sqrt(Math.pow(touches[0].pageX - touches[1].pageX, 2) + Math.pow(touches[0].pageY - touches[1].pageY, 2));

	        pinchZoom(e);
	        wasPinch = true;
	      }
	    }

	    function pinchZoom(e) {
	      var touches = e.changedTouches;

	      movePinch = Math.sqrt(Math.pow(touches[0].pageX - touches[1].pageX, 2) + Math.pow(touches[0].pageY - touches[1].pageY, 2));

	      var delta = 2 * (movePinch - startPinch);

	      startPinch = movePinch;

	      if (typeof delta === 'number') {
	        zoom = zoom + parseInt(delta) * 0.5;
	      }
	      // console.log(zoom);

	      if (zoom < 60) {
	        zoom = 60;
	      }
	      if (zoom > 200) {
	        zoom = 200;
	      }

	      setMatrix();
	      drawWorld();
	    }

	    function handleTouchMove(e) {

	      e.preventDefault();

	      var touches = e.changedTouches;
	      //console.log(e.changedTouches);
	      if (touches.length === 1 && !wasPinch) {
	        moveEndX = touches[0].pageX;
	        moveEndY = touches[0].pageY;

	        var deltaX = moveEndX - moveStartX;
	        var deltaY = moveEndY - moveStartY;

	        moveStartX = moveEndX;
	        moveStartY = moveEndY;

	        viewOffsetX = viewOffsetX + parseInt(deltaX);
	        viewOffsetY = viewOffsetY + parseInt(deltaY);
	      }
	      if (touches.length === 2) {
	        pinchZoom(e);
	        wasPinch = true;
	      }
	      // console.log("MOUSE EVENT ");
	      //console.log(e);
	      setMatrix();
	      drawWorld();
	    }

	    // function handleTouchUp(e){
	    // e.preventDefault();
	    //  alert("HELLO TOUCH UP>>> in BUILDR");

	    //   var touches = e.changedTouches;

	    //   if(touches.length === 1){ 

	    //  var mscreen = [touches[0].pageX, touches[0].pageY, 1];
	    //    var scrnMap =  Matrix.inverseMap(mscreen);
	    //    var click = {x: scrnMap[0], y: scrnMap[1]};

	    //    if(self.inAdvClick(click)){
	    //        loadingGif.show();

	    //         $('#deleteAdvWarningModal').modal('show');  
	    //    }
	    //  }

	    //}

	    function xonumiaKeyDown(e) {

	      if (!self.thereIsAModalOpen) {
	        //console.log('ViewoffsetX Y');
	        // console.log(viewOffsetX, viewOffsetY);
	        //  console.log('centerX Y');
	        // console.log(centerX, centerY);
	        var redraw = false;

	        if (e.key === "+" || e.key === "=" || e.keyCode === 187) {
	          //console.log("ZOOM IN");
	          zoom += 10;
	          redraw = true;
	        }

	        if (e.code === "Minus" || e.keyCode === 189) {
	          //console.log("ZOOM OUT");
	          zoom -= 10;
	          redraw = true;
	        }

	        if (zoom < 60) {
	          zoom = 60;
	        }
	        if (zoom > 200) {
	          zoom = 200;
	        }

	        //console.log(e);
	        if (e.key === 'Shift' || e.keyCode === 16) {
	          shiftKEY = true;
	        }

	        if (e.key === 'Control' || e.keyCode === 17) {
	          controllKEY = true;
	        }

	        var saveSelCellsBool = false;

	        if (e.key === 'w' || e.keyCode === 87) {
	          selectCells.forEach(function (c) {
	            c.upclick = 1;
	          });
	          redraw = true;
	          saveSelCellsBool = true;
	        }

	        if (e.key === 'a' || e.keyCode === 65) {
	          selectCells.forEach(function (c) {
	            c.leftclick = 1;
	          });
	          redraw = true;
	          saveSelCellsBool = true;
	        }
	        if (e.key === 's' || e.keyCode === 83) {
	          selectCells.forEach(function (c) {
	            c.downclick = 1;
	          });
	          redraw = true;
	          saveSelCellsBool = true;
	        }

	        if (e.key === 'd' || e.keyCode === 68) {
	          selectCells.forEach(function (c) {
	            c.rightclick = 1;
	          });
	          redraw = true;
	          saveSelCellsBool = true;
	        }

	        if (e.key === 'c' || e.keyCode === 67) {
	          selectCells.forEach(function (c) {
	            c.color_r = self.color_r_selected;
	            c.color_g = self.color_g_selected;
	            c.color_b = self.color_b_selected;
	            c.color_a = self.color_a_selected;
	          });
	          redraw = true;
	          saveSelCellsBool = true;
	        }

	        if ((e.key === 'p' || e.keyCode === 80) && selectCells.length === 1) {
	          self.addAdvModal();
	        }

	        if ((e.key === 'g' || e.keyCode === 71) && selectCells.length === 1) {
	          console.log(selectCells[0].locX, selectCells[0].locY);
	          self.addstartCell(selectCells[0].locX, selectCells[0].locY);
	        }

	        if ((e.key === 'f' || e.keyCode === 70) && selectCells.length === 1) {
	          self.addfinishCell(selectCells[0].locX, selectCells[0].locY);
	        }

	        if (saveSelCellsBool) {
	          saveSelectCells();
	        }

	        if (redraw) {

	          setMatrix();
	          drawWorld();
	        }
	      }
	    }

	    self.wallUp = function () {
	      selectCells.forEach(function (c) {
	        c.upclick = 1;
	      });
	      saveSelectCells();
	      setMatrix();
	      drawWorld();
	    };

	    self.wallRight = function () {
	      selectCells.forEach(function (c) {
	        c.rightclick = 1;
	      });
	      saveSelectCells();
	      setMatrix();
	      drawWorld();
	    };

	    self.wallDown = function () {

	      selectCells.forEach(function (c) {
	        c.downclick = 1;
	      });
	      saveSelectCells();
	      setMatrix();
	      drawWorld();
	    };

	    self.wallLeft = function () {
	      selectCells.forEach(function (c) {
	        c.leftclick = 1;
	      });

	      saveSelectCells();
	      setMatrix();
	      drawWorld();
	    };

	    self.color = function () {
	      selectCells.forEach(function (c) {
	        c.color_r = self.color_r_selected;
	        c.color_g = self.color_g_selected;
	        c.color_b = self.color_b_selected;
	        c.color_a = self.color_a_selected;
	      });
	      saveSelectCells();
	      setMatrix();
	      drawWorld();
	    };

	    self.setStartCell = function () {
	      if (selectCells.length === 1) {
	        self.addstartCell(selectCells[0].locX, selectCells[0].locY);
	      }
	    };

	    self.setEndCell = function () {
	      if (selectCells.length === 1) {
	        self.addfinishCell(selectCells[0].locX, selectCells[0].locY);
	      }
	    };

	    $('body').on('contextmenu', '#buildcvs', function (e) {
	      return false;
	    });

	    angular.element(c).bind('keyup', function (e) {

	      if (e.key === 'Shift') {
	        shiftKEY = false;
	        mouseDownForSELECT = false;
	      }

	      if (e.key === 'Control') {
	        controllKEY = false;
	        mouseDownForMove = false;
	      }
	    });

	    angular.element(c).bind('mousedown', function (e) {

	      var click = [];
	      var localCoordClick = [];
	      var singleClickCell = [];
	      if (shiftKEY && !controllKEY) {
	        //console.log("MOUSE EVENT ");
	        // console.log(e);
	        mouseDownForSELECT = true;
	        click = [e.offsetX, e.offsetY, 1];
	        localCoordClick = Matrix.inverseMap(click);
	        singleClickCell = findNearestCell(localCoordClick);
	        addToSelectCellList({ locX: singleClickCell[0], locY: singleClickCell[1] });
	        drawWorld();
	      } else if (controllKEY && !shiftKEY) {

	        mouseDownForMove = true;
	        moveStartX = e.offsetX;
	        moveStartY = e.offsetY;
	        moveEndX = e.offsetX;
	        moveEndY = e.offsetY;
	      } else {

	        click = [e.offsetX, e.offsetY, 1];

	        localCoordClick = Matrix.inverseMap(click);

	        //Find Nearest Cell .5, .5///


	        selectCells = [];
	        singleClickCell = findNearestCell(localCoordClick);

	        addToSelectCellList({ locX: singleClickCell[0], locY: singleClickCell[1] });

	        drawWorld();
	      }
	    });
	    self.removeAdvIs = {};
	    self.inAdvClick = function (clkPos) {

	      var isin = false;
	      var advLength = advs.length;

	      for (var i = 0; i < advLength; i++) {

	        if (clkPos.x <= advs[i].locX + advs[i].width - 0.5 && clkPos.x >= advs[i].locX - 0.5 && clkPos.y <= advs[i].locY + 0.5 && clkPos.y >= advs[i].locY - advs[i].height + 0.5 && advs[i].available) {

	          self.removeAdvIs = advs[i];
	          isin = true;
	          break;
	        } else {
	          isin = false;
	        }
	      }

	      if (!!isin) {
	        return true;
	      } else {
	        return false;
	      }
	    };

	    angular.element(c).bind('mouseup', function (e) {
	      // e.preventDefault();
	      // e.stopImmediatePropagation();
	      //console.log("MOUSE EVENT ");
	      //console.log(e);
	      // mouseDownForMove = false;
	      // mouseDownForSELECT = false;

	      var mscreen = [e.offsetX, e.offsetY, 1];
	      var scrnMap = Matrix.inverseMap(mscreen);
	      var click = { x: scrnMap[0], y: scrnMap[1] };

	      if (self.inAdvClick(click)) {
	        loadingGif.show();
	        self.thereIsAModalOpen = true;
	        $('#deleteAdvWarningModal').modal({ backdrop: 'static', keyboard: false });
	        $('#deleteAdvWarningModal').modal('show');
	      }
	    });

	    angular.element(c).bind('mousemove', throttle(function (e) {

	      var hover = [];
	      var localCoordHover = [];
	      if (mouseDownForMove) {

	        moveEndX = e.offsetX;
	        moveEndY = e.offsetY;

	        var deltaX = moveEndX - moveStartX;
	        var deltaY = moveEndY - moveStartY;

	        moveStartX = moveEndX;
	        moveStartY = moveEndY;

	        viewOffsetX = viewOffsetX + parseInt(deltaX);
	        viewOffsetY = viewOffsetY + parseInt(deltaY);

	        // console.log("MOUSE EVENT ");
	        //console.log(e);
	        setMatrix();
	      } else if (mouseDownForSELECT) {

	        hover = [e.offsetX, e.offsetY, 1];
	        localCoordHover = Matrix.inverseMap(hover);
	        var hoverCellCoord = findNearestCell(localCoordHover);

	        addToSelectCellList({ locX: hoverCellCoord[0], locY: hoverCellCoord[1] });
	      } else {

	        hover = [e.offsetX, e.offsetY, 1];

	        localCoordHover = Matrix.inverseMap(hover);

	        //Find Nearest Cell .5, .5///

	        hoverCell = findNearestCell(localCoordHover);
	      }

	      drawWorld();
	    }, 100));

	    function findNearestCell(v) {

	      var upperX = Math.ceil(v[0]);
	      //var lowerX = Math.floor(v[0]);

	      var upperY = Math.ceil(v[1]);
	      //var lowerY = Math.floor(v[1]);

	      return [upperX - 0.5, upperY - 0.5, 1];
	    }

	    function saveSelectCells() {
	      selectCells.forEach(function (tile) {
	        //console.log("SaveSelectCells");
	        //console.log(tile);
	        addToMap(tile);
	      });
	    }

	    $('#saveMapBtn').click(function () {

	      loadingGif.show();

	      mapBuilds.forEach(function (i) {

	        var upperSync = { 'locX': map.tiles[i].locX, 'locY': map.tiles[i].locY + 1 };

	        syncSuroundingCell(upperSync, "upper", i);

	        var rightSync = { 'locX': map.tiles[i].locX + 1, 'locY': map.tiles[i].locY };

	        syncSuroundingCell(rightSync, "right", i);

	        var lowerSync = { 'locX': map.tiles[i].locX, 'locY': map.tiles[i].locY - 1 };

	        syncSuroundingCell(lowerSync, "lower", i);

	        var leftSync = { 'locX': map.tiles[i].locX - 1, 'locY': map.tiles[i].locY };

	        syncSuroundingCell(leftSync, "left", i);
	      });

	      loadingGif.hide();
	      mapBuilds.forEach(function (i) {

	        loadingGif.show();
	        map.tiles[i].mapId = parseInt(self.levelSelect);

	        var tileXhrCallConfig = {
	          method: 'POST',
	          url: 'api/v1/tile',
	          data: map.tiles[i],
	          headers: { auth: User.token },
	          responseType: "json"
	        };

	        $http(tileXhrCallConfig).then(function (resp) {

	          loadingGif.hide();
	        }, function (err) {
	          console.log('SAVING ERR');
	          console.log(err);
	          loadingGif.hide();
	        });
	      });

	      mapBuilds = []; ///Clear anything that has been updated.
	    });

	    function getMapTiles() {

	      loadingGif.show();
	      //map.tiles = [];

	      var url = 'api/v1/tile?level=' + self.levelSelect + '&locX=' + centerX + '&locY=' + centerY + '&w=' + 3 * Global.screenCellsWidth + '&h=' + 3 * Global.screenCellsHeight;
	      Levels.getMapTiles(url).then(function (resp) {
	        mapBuilds = []; ///Clear anything that has been updated.
	        map.tiles = [];
	        map.tiles = resp;
	        loadingGif.hide();
	        console.log(resp);

	        drawWorld();
	      }, function (err) {
	        console.log('GET MAP ERROR');
	        console.log(err);
	        loadingGif.hide();
	      });
	    }

	    function getAdvs() {
	      loadingGif.show();
	      advs = [];

	      var url = 'api/v1/adv?level=' + self.levelSelect;
	      Levels.getAdvs(url).then(function (resp) {
	        console.log('Get adVs');
	        console.log(resp);
	        advs = resp;

	        loadingGif.hide();
	        drawWorld();
	      }, function (err) {
	        console.log('GET advs ERROR');
	        console.log(err);
	        loadingGif.hide();
	      });
	    }

	    $("#colorPicker").spectrum({
	      showAlpha: true,
	      change: function change(tinycolor) {
	        console.log(tinycolor);
	        console.log(tinycolor.r);
	        console.log(tinycolor._r);
	        console.log(self.color_r_selected);
	        self.color_r_selected = tinycolor._r;
	        self.color_g_selected = tinycolor._g;
	        self.color_b_selected = tinycolor._b;
	        self.color_a_selected = tinycolor._a;
	        console.log(self.color_r_selected);
	      }
	    });

	    $("#colorPicker").spectrum("set", 'rgba(255,0,0,0.2)');

	    self.color_r_selected = 255;
	    self.color_g_selected = 0;
	    self.color_b_selected = 0;
	    self.color_a_selected = 0.2;

	    self.addLevel = function () {

	      loadingGif.show();
	      var levelObj = {
	        "mapname": levelName.value
	      };

	      var addLevelXhrCallConfig = {
	        method: 'POST',
	        url: 'api/v1/map',
	        data: levelObj,
	        headers: { auth: User.token },
	        responseType: "json"
	      };

	      $http(addLevelXhrCallConfig).then(function (resp) {
	        self.levelSelect = resp.data.id.toString();

	        getLevels();

	        self.levelChange();

	        loadingGif.hide();
	      }, function (err) {
	        console.log('SAVING ERR');
	        console.log(err);
	        loadingGif.hide();
	      });
	    };

	    self.editLevelname = function () {

	      loadingGif.show();
	      var levelObj = {
	        "mapname": levelName.value
	      };

	      var editLevelXhrCallConfig = {
	        method: 'PUT',
	        url: 'api/v1/map/' + self.levelSelect,
	        data: levelObj,
	        headers: { auth: User.token },
	        responseType: "json"
	      };

	      $http(editLevelXhrCallConfig).then(function (resp) {

	        getLevels();

	        loadingGif.hide();
	      }, function (err) {
	        console.log('SAVING ERR');
	        console.log(err);
	        loadingGif.hide();
	      });
	    };

	    self.openLevelSelectModal = function () {
	      self.thereIsAModalOpen = true;
	      $('#levelSelectModalBuild').modal({ backdrop: 'static', keyboard: false });
	      $('#levelSelectModalBuild').modal('show');
	    };

	    self.levelChange = function () {
	      console.log("CHANGE LEVEL");
	      self.levelSelect = $('#buildlevelSelect').val();
	      console.log(self.levelSelect);
	      self.thereIsAModalOpen = false;
	      $('#levelSelectModalBuild').modal('hide');
	      getLevels();
	      //getMapTiles();
	      //getAdvs();
	    };

	    self.goOpenSource = function () {
	      var openSourceData = { userId: 0 };
	      console.log('self.levelSelect');
	      console.log(self.levelSelect);
	      var openSourceLevelXhrCallConfig = {
	        method: 'PUT',
	        url: 'api/v1/map/' + self.levelSelect,
	        data: openSourceData,
	        headers: { auth: User.token },
	        responseType: "json"
	      };

	      $http(openSourceLevelXhrCallConfig).then(function (resp) {

	        self.isCrowdSourced = true;

	        loadingGif.hide();
	      }, function (err) {

	        console.log('OpenSource ERR');
	        console.log(err);
	        self.isCrowdSourced = false;
	        loadingGif.hide();
	      });
	    };

	    self.deleteLevelForSure = function () {
	      self.thereIsAModalOpen = false;
	      $('#deleteMapWarningModal').modal('hide');
	      var deleteLevelXhrCallConfig = {
	        method: 'DELETE',
	        url: 'api/v1/map/' + self.levelSelect,
	        headers: { auth: User.token },
	        responseType: "json"
	      };

	      $http(deleteLevelXhrCallConfig).then(function (resp) {
	        self.thereIsAModalOpen = false;
	        $('#deleteMapWarningModal').modal('hide');
	        self.levelSelect = '1';
	        getLevels();

	        loadingGif.hide();
	      }, function (err) {
	        self.thereIsAModalOpen = false;
	        $('#deleteMapWarningModal').modal('hide');
	        console.log('SAVING ERR');
	        console.log(err);
	        loadingGif.hide();
	      });
	    };

	    self.deleteLevel = function () {

	      loadingGif.show();
	      self.thereIsAModalOpen = true;
	      $('#deleteMapWarningModal').modal({ backdrop: 'static', keyboard: false });
	      $('#deleteMapWarningModal').modal('show');
	    };

	    self.addAdvModal = function () {
	      if (selectCells.length === 1) {
	        loadingGif.show();
	        self.thereIsAModalOpen = true;
	        $('#addAdvModal').modal({ backdrop: 'static', keyboard: false });
	        $('#addAdvModal').modal('show');
	      }
	    };
	    self.advWidth = '2';
	    self.advHeight = '2';
	    self.submitAdvAllocation = function () {
	      self.thereIsAModalOpen = false;
	      $('#addAdvModal').modal('hide');
	      console.log(selectCells);

	      console.log(self.advWidth);
	      console.log(self.advHeight);

	      var adVData = { locX: selectCells[0].locX, locY: selectCells[0].locY, width: parseInt(self.advWidth), height: parseInt(self.advHeight), mapId: self.levelSelect };

	      var newAdvDataXhrCallConfig = {
	        method: 'POST',
	        url: 'api/v1/adv',
	        data: adVData,
	        headers: { auth: User.token },
	        responseType: "json"
	      };

	      $http(newAdvDataXhrCallConfig).then(function (resp) {

	        console.log('Add new Adv resp');
	        console.log(resp);
	        self.thereIsAModalOpen = false;
	        $('#addAdvModal').modal('hide');
	        self.setTilesAsAdvTiles(selectCells[0].locX, selectCells[0].locY, parseInt(self.advWidth), parseInt(self.advHeight));

	        loadingGif.hide();
	      }, function (err) {

	        console.log('Intro Text ERR');
	        console.log(err);

	        loadingGif.hide();
	        self.thereIsAModalOpen = false;
	        $('#addAdvModal').modal('hide');
	      });
	    };

	    self.closeDialog = function () {
	      self.thereIsAModalOpen = false;
	      loadingGif.hide();
	    };

	    self.setIntroModal = function () {
	      loadingGif.show();
	      self.thereIsAModalOpen = true;
	      $('#addMapIntroModal').modal({ backdrop: 'static', keyboard: false });
	      $('#addMapIntroModal').modal('show');
	    };

	    self.submitMapIntro = function () {
	      console.log('map intro text');
	      console.log(self.mapIntroTextarea);
	      loadingGif.show();
	      // mapIntro
	      //  startSquare

	      //  endSquare
	      var introTextData = { mapIntro: self.mapIntroTextarea };

	      var introTextXhrCallConfig = {
	        method: 'PUT',
	        url: 'api/v1/map/' + self.levelSelect,
	        data: introTextData,
	        headers: { auth: User.token },
	        responseType: "json"
	      };

	      $http(introTextXhrCallConfig).then(function (resp) {
	        self.thereIsAModalOpen = false;
	        $('#addMapIntroModal').modal('hide');
	        loadingGif.hide();
	      }, function (err) {

	        console.log('Intro Text ERR');
	        console.log(err);

	        loadingGif.hide();
	      });
	    };

	    self.addstartCell = function (x, y) {
	      loadingGif.show();
	      self.thereIsAModalOpen = true;
	      $('#setStartSquareModal').modal({ backdrop: 'static', keyboard: false });
	      $('#setStartSquareModal').modal('show');

	      var addstartCellData = { startXtile: x, startYtile: y };

	      var startCellXhrCallConfig = {
	        method: 'PUT',
	        url: 'api/v1/map/' + self.levelSelect,
	        data: addstartCellData,
	        headers: { auth: User.token },
	        responseType: "json"
	      };

	      $http(startCellXhrCallConfig).then(function (resp) {

	        map.start = [resp.data.startXtile, resp.data.startYtile];

	        drawWorld();

	        loadingGif.hide();
	      }, function (err) {

	        console.log('Update Start ERR');
	        console.log(err);

	        loadingGif.hide();
	      });
	    };

	    self.submitstartSquareText = function () {
	      console.log('start txt');
	      console.log(self.startSquareTextarea);
	      loadingGif.show();

	      var startSquareData = { startSquare: self.startSquareTextarea };

	      var startSquareTextXhrCallConfig = {
	        method: 'PUT',
	        url: 'api/v1/map/' + self.levelSelect,
	        data: startSquareData,
	        headers: { auth: User.token },
	        responseType: "json"
	      };

	      $http(startSquareTextXhrCallConfig).then(function (resp) {
	        self.thereIsAModalOpen = false;
	        $('#setStartSquareModal').modal('hide');
	        loadingGif.hide();
	      }, function (err) {

	        console.log('Intro Text ERR');
	        console.log(err);

	        loadingGif.hide();
	      });
	    };

	    self.addfinishCell = function (x, y) {
	      loadingGif.show();

	      self.thereIsAModalOpen = true;
	      $('#setFinishSquareModal').modal({ backdrop: 'static', keyboard: false });
	      $('#setFinishSquareModal').modal('show');

	      var addfinishCellData = { finishXtile: x, finishYtile: y };

	      var finishCellXhrCallConfig = {
	        method: 'PUT',
	        url: 'api/v1/map/' + self.levelSelect,
	        data: addfinishCellData,
	        headers: { auth: User.token },
	        responseType: "json"
	      };

	      $http(finishCellXhrCallConfig).then(function (resp) {

	        map.finish = [resp.data.finishXtile, resp.data.finishYtile];

	        drawWorld();

	        loadingGif.hide();
	      }, function (err) {

	        console.log('Update Finish ERR');
	        console.log(err);

	        loadingGif.hide();
	      });
	    };

	    self.submitfinishSquareText = function () {
	      console.log('Finish txt');
	      console.log(self.finishSquareTextarea);
	      loadingGif.show();
	      // mapIntro
	      //  startSquare

	      //  endSquare
	      var endSquareData = { endSquare: self.finishSquareTextarea };

	      var endSquareTextXhrCallConfig = {
	        method: 'PUT',
	        url: 'api/v1/map/' + self.levelSelect,
	        data: endSquareData,
	        headers: { auth: User.token },
	        responseType: "json"
	      };

	      $http(endSquareTextXhrCallConfig).then(function (resp) {
	        self.thereIsAModalOpen = false;
	        $('#setFinishSquareModal').modal('hide');
	        loadingGif.hide();
	      }, function (err) {

	        console.log('Intro Text ERR');
	        console.log(err);

	        loadingGif.hide();
	      });
	    };

	    self.pageUp = function () {
	      self.page = self.page + 1;
	      getLevels();
	    };

	    self.pageDwn = function () {
	      self.page = self.page - 1;
	      if (self.page < 0) {
	        self.page = 0;
	      }
	      getLevels();
	    };

	    self.page = 0;

	    self.orderByChange = function () {
	      self.page = 0;
	      getLevels();
	    };

	    self.orderByPulse = false;

	    function getLevels() {

	      loadingGif.show();

	      var url = 'api/v1/mapedits';

	      if (self.orderByPulse) {
	        url += '?page=' + self.page + '&orderBy=1';
	      } else {

	        url += '?page=' + self.page;
	      }

	      Levels.getLevels(url).then(function (resp) {

	        self.levels = resp;

	        console.log('Get Levels Resp');
	        console.log(resp);
	        console.log(self.levelSelect);

	        var levelFound = false;

	        var levelArrLength = self.levels.length;
	        for (var i = 0; i < levelArrLength; i++) {
	          if (self.levelSelect === self.levels[i].id.toString()) {
	            self.levelSelectName = self.levels[i].mapname;
	            levelFound = true;
	            console.log(self.levels[i]);
	            map.start = [self.levels[i].startXtile, self.levels[i].startYtile];
	            map.finish = [self.levels[i].finishXtile, self.levels[i].finishYtile];
	            self.mapIntroTextarea = self.levels[i].mapIntro;
	            self.startSquareTextarea = self.levels[i].startSquare;
	            self.finishSquareTextarea = self.levels[i].endSquare;

	            if (self.levels[i].userId === 0) {
	              self.isCrowdSourced = true;
	            } else {
	              self.isCrowdSourced = false;
	            }
	            break;
	          }
	        }

	        if (!levelFound) {

	          self.levelSelect = self.levels[0].id.toString();
	          if (self.levels[0].userId === 0) {
	            self.isCrowdSourced = true;
	          } else {
	            self.isCrowdSourced = false;
	          }
	          map.start = [];
	          map.finish = [];
	          self.mapIntroTextarea = '';
	          self.startSquareTextarea = '';
	          self.finishSquareTextarea = '';
	        }

	        setMatrix();
	        getMapTiles();
	        getAdvs();

	        drawWorld();

	        loadingGif.hide();
	      }, function (err) {

	        console.log('GET LEVELS ERROR');
	        console.log(err);
	        loadingGif.hide();
	      });
	    }

	    if (!User.loggedin) {
	      loadingGif.show();
	      User.isTokenValid().then(function (user) {
	        console.log("USER NOT LOGGED IN IS TOKEN VALID RESP");
	        console.log(user);
	        console.log(User);
	        getLevels();
	      }, function (err) {
	        console.log("USER NOT LOGGED IN IS TOKEN VALID ERR");
	        console.log(err);
	        $state.go('login');
	      });
	    } else {
	      getLevels();
	      console.log('USER IS LOGGEDIN');
	      console.log(User);
	    }

	    self.logout = function () {

	      User.logout(User.token);
	      $state.go('login');
	    };

	    $('#playXonumiaBtn').click(function () {

	      $state.go('play');
	    });
	  }]);
	};

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	// Spectrum Colorpicker v1.8.0
	// https://github.com/bgrins/spectrum
	// Author: Brian Grinstead
	// License: MIT

	(function (factory) {
	    "use strict";

	    if (true) {
	        // AMD
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) == "object" && (typeof module === 'undefined' ? 'undefined' : _typeof(module)) == "object") {
	        // CommonJS
	        module.exports = factory(require('jquery'));
	    } else {
	        // Browser
	        factory(jQuery);
	    }
	})(function ($, undefined) {
	    "use strict";

	    var defaultOpts = {

	        // Callbacks
	        beforeShow: noop,
	        move: noop,
	        change: noop,
	        show: noop,
	        hide: noop,

	        // Options
	        color: false,
	        flat: false,
	        showInput: false,
	        allowEmpty: false,
	        showButtons: true,
	        clickoutFiresChange: true,
	        showInitial: false,
	        showPalette: false,
	        showPaletteOnly: false,
	        hideAfterPaletteSelect: false,
	        togglePaletteOnly: false,
	        showSelectionPalette: true,
	        localStorageKey: false,
	        appendTo: "body",
	        maxSelectionSize: 7,
	        cancelText: "cancel",
	        chooseText: "choose",
	        togglePaletteMoreText: "more",
	        togglePaletteLessText: "less",
	        clearText: "Clear Color Selection",
	        noColorSelectedText: "No Color Selected",
	        preferredFormat: false,
	        className: "", // Deprecated - use containerClassName and replacerClassName instead.
	        containerClassName: "",
	        replacerClassName: "",
	        showAlpha: false,
	        theme: "sp-light",
	        palette: [["#ffffff", "#000000", "#ff0000", "#ff8000", "#ffff00", "#008000", "#0000ff", "#4b0082", "#9400d3"]],
	        selectionPalette: [],
	        disabled: false,
	        offset: null
	    },
	        spectrums = [],
	        IE = !!/msie/i.exec(window.navigator.userAgent),
	        rgbaSupport = function () {
	        function contains(str, substr) {
	            return !!~('' + str).indexOf(substr);
	        }

	        var elem = document.createElement('div');
	        var style = elem.style;
	        style.cssText = 'background-color:rgba(0,0,0,.5)';
	        return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');
	    }(),
	        replaceInput = ["<div class='sp-replacer'>", "<div class='sp-preview'><div class='sp-preview-inner'></div></div>", "<div class='sp-dd'>&#9660;</div>", "</div>"].join(''),
	        markup = function () {

	        // IE does not support gradients with multiple stops, so we need to simulate
	        //  that for the rainbow slider with 8 divs that each have a single gradient
	        var gradientFix = "";
	        if (IE) {
	            for (var i = 1; i <= 6; i++) {
	                gradientFix += "<div class='sp-" + i + "'></div>";
	            }
	        }

	        return ["<div class='sp-container sp-hidden'>", "<div class='sp-palette-container'>", "<div class='sp-palette sp-thumb sp-cf'></div>", "<div class='sp-palette-button-container sp-cf'>", "<button type='button' class='sp-palette-toggle'></button>", "</div>", "</div>", "<div class='sp-picker-container'>", "<div class='sp-top sp-cf'>", "<div class='sp-fill'></div>", "<div class='sp-top-inner'>", "<div class='sp-color'>", "<div class='sp-sat'>", "<div class='sp-val'>", "<div class='sp-dragger'></div>", "</div>", "</div>", "</div>", "<div class='sp-clear sp-clear-display'>", "</div>", "<div class='sp-hue'>", "<div class='sp-slider'></div>", gradientFix, "</div>", "</div>", "<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>", "</div>", "<div class='sp-input-container sp-cf'>", "<input class='sp-input' type='text' spellcheck='false'  />", "</div>", "<div class='sp-initial sp-thumb sp-cf'></div>", "<div class='sp-button-container sp-cf'>", "<a class='sp-cancel' href='#'></a>", "<button type='button' class='sp-choose'></button>", "</div>", "</div>", "</div>"].join("");
	    }();

	    function paletteTemplate(p, color, className, opts) {
	        var html = [];
	        for (var i = 0; i < p.length; i++) {
	            var current = p[i];
	            if (current) {
	                var tiny = tinycolor(current);
	                var c = tiny.toHsl().l < 0.5 ? "sp-thumb-el sp-thumb-dark" : "sp-thumb-el sp-thumb-light";
	                c += tinycolor.equals(color, current) ? " sp-thumb-active" : "";
	                var formattedString = tiny.toString(opts.preferredFormat || "rgb");
	                var swatchStyle = rgbaSupport ? "background-color:" + tiny.toRgbString() : "filter:" + tiny.toFilter();
	                html.push('<span title="' + formattedString + '" data-color="' + tiny.toRgbString() + '" class="' + c + '"><span class="sp-thumb-inner" style="' + swatchStyle + ';" /></span>');
	            } else {
	                var cls = 'sp-clear-display';
	                html.push($('<div />').append($('<span data-color="" style="background-color:transparent;" class="' + cls + '"></span>').attr('title', opts.noColorSelectedText)).html());
	            }
	        }
	        return "<div class='sp-cf " + className + "'>" + html.join('') + "</div>";
	    }

	    function hideAll() {
	        for (var i = 0; i < spectrums.length; i++) {
	            if (spectrums[i]) {
	                spectrums[i].hide();
	            }
	        }
	    }

	    function instanceOptions(o, callbackContext) {
	        var opts = $.extend({}, defaultOpts, o);
	        opts.callbacks = {
	            'move': bind(opts.move, callbackContext),
	            'change': bind(opts.change, callbackContext),
	            'show': bind(opts.show, callbackContext),
	            'hide': bind(opts.hide, callbackContext),
	            'beforeShow': bind(opts.beforeShow, callbackContext)
	        };

	        return opts;
	    }

	    function spectrum(element, o) {

	        var opts = instanceOptions(o, element),
	            flat = opts.flat,
	            showSelectionPalette = opts.showSelectionPalette,
	            localStorageKey = opts.localStorageKey,
	            theme = opts.theme,
	            callbacks = opts.callbacks,
	            resize = throttle(reflow, 10),
	            visible = false,
	            isDragging = false,
	            dragWidth = 0,
	            dragHeight = 0,
	            dragHelperHeight = 0,
	            slideHeight = 0,
	            slideWidth = 0,
	            alphaWidth = 0,
	            alphaSlideHelperWidth = 0,
	            slideHelperHeight = 0,
	            currentHue = 0,
	            currentSaturation = 0,
	            currentValue = 0,
	            currentAlpha = 1,
	            palette = [],
	            paletteArray = [],
	            paletteLookup = {},
	            selectionPalette = opts.selectionPalette.slice(0),
	            maxSelectionSize = opts.maxSelectionSize,
	            draggingClass = "sp-dragging",
	            shiftMovementDirection = null;

	        var doc = element.ownerDocument,
	            body = doc.body,
	            boundElement = $(element),
	            disabled = false,
	            container = $(markup, doc).addClass(theme),
	            pickerContainer = container.find(".sp-picker-container"),
	            dragger = container.find(".sp-color"),
	            dragHelper = container.find(".sp-dragger"),
	            slider = container.find(".sp-hue"),
	            slideHelper = container.find(".sp-slider"),
	            alphaSliderInner = container.find(".sp-alpha-inner"),
	            alphaSlider = container.find(".sp-alpha"),
	            alphaSlideHelper = container.find(".sp-alpha-handle"),
	            textInput = container.find(".sp-input"),
	            paletteContainer = container.find(".sp-palette"),
	            initialColorContainer = container.find(".sp-initial"),
	            cancelButton = container.find(".sp-cancel"),
	            clearButton = container.find(".sp-clear"),
	            chooseButton = container.find(".sp-choose"),
	            toggleButton = container.find(".sp-palette-toggle"),
	            isInput = boundElement.is("input"),
	            isInputTypeColor = isInput && boundElement.attr("type") === "color" && inputTypeColorSupport(),
	            shouldReplace = isInput && !flat,
	            replacer = shouldReplace ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),
	            offsetElement = shouldReplace ? replacer : boundElement,
	            previewElement = replacer.find(".sp-preview-inner"),
	            initialColor = opts.color || isInput && boundElement.val(),
	            colorOnShow = false,
	            currentPreferredFormat = opts.preferredFormat,
	            clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,
	            isEmpty = !initialColor,
	            allowEmpty = opts.allowEmpty && !isInputTypeColor;

	        function applyOptions() {

	            if (opts.showPaletteOnly) {
	                opts.showPalette = true;
	            }

	            toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);

	            if (opts.palette) {
	                palette = opts.palette.slice(0);
	                paletteArray = $.isArray(palette[0]) ? palette : [palette];
	                paletteLookup = {};
	                for (var i = 0; i < paletteArray.length; i++) {
	                    for (var j = 0; j < paletteArray[i].length; j++) {
	                        var rgb = tinycolor(paletteArray[i][j]).toRgbString();
	                        paletteLookup[rgb] = true;
	                    }
	                }
	            }

	            container.toggleClass("sp-flat", flat);
	            container.toggleClass("sp-input-disabled", !opts.showInput);
	            container.toggleClass("sp-alpha-enabled", opts.showAlpha);
	            container.toggleClass("sp-clear-enabled", allowEmpty);
	            container.toggleClass("sp-buttons-disabled", !opts.showButtons);
	            container.toggleClass("sp-palette-buttons-disabled", !opts.togglePaletteOnly);
	            container.toggleClass("sp-palette-disabled", !opts.showPalette);
	            container.toggleClass("sp-palette-only", opts.showPaletteOnly);
	            container.toggleClass("sp-initial-disabled", !opts.showInitial);
	            container.addClass(opts.className).addClass(opts.containerClassName);

	            reflow();
	        }

	        function initialize() {

	            if (IE) {
	                container.find("*:not(input)").attr("unselectable", "on");
	            }

	            applyOptions();

	            if (shouldReplace) {
	                boundElement.after(replacer).hide();
	            }

	            if (!allowEmpty) {
	                clearButton.hide();
	            }

	            if (flat) {
	                boundElement.after(container).hide();
	            } else {

	                var appendTo = opts.appendTo === "parent" ? boundElement.parent() : $(opts.appendTo);
	                if (appendTo.length !== 1) {
	                    appendTo = $("body");
	                }

	                appendTo.append(container);
	            }

	            updateSelectionPaletteFromStorage();

	            offsetElement.bind("click.spectrum touchstart.spectrum", function (e) {
	                if (!disabled) {
	                    toggle();
	                }

	                e.stopPropagation();

	                if (!$(e.target).is("input")) {
	                    e.preventDefault();
	                }
	            });

	            if (boundElement.is(":disabled") || opts.disabled === true) {
	                disable();
	            }

	            // Prevent clicks from bubbling up to document.  This would cause it to be hidden.
	            container.click(stopPropagation);

	            // Handle user typed input
	            textInput.change(setFromTextInput);
	            textInput.bind("paste", function () {
	                setTimeout(setFromTextInput, 1);
	            });
	            textInput.keydown(function (e) {
	                if (e.keyCode == 13) {
	                    setFromTextInput();
	                }
	            });

	            cancelButton.text(opts.cancelText);
	            cancelButton.bind("click.spectrum", function (e) {
	                e.stopPropagation();
	                e.preventDefault();
	                revert();
	                hide();
	            });

	            clearButton.attr("title", opts.clearText);
	            clearButton.bind("click.spectrum", function (e) {
	                e.stopPropagation();
	                e.preventDefault();
	                isEmpty = true;
	                move();

	                if (flat) {
	                    //for the flat style, this is a change event
	                    updateOriginalInput(true);
	                }
	            });

	            chooseButton.text(opts.chooseText);
	            chooseButton.bind("click.spectrum", function (e) {
	                e.stopPropagation();
	                e.preventDefault();

	                if (IE && textInput.is(":focus")) {
	                    textInput.trigger('change');
	                }

	                if (isValid()) {
	                    updateOriginalInput(true);
	                    hide();
	                }
	            });

	            toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);
	            toggleButton.bind("click.spectrum", function (e) {
	                e.stopPropagation();
	                e.preventDefault();

	                opts.showPaletteOnly = !opts.showPaletteOnly;

	                // To make sure the Picker area is drawn on the right, next to the
	                // Palette area (and not below the palette), first move the Palette
	                // to the left to make space for the picker, plus 5px extra.
	                // The 'applyOptions' function puts the whole container back into place
	                // and takes care of the button-text and the sp-palette-only CSS class.
	                if (!opts.showPaletteOnly && !flat) {
	                    container.css('left', '-=' + (pickerContainer.outerWidth(true) + 5));
	                }
	                applyOptions();
	            });

	            draggable(alphaSlider, function (dragX, dragY, e) {
	                currentAlpha = dragX / alphaWidth;
	                isEmpty = false;
	                if (e.shiftKey) {
	                    currentAlpha = Math.round(currentAlpha * 10) / 10;
	                }

	                move();
	            }, dragStart, dragStop);

	            draggable(slider, function (dragX, dragY) {
	                currentHue = parseFloat(dragY / slideHeight);
	                isEmpty = false;
	                if (!opts.showAlpha) {
	                    currentAlpha = 1;
	                }
	                move();
	            }, dragStart, dragStop);

	            draggable(dragger, function (dragX, dragY, e) {

	                // shift+drag should snap the movement to either the x or y axis.
	                if (!e.shiftKey) {
	                    shiftMovementDirection = null;
	                } else if (!shiftMovementDirection) {
	                    var oldDragX = currentSaturation * dragWidth;
	                    var oldDragY = dragHeight - currentValue * dragHeight;
	                    var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);

	                    shiftMovementDirection = furtherFromX ? "x" : "y";
	                }

	                var setSaturation = !shiftMovementDirection || shiftMovementDirection === "x";
	                var setValue = !shiftMovementDirection || shiftMovementDirection === "y";

	                if (setSaturation) {
	                    currentSaturation = parseFloat(dragX / dragWidth);
	                }
	                if (setValue) {
	                    currentValue = parseFloat((dragHeight - dragY) / dragHeight);
	                }

	                isEmpty = false;
	                if (!opts.showAlpha) {
	                    currentAlpha = 1;
	                }

	                move();
	            }, dragStart, dragStop);

	            if (!!initialColor) {
	                _set(initialColor);

	                // In case color was black - update the preview UI and set the format
	                // since the set function will not run (default color is black).
	                updateUI();
	                currentPreferredFormat = opts.preferredFormat || tinycolor(initialColor).format;

	                addColorToSelectionPalette(initialColor);
	            } else {
	                updateUI();
	            }

	            if (flat) {
	                show();
	            }

	            function paletteElementClick(e) {
	                if (e.data && e.data.ignore) {
	                    _set($(e.target).closest(".sp-thumb-el").data("color"));
	                    move();
	                } else {
	                    _set($(e.target).closest(".sp-thumb-el").data("color"));
	                    move();
	                    updateOriginalInput(true);
	                    if (opts.hideAfterPaletteSelect) {
	                        hide();
	                    }
	                }

	                return false;
	            }

	            var paletteEvent = IE ? "mousedown.spectrum" : "click.spectrum touchstart.spectrum";
	            paletteContainer.delegate(".sp-thumb-el", paletteEvent, paletteElementClick);
	            initialColorContainer.delegate(".sp-thumb-el:nth-child(1)", paletteEvent, { ignore: true }, paletteElementClick);
	        }

	        function updateSelectionPaletteFromStorage() {

	            if (localStorageKey && window.localStorage) {

	                // Migrate old palettes over to new format.  May want to remove this eventually.
	                try {
	                    var oldPalette = window.localStorage[localStorageKey].split(",#");
	                    if (oldPalette.length > 1) {
	                        delete window.localStorage[localStorageKey];
	                        $.each(oldPalette, function (i, c) {
	                            addColorToSelectionPalette(c);
	                        });
	                    }
	                } catch (e) {}

	                try {
	                    selectionPalette = window.localStorage[localStorageKey].split(";");
	                } catch (e) {}
	            }
	        }

	        function addColorToSelectionPalette(color) {
	            if (showSelectionPalette) {
	                var rgb = tinycolor(color).toRgbString();
	                if (!paletteLookup[rgb] && $.inArray(rgb, selectionPalette) === -1) {
	                    selectionPalette.push(rgb);
	                    while (selectionPalette.length > maxSelectionSize) {
	                        selectionPalette.shift();
	                    }
	                }

	                if (localStorageKey && window.localStorage) {
	                    try {
	                        window.localStorage[localStorageKey] = selectionPalette.join(";");
	                    } catch (e) {}
	                }
	            }
	        }

	        function getUniqueSelectionPalette() {
	            var unique = [];
	            if (opts.showPalette) {
	                for (var i = 0; i < selectionPalette.length; i++) {
	                    var rgb = tinycolor(selectionPalette[i]).toRgbString();

	                    if (!paletteLookup[rgb]) {
	                        unique.push(selectionPalette[i]);
	                    }
	                }
	            }

	            return unique.reverse().slice(0, opts.maxSelectionSize);
	        }

	        function drawPalette() {

	            var currentColor = get();

	            var html = $.map(paletteArray, function (palette, i) {
	                return paletteTemplate(palette, currentColor, "sp-palette-row sp-palette-row-" + i, opts);
	            });

	            updateSelectionPaletteFromStorage();

	            if (selectionPalette) {
	                html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, "sp-palette-row sp-palette-row-selection", opts));
	            }

	            paletteContainer.html(html.join(""));
	        }

	        function drawInitial() {
	            if (opts.showInitial) {
	                var initial = colorOnShow;
	                var current = get();
	                initialColorContainer.html(paletteTemplate([initial, current], current, "sp-palette-row-initial", opts));
	            }
	        }

	        function dragStart() {
	            if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {
	                reflow();
	            }
	            isDragging = true;
	            container.addClass(draggingClass);
	            shiftMovementDirection = null;
	            boundElement.trigger('dragstart.spectrum', [get()]);
	        }

	        function dragStop() {
	            isDragging = false;
	            container.removeClass(draggingClass);
	            boundElement.trigger('dragstop.spectrum', [get()]);
	        }

	        function setFromTextInput() {

	            var value = textInput.val();

	            if ((value === null || value === "") && allowEmpty) {
	                _set(null);
	                updateOriginalInput(true);
	            } else {
	                var tiny = tinycolor(value);
	                if (tiny.isValid()) {
	                    _set(tiny);
	                    updateOriginalInput(true);
	                } else {
	                    textInput.addClass("sp-validation-error");
	                }
	            }
	        }

	        function toggle() {
	            if (visible) {
	                hide();
	            } else {
	                show();
	            }
	        }

	        function show() {
	            var event = $.Event('beforeShow.spectrum');

	            if (visible) {
	                reflow();
	                return;
	            }

	            boundElement.trigger(event, [get()]);

	            if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {
	                return;
	            }

	            hideAll();
	            visible = true;

	            $(doc).bind("keydown.spectrum", onkeydown);
	            $(doc).bind("click.spectrum", clickout);
	            $(window).bind("resize.spectrum", resize);
	            replacer.addClass("sp-active");
	            container.removeClass("sp-hidden");

	            reflow();
	            updateUI();

	            colorOnShow = get();

	            drawInitial();
	            callbacks.show(colorOnShow);
	            boundElement.trigger('show.spectrum', [colorOnShow]);
	        }

	        function onkeydown(e) {
	            // Close on ESC
	            if (e.keyCode === 27) {
	                hide();
	            }
	        }

	        function clickout(e) {
	            // Return on right click.
	            if (e.button == 2) {
	                return;
	            }

	            // If a drag event was happening during the mouseup, don't hide
	            // on click.
	            if (isDragging) {
	                return;
	            }

	            if (clickoutFiresChange) {
	                updateOriginalInput(true);
	            } else {
	                revert();
	            }
	            hide();
	        }

	        function hide() {
	            // Return if hiding is unnecessary
	            if (!visible || flat) {
	                return;
	            }
	            visible = false;

	            $(doc).unbind("keydown.spectrum", onkeydown);
	            $(doc).unbind("click.spectrum", clickout);
	            $(window).unbind("resize.spectrum", resize);

	            replacer.removeClass("sp-active");
	            container.addClass("sp-hidden");

	            callbacks.hide(get());
	            boundElement.trigger('hide.spectrum', [get()]);
	        }

	        function revert() {
	            _set(colorOnShow, true);
	        }

	        function _set(color, ignoreFormatChange) {
	            if (tinycolor.equals(color, get())) {
	                // Update UI just in case a validation error needs
	                // to be cleared.
	                updateUI();
	                return;
	            }

	            var newColor, newHsv;
	            if (!color && allowEmpty) {
	                isEmpty = true;
	            } else {
	                isEmpty = false;
	                newColor = tinycolor(color);
	                newHsv = newColor.toHsv();

	                currentHue = newHsv.h % 360 / 360;
	                currentSaturation = newHsv.s;
	                currentValue = newHsv.v;
	                currentAlpha = newHsv.a;
	            }
	            updateUI();

	            if (newColor && newColor.isValid() && !ignoreFormatChange) {
	                currentPreferredFormat = opts.preferredFormat || newColor.getFormat();
	            }
	        }

	        function get(opts) {
	            opts = opts || {};

	            if (allowEmpty && isEmpty) {
	                return null;
	            }

	            return tinycolor.fromRatio({
	                h: currentHue,
	                s: currentSaturation,
	                v: currentValue,
	                a: Math.round(currentAlpha * 100) / 100
	            }, { format: opts.format || currentPreferredFormat });
	        }

	        function isValid() {
	            return !textInput.hasClass("sp-validation-error");
	        }

	        function move() {
	            updateUI();

	            callbacks.move(get());
	            boundElement.trigger('move.spectrum', [get()]);
	        }

	        function updateUI() {

	            textInput.removeClass("sp-validation-error");

	            updateHelperLocations();

	            // Update dragger background color (gradients take care of saturation and value).
	            var flatColor = tinycolor.fromRatio({ h: currentHue, s: 1, v: 1 });
	            dragger.css("background-color", flatColor.toHexString());

	            // Get a format that alpha will be included in (hex and names ignore alpha)
	            var format = currentPreferredFormat;
	            if (currentAlpha < 1 && !(currentAlpha === 0 && format === "name")) {
	                if (format === "hex" || format === "hex3" || format === "hex6" || format === "name") {
	                    format = "rgb";
	                }
	            }

	            var realColor = get({ format: format }),
	                displayColor = '';

	            //reset background info for preview element
	            previewElement.removeClass("sp-clear-display");
	            previewElement.css('background-color', 'transparent');

	            if (!realColor && allowEmpty) {
	                // Update the replaced elements background with icon indicating no color selection
	                previewElement.addClass("sp-clear-display");
	            } else {
	                var realHex = realColor.toHexString(),
	                    realRgb = realColor.toRgbString();

	                // Update the replaced elements background color (with actual selected color)
	                if (rgbaSupport || realColor.alpha === 1) {
	                    previewElement.css("background-color", realRgb);
	                } else {
	                    previewElement.css("background-color", "transparent");
	                    previewElement.css("filter", realColor.toFilter());
	                }

	                if (opts.showAlpha) {
	                    var rgb = realColor.toRgb();
	                    rgb.a = 0;
	                    var realAlpha = tinycolor(rgb).toRgbString();
	                    var gradient = "linear-gradient(left, " + realAlpha + ", " + realHex + ")";

	                    if (IE) {
	                        alphaSliderInner.css("filter", tinycolor(realAlpha).toFilter({ gradientType: 1 }, realHex));
	                    } else {
	                        alphaSliderInner.css("background", "-webkit-" + gradient);
	                        alphaSliderInner.css("background", "-moz-" + gradient);
	                        alphaSliderInner.css("background", "-ms-" + gradient);
	                        // Use current syntax gradient on unprefixed property.
	                        alphaSliderInner.css("background", "linear-gradient(to right, " + realAlpha + ", " + realHex + ")");
	                    }
	                }

	                displayColor = realColor.toString(format);
	            }

	            // Update the text entry input as it changes happen
	            if (opts.showInput) {
	                textInput.val(displayColor);
	            }

	            if (opts.showPalette) {
	                drawPalette();
	            }

	            drawInitial();
	        }

	        function updateHelperLocations() {
	            var s = currentSaturation;
	            var v = currentValue;

	            if (allowEmpty && isEmpty) {
	                //if selected color is empty, hide the helpers
	                alphaSlideHelper.hide();
	                slideHelper.hide();
	                dragHelper.hide();
	            } else {
	                //make sure helpers are visible
	                alphaSlideHelper.show();
	                slideHelper.show();
	                dragHelper.show();

	                // Where to show the little circle in that displays your current selected color
	                var dragX = s * dragWidth;
	                var dragY = dragHeight - v * dragHeight;
	                dragX = Math.max(-dragHelperHeight, Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight));
	                dragY = Math.max(-dragHelperHeight, Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight));
	                dragHelper.css({
	                    "top": dragY + "px",
	                    "left": dragX + "px"
	                });

	                var alphaX = currentAlpha * alphaWidth;
	                alphaSlideHelper.css({
	                    "left": alphaX - alphaSlideHelperWidth / 2 + "px"
	                });

	                // Where to show the bar that displays your current selected hue
	                var slideY = currentHue * slideHeight;
	                slideHelper.css({
	                    "top": slideY - slideHelperHeight + "px"
	                });
	            }
	        }

	        function updateOriginalInput(fireCallback) {
	            var color = get(),
	                displayColor = '',
	                hasChanged = !tinycolor.equals(color, colorOnShow);

	            if (color) {
	                displayColor = color.toString(currentPreferredFormat);
	                // Update the selection palette with the current color
	                addColorToSelectionPalette(color);
	            }

	            if (isInput) {
	                boundElement.val(displayColor);
	            }

	            if (fireCallback && hasChanged) {
	                callbacks.change(color);
	                boundElement.trigger('change', [color]);
	            }
	        }

	        function reflow() {
	            if (!visible) {
	                return; // Calculations would be useless and wouldn't be reliable anyways
	            }
	            dragWidth = dragger.width();
	            dragHeight = dragger.height();
	            dragHelperHeight = dragHelper.height();
	            slideWidth = slider.width();
	            slideHeight = slider.height();
	            slideHelperHeight = slideHelper.height();
	            alphaWidth = alphaSlider.width();
	            alphaSlideHelperWidth = alphaSlideHelper.width();

	            if (!flat) {
	                container.css("position", "absolute");
	                if (opts.offset) {
	                    container.offset(opts.offset);
	                } else {
	                    container.offset(getOffset(container, offsetElement));
	                }
	            }

	            updateHelperLocations();

	            if (opts.showPalette) {
	                drawPalette();
	            }

	            boundElement.trigger('reflow.spectrum');
	        }

	        function destroy() {
	            boundElement.show();
	            offsetElement.unbind("click.spectrum touchstart.spectrum");
	            container.remove();
	            replacer.remove();
	            spectrums[spect.id] = null;
	        }

	        function option(optionName, optionValue) {
	            if (optionName === undefined) {
	                return $.extend({}, opts);
	            }
	            if (optionValue === undefined) {
	                return opts[optionName];
	            }

	            opts[optionName] = optionValue;

	            if (optionName === "preferredFormat") {
	                currentPreferredFormat = opts.preferredFormat;
	            }
	            applyOptions();
	        }

	        function enable() {
	            disabled = false;
	            boundElement.attr("disabled", false);
	            offsetElement.removeClass("sp-disabled");
	        }

	        function disable() {
	            hide();
	            disabled = true;
	            boundElement.attr("disabled", true);
	            offsetElement.addClass("sp-disabled");
	        }

	        function setOffset(coord) {
	            opts.offset = coord;
	            reflow();
	        }

	        initialize();

	        var spect = {
	            show: show,
	            hide: hide,
	            toggle: toggle,
	            reflow: reflow,
	            option: option,
	            enable: enable,
	            disable: disable,
	            offset: setOffset,
	            set: function set(c) {
	                _set(c);
	                updateOriginalInput();
	            },
	            get: get,
	            destroy: destroy,
	            container: container
	        };

	        spect.id = spectrums.push(spect) - 1;

	        return spect;
	    }

	    /**
	    * checkOffset - get the offset below/above and left/right element depending on screen position
	    * Thanks https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js
	    */
	    function getOffset(picker, input) {
	        var extraY = 0;
	        var dpWidth = picker.outerWidth();
	        var dpHeight = picker.outerHeight();
	        var inputHeight = input.outerHeight();
	        var doc = picker[0].ownerDocument;
	        var docElem = doc.documentElement;
	        var viewWidth = docElem.clientWidth + $(doc).scrollLeft();
	        var viewHeight = docElem.clientHeight + $(doc).scrollTop();
	        var offset = input.offset();
	        offset.top += inputHeight;

	        offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);

	        offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight - extraY) : extraY);

	        return offset;
	    }

	    /**
	    * noop - do nothing
	    */
	    function noop() {}

	    /**
	    * stopPropagation - makes the code only doing this a little easier to read in line
	    */
	    function stopPropagation(e) {
	        e.stopPropagation();
	    }

	    /**
	    * Create a function bound to a given object
	    * Thanks to underscore.js
	    */
	    function bind(func, obj) {
	        var slice = Array.prototype.slice;
	        var args = slice.call(arguments, 2);
	        return function () {
	            return func.apply(obj, args.concat(slice.call(arguments)));
	        };
	    }

	    /**
	    * Lightweight drag helper.  Handles containment within the element, so that
	    * when dragging, the x is within [0,element.width] and y is within [0,element.height]
	    */
	    function draggable(element, onmove, onstart, onstop) {
	        onmove = onmove || function () {};
	        onstart = onstart || function () {};
	        onstop = onstop || function () {};
	        var doc = document;
	        var dragging = false;
	        var offset = {};
	        var maxHeight = 0;
	        var maxWidth = 0;
	        var hasTouch = 'ontouchstart' in window;

	        var duringDragEvents = {};
	        duringDragEvents["selectstart"] = prevent;
	        duringDragEvents["dragstart"] = prevent;
	        duringDragEvents["touchmove mousemove"] = move;
	        duringDragEvents["touchend mouseup"] = stop;

	        function prevent(e) {
	            if (e.stopPropagation) {
	                e.stopPropagation();
	            }
	            if (e.preventDefault) {
	                e.preventDefault();
	            }
	            e.returnValue = false;
	        }

	        function move(e) {
	            if (dragging) {
	                // Mouseup happened outside of window
	                if (IE && doc.documentMode < 9 && !e.button) {
	                    return stop();
	                }

	                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];
	                var pageX = t0 && t0.pageX || e.pageX;
	                var pageY = t0 && t0.pageY || e.pageY;

	                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));
	                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));

	                if (hasTouch) {
	                    // Stop scrolling in iOS
	                    prevent(e);
	                }

	                onmove.apply(element, [dragX, dragY, e]);
	            }
	        }

	        function start(e) {
	            var rightclick = e.which ? e.which == 3 : e.button == 2;

	            if (!rightclick && !dragging) {
	                if (onstart.apply(element, arguments) !== false) {
	                    dragging = true;
	                    maxHeight = $(element).height();
	                    maxWidth = $(element).width();
	                    offset = $(element).offset();

	                    $(doc).bind(duringDragEvents);
	                    $(doc.body).addClass("sp-dragging");

	                    move(e);

	                    prevent(e);
	                }
	            }
	        }

	        function stop() {
	            if (dragging) {
	                $(doc).unbind(duringDragEvents);
	                $(doc.body).removeClass("sp-dragging");

	                // Wait a tick before notifying observers to allow the click event
	                // to fire in Chrome.
	                setTimeout(function () {
	                    onstop.apply(element, arguments);
	                }, 0);
	            }
	            dragging = false;
	        }

	        $(element).bind("touchstart mousedown", start);
	    }

	    function throttle(func, wait, debounce) {
	        var timeout;
	        return function () {
	            var context = this,
	                args = arguments;
	            var throttler = function throttler() {
	                timeout = null;
	                func.apply(context, args);
	            };
	            if (debounce) clearTimeout(timeout);
	            if (debounce || !timeout) timeout = setTimeout(throttler, wait);
	        };
	    }

	    function inputTypeColorSupport() {
	        return $.fn.spectrum.inputTypeColorSupport();
	    }

	    /**
	    * Define a jQuery plugin
	    */
	    var dataID = "spectrum.id";
	    $.fn.spectrum = function (opts, extra) {

	        if (typeof opts == "string") {

	            var returnValue = this;
	            var args = Array.prototype.slice.call(arguments, 1);

	            this.each(function () {
	                var spect = spectrums[$(this).data(dataID)];
	                if (spect) {
	                    var method = spect[opts];
	                    if (!method) {
	                        throw new Error("Spectrum: no such method: '" + opts + "'");
	                    }

	                    if (opts == "get") {
	                        returnValue = spect.get();
	                    } else if (opts == "container") {
	                        returnValue = spect.container;
	                    } else if (opts == "option") {
	                        returnValue = spect.option.apply(spect, args);
	                    } else if (opts == "destroy") {
	                        spect.destroy();
	                        $(this).removeData(dataID);
	                    } else {
	                        method.apply(spect, args);
	                    }
	                }
	            });

	            return returnValue;
	        }

	        // Initializing a new instance of spectrum
	        return this.spectrum("destroy").each(function () {
	            var options = $.extend({}, opts, $(this).data());
	            var spect = spectrum(this, options);
	            $(this).data(dataID, spect.id);
	        });
	    };

	    $.fn.spectrum.load = true;
	    $.fn.spectrum.loadOpts = {};
	    $.fn.spectrum.draggable = draggable;
	    $.fn.spectrum.defaults = defaultOpts;
	    $.fn.spectrum.inputTypeColorSupport = function inputTypeColorSupport() {
	        if (typeof inputTypeColorSupport._cachedResult === "undefined") {
	            var colorInput = $("<input type='color'/>")[0]; // if color element is supported, value will default to not null
	            inputTypeColorSupport._cachedResult = colorInput.type === "color" && colorInput.value !== "";
	        }
	        return inputTypeColorSupport._cachedResult;
	    };

	    $.spectrum = {};
	    $.spectrum.localization = {};
	    $.spectrum.palettes = {};

	    $.fn.spectrum.processNativeColorInputs = function () {
	        var colorInputs = $("input[type=color]");
	        if (colorInputs.length && !inputTypeColorSupport()) {
	            colorInputs.spectrum({
	                preferredFormat: "hex6"
	            });
	        }
	    };

	    // TinyColor v1.1.2
	    // https://github.com/bgrins/TinyColor
	    // Brian Grinstead, MIT License

	    (function () {

	        var trimLeft = /^[\s,#]+/,
	            trimRight = /\s+$/,
	            tinyCounter = 0,
	            math = Math,
	            mathRound = math.round,
	            mathMin = math.min,
	            mathMax = math.max,
	            mathRandom = math.random;

	        var tinycolor = function tinycolor(color, opts) {

	            color = color ? color : '';
	            opts = opts || {};

	            // If input is already a tinycolor, return itself
	            if (color instanceof tinycolor) {
	                return color;
	            }
	            // If we are called as a function, call using new instead
	            if (!(this instanceof tinycolor)) {
	                return new tinycolor(color, opts);
	            }

	            var rgb = inputToRGB(color);
	            this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
	            this._gradientType = opts.gradientType;

	            // Don't let the range of [0,255] come back in [0,1].
	            // Potentially lose a little bit of precision here, but will fix issues where
	            // .5 gets interpreted as half of the total, instead of half of 1
	            // If it was supposed to be 128, this was already taken care of by `inputToRgb`
	            if (this._r < 1) {
	                this._r = mathRound(this._r);
	            }
	            if (this._g < 1) {
	                this._g = mathRound(this._g);
	            }
	            if (this._b < 1) {
	                this._b = mathRound(this._b);
	            }

	            this._ok = rgb.ok;
	            this._tc_id = tinyCounter++;
	        };

	        tinycolor.prototype = {
	            isDark: function isDark() {
	                return this.getBrightness() < 128;
	            },
	            isLight: function isLight() {
	                return !this.isDark();
	            },
	            isValid: function isValid() {
	                return this._ok;
	            },
	            getOriginalInput: function getOriginalInput() {
	                return this._originalInput;
	            },
	            getFormat: function getFormat() {
	                return this._format;
	            },
	            getAlpha: function getAlpha() {
	                return this._a;
	            },
	            getBrightness: function getBrightness() {
	                var rgb = this.toRgb();
	                return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
	            },
	            setAlpha: function setAlpha(value) {
	                this._a = boundAlpha(value);
	                this._roundA = mathRound(100 * this._a) / 100;
	                return this;
	            },
	            toHsv: function toHsv() {
	                var hsv = rgbToHsv(this._r, this._g, this._b);
	                return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
	            },
	            toHsvString: function toHsvString() {
	                var hsv = rgbToHsv(this._r, this._g, this._b);
	                var h = mathRound(hsv.h * 360),
	                    s = mathRound(hsv.s * 100),
	                    v = mathRound(hsv.v * 100);
	                return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
	            },
	            toHsl: function toHsl() {
	                var hsl = rgbToHsl(this._r, this._g, this._b);
	                return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
	            },
	            toHslString: function toHslString() {
	                var hsl = rgbToHsl(this._r, this._g, this._b);
	                var h = mathRound(hsl.h * 360),
	                    s = mathRound(hsl.s * 100),
	                    l = mathRound(hsl.l * 100);
	                return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
	            },
	            toHex: function toHex(allow3Char) {
	                return rgbToHex(this._r, this._g, this._b, allow3Char);
	            },
	            toHexString: function toHexString(allow3Char) {
	                return '#' + this.toHex(allow3Char);
	            },
	            toHex8: function toHex8() {
	                return rgbaToHex(this._r, this._g, this._b, this._a);
	            },
	            toHex8String: function toHex8String() {
	                return '#' + this.toHex8();
	            },
	            toRgb: function toRgb() {
	                return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
	            },
	            toRgbString: function toRgbString() {
	                return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
	            },
	            toPercentageRgb: function toPercentageRgb() {
	                return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
	            },
	            toPercentageRgbString: function toPercentageRgbString() {
	                return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
	            },
	            toName: function toName() {
	                if (this._a === 0) {
	                    return "transparent";
	                }

	                if (this._a < 1) {
	                    return false;
	                }

	                return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
	            },
	            toFilter: function toFilter(secondColor) {
	                var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);
	                var secondHex8String = hex8String;
	                var gradientType = this._gradientType ? "GradientType = 1, " : "";

	                if (secondColor) {
	                    var s = tinycolor(secondColor);
	                    secondHex8String = s.toHex8String();
	                }

	                return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
	            },
	            toString: function toString(format) {
	                var formatSet = !!format;
	                format = format || this._format;

	                var formattedString = false;
	                var hasAlpha = this._a < 1 && this._a >= 0;
	                var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "name");

	                if (needsAlphaFormat) {
	                    // Special case for "transparent", all other non-alpha formats
	                    // will return rgba when there is transparency.
	                    if (format === "name" && this._a === 0) {
	                        return this.toName();
	                    }
	                    return this.toRgbString();
	                }
	                if (format === "rgb") {
	                    formattedString = this.toRgbString();
	                }
	                if (format === "prgb") {
	                    formattedString = this.toPercentageRgbString();
	                }
	                if (format === "hex" || format === "hex6") {
	                    formattedString = this.toHexString();
	                }
	                if (format === "hex3") {
	                    formattedString = this.toHexString(true);
	                }
	                if (format === "hex8") {
	                    formattedString = this.toHex8String();
	                }
	                if (format === "name") {
	                    formattedString = this.toName();
	                }
	                if (format === "hsl") {
	                    formattedString = this.toHslString();
	                }
	                if (format === "hsv") {
	                    formattedString = this.toHsvString();
	                }

	                return formattedString || this.toHexString();
	            },

	            _applyModification: function _applyModification(fn, args) {
	                var color = fn.apply(null, [this].concat([].slice.call(args)));
	                this._r = color._r;
	                this._g = color._g;
	                this._b = color._b;
	                this.setAlpha(color._a);
	                return this;
	            },
	            lighten: function lighten() {
	                return this._applyModification(_lighten, arguments);
	            },
	            brighten: function brighten() {
	                return this._applyModification(_brighten, arguments);
	            },
	            darken: function darken() {
	                return this._applyModification(_darken, arguments);
	            },
	            desaturate: function desaturate() {
	                return this._applyModification(_desaturate, arguments);
	            },
	            saturate: function saturate() {
	                return this._applyModification(_saturate, arguments);
	            },
	            greyscale: function greyscale() {
	                return this._applyModification(_greyscale, arguments);
	            },
	            spin: function spin() {
	                return this._applyModification(_spin, arguments);
	            },

	            _applyCombination: function _applyCombination(fn, args) {
	                return fn.apply(null, [this].concat([].slice.call(args)));
	            },
	            analogous: function analogous() {
	                return this._applyCombination(_analogous, arguments);
	            },
	            complement: function complement() {
	                return this._applyCombination(_complement, arguments);
	            },
	            monochromatic: function monochromatic() {
	                return this._applyCombination(_monochromatic, arguments);
	            },
	            splitcomplement: function splitcomplement() {
	                return this._applyCombination(_splitcomplement, arguments);
	            },
	            triad: function triad() {
	                return this._applyCombination(_triad, arguments);
	            },
	            tetrad: function tetrad() {
	                return this._applyCombination(_tetrad, arguments);
	            }
	        };

	        // If input is an object, force 1 into "1.0" to handle ratios properly
	        // String input requires "1.0" as input, so 1 will be treated as 1
	        tinycolor.fromRatio = function (color, opts) {
	            if ((typeof color === 'undefined' ? 'undefined' : _typeof(color)) == "object") {
	                var newColor = {};
	                for (var i in color) {
	                    if (color.hasOwnProperty(i)) {
	                        if (i === "a") {
	                            newColor[i] = color[i];
	                        } else {
	                            newColor[i] = convertToPercentage(color[i]);
	                        }
	                    }
	                }
	                color = newColor;
	            }

	            return tinycolor(color, opts);
	        };

	        // Given a string or object, convert that input to RGB
	        // Possible string inputs:
	        //
	        //     "red"
	        //     "#f00" or "f00"
	        //     "#ff0000" or "ff0000"
	        //     "#ff000000" or "ff000000"
	        //     "rgb 255 0 0" or "rgb (255, 0, 0)"
	        //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
	        //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
	        //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
	        //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
	        //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
	        //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
	        //
	        function inputToRGB(color) {

	            var rgb = { r: 0, g: 0, b: 0 };
	            var a = 1;
	            var ok = false;
	            var format = false;

	            if (typeof color == "string") {
	                color = stringInputToObject(color);
	            }

	            if ((typeof color === 'undefined' ? 'undefined' : _typeof(color)) == "object") {
	                if (color.hasOwnProperty("r") && color.hasOwnProperty("g") && color.hasOwnProperty("b")) {
	                    rgb = rgbToRgb(color.r, color.g, color.b);
	                    ok = true;
	                    format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
	                } else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("v")) {
	                    color.s = convertToPercentage(color.s);
	                    color.v = convertToPercentage(color.v);
	                    rgb = hsvToRgb(color.h, color.s, color.v);
	                    ok = true;
	                    format = "hsv";
	                } else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("l")) {
	                    color.s = convertToPercentage(color.s);
	                    color.l = convertToPercentage(color.l);
	                    rgb = hslToRgb(color.h, color.s, color.l);
	                    ok = true;
	                    format = "hsl";
	                }

	                if (color.hasOwnProperty("a")) {
	                    a = color.a;
	                }
	            }

	            a = boundAlpha(a);

	            return {
	                ok: ok,
	                format: color.format || format,
	                r: mathMin(255, mathMax(rgb.r, 0)),
	                g: mathMin(255, mathMax(rgb.g, 0)),
	                b: mathMin(255, mathMax(rgb.b, 0)),
	                a: a
	            };
	        }

	        // Conversion Functions
	        // --------------------

	        // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
	        // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

	        // `rgbToRgb`
	        // Handle bounds / percentage checking to conform to CSS color spec
	        // <http://www.w3.org/TR/css3-color/>
	        // *Assumes:* r, g, b in [0, 255] or [0, 1]
	        // *Returns:* { r, g, b } in [0, 255]
	        function rgbToRgb(r, g, b) {
	            return {
	                r: bound01(r, 255) * 255,
	                g: bound01(g, 255) * 255,
	                b: bound01(b, 255) * 255
	            };
	        }

	        // `rgbToHsl`
	        // Converts an RGB color value to HSL.
	        // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
	        // *Returns:* { h, s, l } in [0,1]
	        function rgbToHsl(r, g, b) {

	            r = bound01(r, 255);
	            g = bound01(g, 255);
	            b = bound01(b, 255);

	            var max = mathMax(r, g, b),
	                min = mathMin(r, g, b);
	            var h,
	                s,
	                l = (max + min) / 2;

	            if (max == min) {
	                h = s = 0; // achromatic
	            } else {
	                var d = max - min;
	                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	                switch (max) {
	                    case r:
	                        h = (g - b) / d + (g < b ? 6 : 0);break;
	                    case g:
	                        h = (b - r) / d + 2;break;
	                    case b:
	                        h = (r - g) / d + 4;break;
	                }

	                h /= 6;
	            }

	            return { h: h, s: s, l: l };
	        }

	        // `hslToRgb`
	        // Converts an HSL color value to RGB.
	        // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
	        // *Returns:* { r, g, b } in the set [0, 255]
	        function hslToRgb(h, s, l) {
	            var r, g, b;

	            h = bound01(h, 360);
	            s = bound01(s, 100);
	            l = bound01(l, 100);

	            function hue2rgb(p, q, t) {
	                if (t < 0) t += 1;
	                if (t > 1) t -= 1;
	                if (t < 1 / 6) return p + (q - p) * 6 * t;
	                if (t < 1 / 2) return q;
	                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
	                return p;
	            }

	            if (s === 0) {
	                r = g = b = l; // achromatic
	            } else {
	                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	                var p = 2 * l - q;
	                r = hue2rgb(p, q, h + 1 / 3);
	                g = hue2rgb(p, q, h);
	                b = hue2rgb(p, q, h - 1 / 3);
	            }

	            return { r: r * 255, g: g * 255, b: b * 255 };
	        }

	        // `rgbToHsv`
	        // Converts an RGB color value to HSV
	        // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
	        // *Returns:* { h, s, v } in [0,1]
	        function rgbToHsv(r, g, b) {

	            r = bound01(r, 255);
	            g = bound01(g, 255);
	            b = bound01(b, 255);

	            var max = mathMax(r, g, b),
	                min = mathMin(r, g, b);
	            var h,
	                s,
	                v = max;

	            var d = max - min;
	            s = max === 0 ? 0 : d / max;

	            if (max == min) {
	                h = 0; // achromatic
	            } else {
	                switch (max) {
	                    case r:
	                        h = (g - b) / d + (g < b ? 6 : 0);break;
	                    case g:
	                        h = (b - r) / d + 2;break;
	                    case b:
	                        h = (r - g) / d + 4;break;
	                }
	                h /= 6;
	            }
	            return { h: h, s: s, v: v };
	        }

	        // `hsvToRgb`
	        // Converts an HSV color value to RGB.
	        // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
	        // *Returns:* { r, g, b } in the set [0, 255]
	        function hsvToRgb(h, s, v) {

	            h = bound01(h, 360) * 6;
	            s = bound01(s, 100);
	            v = bound01(v, 100);

	            var i = math.floor(h),
	                f = h - i,
	                p = v * (1 - s),
	                q = v * (1 - f * s),
	                t = v * (1 - (1 - f) * s),
	                mod = i % 6,
	                r = [v, q, p, p, t, v][mod],
	                g = [t, v, v, q, p, p][mod],
	                b = [p, p, t, v, v, q][mod];

	            return { r: r * 255, g: g * 255, b: b * 255 };
	        }

	        // `rgbToHex`
	        // Converts an RGB color to hex
	        // Assumes r, g, and b are contained in the set [0, 255]
	        // Returns a 3 or 6 character hex
	        function rgbToHex(r, g, b, allow3Char) {

	            var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];

	            // Return a 3 character hex if possible
	            if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
	                return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
	            }

	            return hex.join("");
	        }
	        // `rgbaToHex`
	        // Converts an RGBA color plus alpha transparency to hex
	        // Assumes r, g, b and a are contained in the set [0, 255]
	        // Returns an 8 character hex
	        function rgbaToHex(r, g, b, a) {

	            var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];

	            return hex.join("");
	        }

	        // `equals`
	        // Can be called with any tinycolor input
	        tinycolor.equals = function (color1, color2) {
	            if (!color1 || !color2) {
	                return false;
	            }
	            return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
	        };
	        tinycolor.random = function () {
	            return tinycolor.fromRatio({
	                r: mathRandom(),
	                g: mathRandom(),
	                b: mathRandom()
	            });
	        };

	        // Modification Functions
	        // ----------------------
	        // Thanks to less.js for some of the basics here
	        // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

	        function _desaturate(color, amount) {
	            amount = amount === 0 ? 0 : amount || 10;
	            var hsl = tinycolor(color).toHsl();
	            hsl.s -= amount / 100;
	            hsl.s = clamp01(hsl.s);
	            return tinycolor(hsl);
	        }

	        function _saturate(color, amount) {
	            amount = amount === 0 ? 0 : amount || 10;
	            var hsl = tinycolor(color).toHsl();
	            hsl.s += amount / 100;
	            hsl.s = clamp01(hsl.s);
	            return tinycolor(hsl);
	        }

	        function _greyscale(color) {
	            return tinycolor(color).desaturate(100);
	        }

	        function _lighten(color, amount) {
	            amount = amount === 0 ? 0 : amount || 10;
	            var hsl = tinycolor(color).toHsl();
	            hsl.l += amount / 100;
	            hsl.l = clamp01(hsl.l);
	            return tinycolor(hsl);
	        }

	        function _brighten(color, amount) {
	            amount = amount === 0 ? 0 : amount || 10;
	            var rgb = tinycolor(color).toRgb();
	            rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
	            rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
	            rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
	            return tinycolor(rgb);
	        }

	        function _darken(color, amount) {
	            amount = amount === 0 ? 0 : amount || 10;
	            var hsl = tinycolor(color).toHsl();
	            hsl.l -= amount / 100;
	            hsl.l = clamp01(hsl.l);
	            return tinycolor(hsl);
	        }

	        // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
	        // Values outside of this range will be wrapped into this range.
	        function _spin(color, amount) {
	            var hsl = tinycolor(color).toHsl();
	            var hue = (mathRound(hsl.h) + amount) % 360;
	            hsl.h = hue < 0 ? 360 + hue : hue;
	            return tinycolor(hsl);
	        }

	        // Combination Functions
	        // ---------------------
	        // Thanks to jQuery xColor for some of the ideas behind these
	        // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

	        function _complement(color) {
	            var hsl = tinycolor(color).toHsl();
	            hsl.h = (hsl.h + 180) % 360;
	            return tinycolor(hsl);
	        }

	        function _triad(color) {
	            var hsl = tinycolor(color).toHsl();
	            var h = hsl.h;
	            return [tinycolor(color), tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }), tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })];
	        }

	        function _tetrad(color) {
	            var hsl = tinycolor(color).toHsl();
	            var h = hsl.h;
	            return [tinycolor(color), tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }), tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }), tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })];
	        }

	        function _splitcomplement(color) {
	            var hsl = tinycolor(color).toHsl();
	            var h = hsl.h;
	            return [tinycolor(color), tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }), tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l })];
	        }

	        function _analogous(color, results, slices) {
	            results = results || 6;
	            slices = slices || 30;

	            var hsl = tinycolor(color).toHsl();
	            var part = 360 / slices;
	            var ret = [tinycolor(color)];

	            for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
	                hsl.h = (hsl.h + part) % 360;
	                ret.push(tinycolor(hsl));
	            }
	            return ret;
	        }

	        function _monochromatic(color, results) {
	            results = results || 6;
	            var hsv = tinycolor(color).toHsv();
	            var h = hsv.h,
	                s = hsv.s,
	                v = hsv.v;
	            var ret = [];
	            var modification = 1 / results;

	            while (results--) {
	                ret.push(tinycolor({ h: h, s: s, v: v }));
	                v = (v + modification) % 1;
	            }

	            return ret;
	        }

	        // Utility Functions
	        // ---------------------

	        tinycolor.mix = function (color1, color2, amount) {
	            amount = amount === 0 ? 0 : amount || 50;

	            var rgb1 = tinycolor(color1).toRgb();
	            var rgb2 = tinycolor(color2).toRgb();

	            var p = amount / 100;
	            var w = p * 2 - 1;
	            var a = rgb2.a - rgb1.a;

	            var w1;

	            if (w * a == -1) {
	                w1 = w;
	            } else {
	                w1 = (w + a) / (1 + w * a);
	            }

	            w1 = (w1 + 1) / 2;

	            var w2 = 1 - w1;

	            var rgba = {
	                r: rgb2.r * w1 + rgb1.r * w2,
	                g: rgb2.g * w1 + rgb1.g * w2,
	                b: rgb2.b * w1 + rgb1.b * w2,
	                a: rgb2.a * p + rgb1.a * (1 - p)
	            };

	            return tinycolor(rgba);
	        };

	        // Readability Functions
	        // ---------------------
	        // <http://www.w3.org/TR/AERT#color-contrast>

	        // `readability`
	        // Analyze the 2 colors and returns an object with the following properties:
	        //    `brightness`: difference in brightness between the two colors
	        //    `color`: difference in color/hue between the two colors
	        tinycolor.readability = function (color1, color2) {
	            var c1 = tinycolor(color1);
	            var c2 = tinycolor(color2);
	            var rgb1 = c1.toRgb();
	            var rgb2 = c2.toRgb();
	            var brightnessA = c1.getBrightness();
	            var brightnessB = c2.getBrightness();
	            var colorDiff = Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) + Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) + Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b);

	            return {
	                brightness: Math.abs(brightnessA - brightnessB),
	                color: colorDiff
	            };
	        };

	        // `readable`
	        // http://www.w3.org/TR/AERT#color-contrast
	        // Ensure that foreground and background color combinations provide sufficient contrast.
	        // *Example*
	        //    tinycolor.isReadable("#000", "#111") => false
	        tinycolor.isReadable = function (color1, color2) {
	            var readability = tinycolor.readability(color1, color2);
	            return readability.brightness > 125 && readability.color > 500;
	        };

	        // `mostReadable`
	        // Given a base color and a list of possible foreground or background
	        // colors for that base, returns the most readable color.
	        // *Example*
	        //    tinycolor.mostReadable("#123", ["#fff", "#000"]) => "#000"
	        tinycolor.mostReadable = function (baseColor, colorList) {
	            var bestColor = null;
	            var bestScore = 0;
	            var bestIsReadable = false;
	            for (var i = 0; i < colorList.length; i++) {

	                // We normalize both around the "acceptable" breaking point,
	                // but rank brightness constrast higher than hue.

	                var readability = tinycolor.readability(baseColor, colorList[i]);
	                var readable = readability.brightness > 125 && readability.color > 500;
	                var score = 3 * (readability.brightness / 125) + readability.color / 500;

	                if (readable && !bestIsReadable || readable && bestIsReadable && score > bestScore || !readable && !bestIsReadable && score > bestScore) {
	                    bestIsReadable = readable;
	                    bestScore = score;
	                    bestColor = tinycolor(colorList[i]);
	                }
	            }
	            return bestColor;
	        };

	        // Big List of Colors
	        // ------------------
	        // <http://www.w3.org/TR/css3-color/#svg-color>
	        var names = tinycolor.names = {
	            aliceblue: "f0f8ff",
	            antiquewhite: "faebd7",
	            aqua: "0ff",
	            aquamarine: "7fffd4",
	            azure: "f0ffff",
	            beige: "f5f5dc",
	            bisque: "ffe4c4",
	            black: "000",
	            blanchedalmond: "ffebcd",
	            blue: "00f",
	            blueviolet: "8a2be2",
	            brown: "a52a2a",
	            burlywood: "deb887",
	            burntsienna: "ea7e5d",
	            cadetblue: "5f9ea0",
	            chartreuse: "7fff00",
	            chocolate: "d2691e",
	            coral: "ff7f50",
	            cornflowerblue: "6495ed",
	            cornsilk: "fff8dc",
	            crimson: "dc143c",
	            cyan: "0ff",
	            darkblue: "00008b",
	            darkcyan: "008b8b",
	            darkgoldenrod: "b8860b",
	            darkgray: "a9a9a9",
	            darkgreen: "006400",
	            darkgrey: "a9a9a9",
	            darkkhaki: "bdb76b",
	            darkmagenta: "8b008b",
	            darkolivegreen: "556b2f",
	            darkorange: "ff8c00",
	            darkorchid: "9932cc",
	            darkred: "8b0000",
	            darksalmon: "e9967a",
	            darkseagreen: "8fbc8f",
	            darkslateblue: "483d8b",
	            darkslategray: "2f4f4f",
	            darkslategrey: "2f4f4f",
	            darkturquoise: "00ced1",
	            darkviolet: "9400d3",
	            deeppink: "ff1493",
	            deepskyblue: "00bfff",
	            dimgray: "696969",
	            dimgrey: "696969",
	            dodgerblue: "1e90ff",
	            firebrick: "b22222",
	            floralwhite: "fffaf0",
	            forestgreen: "228b22",
	            fuchsia: "f0f",
	            gainsboro: "dcdcdc",
	            ghostwhite: "f8f8ff",
	            gold: "ffd700",
	            goldenrod: "daa520",
	            gray: "808080",
	            green: "008000",
	            greenyellow: "adff2f",
	            grey: "808080",
	            honeydew: "f0fff0",
	            hotpink: "ff69b4",
	            indianred: "cd5c5c",
	            indigo: "4b0082",
	            ivory: "fffff0",
	            khaki: "f0e68c",
	            lavender: "e6e6fa",
	            lavenderblush: "fff0f5",
	            lawngreen: "7cfc00",
	            lemonchiffon: "fffacd",
	            lightblue: "add8e6",
	            lightcoral: "f08080",
	            lightcyan: "e0ffff",
	            lightgoldenrodyellow: "fafad2",
	            lightgray: "d3d3d3",
	            lightgreen: "90ee90",
	            lightgrey: "d3d3d3",
	            lightpink: "ffb6c1",
	            lightsalmon: "ffa07a",
	            lightseagreen: "20b2aa",
	            lightskyblue: "87cefa",
	            lightslategray: "789",
	            lightslategrey: "789",
	            lightsteelblue: "b0c4de",
	            lightyellow: "ffffe0",
	            lime: "0f0",
	            limegreen: "32cd32",
	            linen: "faf0e6",
	            magenta: "f0f",
	            maroon: "800000",
	            mediumaquamarine: "66cdaa",
	            mediumblue: "0000cd",
	            mediumorchid: "ba55d3",
	            mediumpurple: "9370db",
	            mediumseagreen: "3cb371",
	            mediumslateblue: "7b68ee",
	            mediumspringgreen: "00fa9a",
	            mediumturquoise: "48d1cc",
	            mediumvioletred: "c71585",
	            midnightblue: "191970",
	            mintcream: "f5fffa",
	            mistyrose: "ffe4e1",
	            moccasin: "ffe4b5",
	            navajowhite: "ffdead",
	            navy: "000080",
	            oldlace: "fdf5e6",
	            olive: "808000",
	            olivedrab: "6b8e23",
	            orange: "ffa500",
	            orangered: "ff4500",
	            orchid: "da70d6",
	            palegoldenrod: "eee8aa",
	            palegreen: "98fb98",
	            paleturquoise: "afeeee",
	            palevioletred: "db7093",
	            papayawhip: "ffefd5",
	            peachpuff: "ffdab9",
	            peru: "cd853f",
	            pink: "ffc0cb",
	            plum: "dda0dd",
	            powderblue: "b0e0e6",
	            purple: "800080",
	            rebeccapurple: "663399",
	            red: "f00",
	            rosybrown: "bc8f8f",
	            royalblue: "4169e1",
	            saddlebrown: "8b4513",
	            salmon: "fa8072",
	            sandybrown: "f4a460",
	            seagreen: "2e8b57",
	            seashell: "fff5ee",
	            sienna: "a0522d",
	            silver: "c0c0c0",
	            skyblue: "87ceeb",
	            slateblue: "6a5acd",
	            slategray: "708090",
	            slategrey: "708090",
	            snow: "fffafa",
	            springgreen: "00ff7f",
	            steelblue: "4682b4",
	            tan: "d2b48c",
	            teal: "008080",
	            thistle: "d8bfd8",
	            tomato: "ff6347",
	            turquoise: "40e0d0",
	            violet: "ee82ee",
	            wheat: "f5deb3",
	            white: "fff",
	            whitesmoke: "f5f5f5",
	            yellow: "ff0",
	            yellowgreen: "9acd32"
	        };

	        // Make it easy to access colors via `hexNames[hex]`
	        var hexNames = tinycolor.hexNames = flip(names);

	        // Utilities
	        // ---------

	        // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
	        function flip(o) {
	            var flipped = {};
	            for (var i in o) {
	                if (o.hasOwnProperty(i)) {
	                    flipped[o[i]] = i;
	                }
	            }
	            return flipped;
	        }

	        // Return a valid alpha value [0,1] with all invalid values being set to 1
	        function boundAlpha(a) {
	            a = parseFloat(a);

	            if (isNaN(a) || a < 0 || a > 1) {
	                a = 1;
	            }

	            return a;
	        }

	        // Take input from [0, n] and return it as [0, 1]
	        function bound01(n, max) {
	            if (isOnePointZero(n)) {
	                n = "100%";
	            }

	            var processPercent = isPercentage(n);
	            n = mathMin(max, mathMax(0, parseFloat(n)));

	            // Automatically convert percentage into number
	            if (processPercent) {
	                n = parseInt(n * max, 10) / 100;
	            }

	            // Handle floating point rounding errors
	            if (math.abs(n - max) < 0.000001) {
	                return 1;
	            }

	            // Convert into [0, 1] range if it isn't already
	            return n % max / parseFloat(max);
	        }

	        // Force a number between 0 and 1
	        function clamp01(val) {
	            return mathMin(1, mathMax(0, val));
	        }

	        // Parse a base-16 hex value into a base-10 integer
	        function parseIntFromHex(val) {
	            return parseInt(val, 16);
	        }

	        // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
	        // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
	        function isOnePointZero(n) {
	            return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
	        }

	        // Check to see if string passed in is a percentage
	        function isPercentage(n) {
	            return typeof n === "string" && n.indexOf('%') != -1;
	        }

	        // Force a hex value to have 2 characters
	        function pad2(c) {
	            return c.length == 1 ? '0' + c : '' + c;
	        }

	        // Replace a decimal with it's percentage value
	        function convertToPercentage(n) {
	            if (n <= 1) {
	                n = n * 100 + "%";
	            }

	            return n;
	        }

	        // Converts a decimal to a hex value
	        function convertDecimalToHex(d) {
	            return Math.round(parseFloat(d) * 255).toString(16);
	        }
	        // Converts a hex value to a decimal
	        function convertHexToDecimal(h) {
	            return parseIntFromHex(h) / 255;
	        }

	        var matchers = function () {

	            // <http://www.w3.org/TR/css3-values/#integers>
	            var CSS_INTEGER = "[-\\+]?\\d+%?";

	            // <http://www.w3.org/TR/css3-values/#number-value>
	            var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

	            // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
	            var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

	            // Actual matching.
	            // Parentheses and commas are optional, but not required.
	            // Whitespace can take the place of commas or opening paren
	            var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
	            var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

	            return {
	                rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
	                rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
	                hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
	                hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
	                hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
	                hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
	                hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
	                hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
	                hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
	            };
	        }();

	        // `stringInputToObject`
	        // Permissive string parsing.  Take in a number of formats, and output an object
	        // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
	        function stringInputToObject(color) {

	            color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
	            var named = false;
	            if (names[color]) {
	                color = names[color];
	                named = true;
	            } else if (color == 'transparent') {
	                return { r: 0, g: 0, b: 0, a: 0, format: "name" };
	            }

	            // Try to match string input using regular expressions.
	            // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
	            // Just return an object and let the conversion functions handle that.
	            // This way the result will be the same whether the tinycolor is initialized with string or object.
	            var match;
	            if (match = matchers.rgb.exec(color)) {
	                return { r: match[1], g: match[2], b: match[3] };
	            }
	            if (match = matchers.rgba.exec(color)) {
	                return { r: match[1], g: match[2], b: match[3], a: match[4] };
	            }
	            if (match = matchers.hsl.exec(color)) {
	                return { h: match[1], s: match[2], l: match[3] };
	            }
	            if (match = matchers.hsla.exec(color)) {
	                return { h: match[1], s: match[2], l: match[3], a: match[4] };
	            }
	            if (match = matchers.hsv.exec(color)) {
	                return { h: match[1], s: match[2], v: match[3] };
	            }
	            if (match = matchers.hsva.exec(color)) {
	                return { h: match[1], s: match[2], v: match[3], a: match[4] };
	            }
	            if (match = matchers.hex8.exec(color)) {
	                return {
	                    a: convertHexToDecimal(match[1]),
	                    r: parseIntFromHex(match[2]),
	                    g: parseIntFromHex(match[3]),
	                    b: parseIntFromHex(match[4]),
	                    format: named ? "name" : "hex8"
	                };
	            }
	            if (match = matchers.hex6.exec(color)) {
	                return {
	                    r: parseIntFromHex(match[1]),
	                    g: parseIntFromHex(match[2]),
	                    b: parseIntFromHex(match[3]),
	                    format: named ? "name" : "hex"
	                };
	            }
	            if (match = matchers.hex3.exec(color)) {
	                return {
	                    r: parseIntFromHex(match[1] + '' + match[1]),
	                    g: parseIntFromHex(match[2] + '' + match[2]),
	                    b: parseIntFromHex(match[3] + '' + match[3]),
	                    format: named ? "name" : "hex"
	                };
	            }

	            return false;
	        }

	        window.tinycolor = tinycolor;
	    })();

	    $(function () {
	        if ($.fn.spectrum.load) {
	            $.fn.spectrum.processNativeColorInputs();
	        }
	    });
	});

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('IndexController', ['$scope', '$window', '$state', 'Global', 'User', '$timeout', function ($scope, $window, $state, Global, User, $timeout) {
	    //console.log("LoginController");
	    //console.log(Global);
	    //console.log(User);
	    var self = this;

	    // var looptimeNow = Date.now();
	    // var loopdt = (looptimeNow - looplastTime)/1000;
	    // var looplastTime = looptimeNow;

	    var runtime = 0;
	    var line_animation_list = [{ x1: 0, y1: 0, x2: 0, y2: 1 }, { x1: 0, y1: 1, x2: 1, y2: 1 }, { x1: 1, y1: 1, x2: 1, y2: 2 }, { x1: 1, y1: 2, x2: 2, y2: 2 }, { x1: 0, y1: 2, x2: 0, y2: 3 }, { x1: 0, y1: 3, x2: 1, y2: 3 }, { x1: 1, y1: 3, x2: 1, y2: 4 }, { x1: 0, y1: 0, x2: 1, y2: 0 }, { x1: 1, y1: 0, x2: 2, y2: 0 }, { x1: 2, y1: 0, x2: 3, y2: 0 }, { x1: 3, y1: 0, x2: 4, y2: 0 }, { x1: 3, y1: 0, x2: 4, y2: 0 }, { x1: 0, y1: 3, x2: 0, y2: 4 }, { x1: 0, y1: 4, x2: 0, y2: 5 }, { x1: 2, y1: 0, x2: 2, y2: 1 }, { x1: 3, y1: 0, x2: 3, y2: 1 }, { x1: 3, y1: 1, x2: 3, y2: 2 }, { x1: 3, y1: 2, x2: 3, y2: 3 }, { x1: 3, y1: 3, x2: 3, y2: 4 }, { x1: 3, y1: 4, x2: 2, y2: 4 }, { x1: 3, y1: 0, x2: 4, y2: 0 }, { x1: 2, y1: 2, x2: 2, y2: 3 }, { x1: 0, y1: 5, x2: 1, y2: 5 }, { x1: 1, y1: 5, x2: 2, y2: 5 }, { x1: 2, y1: 5, x2: 3, y2: 5 }, { x1: 4, y1: 0, x2: 4, y2: 3 }, { x1: 4, y1: 1, x2: 5, y2: 1 }, { x1: 4, y1: 3, x2: 4, y2: 4 }, { x1: 4, y1: 4, x2: 4, y2: 5 }, { x1: 4, y1: 5, x2: 4, y2: 6 }, { x1: 4, y1: 6, x2: 3, y2: 6 }, { x1: 3, y1: 6, x2: 2, y2: 6 }, { x1: 2, y1: 6, x2: 1, y2: 6 }, { x1: 0, y1: 5, x2: 0, y2: 6 }, { x1: 0, y1: 6, x2: 0, y2: 7 }, { x1: 0, y1: 7, x2: 0, y2: 8 }, { x1: 1, y1: 7, x2: 1, y2: 8 }, { x1: 1, y1: 7, x2: 2, y2: 7 }, { x1: 2, y1: 7, x2: 3, y2: 7 }, { x1: 4, y1: 7, x2: 5, y2: 7 }, { x1: 4, y1: 7, x2: 4, y2: 8 }, { x1: 5, y1: 7, x2: 5, y2: 6 }, { x1: 5, y1: 6, x2: 5, y2: 5 }, { x1: 5, y1: 5, x2: 5, y2: 4 }, { x1: 6, y1: 0, x2: 6, y2: 1 }, { x1: 6, y1: 1, x2: 6, y2: 2 }, { x1: 6, y1: 2, x2: 5, y2: 2 }, { x1: 5, y1: 2, x2: 5, y2: 3 }, { x1: 5, y1: 3, x2: 6, y2: 3 }, { x1: 6, y1: 3, x2: 6, y2: 4 }, { x1: 6, y1: 4, x2: 6, y2: 5 }, { x1: 6, y1: 5, x2: 6, y2: 6 }, { x1: 5, y1: 7, x2: 6, y2: 7 }, { x1: 6, y1: 7, x2: 7, y2: 7 }, { x1: 0, y1: 8, x2: 0, y2: 9 }, { x1: 0, y1: 9, x2: 1, y2: 9 }, { x1: 3, y1: 7, x2: 3, y2: 8 }, { x1: 3, y1: 8, x2: 2, y2: 8 }, { x1: 1, y1: 9, x2: 1, y2: 8 }, { x1: 4, y1: 8, x2: 4, y2: 9 }, { x1: 4, y1: 9, x2: 3, y2: 9 }, { x1: 3, y1: 9, x2: 2, y2: 9 }, { x1: 2, y1: 9, x2: 2, y2: 10 }, { x1: 2, y1: 10, x2: 2, y2: 10 }, { x1: 0, y1: 9, x2: 0, y2: 10 }, { x1: 0, y1: 10, x2: 0, y2: 11 }, { x1: 0, y1: 11, x2: 1, y2: 11 }, { x1: 1, y1: 11, x2: 2, y2: 11 }, { x1: 2, y1: 11, x2: 3, y2: 11 }, { x1: 3, y1: 11, x2: 3, y2: 10 }, { x1: 3, y1: 10, x2: 4, y2: 10 }, { x1: 4, y1: 10, x2: 5, y2: 10 }, { x1: 5, y1: 10, x2: 5, y2: 9 }, { x1: 5, y1: 9, x2: 5, y2: 8 }, { x1: 6, y1: 7, x2: 6, y2: 8 }, { x1: 6, y1: 8, x2: 6, y2: 9 }, { x1: 6, y1: 9, x2: 6, y2: 10 }, { x1: 6, y1: 10, x2: 6, y2: 11 }, { x1: 6, y1: 11, x2: 5, y2: 11 }, { x1: 5, y1: 11, x2: 4, y2: 11 }, { x1: 4, y1: 11, x2: 4, y2: 12 }, { x1: 4, y1: 12, x2: 3, y2: 12 }, { x1: 4, y1: 12, x2: 3, y2: 12 }, { x1: 3, y1: 12, x2: 2, y2: 12 }, { x1: 2, y1: 12, x2: 1, y2: 12 }, { x1: 0, y1: 11, x2: 0, y2: 13 }, { x1: 0, y1: 13, x2: 1, y2: 13 }, { x1: 7, y1: 7, x2: 7, y2: 6 }, { x1: 7, y1: 6, x2: 7, y2: 5 }, { x1: 7, y1: 5, x2: 7, y2: 4 }, { x1: 7, y1: 4, x2: 7, y2: 3 }, { x1: 7, y1: 3, x2: 7, y2: 2 }, { x1: 7, y1: 2, x2: 7, y2: 1 }, { x1: 6, y1: 0, x2: 12, y2: 0 }, { x1: 8, y1: 0, x2: 8, y2: 1 }, { x1: 8, y1: 1, x2: 9, y2: 1 }, { x1: 9, y1: 1, x2: 10, y2: 1 }, { x1: 11, y1: 0, x2: 11, y2: 1 }, { x1: 11, y1: 1, x2: 11, y2: 2 }, { x1: 11, y1: 2, x2: 10, y2: 2 }, { x1: 10, y1: 2, x2: 9, y2: 2 }, { x1: 9, y1: 2, x2: 8, y2: 2 }, { x1: 7, y1: 3, x2: 8, y2: 3 }, { x1: 8, y1: 3, x2: 9, y2: 3 }, { x1: 10, y1: 2, x2: 10, y2: 3 }, { x1: 10, y1: 3, x2: 10, y2: 4 }, { x1: 10, y1: 4, x2: 9, y2: 4 }, { x1: 9, y1: 4, x2: 8, y2: 4 }, { x1: 8, y1: 4, x2: 8, y2: 5 }, { x1: 8, y1: 5, x2: 8, y2: 6 }, { x1: 8, y1: 6, x2: 8, y2: 7 }, { x1: 10, y1: 4, x2: 10, y2: 5 }, { x1: 6, y1: 8, x2: 7, y2: 8 }, { x1: 7, y1: 8, x2: 8, y2: 8 }, { x1: 8, y1: 8, x2: 9, y2: 8 }, { x1: 9, y1: 9, x2: 9, y2: 7 }, { x1: 9, y1: 7, x2: 9, y2: 6 }, { x1: 9, y1: 6, x2: 9, y2: 5 }, { x1: 10, y1: 5, x2: 10, y2: 6 }, { x1: 10, y1: 6, x2: 10, y2: 7 }, { x1: 10, y1: 7, x2: 11, y2: 7 }, { x1: 11, y1: 7, x2: 12, y2: 7 }, { x1: 12, y1: 7, x2: 12, y2: 8 }, { x1: 12, y1: 8, x2: 12, y2: 9 }, { x1: 12, y1: 9, x2: 13, y2: 9 }, { x1: 13, y1: 9, x2: 13, y2: 10 }, { x1: 5, y1: 14, x2: 5, y2: 12 }, { x1: 5, y1: 12, x2: 6, y2: 12 }, { x1: 6, y1: 12, x2: 7, y2: 12 }, { x1: 7, y1: 12, x2: 7, y2: 11 }, { x1: 7, y1: 11, x2: 7, y2: 10 }, { x1: 7, y1: 10, x2: 7, y2: 9 }, { x1: 7, y1: 9, x2: 8, y2: 9 }, { x1: 8, y1: 9, x2: 8, y2: 10 }, { x1: 8, y1: 10, x2: 8, y2: 11 }, { x1: 8, y1: 11, x2: 9, y2: 11 }, { x1: 9, y1: 11, x2: 9, y2: 12 }, { x1: 9, y1: 12, x2: 10, y2: 12 }, { x1: 10, y1: 12, x2: 11, y2: 12 }, { x1: 11, y1: 3, x2: 11, y2: 4 }, { x1: 11, y1: 4, x2: 11, y2: 5 }, { x1: 11, y1: 5, x2: 11, y2: 6 }, { x1: 11, y1: 6, x2: 12, y2: 6 }, { x1: 12, y1: 6, x2: 13, y2: 6 }, { x1: 13, y1: 6, x2: 14, y2: 6 }, { x1: 14, y1: 6, x2: 14, y2: 7 }, { x1: 14, y1: 7, x2: 14, y2: 8 }, { x1: 14, y1: 8, x2: 15, y2: 8 }, { x1: 15, y1: 1, x2: 12, y2: 1 }, { x1: 12, y1: 1, x2: 12, y2: 2 }, { x1: 12, y1: 2, x2: 12, y2: 3 }, { x1: 12, y1: 3, x2: 12, y2: 4 }, { x1: 12, y1: 4, x2: 13, y2: 4 }, { x1: 13, y1: 4, x2: 14, y2: 4 }, { x1: 14, y1: 4, x2: 14, y2: 5 }, { x1: 14, y1: 5, x2: 15, y2: 5 }, { x1: 15, y1: 5, x2: 16, y2: 5 }, { x1: 16, y1: 5, x2: 16, y2: 6 }, { x1: 16, y1: 6, x2: 16, y2: 7 }];

	    var getRedColor = function getRedColor() {
	      return Math.floor(Math.random() * 255 + 1);
	    };

	    var getGreenColor = function getGreenColor() {
	      return Math.floor(Math.random() * 255 + 1);
	    };

	    var getBlueColor = function getBlueColor() {
	      return Math.floor(Math.random() * 255 + 1);
	    };

	    var getTransAmount = function getTransAmount() {
	      return Math.random();
	    };
	    var square_animation_list = [{ x: 0, y: 0, w: 1, h: 1 }, { x: 0, y: 1, w: 1, h: 1 }, { x: 0, y: 2, w: 1, h: 1 }, { x: 1, y: 0, w: 1, h: 1 }, { x: 1, y: 1, w: 1, h: 1 }, { x: 1, y: 3, w: 1, h: 1 }, { x: 1, y: 2, w: 1, h: 1 }, { x: 0, y: 3, w: 1, h: 1 }, { x: 0, y: 4, w: 1, h: 1 }, { x: 2, y: 0, w: 1, h: 1 }, { x: 2, y: 1, w: 1, h: 1 }, { x: 2, y: 3, w: 1, h: 1 }, { x: 2, y: 2, w: 1, h: 1 }, { x: 3, y: 0, w: 1, h: 1 }, { x: 4, y: 1, w: 1, h: 1 }, { x: 3, y: 1, w: 1, h: 1 }, { x: 4, y: 0, w: 1, h: 1 }, { x: 2, y: 4, w: 1, h: 1 }, { x: 3, y: 2, w: 1, h: 1 }, { x: 3, y: 3, w: 1, h: 1 }, { x: 1, y: 4, w: 1, h: 1 }, { x: 0, y: 5, w: 1, h: 1 }, { x: 3, y: 4, w: 1, h: 1 }, { x: 3, y: 5, w: 1, h: 1 }, { x: 2, y: 5, w: 1, h: 1 }, { x: 1, y: 5, w: 1, h: 1 }, { x: 0, y: 6, w: 1, h: 1 }, { x: 0, y: 7, w: 1, h: 1 }, { x: 1, y: 6, w: 1, h: 1 }, { x: 1, y: 7, w: 1, h: 1 }, { x: 2, y: 6, w: 1, h: 1 }, { x: 3, y: 6, w: 1, h: 1 }, { x: 4, y: 6, w: 1, h: 1 }, { x: 4, y: 5, w: 1, h: 1 }, { x: 4, y: 4, w: 1, h: 1 }, { x: 4, y: 3, w: 1, h: 1 }, { x: 4, y: 2, w: 1, h: 1 }, { x: 0, y: 8, w: 1, h: 1 }, { x: 0, y: 9, w: 1, h: 1 }, { x: 5, y: 0, w: 1, h: 1 }, { x: 5, y: 1, w: 1, h: 1 }, { x: 2, y: 7, w: 1, h: 1 }, { x: 3, y: 7, w: 1, h: 1 }, { x: 4, y: 7, w: 1, h: 1 }, { x: 1, y: 8, w: 1, h: 1 }, { x: 5, y: 3, w: 1, h: 1 }, { x: 5, y: 4, w: 1, h: 1 }, { x: 5, y: 5, w: 1, h: 1 }, { x: 5, y: 6, w: 1, h: 1 }, { x: 6, y: 6, w: 1, h: 1 }, { x: 0, y: 10, w: 1, h: 1 }, { x: 3, y: 8, w: 1, h: 1 }, { x: 2, y: 8, w: 1, h: 1 }, { x: 1, y: 9, w: 1, h: 1 }, { x: 1, y: 10, w: 1, h: 1 }, { x: 2, y: 10, w: 1, h: 1 }, { x: 2, y: 9, w: 1, h: 1 }, { x: 3, y: 9, w: 1, h: 1 }, { x: 3, y: 10, w: 1, h: 1 }, { x: 4, y: 10, w: 1, h: 1 }, { x: 4, y: 9, w: 1, h: 1 }, { x: 4, y: 8, w: 1, h: 1 }, { x: 5, y: 8, w: 1, h: 1 }, { x: 5, y: 7, w: 1, h: 1 }, { x: 5, y: 9, w: 1, h: 1 }, { x: 5, y: 10, w: 1, h: 1 }, { x: 6, y: 7, w: 1, h: 1 }, { x: 6, y: 5, w: 1, h: 1 }, { x: 6, y: 4, w: 1, h: 1 }, { x: 6, y: 3, w: 1, h: 1 }, { x: 6, y: 2, w: 1, h: 1 }, { x: 5, y: 2, w: 1, h: 1 }, { x: 6, y: 1, w: 1, h: 1 }, { x: 6, y: 0, w: 1, h: 1 }, { x: 7, y: 0, w: 1, h: 1 }, { x: 8, y: 0, w: 1, h: 1 }, { x: 9, y: 0, w: 1, h: 1 }, { x: 10, y: 0, w: 1, h: 1 }, { x: 11, y: 0, w: 1, h: 1 }, { x: 12, y: 0, w: 1, h: 1 }, { x: 13, y: 0, w: 1, h: 1 }, { x: 14, y: 0, w: 1, h: 1 }, { x: 11, y: 1, w: 1, h: 1 }, { x: 10, y: 1, w: 1, h: 1 }, { x: 9, y: 1, w: 1, h: 1 }, { x: 8, y: 1, w: 1, h: 1 }, { x: 7, y: 1, w: 1, h: 1 }, { x: 7, y: 2, w: 1, h: 1 }, { x: 3, y: 11, w: 1, h: 1 }, { x: 2, y: 11, w: 1, h: 1 }, { x: 1, y: 11, w: 1, h: 1 }, { x: 0, y: 11, w: 1, h: 1 }, { x: 0, y: 12, w: 1, h: 1 }, { x: 1, y: 12, w: 1, h: 1 }, { x: 2, y: 12, w: 1, h: 1 }, { x: 3, y: 12, w: 1, h: 1 }, { x: 4, y: 12, w: 1, h: 1 }, { x: 4, y: 11, w: 1, h: 1 }, { x: 4, y: 12, w: 1, h: 1 }, { x: 8, y: 2, w: 1, h: 1 }, { x: 9, y: 2, w: 1, h: 1 }, { x: 9, y: 3, w: 1, h: 1 }, { x: 8, y: 3, w: 1, h: 1 }, { x: 7, y: 3, w: 1, h: 1 }, { x: 7, y: 4, w: 1, h: 1 }, { x: 7, y: 5, w: 1, h: 1 }, { x: 7, y: 6, w: 1, h: 1 }, { x: 7, y: 7, w: 1, h: 1 }, { x: 6, y: 8, w: 1, h: 1 }, { x: 6, y: 9, w: 1, h: 1 }, { x: 6, y: 10, w: 1, h: 1 }, { x: 6, y: 11, w: 1, h: 1 }, { x: 6, y: 12, w: 1, h: 1 }, { x: 5, y: 11, w: 1, h: 1 }, { x: 5, y: 12, w: 1, h: 1 }, { x: 0, y: 13, w: 1, h: 1 }, { x: 2, y: 13, w: 1, h: 1 }, { x: 1, y: 14, w: 1, h: 1 }, { x: 3, y: 14, w: 1, h: 1 }, { x: 4, y: 13, w: 1, h: 1 }, { x: 5, y: 15, w: 1, h: 1 }, { x: 8, y: 7, w: 1, h: 1 }, { x: 8, y: 6, w: 1, h: 1 }, { x: 8, y: 5, w: 1, h: 1 }, { x: 8, y: 4, w: 1, h: 1 }, { x: 9, y: 4, w: 1, h: 1 }, { x: 9, y: 5, w: 1, h: 1 }, { x: 9, y: 6, w: 1, h: 1 }, { x: 9, y: 7, w: 1, h: 1 }, { x: 9, y: 8, w: 1, h: 1 }, { x: 9, y: 9, w: 1, h: 1 }, { x: 8, y: 9, w: 1, h: 1 }, { x: 7, y: 9, w: 1, h: 1 }, { x: 7, y: 8, w: 1, h: 1 }, { x: 8, y: 8, w: 1, h: 1 }, { x: 10, y: 2, w: 1, h: 1 }, { x: 10, y: 3, w: 1, h: 1 }, { x: 10, y: 4, w: 1, h: 1 }, { x: 10, y: 5, w: 1, h: 1 }, { x: 10, y: 6, w: 1, h: 1 }, { x: 11, y: 6, w: 1, h: 1 }, { x: 12, y: 6, w: 1, h: 1 }, { x: 15, y: 0, w: 1, h: 1 }, { x: 16, y: 0, w: 1, h: 1 }, { x: 17, y: 0, w: 1, h: 1 }, { x: 18, y: 0, w: 1, h: 1 }, { x: 12, y: 1, w: 1, h: 1 }, { x: 13, y: 1, w: 1, h: 1 }, { x: 14, y: 1, w: 1, h: 1 }, { x: 13, y: 1, w: 1, h: 1 }, { x: 12, y: 2, w: 1, h: 1 }, { x: 12, y: 3, w: 1, h: 1 }, { x: 13, y: 3, w: 1, h: 1 }, { x: 14, y: 3, w: 1, h: 1 }, { x: 14, y: 4, w: 1, h: 1 }, { x: 14, y: 5, w: 1, h: 1 }, { x: 6, y: 13, w: 1, h: 1 }, { x: 8, y: 15, w: 1, h: 1 }, { x: 7, y: 14, w: 1, h: 1 }, { x: 10, y: 5, w: 1, h: 1 }, { x: 15, y: 5, w: 1, h: 1 }, { x: 15, y: 9, w: 1, h: 1 }, { x: 16, y: 10, w: 1, h: 1 }, { x: 17, y: 11, w: 1, h: 1 }, { x: 15, y: 8, w: 1, h: 1 }, { x: 12, y: 5, w: 1, h: 1 }, { x: 11, y: 8, w: 1, h: 1 }, { x: 13, y: 9, w: 1, h: 1 }, { x: 16, y: 2, w: 1, h: 1 }, { x: 16, y: 4, w: 1, h: 1 }];

	    var rand_color_r = getRedColor();

	    var rand_color_g = getGreenColor();
	    var rand_color_b = getBlueColor();
	    var rand_trans = getTransAmount();

	    //var calclNewColors = true;

	    function animation() {

	      //looptimeNow = Date.now();
	      //loopdt = (looptimeNow - looplastTime)/1000;
	      //looplastTime = looptimeNow;
	      runtime = runtime + 0.2;

	      var w = self.c.width;
	      var h = self.c.height;

	      var index = Math.round(runtime * 15);
	      var indexLines = index;
	      var indexBoxes = index;

	      if (indexLines >= line_animation_list.length) {
	        indexLines = line_animation_list.length;
	      }
	      if (indexBoxes >= square_animation_list.length) {
	        indexBoxes = square_animation_list.length;
	        //  calclNewColors = false;
	      }

	      var increment = Global.screen_min_dim() / 10;
	      for (var i = 0; i < indexBoxes; i++) {

	        // if(calclNewColors){
	        if (!!square_animation_list[i].color) {
	          self.ctx.fillStyle = square_animation_list[i].color;
	        } else {
	          rand_color_r = getRedColor();
	          rand_color_g = getGreenColor();
	          rand_color_b = getBlueColor();
	          rand_trans = getTransAmount();
	          square_animation_list[i].color = 'rgba(' + rand_color_r + ',' + rand_color_g + ',' + rand_color_b + ',' + rand_trans + ')';
	          self.ctx.fillStyle = 'rgba(' + rand_color_r + ',' + rand_color_g + ',' + rand_color_b + ',' + rand_trans + ')';
	        }

	        //   self.ctx.fillStyle = 'rgba('+rand_color_r+','+rand_color_g+','+rand_color_b+','+rand_trans+')';


	        //}else{
	        //   self.ctx.fillStyle = square_animation_list[i].color;
	        //}


	        self.ctx.fillRect(square_animation_list[i].x * increment, square_animation_list[i].y * increment, square_animation_list[i].w * increment, square_animation_list[i].h * increment);

	        self.ctx.stroke();

	        self.ctx.closePath();

	        //self.ctx.font = "10px Arial";
	        //var text = "("+ square_animation_list[i].x + ", " + square_animation_list[i].y + ")";
	        //self.ctx.fillStyle = "#ffffff";
	        //self.ctx.fillText(text,square_animation_list[i].x*increment+5,square_animation_list[i].y*increment+10);
	      }
	      for (var i = 0; i < indexLines; i++) {

	        self.ctx.beginPath();
	        self.ctx.setLineDash([1, 0]);
	        self.ctx.strokeStyle = 'rgba(0,0,0,1.0)';
	        self.ctx.lineWidth = 5;
	        self.ctx.lineCap = "round";

	        var start = [];
	        var end = [];

	        start[0] = increment * line_animation_list[i].x1;
	        start[1] = increment * line_animation_list[i].y1;

	        end[0] = increment * line_animation_list[i].x2;
	        end[1] = increment * line_animation_list[i].y2;

	        self.ctx.moveTo(start[0], start[1]);
	        self.ctx.lineTo(end[0], end[1]);

	        self.ctx.stroke();
	      }

	      var dirX = w * Math.cos(runtime * 0.3);
	      var dirY = h * Math.sin(runtime * 0.3);

	      var grd = self.ctx.createLinearGradient(0, 0, dirX, dirY);
	      grd.addColorStop(0, "rgba(255,12,19,0.4)");
	      grd.addColorStop(1, "rgba(0,12,19,0.6)");

	      // Fill with gradient
	      self.ctx.fillStyle = grd;
	      self.ctx.fillRect(0, 0, w, h);
	    }

	    var cancelRefresh;
	    self.drawStuff = function () {
	      cancelRefresh = $timeout(function myFunction() {
	        animation();
	        cancelRefresh = $timeout(self.drawStuff, 1000 / 20);
	      }, 1000 / 20);
	    };

	    $scope.$on('$destroy', function (e) {
	      $timeout.cancel(cancelRefresh);
	    });

	    self.initScreen = function () {
	      $('.footer-container').css({ 'position': 'fixed',
	        'bottom': 0,
	        'left': 0,
	        'background-color': 'transparent'
	      });

	      self.c = document.getElementById("homeCanvas");
	      self.c.width = Global.screenWidth;
	      self.c.height = Global.screenHeight;

	      try {
	        $timeout.cancel(cancelRefresh);
	      } catch (e) {}

	      self.ctx = self.c.getContext("2d");
	      self.drawStuff();
	    };

	    angular.element($window).bind('resize', function () {
	      //Any time you attach event to $window with angular it becomes application wide Thus.. if state..
	      if ($state.is('index')) {
	        Global.updateScreenDims();
	        self.initScreen();
	      }
	    });

	    self.initScreen();
	  }]);
	};

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('DiscoverController', ['$window', '$state', 'Global', 'User', function ($window, $state, Global, User) {
	    //console.log("LoginController");
	    //console.log(Global);
	    //console.log(User);
	    var self = this;

	    self.logout = function () {

	      User.logout(User.token);
	      $state.go('login');
	    };

	    self.initScreen = function () {};

	    angular.element($window).bind('resize', function () {
	      //Any time you attach event to $window with angular it becomes application wide Thus.. if state..
	      if ($state.is('discover')) {
	        Global.updateScreenDims();
	        self.initScreen();
	      }
	    });

	    self.initScreen();
	  }]);
	};

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
		'use strict';

		angular.module('Controllers').controller('AdminController', ['User', function (User) {
			//console.log("LoginController");
			//console.log(Global);
			//console.log(User);
			var self = this;

			User.isTokenValid();

			self.homePanel = true;
			self.storePanel = false;
			self.salesPanel = false;
			self.advertisersPanel = false;
			self.advsPanel = false;
			self.advPurchase = false;
			self.payoutRequestPanel = false;
			self.payoutPanel = false;
			self.playerPanel = false;
			self.xonumiaPanel = false;
			self.levelsPanel = false;
			self.commentsPanel = false;
			self.coinbaseNotificationPanel = false;

			self.activatePanel = function (panel) {
				console.log(panel);
				switch (panel) {
					case 'home':
						self.homePanel = true;
						self.storePanel = false;
						self.salesPanel = false;
						self.advertisersPanel = false;
						self.advPurchase = false;
						self.advsPanel = false;
						self.payoutRequestPanel = false;
						self.payoutPanel = false;
						self.playerPanel = false;
						self.xonumiaPanel = false;
						self.levelsPanel = false;
						self.commentsPanel = false;
						self.coinbaseNotificationPanel = false;
						break;
					case 'store':

						self.homePanel = false;
						self.storePanel = true;
						self.salesPanel = false;
						self.advertisersPanel = false;
						self.advPurchase = false;
						self.advsPanel = false;
						self.payoutRequestPanel = false;
						self.payoutPanel = false;
						self.playerPanel = false;
						self.xonumiaPanel = false;
						self.levelsPanel = false;
						self.commentsPanel = false;
						self.coinbaseNotificationPanel = false;
						break;
					case 'sales':
						self.homePanel = false;
						self.storePanel = false;
						self.salesPanel = true;
						self.advertisersPanel = false;
						self.advPurchase = false;
						self.advsPanel = false;
						self.payoutRequestPanel = false;
						self.payoutPanel = false;
						self.playerPanel = false;
						self.xonumiaPanel = false;
						self.levelsPanel = false;
						self.commentsPanel = false;
						self.coinbaseNotificationPanel = false;
						break;
					case 'advertisers':
						self.homePanel = false;
						self.storePanel = false;
						self.salesPanel = false;
						self.advertisersPanel = true;
						self.advPurchase = false;
						self.advsPanel = false;
						self.payoutRequestPanel = false;
						self.payoutPanel = false;
						self.playerPanel = false;
						self.xonumiaPanel = false;
						self.levelsPanel = false;
						self.commentsPanel = false;
						self.coinbaseNotificationPanel = false;
						break;
					case 'advs':
						self.homePanel = false;
						self.storePanel = false;
						self.salesPanel = false;
						self.advertisersPanel = false;
						self.advPurchase = false;
						self.advsPanel = true;
						self.payoutRequestPanel = false;
						self.payoutPanel = false;
						self.playerPanel = false;
						self.xonumiaPanel = false;
						self.levelsPanel = false;
						self.commentsPanel = false;
						self.coinbaseNotificationPanel = false;
						break;
					case 'advpurchase':
						self.homePanel = false;
						self.storePanel = false;
						self.salesPanel = false;
						self.advertisersPanel = false;
						self.advPurchase = true;
						self.advsPanel = false;
						self.payoutRequestPanel = false;
						self.payoutPanel = false;
						self.playerPanel = false;
						self.xonumiaPanel = false;
						self.levelsPanel = false;
						self.commentsPanel = false;
						self.coinbaseNotificationPanel = false;
						break;
					case 'payoutsReq':
						self.homePanel = false;
						self.storePanel = false;
						self.salesPanel = false;
						self.advertisersPanel = false;
						self.advPurchase = false;
						self.advsPanel = false;
						self.payoutRequestPanel = true;
						self.payoutPanel = false;
						self.playerPanel = false;
						self.xonumiaPanel = false;
						self.levelsPanel = false;
						self.commentsPanel = false;
						self.coinbaseNotificationPanel = false;
						break;
					case 'payouts':
						self.homePanel = false;
						self.storePanel = false;
						self.salesPanel = false;
						self.advertisersPanel = false;
						self.advPurchase = false;
						self.advsPanel = false;
						self.payoutRequestPanel = false;
						self.payoutPanel = true;
						self.playerPanel = false;
						self.xonumiaPanel = false;
						self.levelsPanel = false;
						self.commentsPanel = false;
						self.coinbaseNotificationPanel = false;
						break;
					case 'players':
						self.homePanel = false;
						self.storePanel = false;
						self.salesPanel = false;
						self.advertisersPanel = false;
						self.advPurchase = false;
						self.advsPanel = false;
						self.payoutRequestPanel = false;
						self.payoutPanel = false;
						self.playerPanel = true;
						self.xonumiaPanel = false;
						self.levelsPanel = false;
						self.commentsPanel = false;
						self.coinbaseNotificationPanel = false;
						break;
					case 'xonumia':
						self.homePanel = false;
						self.storePanel = false;
						self.salesPanel = false;
						self.advertisersPanel = false;
						self.advPurchase = false;
						self.advsPanel = false;
						self.payoutRequestPanel = false;
						self.payoutPanel = false;
						self.playerPanel = false;
						self.xonumiaPanel = true;
						self.levelsPanel = false;
						self.commentsPanel = false;
						self.coinbaseNotificationPanel = false;
						break;
					case 'levels':
						self.homePanel = false;
						self.storePanel = false;
						self.salesPanel = false;
						self.advertisersPanel = false;
						self.advPurchase = false;
						self.advsPanel = false;
						self.payoutRequestPanel = false;
						self.payoutPanel = false;
						self.playerPanel = false;
						self.xonumiaPanel = false;
						self.levelsPanel = true;
						self.commentsPanel = false;
						self.coinbaseNotificationPanel = false;
						break;
					case 'comments':
						self.homePanel = false;
						self.storePanel = false;
						self.salesPanel = false;
						self.advertisersPanel = false;
						self.advPurchase = false;
						self.advsPanel = false;
						self.payoutRequestPanel = false;
						self.payoutPanel = false;
						self.playerPanel = false;
						self.xonumiaPanel = false;
						self.levelsPanel = false;
						self.commentsPanel = true;
						self.coinbaseNotificationPanel = false;
						break;
					case 'coinbasenotifications':
						self.homePanel = false;
						self.storePanel = false;
						self.salesPanel = false;
						self.advertisersPanel = false;
						self.advPurchase = false;
						self.advsPanel = false;
						self.payoutRequestPanel = false;
						self.payoutPanel = false;
						self.playerPanel = false;
						self.xonumiaPanel = false;
						self.levelsPanel = false;
						self.commentsPanel = false;
						self.coinbaseNotificationPanel = true;
						break;

				}
			};
		}]);
	};

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(21);

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	__webpack_require__(84);

	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('DashController', ['$scope', '$http', 'User', 'Global', '$state', '$window', '$timeout', function ($scope, $http, User, Global, $state, $window, $timeout) {
	    //console.log("LoginController");
	    //console.log(Global);
	    //console.log(User);
	    var self = this;

	    console.log('USER DATA IN DASH CONTROLLER');
	    console.log(User);
	    console.log($state);

	    self.user = User;

	    self.user.numberOfXnum();
	    self.user.valueOfXnum();
	    self.user.availableValueOfXnum();

	    self.showLeaderBoard = false;
	    self.showXbitLeaderBoard = false;

	    self.leaderboardXbits = [];
	    self.leaderboardXnums = [];

	    self.leaderBoardToggle = function () {
	      if (self.showLeaderBoard) {
	        self.showLeaderBoard = false;
	      } else {
	        self.showLeaderBoard = true;
	      }
	    };

	    self.showXbitsorXnums = function (which) {

	      if (which === 0) {
	        self.showXbitLeaderBoard = true;
	      } else {
	        self.showXbitLeaderBoard = false;
	      }
	    };

	    self.getLeaderBoardArrays = function () {
	      $http.get('api/v1/leaderboard', { headers: { auth: self.user.token } }).then(function (resp) {
	        console.log('Dashboard LeaderBoard');
	        console.log(resp);
	        self.leaderboardXbits = resp.data.xbitLeaderboard;
	        self.leaderboardXnums = resp.data.xnumLeaderboard;
	      }, function (err) {
	        console.log('Err Getting DashBoard LeaderBoard');
	        console.log(err);
	      });
	    };

	    var cancelRefresh;
	    self.refreshStuff = function () {
	      cancelRefresh = $timeout(function myFunction() {
	        self.getLeaderBoardArrays();
	        cancelRefresh = $timeout(self.refreshStuff, 10000);
	      }, 10000);
	    };

	    $scope.$on('$destroy', function (e) {
	      console.log("YESSS ANIMATION DESTROYED !! NO MEMORY LEAD HOPEFULLY");
	      $timeout.cancel(cancelRefresh);
	    });

	    self.refreshStuff();
	    self.getLeaderBoardArrays();

	    self.showRequestPaymentModal = function () {
	      $('#RequestXnumPaymentModal').modal({ backdrop: 'static', keyboard: false });
	      $('#RequestXnumPaymentModal').modal('show');
	    };

	    self.sendRequest = function () {

	      $('#RequestXnumPaymentModal').modal('hide');

	      $('#mapEndModal').on('hidden.bs.modal', function () {});
	    };

	    var cplayer = document.getElementById("customizeColors");
	    var ctxPlayer = cplayer.getContext("2d");
	    var cxnum = document.getElementById("xnumDrawCanvas");
	    var ctxXnum = cxnum.getContext("2d");
	    var cxbit = document.getElementById("xbitDrawCanvas");
	    var ctxXbit = cxbit.getContext("2d");

	    console.log('Canvas Size');
	    console.log(cplayer.width);
	    console.log(cplayer.height);

	    $http.get('/api/v1/userxnum', { headers: { auth: User.token } }).then(function (resp) {
	      console.log('Get Xnums');
	      console.log(resp);
	      self.user.xnums = resp.data;
	    }, function (err) {
	      console.log('Get Xnums Err');
	      console.log(err);
	    });

	    self.updateUserColors = function () {
	      var colorData = { 'bodyColorR': self.bodyColorR,
	        'bodyColorG': self.bodyColorG,
	        'bodyColorB': self.bodyColorB,
	        'bodyColorA': self.bodyColorA,
	        'borderColorR': self.borderColorR,
	        'borderColorG': self.borderColorG,
	        'borderColorB': self.borderColorB,
	        'borderColorA': self.borderColorA };

	      User.updateColor(colorData).then(function (resp) {

	        console.log('Update Color Resp');
	        console.log(resp);
	      }, function (err) {
	        console.log('Update Color Err');
	        console.log(err);
	      });
	    };

	    $("#colorPickerBody").spectrum({
	      showAlpha: true,
	      change: function change(tinycolor) {

	        self.bodyColorR = parseInt(tinycolor._r);
	        self.bodyColorG = parseInt(tinycolor._g);
	        self.bodyColorB = parseInt(tinycolor._b);
	        self.bodyColorA = tinycolor._a;
	        console.log('ALPHA BOdy');
	        console.log(self.bodyColorA);
	        self.updateUserColors();
	        self.drawPlayerPreview(ctxPlayer, cplayer.width, cplayer.height);
	      }
	    });

	    var bodyString = 'rgba(' + User.bodyColorR + ',' + User.bodyColorG + ',' + User.bodyColorB + ',' + User.bodyColorA + ')';

	    $("#colorPickerBody").spectrum("set", bodyString);

	    $("#colorPickerBorder").spectrum({
	      showAlpha: true,
	      change: function change(tinycolor) {

	        self.borderColorR = parseInt(tinycolor._r);
	        self.borderColorG = parseInt(tinycolor._g);
	        self.borderColorB = parseInt(tinycolor._b);
	        self.borderColorA = tinycolor._a;
	        console.log('ALPHA');
	        console.log(self.borderColorA);
	        self.updateUserColors();
	        self.drawPlayerPreview(ctxPlayer, cplayer.width, cplayer.height);
	      }
	    });

	    var borderString = 'rgba(' + User.borderColorR + ',' + User.borderColorG + ',' + User.borderColorB + ',' + User.borderColorA + ')';

	    $("#colorPickerBorder").spectrum("set", borderString);

	    self.borderColorR = User.borderColorR;
	    self.borderColorG = User.borderColorG;
	    self.borderColorB = User.borderColorB;
	    self.borderColorA = User.borderColorA;

	    self.bodyColorR = User.bodyColorR;
	    self.bodyColorG = User.bodyColorG;
	    self.bodyColorB = User.bodyColorB;
	    self.bodyColorA = User.bodyColorA;

	    self.logout = function () {

	      User.logout(User.token);
	      $state.go('login');
	    };

	    function drawCircle(graph, centerX, centerY, radius, sides) {
	      var theta = 0;
	      var x = 0;
	      var y = 0;
	      var xpoints = [[]];

	      graph.beginPath();

	      for (var i = 0; i < sides; i++) {
	        theta = i / sides * 2 * Math.PI + Math.PI;
	        x = centerX + radius * Math.sin(theta);
	        y = centerY + radius * Math.cos(theta);
	        var moveTo = [x, y, 1];

	        graph.lineTo(moveTo[0], moveTo[1]);
	        if (i === 1) {
	          xpoints[0] = [moveTo[0], moveTo[1]];
	        }
	        if (i === 4) {
	          xpoints[1] = [moveTo[0], moveTo[1]];
	        }
	        if (i === 5) {
	          xpoints[2] = [moveTo[0], moveTo[1]];
	        }
	        if (i === 2) {
	          xpoints[3] = [moveTo[0], moveTo[1]];
	        }
	      }

	      graph.closePath();
	      graph.fill();
	      graph.stroke();

	      return xpoints;
	    }

	    self.drawPlayerPreview = function (ctx, w, h) {

	      var x = 0;
	      var y = 0;

	      ctx.fillStyle = '#ffffff';
	      ctx.fillRect(0, 0, w, h);

	      ctx.strokeStyle = 'rgba(' + self.borderColorR + ',' + self.borderColorG + ',' + self.borderColorB + ',' + self.borderColorA + ')';

	      ctx.fillStyle = 'rgba(' + self.bodyColorR + ',' + self.bodyColorG + ',' + self.bodyColorB + ',' + self.bodyColorA + ')';
	      ctx.lineWidth = 5;

	      var xstore = [];
	      var ystore = [];

	      Global.spin += 0.0;

	      var points = 10 + ~~(20 / 5);
	      var increase = Math.PI * 2 / points;

	      for (var i = 0; i < points; i++) {

	        x = (w / 2 - 5) * Math.cos(Global.spin) + w / 2;
	        y = (h / 2 - 5) * Math.sin(Global.spin) + h / 2;

	        Global.spin += increase;
	        xstore[i] = x;
	        ystore[i] = y;
	      }

	      for (i = 0; i < points; ++i) {
	        if (i === 0) {
	          ctx.beginPath();
	          ctx.moveTo(xstore[i], ystore[i]);
	        } else if (i > 0 && i < points - 1) {
	          ctx.lineTo(xstore[i], ystore[i]);
	        } else {
	          ctx.lineTo(xstore[i], ystore[i]);
	          ctx.lineTo(xstore[0], ystore[0]);
	        }
	      }

	      ctx.lineJoin = 'round';
	      ctx.lineCap = 'round';
	      ctx.fill();
	      ctx.stroke();
	    };

	    self.drawXnum = function (graph) {

	      graph.strokeStyle = 'rgba(255,0,0,1.0)';
	      graph.fillStyle = 'rgba(0,0,0,1.0)';
	      graph.lineWidth = 3;
	      graph.lineJoin = 'round';
	      graph.lineCap = 'round';
	      var xpoints = drawCircle(graph, 40, 40, 35, 25);

	      var xoPointsMapped = [[40 + 18, 40 + 18], [40 - 18, 40 - 18], [40 - 18, 40 + 18], [40 + 18, 40 - 18]];

	      graph.beginPath();
	      graph.lineWidth = 12;
	      graph.moveTo(xoPointsMapped[0][0], xoPointsMapped[0][1]);
	      graph.lineTo(xoPointsMapped[1][0], xoPointsMapped[1][1]);
	      graph.moveTo(xoPointsMapped[2][0], xoPointsMapped[2][1]);
	      graph.lineTo(xoPointsMapped[3][0], xoPointsMapped[3][1]);
	      graph.stroke();

	      graph.beginPath();
	      graph.lineWidth = 8;
	      graph.strokeStyle = 'rgba(0,0,0,1.0)';
	      graph.moveTo(xoPointsMapped[0][0], xoPointsMapped[0][1]);
	      graph.lineTo(xoPointsMapped[1][0], xoPointsMapped[1][1]);
	      graph.moveTo(xoPointsMapped[2][0], xoPointsMapped[2][1]);
	      graph.lineTo(xoPointsMapped[3][0], xoPointsMapped[3][1]);
	      graph.stroke();
	    };

	    self.drawXbit = function (graph) {

	      graph.strokeStyle = 'rgba(0,0,0,1.0)';
	      graph.lineJoin = 'round';
	      graph.lineCap = 'round';

	      var r = Math.floor(Math.random() * 255 + 1);
	      var g = Math.floor(Math.random() * 255 + 1);
	      var b = Math.floor(Math.random() * 255 + 1);
	      var a = Math.random();
	      graph.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; /// Random color...

	      graph.lineWidth = 2;
	      var xpoints = drawCircle(graph, 40, 40, 20, 7);

	      var xoPointsMapped = [[40 + 7, 40 + 7], [40 - 7, 40 - 7], [40 - 7, 40 + 7], [40 + 7, 40 - 7]];

	      graph.beginPath();
	      graph.lineWidth = 5;
	      graph.moveTo(xoPointsMapped[0][0], xoPointsMapped[0][1]);
	      graph.lineTo(xoPointsMapped[1][0], xoPointsMapped[1][1]);
	      graph.moveTo(xoPointsMapped[2][0], xoPointsMapped[2][1]);
	      graph.lineTo(xoPointsMapped[3][0], xoPointsMapped[3][1]);
	      graph.stroke();
	    };

	    self.userConqurings = {};

	    $http.get('api/v1/conquringsByUser', { headers: { auth: User.token } }).then(function (resp) {
	      console.log('Get Concuring');
	      console.log(resp);
	      self.userConqurings = resp.data;
	    }, function (err) {
	      console.log('Get Xnums Err');
	      console.log(err);
	    });

	    self.userAdvertisements = {};

	    $http.get('api/v1/userAdv', { headers: { auth: User.token } }).then(function (resp) {
	      console.log('Get UserAdvs');
	      console.log(resp);
	      self.userAdvertisements = resp.data;
	    }, function (err) {
	      console.log('Get UserAdvs Err');
	      console.log(err);
	    });

	    self.initScreen = function () {};

	    self.drawPlayerPreview(ctxPlayer, cplayer.width, cplayer.height);
	    self.drawXnum(ctxXnum);
	    self.drawXbit(ctxXbit);

	    angular.element($window).bind('resize', function () {
	      //Any time you attach event to $window with angular it becomes application wide Thus.. if state..
	      if ($state.is('dashboard')) {
	        Global.updateScreenDims();
	        self.initScreen();
	      }
	    });
	  }]);
	};

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
		'use strict';

		angular.module('Controllers').controller('StoreController', ['Global', 'Cart', function (Global, Cart) {
			//console.log("LoginController");
			//console.log(Global);
			//console.log(User);
			var self = this;

			self.cart = Cart;
			console.log('Store Controller cart ');
			console.log(self.cart);

			self.cart.describe();

			//self.cart.addItem(2, 'Test2', 12.92, 1, {'option': 'CoolOption111'});
			//self.cart.addItem(2, 'Test2', 12.92, 1, {'option': 'CoolOption111'});


			self.merchPanel = true;
			self.sponsorPanel = false;

			self.activatePanel = function (panel) {
				switch (panel) {
					case 'merch':
						self.merchPanel = true;
						self.sponsorPanel = false;
						break;
					case 'sponsor':
						self.merchPanel = false;
						self.sponsorPanel = true;
						break;
				}
			};
		}]);
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('ProductController', ['$state', 'Global', 'Cart', 'Merch', function ($state, Global, Cart, Merch) {
	    //console.log("LoginController");
	    //console.log(Global);
	    //console.log(User);
	    var self = this;

	    console.log('IN PRODUCT CONTROLLER');
	    console.log('STATE', $state);

	    self.cart = Cart;
	    console.log('Store Controller cart ');
	    console.log(self.cart);

	    self.cart.describe();

	    Merch.getProduct($state.params.id).then(function (resp) {
	      self.product = resp;
	      console.log('Merch Get Produt');
	      console.log(resp);
	    }, function (err) {

	      console.log('Merch Get StoreERR');
	      console.log(err);
	    });

	    self.backtoStore = function () {
	      console.log('Back to Store');
	      $state.go('store');
	    };
	  }]);
	};

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('CheckoutController', ['Global', 'Cart', function (Global, Cart) {
	    //console.log("LoginController");
	    //console.log(Global);
	    //console.log(User);
	    var self = this;

	    self.cart = Cart;

	    /////////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    //////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    ////////////////////////////////////////////////////////////////////////////
	    //////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    //////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    ////////////////////////////////////////////////////////////////////////////
	    ////////////////////////////////Checkout Code/////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    //////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    ////////////////////////////////////////////////////////////////////////////
	    /////////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    ////////////////////////////////////////////////////////////////////////////
	    //////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    ////////////////////////////////////////////////////////////////////////////


	    self.billing_first_name = '';
	    self.billing_last_name = '';
	    self.billing_address1 = '';
	    self.billing_address2 = '';
	    self.billing_city = '';
	    self.billing_state = '';
	    self.billing_postal = '';
	    self.billing_country = 'USA';
	    self.billing_phone = '';
	    self.billing_email = '';

	    self.shipping_first_name = '';
	    self.shipping_last_name = '';
	    self.shipping_address1 = '';
	    self.shipping_address2 = '';
	    self.shipping_city = '';
	    self.shipping_state = '';
	    self.shipping_postal = '';
	    self.shipping_country = 'USA';
	    self.shipping_phone = '';
	    self.shipping_email = '';

	    self.shippingandbillingsame = function () {
	      if (self.shippingsameasbilling) {
	        self.shipping_first_name = self.billing_first_name;
	        self.shipping_last_name = self.billing_last_name;
	        self.shipping_address1 = self.billing_address1;
	        self.shipping_address2 = self.billing_address2;
	        self.shipping_city = self.billing_city;
	        self.shipping_state = self.billing_state;
	        self.shipping_postal = self.billing_postal;
	        self.shipping_country = self.billing_country;
	        self.shipping_phone = self.billing_phone;
	        self.shipping_email = self.billing_email;
	      } else {
	        self.shipping_first_name = '';
	        self.shipping_last_name = '';
	        self.shipping_address1 = '';
	        self.shipping_address2 = '';
	        self.shipping_city = '';
	        self.shipping_state = '';
	        self.shipping_postal = '';
	        self.shipping_country = 'USA';
	        self.shipping_phone = '';
	        self.shipping_email = '';
	      }
	      self.shippingStateChange();
	    };

	    self.shippingStateChange = function () {
	      if (self.shippingsameasbilling) {
	        self.shipping_state = self.billing_state;
	      }
	      if (!(self.shipping_state === 'CO' || self.shipping_state === 'COLORADO' || self.shipping_state === 'co' || self.shipping_state === 'Co' || self.shipping_state === 'cO' || self.shipping_state === 'Colorado' || self.shipping_state === 'colorado')) {
	        //alert("SHipping is not Colorado");
	        console.log("CART ---");
	        console.log(self.cart);
	        self.cart.isoutofState = true;
	      } else {
	        self.cart.isoutofState = false;
	      }
	    };

	    /**
	     * Overwrites obj1s values with obj2's and adds obj2's if non existent in obj1
	     * @param obj1
	     * @param obj2
	     * @returns obj3 a new object based on obj1 and obj2
	     */
	    function merge_options(obj1, obj2) {
	      var obj3 = {};
	      for (var attrname in obj1) {
	        obj3[attrname] = obj1[attrname];
	      }
	      for (var attrname in obj2) {
	        obj3[attrname] = obj2[attrname];
	      }
	      return obj3;
	    }

	    self.checkout = function (evnt_id) {

	      $('#CheckOutModal1').modal('toggle');
	    };

	    function getFormData($form) {
	      var unindexed_array = $form.serializeArray();
	      var indexed_array = {};

	      $.map(unindexed_array, function (n, i) {
	        indexed_array[n['name']] = n['value'];
	      });

	      return indexed_array;
	    }

	    self.formokay1 = function () {
	      return true;
	      var uF = isEmpty(self.userFile);
	      var nT = isEmpty(self.newBlogpost);

	      if (!uF || !nT) {
	        return true;
	      } else {
	        return false;
	      }
	    };

	    self.paymentURL = '';

	    self.submitcheckoutform1 = function () {

	      $('#CheckOutModal1').modal('hide');
	      $('#CheckOutModal2').modal('show');
	    };

	    self.formokay2 = function () {
	      var uF = isEmpty(self.userFile);
	      var nT = isEmpty(self.newBlogpost);

	      if (!uF || !nT) {
	        return true;
	      } else {
	        return false;
	      }
	    };

	    self.changepayment = function () {

	      $('#CheckOutModal2').modal('toggle');
	      self.payit();
	    };

	    self.submitcheckoutform2 = function () {

	      self.ssl_amount = self.cart.getTotalTotal();

	      $('#submitform2loading').show();

	      var ccexp = $('#ccexpiry').val();
	      ccexp = ccexp.replace(/\s/g, '');
	      ccexp = ccexp.replace(/\//g, '');
	      $('#ccexpiry').val(ccexp);

	      var ccnum = $('#ccnumber').val();
	      ccnum = ccnum.replace(/\s/g, '');
	      $('#ssl_card_number').val(ccnum);

	      var $form = $("#checkoutForm1");
	      var data = getFormData($form);
	      console.log('Form 1 Data');
	      console.log(data);

	      var formdata = $("#checkoutForm2");
	      var params = getFormData(formdata);
	      console.log(params);
	      params = merge_options(params, data);
	      console.log('params');
	      //console.log(params);	 

	      var ajaxornot = true;

	      if (ajaxornot) {

	        $http.post('server/api/converge/', params).then(function (resp) {
	          console.log('Converge Resp ');
	          console.log(resp);

	          var checkout = params;
	          checkout.ssl_card_number = null;
	          checkout.ssl_exp_date = null;
	          checkout.ssl_cvv2cvc2 = null;

	          console.log('Cart');

	          console.log(self.cart);

	          console.log(self.cart.items.length);
	          checkout.num_cart_items = self.cart.items.length;

	          for (var j = 0; j < self.cart.items.length; j++) {
	            checkout["item_number" + (j + 1)] = self.cart.items[j].sku;
	            checkout["item_name" + (j + 1)] = self.cart.items[j].name;
	            checkout["quantity" + (j + 1)] = self.cart.items[j].quantity;
	            var i = 0;
	            for (var k in self.cart.items[j].options) {
	              if (self.cart.items[j].options.hasOwnProperty(k)) {
	                checkout["option_name" + (i + 1) + "_" + (j + 1)] = self.cart.items[j].options[k][0];
	                i++;
	              }
	            }
	          }
	          checkout.cart;
	          checkout.txn_id = resp.data.message.txn_id;
	          console.log(checkout);

	          self.cart.clearItems();
	          $('#submitform2loading').hide();
	          $('#CheckOutModal2').modal('toggle');
	          self.shipping_first_name = '';
	          self.shipping_last_name = '';
	          self.shipping_address1 = '';
	          self.shipping_address2 = '';
	          self.shipping_city = '';
	          self.shipping_state = '';
	          self.shipping_postal = '';
	          self.shipping_country = '';
	          self.shipping_phone = '';
	          self.shipping_email = '';
	          self.billing_first_name = '';
	          self.billing_last_name = '';
	          self.billing_address1 = '';
	          self.billing_address2 = '';
	          self.billing_city = '';
	          self.billing_state = '';
	          self.billing_postal = '';
	          self.billing_country = '';
	          self.billing_phone = '';
	          self.billing_email = '';
	          $('#ccexpiry').val('');
	          $('#ccnumber').val('');
	          $('#ssl_card_number').val('');
	          $('#nameoncard').val('');
	          $('#ssl_cvv2cv').val('');
	          self.cvc = '';

	          var form = document.createElement("form");
	          form.setAttribute("method", "post");
	          form.setAttribute("action", "https://paradigmcycle.com/paysuccess.php");

	          for (var key in checkout) {
	            if (checkout.hasOwnProperty(key)) {
	              var hiddenField = document.createElement("input");
	              hiddenField.setAttribute("type", "hidden");
	              hiddenField.setAttribute("name", key);
	              hiddenField.setAttribute("value", checkout[key]);

	              form.appendChild(hiddenField);
	            }
	          }

	          document.body.appendChild(form);
	          form.submit();
	          form.parentNode.removeChild(form);
	        }, function (err) {
	          console.log('Converge ERR Resp ');
	          console.log(err);
	          $('#CheckOutModal2').modal('toggle');
	          self.checkouterr = err.data.message;
	          $('#CheckOutModalERR').modal('toggle');

	          $('#submitform2loading').hide();
	        });
	      } else {

	        // The rest of this code assumes you are not using a library.
	        // It can be made less wordy if you use one.

	        var form = document.createElement("form");
	        form.setAttribute("method", "post");
	        form.setAttribute("action", "https://paradigmcycle.com/server/api/converge/");

	        for (var key in params) {
	          if (params.hasOwnProperty(key)) {
	            var hiddenField = document.createElement("input");
	            hiddenField.setAttribute("type", "hidden");
	            hiddenField.setAttribute("name", key);
	            hiddenField.setAttribute("value", params[key]);

	            form.appendChild(hiddenField);
	          }
	        }

	        document.body.appendChild(form);
	        form.submit();
	      }
	    };
	    /////////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    //////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    ////////////////////////////////////////////////////////////////////////////
	    //////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    //////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    ////////////////////////////////////////////////////////////////////////////
	    ////////////////////////////////Checkout Code/////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    //////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    ////////////////////////////////////////////////////////////////////////////
	    /////////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    ////////////////////////////////////////////////////////////////////////////
	    //////////////////////////////////////////////////////////////////////////// ///////////////////////////////////////////////////////////////////////////////
	    ////////////////////////////////////////////////////////////////////////////

	  }]);
	};

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('ContactController', ['User', '$http', function (User, $http) {
	    //console.log("LoginController");
	    //console.log(Global);
	    //console.log(User);
	    var self = this;

	    self.user = User;

	    self.errors = { contact_name: '',
	      contact_email: '',
	      contact_comment: '',
	      contact_captcha: ''
	    };

	    self.formsubmit = function () {

	      $('#loader').show();

	      var captcha = $('#g-recaptcha-response');
	      console.log(captcha.val());

	      var commentObj = { name: self.contact_name,
	        email: self.contact_email,
	        comment: self.contact_comment,
	        'g-recaptcha-response': captcha.val()
	      };

	      $('#contact_comment').focus(function () {

	        $('#contact_comment').val('');
	      });

	      console.log(commentObj);

	      var commentXhrCallConfig = {
	        method: 'POST',
	        url: 'api/v1/comments',
	        //params: null,
	        data: $.param(commentObj),
	        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
	        //eventHandlers: {},
	        //uploadEventHandlers: {},
	        //xsrfHeaderName: '',
	        //xsrfCookieName: '',
	        //transformRequest: function(data, headersGetter) {},
	        //tranformResponse: function(data, headersGetter, status){},
	        //paramSerializer: '',
	        //cache: false,
	        //timeout: null,
	        //withCredentials: false,
	        responseType: "json"
	      };

	      $http(commentXhrCallConfig).then(function (resp) {

	        if (resp.data.responseDesc === "Please select captcha") {
	          self.errors.contact_captcha = "Please select captcha";
	        } else {

	          $('#contactUsthanks').modal('toggle');
	          console.log('Contact Us Resp');
	          console.log(resp);

	          $('#loader').hide();
	          self.contact_name = '';
	          self.contact_email = '';
	          self.contact_comment = '';

	          self.errors = { contact_name: '',
	            contact_email: '',
	            contact_comment: '',
	            contact_captcha: ''

	          };
	          grecaptcha.reset();
	        }
	      }, function (err) {

	        console.log('Contact Us Err');
	        console.log(err);

	        self.errors = err.data;
	        $('#loader').hide();
	      });
	    };
	  }]);
	};

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('CartController', ['$state', 'Global', 'Cart', '$http', 'User', function ($state, Global, Cart, $http, User) {
	    //console.log("LoginController");
	    //console.log(Global);
	    //console.log(User);
	    var self = this;

	    self.user = User;
	    self.cart = Cart;

	    console.log("Cart");
	    console.log(self.cart);

	    self.backtoStore = function () {
	      console.log('Back to Store');
	      $state.go('store');
	    };

	    paypal.Button.render({
	      env: 'sandbox', // Specify 'sandbox' for the test environment
	      locale: 'en_US',

	      style: {
	        size: 'small',
	        color: 'blue',
	        shape: 'rect'
	      },

	      client: {
	        sandbox: 'ARcdK5Gvlp2L6LT0CNHu1Ybcg6jFhfy2S-Qox3IIHwQItAI7K5BO_w1kV8Ky7AwYVd2-nWt8y4dwTb0_'
	        //production: 'xxxxxxxxx'
	      },

	      payment: function payment(resolve, reject) {
	        // Set up the payment here, when the buyer clicks on the button
	        var env = this.props.env;
	        var client = this.props.client;

	        console.log('SEttuing up the Cart!');

	        var CREATE_PAYMENT_URL = 'api/v1/paypal/create-payment';

	        var transactionObj = self.cart.getPaypalTransactionObject();
	        console.log('TransAction Object gotten from cart object');
	        console.log(transactionObj);

	        $http.post(CREATE_PAYMENT_URL, { transObj: transactionObj }).then(function (resp) {
	          console.log("RESPONS FROM PAYPAL PAYEMNT SUCCESS");
	          console.log(resp);
	          resolve(resp.data.paymentID);
	        }, function (err) {

	          console.log("RESPONS FROM PAYPAL PAYEMNT SUCCESS ERR");
	          console.log(err);
	          reject(err);
	        });
	      },

	      commit: true, // Optional: show a 'Pay Now' button in the checkout flow
	      onAuthorize: function onAuthorize(data) {
	        // Execute the payment here, when the buyer approves the transaction

	        var EXECUTE_PAYMENT_URL = 'api/v1/paypal/execute-payment';

	        $http.post(EXECUTE_PAYMENT_URL, { paymentID: data.paymentID, payerID: data.payerID }).then(function (data) {

	          console.log('YES SERVER SIDE PAYPAL REST API INTEGRATED B!');
	          console.log(data);
	          $state.go('play');
	        }, function (err) {

	          console.log("RESPONS FROM PAYPAL PAYEMNT SUCCESS ERR");
	          console.log(err);
	        });
	      },

	      onError: function onError(err) {
	        // Show an error page here, when an error occurs
	        console.log("RESPONS FROM PAYPAL PAYEMNT SUCCESS ERR");
	        console.log(err);
	      }

	    }, '#paypal-button');

	    self.coinbaseIframeEmbedCode = '';

	    self.getcoinbasebuttonandclick = function () {

	      self.cart.setCoinBaseVerificationCode(Math.random() * 1000 + "cross" + Math.random() * 1000 + "verification");
	      console.log('Get CoinBase button and click');
	      $http.post('api/v1/coinbase/getButton', self.cart.coinbasegitbuttonObject(), { headers: { auth: User.token } }).then(function (resp) {
	        console.log('Get Button Resp');
	        console.log(resp);
	        console.log('embed_code');
	        console.log(resp.data.embed_code);
	        var iframeSrc = 'https://www.coinbase.com/checkouts/' + resp.data.embed_code + '/inline';
	        var coinbaseIframe = document.getElementById('coinbase_inline_iframe');
	        coinbaseIframe.height = self.cart.items.length > 0 ? '650px' : '450px'; //Collect Address ads iFrame Height...
	        coinbaseIframe.src = iframeSrc;
	        $('#coinbaseIframe').modal({ backdrop: 'static', keyboard: false });

	        $('#coinbaseIframe').modal('show');

	        self.coinbaseIframeEmbedCode = resp.data.embed_code;
	      }, function (err) {

	        console.log('Get button Err');
	        console.log(err);
	      });
	    };

	    // Add an event listener for messages posted to this window
	    window.addEventListener('message', receiveMessage, false);

	    // Define the message handler function
	    function receiveMessage(event) {

	      // Make sure the message posted to this window is from Coinbase
	      if (event.origin == 'https://www.coinbase.com') {
	        var event_type = event.data.split('|')[0]; // "coinbase_payment_complete"
	        var event_id = event.data.split('|')[1]; // ID for this payment type
	        console.log('EmbedCodes');
	        console.log(event_id);
	        console.log(self.coinbaseIframeEmbedCode);
	        if (event_type == 'coinbase_payment_complete' && self.coinbaseIframeEmbedCode === event_id) {

	          var verifyAndLogObj = {
	            verificationCode: self.cart.coinbaseVerificationCode,
	            userId: User.id,
	            method: 0,
	            status: 0,
	            transnum: '',
	            cart: self.cart.printTransaction()
	          };

	          $http.post('api/v1/coinbase/verifyTx', verifyAndLogObj, { headers: { auth: User.token } }).then(function (resp) {

	            console.log('Resp from Verify TX');
	            console.log(resp);
	            //high level of confidence in the transaction


	            $('#coinbaseIframe').modal('hide');
	            $('#coinbaseIframe').on('hidden.bs.modal', function () {

	              $state.go('paymentsuccess');
	            });
	          }, function (err) {

	            console.log('Resp from Verify TX ERR');
	            console.log(err);

	            //lower level of confidence in the transaction!!..
	            $('#coinbaseIframe').modal('hide');
	            $('#coinbaseIframe').on('hidden.bs.modal', function () {

	              $state.go('paymentsuccess');
	            });
	          });
	        } else if (event_type == 'coinbase_payment_mispaid') {

	          $state.go('paymentfail');
	        } else if (event_type == 'coinbase_payment_expired') {
	          $state.go('store');
	        } else {
	          // Do something else, or ignore
	        }
	      }
	    }
	  }]);
	};

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	   'use strict';

	   angular.module('Controllers').controller('RecoverPWController', ['$window', '$state', 'Global', 'User', function ($window, $state, Global, User) {

	      var self = this;

	      self.inputError = '';

	      self.initScreen = function () {};

	      self.loader = false;

	      var username_or_email = $('#username_or_email');

	      var recoverPWBtn = $('#recoverPWButton');

	      self.recoverPW = function () {

	         self.loader = true;
	         var u_o_e = username_or_email.val();
	         console.log(u_o_e);

	         User.recoverPW(u_o_e).then(function (resp) {
	            console.log('GetPW Resp');
	            console.log(resp);
	            self.loader = false;
	            self.inputError = '';
	            $state.go('login');
	         }, function (err) {
	            console.log("Login ERR");
	            console.log(err);
	            self.inputError = "An Error Occured While Trying to Get your Password Reset Email";

	            self.loader = false;
	         });
	      };

	      recoverPWBtn.click(function () {
	         self.recoverPW();
	      });

	      username_or_email.on('keypress', function (e) {
	         var key = e.which || e.keyCode;
	         // //console.log(key);
	         if (key === Global.KEY_ENTER) {
	            self.recoverPWBtn();
	         }
	      });

	      angular.element($window).bind('resize', function () {
	         //Any time you attach event to $window with angular it becomes application wide Thus.. if state..
	         if ($state.is('login')) {
	            Global.updateScreenDims();
	            self.initScreen();
	         }
	      });

	      self.initScreen();
	   }]);
	};

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('ChangePWController', ['$window', '$state', 'Global', 'User', function ($window, $state, Global, User) {
	    //console.log("SignupController");
	    //console.log(Global);
	    //console.log(User);
	    var self = this;

	    self.initScreen = function () {};

	    console.log('ChangePasswordCtrl STATE');
	    console.log($state);
	    if ($state.params.username === undefined) {
	      $state.go('resetpw');
	    }

	    if ($state.params.code === undefined) {
	      $state.go('resetpw');
	    }

	    self.username = $state.params.username;
	    var temp_pswd = $state.params.code;

	    self.logUserIn = function () {
	      if (!User.loggedin) {
	        User.login(self.username, temp_pswd).then(function (resp) {
	          //console.log('Login Resp');
	          //console.log(resp);
	          self.loader = false;

	          self.loginError = '';
	        }, function (err) {
	          console.log("Login ERR");
	          console.log(err);

	          self.loader = false;
	          $state.go('resetpw');
	        });
	      }
	    };

	    self.logUserIn();

	    var new_password1 = $('#password1');
	    var new_password2 = $('#password2');

	    var changePWBtn = $('#changePWButton');

	    self.validatePW = function () {
	      var psswdmatchBool = false;
	      if (new_password1.val() !== new_password2.val()) {
	        psswdmatchBool = false;
	      } else {
	        psswdmatchBool = true;
	      }

	      return psswdmatchBool && User.loggedin;
	    };

	    self.validatePWerrorMsg = function () {

	      if (new_password1.val() !== new_password2.val()) {
	        return "Password Entries do not Match";
	      }
	    };

	    self.changePW = function () {

	      var p1 = new_password1.val();
	      var p2 = new_password2.val();

	      User.changePW(self.username, p1, p2).then(function (resp) {
	        console.log('Change Password Ctrl Resp');
	        console.log(resp);

	        $state.go('play');
	      }, function (err) {
	        console.log("Change Password ERR");
	        console.log(err);
	      });
	    };

	    changePWBtn.click(function () {
	      self.changePW();
	    });

	    new_password2.on('keypress', function (e) {
	      var key = e.which || e.keyCode;
	      // //console.log(key);
	      if (key === Global.KEY_ENTER) {
	        self.changePW();
	      }
	    });

	    angular.element($window).bind('resize', function () {
	      //Any time you attach event to $window with angular it becomes application wide Thus.. if state..
	      if ($state.is('signup')) {
	        Global.updateScreenDims();
	        self.initScreen();
	      }
	    });

	    self.initScreen();
	  }]);
	};

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
		'use strict';

		angular.module('Controllers').controller('AdvConfigController', ['$scope', '$state', '$http', 'Global', 'Cart', 'User', '$timeout', function ($scope, $state, $http, Global, Cart, User, $timeout) {

			var self = this;
			self.cart = Cart;

			if (self.cart.adv.advId > 0) {

				self.imageUploaded = false;
				self.fitimagePreview = new Image();
				self.fitimagePreview.src = 'public/advImages/sponsorshipavailable.png';

				self.fitimagePreview.onload = function () {
					console.log('Natrual Height and Width');
					console.log(self.fitimagePreview.naturalWidth);
					console.log(self.fitimagePreview.naturalHeight);
					self.imageRatio = self.fitimagePreview.naturalWidth / self.fitimagePreview.naturalHeight;

					self.drawFitImage();
				};

				self.aspectSelect = function (type) {
					self.cart.adv.aspect = type;

					self.drawFitImage();
				};
				self.drawDashedLines = function (ctx) {
					ctx.beginPath();
					ctx.setLineDash([3, 6]);
					ctx.strokeStyle = '#ccc';
					var istart = Math.floor(localCoordBottomLeftView[0]);
					var iend = Math.floor(localCoordTopRightView[0]) + 1;

					for (var i = istart; i < iend; i++) {

						var start = [i, localCoordBottomLeftView[1], 1];
						var end = [i, localCoordTopRightView[1], 1];

						start = Matrix.map(start);
						end = Matrix.map(end);

						ctx.moveTo(start[0], start[1]);
						ctx.lineWidth = zoom / 100;
						ctx.lineTo(end[0], end[1]);
						ctx.stroke();
					}
					ctx.closePath();
				};

				self.drawImage = function (ctx, w, h) {
					if (self.fitimagePreview.src === 'public/advImages/sponsorshipavailable.png') {
						var cirx = w / 2;
						var ciry = h / 2;

						var r2 = Math.max(w, h);

						var grd = ctx.createRadialGradient(cirx, ciry, 2, cirx, ciry, r2 / 2);
						grd.addColorStop(0, '#8ED6FF');
						grd.addColorStop(1, '#004CB3');

						ctx.fillStyle = grd;
						ctx.fillRect(-2, -2, w + 2, h + 2);
					}

					var adRatio = w / h;
					switch (self.cart.adv.aspect) {
						case 0:
							//Stretch
							ctx.drawImage(self.fitimagePreview, -2, -2, w + 2, h + 2);
							break;
						case 1:
							//Fit

							if (adRatio <= self.imageRatio) {
								//Flat
								var dy = (h - w / self.imageRatio) / 2;
								ctx.drawImage(self.fitimagePreview, -2, dy, w + 2, h - 2 * dy + 2);
							} else {
								// Tall
								var dx = (w - h * self.imageRatio) / 2;
								ctx.drawImage(self.fitimagePreview, dx, -2, w - 2 * dx + 2, h + 2);
							}

							break;
						case 2:
							//Fill


							if (adRatio <= self.imageRatio) {
								//Flat
								var dx = (h * self.imageRatio - w) / 2;
								console.log('w', w);
								console.log(dx);
								ctx.drawImage(self.fitimagePreview, -dx - 2, -2, w + 2 * dx + 2, h + 2);
							} else {
								//Tall
								var dy = (w / self.imageRatio - h) / 2;
								console.log('h', h);
								console.log(dy);
								ctx.drawImage(self.fitimagePreview, -2, -dy - 2, w + 2, h + 2 * dy + 2);
							}

							break;
						default:
							ctx.drawImage(self.fitimagePreview, -2, -2, w + 2, h + 2);

					}
				};

				self.drawFitImage = function () {
					console.log("DRAW SPONSORSHIP SPOT");

					var canvas = document.getElementById("advFitPreview");
					var width = 200;
					var height = self.cart.adv.height / self.cart.adv.width * width;
					canvas.width = width;
					canvas.height = height;

					var ctx = canvas.getContext("2d");

					//self.drawDashedLines(ctx);

					self.drawImage(ctx, width, height);
				};

				var loader = $('#loader');

				self.uploadProgress = 0;
				self.uploading = false;

				self.uploadProgressStyle = function () {
					return { 'width': self.uploadProgress + '%' };
				};

				self.linkInput = false;
				$('#advLink').blur();
				self.showHideInputLink = function () {
					if (self.linkInput) {
						self.linkInput = false;
						self.cart.adv.link = '';
						$('#advLink').blur();
					} else {
						self.linkInput = true;
						$('#advLink').blur();
					}
				};

				self.validateLink = function () {
					self.cart.adv.link = self.cart.adv.link.trim();
					var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");
					var is_validLink = false;
					is_validLink = regex.test(self.cart.adv.link);
					if (is_validLink) {
						self.cart.adv.hasLink = true;
					} else {
						self.cart.adv.hasLink = false;
					}
					return is_validLink;
				};

				self.uploadFileToUrl = function (file, uploadUrl) {
					console.log('UPLOAD URL');
					console.log(uploadUrl);
					var fd = new FormData();
					console.log('Files');
					console.log(file.files);
					fd.append('file', file.files[0]);
					fd.append('advId', self.cart.adv.advId);

					console.log(fd);

					self.uploadProgress = 0;

					var uploadAdvXhrCallConfig = {
						method: 'POST',
						url: uploadUrl,
						//params: null,
						data: fd,
						headers: { 'Content-Type': undefined, auth: User.token },
						eventHandlers: {
							readystatechange: function readystatechange(event) {
								if (event.currentTarget.readyState === 4) {
									console.log("readyState=4: Server has finished extra work!");
								}
							}
						},
						uploadEventHandlers: {
							progress: function progress(e) {
								if (e.lengthComputable) {
									self.uploadProgress = Math.round(e.loaded * 100 / e.total);
									console.log("progress: " + self.uploadProgress + "%");
									if (e.loaded === e.total) {
										console.log("File upload finished!");
										console.log("Server will perform extra work now...");
									}
								}
							}
						},
						//xsrfHeaderName: '',
						//xsrfCookieName: '',
						transformRequest: angular.identity, //function(data, headersGetter) {},
						//tranformResponse: function(data, headersGetter, status){},
						//paramSerializer: '',
						//cache: false,
						//timeout: null,
						//withCredentials: false,
						responseType: "json"
					};

					$http(uploadAdvXhrCallConfig).then(function (resp) {

						var uploadedImag = resp.data.img;
						var ext = uploadedImag.substr(uploadedImag.lastIndexOf('.'));

						var basename = uploadedImag.substr(0, uploadedImag.lastIndexOf('.'));
						var dateObj = new Date();

						self.previewImageSrc = 'public/advImages/' + self.cart.adv.advId + '/' + basename + "_M" + ext;
						self.fitimagePreviewSrc = 'public/advImages/' + self.cart.adv.advId + '/' + basename + "_L" + ext;

						console.log(self.previewImageSrc);

						loader.hide();

						document.getElementById("file" + self.cart.adv.advId).value = "";

						self.setAdvImageUploadPreview();
						self.uploading = false;
						self.imageUploaded = true;
						self.drawFitImage();
					}, function (err) {
						console.log('Image Upload Error');
						console.log(err);
						loader.hide();
						self.uploading = false;
					});
				};

				var loader = $('#loader');

				self.uploadAdvImg = function () {

					loader.show();
					self.uploading = true;
					var file = document.getElementById("file" + self.cart.adv.advId);
					var url = '/api/v1/adv/' + self.cart.adv.advId;
					console.log(url, file);
					self.uploadFileToUrl(file, url);
				};

				self.previewImageSrc = 'public/advImages/sponsorshipavailable.png';
				self.fitimagePreviewSrc = 'public/advImages/sponsorshipavailable.png';

				self.setAdvImageUploadPreview = function () {

					var advImageUploadPreview = new Image();

					advImageUploadPreview.src = self.previewImageSrc;
					self.fitimagePreview.src = self.fitimagePreviewSrc;

					advImageUploadPreview.onload = function () {

						var w = advImageUploadPreview.naturalWidth;
						var h = advImageUploadPreview.naturalHeight;
						console.log('Width');
						console.log(w);
						console.log('Height');
						console.log(h);
						advImageUploadPreview.width = 100;
						advImageUploadPreview.height = h / w * 100;
					};

					var advImageUploadPreviewDiv = document.getElementById('advImageUploadPreview');
					advImageUploadPreviewDiv.innerHTML = "";
					advImageUploadPreviewDiv.appendChild(advImageUploadPreview);
				};

				self.checkoutDisable = function () {
					if (self.linkInput && self.validateLink() && self.imageUploaded) {
						return false;
					} else if (self.imageUploaded && !self.linkInput) {
						return false;
					} else {
						return true;
					}
				};
				self.checkout = function () {

					$state.go('cart');
				};

				$timeout(function () {
					self.setAdvImageUploadPreview();
				}, 100);
			}
		}]);
	};

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('PayPalSucessController', ['$window', '$state', 'Global', 'User', '$http', function ($window, $state, Global, User, $http) {
	    //console.log("SignupController");
	    //console.log(Global);
	    //console.log(User);
	    var self = this;

	    self.initScreen = function () {};

	    self.passedData = '';

	    $http.get('api/v1/paypalpaymentdetails').then(function (resp) {
	      console.log("RESPONS FROM PAYPAL PAYEMNT SUCCESS GET");
	      console.log(resp);
	      self.passedData = resp;
	      self.initScreen();
	    }, function (err) {

	      console.log("RESPONS FROM PAYPAL PAYEMNT SUCCESS GET ERR");
	      console.log(err);
	    });

	    angular.element($window).bind('resize', function () {
	      //Any time you attach event to $window with angular it becomes application wide Thus.. if state..
	      if ($state.is('signup')) {
	        Global.updateScreenDims();
	        self.initScreen();
	      }
	    });
	  }]);
	};

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('PaymentsuccessController', ['$state', 'Global', 'Cart', '$http', 'User', function ($state, Global, Cart, $http, User) {

	    var self = this;

	    self.cart = Cart;

	    self.receipt = self.cart.printTransaction();

	    self.cart.clearItems();

	    console.log("Cart");
	    console.log(self.cart);

	    self.backtoStore = function () {
	      console.log('Back to Store');
	      $state.go('store');
	    };
	  }]);
	};

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	__webpack_require__(5);
	var $ = __webpack_require__(3);

	module.exports.controller = function () {
	  'use strict';

	  angular.module('Controllers').controller('PaymentfailController', ['$state', 'Global', 'Cart', '$http', 'User', function ($state, Global, Cart, $http, User) {

	    var self = this;

	    self.cart = Cart;

	    self.receipt = self.cart.printTransaction();

	    //self.cart.clearItems();

	    console.log("Cart");
	    console.log(self.cart);

	    self.backtoStore = function () {
	      console.log('Back to Store');
	      $state.go('store');
	    };
	  }]);
	};

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('homePanelAdmin', ['$window', '$state', '$http', 'Global', 'User', function ($window, $state, $http, Global, User) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/homepaneladmin';
			directiveObj.controllerAs = 'homeAdminCtrl';

			directiveObj.controller = function () {
				var self = this;

				///Control Tabs
				self.adminSwitchBoard = true;
				self.adminBuildLevel = false;
				self.adminKeyValueCRUD = false;
				self.scratchTests = false;

				self.activatePanel = function (ind) {
					switch (ind) {
						case 0:
							self.adminSwitchBoard = true;
							self.adminBuildLevel = false;
							self.adminKeyValueCRUD = false;
							self.scratchTests = false;
							break;

						case 1:
							self.adminSwitchBoard = false;
							self.adminBuildLevel = true;
							self.adminKeyValueCRUD = false;
							self.scratchTests = false;
							break;

						case 2:
							self.adminSwitchBoard = false;
							self.adminBuildLevel = false;
							self.adminKeyValueCRUD = true;
							self.scratchTests = false;
							break;

						case 3:
							self.adminSwitchBoard = false;
							self.adminBuildLevel = false;
							self.adminKeyValueCRUD = false;
							self.scratchTests = true;
							break;

						default:
							self.adminSwitchBoard = true;
							self.adminBuildLevel = false;
							self.adminKeyValueCRUD = false;
							self.scratchTests = false;
					}
				};

				///READ admin key Value ///

				$http.get('api/v1/admin/keyvals', { headers: { auth: User.token } }).then(function (resp) {
					console.log('RESPONSE Get AdminVals');
					console.log(resp);
					self.adminKeyValueObjArray = [];
					var arrLen = resp.data.length;
					for (var i = 0; i < arrLen; i++) {
						self.adminKeyValueObjArray[i] = {};
						self.adminKeyValueObjArray[i][resp.data[i].keyname] = JSON.parse(resp.data[i].valuestring);
					}

					console.log(self.adminKeyValueObjArray);
				}, function (err) {

					console.log('RESPONSE Get AdminVals Err');
					console.log(err);
				});

				////UPDATE admin key Value ///


				////////////////////////////////////////////////////////////////////////////
				////////////////////////////////////////////////////////////////////////////
				/////////////////////////////////////////////////////////////////////////
				/////////////Scratch Tests --- HIT SERVER END POINTS ///////////////
				////////////////////////////////////////////////////////////////////////////
				////////////////////////////////////////////////////////////////////////////
				/////////////////////////////////////////////////////////////////////////


				///Scratch Tests --- HIT SERVER END POINTS ////
				self.paypalPaymentSuccessEndpointTestAjax = function () {
					$http.post('paypalpaymentsuccess', {}).then(function (resp) {
						console.log("RESPONS FROM PAYPAL PAYEMNT SUCCESS");
						console.log(resp);
					}, function (err) {

						console.log("RESPONS FROM PAYPAL PAYEMNT SUCCESS ERR");
						console.log(err);
					});
				};

				self.paypalPaymentSuccessEndpointTestFORM = function () {
					var form = document.createElement("form");
					form.setAttribute("method", "post");
					form.setAttribute("action", "/paypalpaymentsuccess");

					//for(var key in checkout) {
					// if(checkout.hasOwnProperty(key)) {
					//	 var hiddenField = document.createElement("input");
					//	 hiddenField.setAttribute("type", "hidden");
					//	 hiddenField.setAttribute("name", key);
					// hiddenField.setAttribute("value", checkout[key]);

					// 	 form.appendChild(hiddenField);
					//	 }
					//}

					document.body.appendChild(form);
					form.submit();
					form.parentNode.removeChild(form);
				};

				self.paypalRESTTesting = function () {
					console.log('PAY PAL REST TESTING');

					$http.post('api/v1/paypal/create-payment', {}).then(function (resp) {
						console.log("RESPONS FROM PAYPAL PAYEMNT SUCCESS");
						console.log(resp);
					}, function (err) {

						console.log("RESPONS FROM PAYPAL PAYEMNT SUCCESS ERR");
						console.log(err);
					});
				};

				self.coinbaseAPIposts = function (uri) {
					console.log('coinbaseAPI REST TESTING');
					console.log(uri);

					$http.post(uri, {}, { headers: { auth: User.token } }).then(function (resp) {
						console.log("RESPONS FROM coinbaseAPIPosts");
						console.log(resp);
					}, function (err) {

						console.log("RESPONS FROM coinbaseAPIPosts ERR");
						console.log(err);
					});
				};

				////////////////////////////////////////////////////////////////////////////
				////////////////////////////////////////////////////////////////////////////
				/////////////////////////////////////////////////////////////////////////
				////////////////////////////////////////////
				///////LEVEL BUILD POST DATA /////////////////
				self.levelForBuild = '';
				self.minX = -25;
				self.minY = -25;
				self.maxX = 25;
				self.maxY = 25;

				self.buildLargeLevel = function () {
					var sendObj = {};

					sendObj.level = self.levelForBuild;
					sendObj.minX = self.minX;
					sendObj.minY = self.minY;
					sendObj.maxX = self.maxX;
					sendObj.maxY = self.maxY;

					$http.post('api/v1/admin/buildLevel', sendObj, { headers: { auth: User.token } }).then(function (resp) {
						console.log('RESPONSE LEVEL BUILD');
						console.log(resp);
						alert('DONE BUILDING LEVEL');
					}, function (err) {
						console.log('RESPONSE LEVEL BUILD ERR');
						console.log(err);
					});
				};
				////////////////////////////////////////////
				////////////////////////////////////////////
				////////////////////////////////////////////////////////////////////////////
				////////////////////////////////////////////////////////////////////////////
				/////////////////////////////////////////////////////////////////////////
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
	  'use strict';

	  angular.module('Directives').directive('storePanelAdmin', ['$window', '$state', '$http', 'Global', 'User', 'Merch', function ($window, $state, $http, Global, User, Merch) {
	    var directiveObj = {};

	    directiveObj.restrict = 'E';
	    directiveObj.templateUrl = 'partials/storeadmin';
	    directiveObj.controllerAs = 'storeCtrl';

	    directiveObj.controller = function () {
	      var self = this;

	      function clearAdvInputs() {

	        document.getElementById('file').value = null;
	      }

	      self.adminstore = [];

	      self.getadminstore = function () {

	        self.adminstore = [];
	        Merch.getStore().then(function (resp) {
	          console.log("GET STORE IN ADMIN STORE");
	          console.log(resp);
	          self.adminstore = resp;
	        }, function (err) {});
	      };

	      console.log('ADMIN Store CONROLLER');

	      console.log('$state in the StorePanelContainer', $state);

	      self.addsellableitem = function () {
	        $('#AddSellableItem').modal('toggle');
	      };

	      self.addnewitem = { sku: '',
	        name: '',
	        baseprice: '',
	        wholesaleprice: ''
	      };

	      self.submitaddnewitempost = function () {
	        console.log('Add New Item');
	        console.log(self.addnewitem);

	        $http.post('/api/v1/merch', self.addnewitem, {
	          headers: {
	            auth: User.token
	          }
	        }).then(function (resp) {
	          console.log('Add store item Response');

	          console.log(resp);

	          $('#AddSellableItem').modal('toggle');

	          self.getadminstore();
	        }, function (err) {
	          console.log('Add store item Err');

	          console.log(err);
	        });
	      };

	      self.deletestoreitemmodal = function (itemid) {
	        self.delitemid = itemid;
	        $('#DeleteProduct').modal('toggle');
	      };
	      self.delitemsku = '';

	      self.deleteitem = function (itemid) {

	        $http.delete('/api/v1/merch/' + itemid, {
	          headers: {
	            auth: User.token
	          }
	        }).then(function (resp) {
	          console.log('Delete item Response');

	          console.log(resp);
	          $('#DeleteProduct').modal('toggle');
	          self.getadminstore();
	        }, function (err) {
	          console.log('Delete item Err');
	          $('#DeleteProduct').modal('toggle');
	          console.log(err);
	        });
	      };

	      self.storeitembg = function (ind) {
	        if (ind % 2 == 0) {
	          return { 'background-color': '#e6e6e6', 'margin-bottom': '20px' };
	        } else {
	          return { 'background-color': '#FFF', 'margin-bottom': '20px' };
	        }
	      };

	      self.getadminstore();
	    };

	    return directiveObj;
	  }]);
	};

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('advertisersPanelAdmin', ['$window', '$state', '$http', 'Global', 'User', function ($window, $state, $http, Global, User) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/advertisersadmin';
			directiveObj.controllerAs = 'advertisersCtrl';

			directiveObj.controller = function () {
				var self = this;

				console.log('$state in the advertisersAdmin', $state);

				self.advs = [];
				$http.get('api/v1/adv', { headers: { auth: User.token } }).then(function (resp) {
					console.log('admin get advs');
					console.log(resp);
					self.advs = resp.data;
				}, function (err) {

					console.log('admin get advs ERR');
					console.log(err);
				});
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('advsPanelAdmin', ['$window', '$state', '$http', 'Global', 'User', '$q', function ($window, $state, $http, Global, User, $q) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/advsadmin';
			directiveObj.controllerAs = 'advsCtrl';

			directiveObj.controller = function () {
				var self = this;

				self.numPerPage = 10;
				self.currentpage = 0;
				self.numPages = function () {
					return $q(function (resolve, reject) {

						$http.get('/api/v1/advCount', { headers: { auth: User.token } }).then(function (resp) {
							console.log('Get advCount Resp');
							console.log(resp);

							resolve(Math.ceil(resp.data / self.numPerPage));
						}, function (err) {

							console.log('admin get advs ERR');
							console.log(err);
							reject(err);
						});
					});
				};

				self.list = [];

				self.getList = function (page) {
					self.currentpage = page;
					$http.get('api/v1/adv?limit=' + self.numPerPage + '&page=' + self.currentpage, { headers: { auth: User.token } }).then(function (resp) {
						console.log('admin get advs');
						console.log(resp);
						self.list = resp.data;
					}, function (err) {

						console.log('admin get advs ERR');
						console.log(err);
					});
				};

				self.getList(self.currentpage);
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('xonumiaPanelAdmin', ['$window', '$state', '$http', 'Global', 'User', '$q', '$rootScope', function ($window, $state, $http, Global, User, $q, $rootScope) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/xonumiaadmin';
			directiveObj.controllerAs = 'xoadminCtrl';

			directiveObj.controller = function () {
				var self = this;

				console.log('$state in the XonumiaAdminPanel', $state);

				self.list = [];

				self.currentpage = 0;

				self.numPerPage = 10;

				self.numPages = function () {
					return $q(function (resolve, reject) {

						$http.get('/api/v1/xnumCount', { headers: { auth: User.token } }).then(function (resp) {
							console.log('Get Xnum Resp');
							console.log(resp);

							resolve(Math.ceil(resp.data / self.numPerPage));
						}, function (err) {

							console.log('admin get advs ERR');
							console.log(err);
							reject(err);
						});
					});
				};

				self.getList = function (page) {

					self.currentpage = page;

					$http.get('/api/v1/xnum?limit=' + self.numPerPage + '&page=' + self.currentpage, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Get Xnum Resp');
						console.log(resp);

						self.list = resp.data;
					}, function (err) {

						console.log('admin get advs ERR');
						console.log(err);
					});

					console.log('YEAS');
				};

				self.getList(self.currentpage);

				self.deleteXnum = function (id) {
					console.log('Delete XNUM');
					console.log(id);

					$http.delete('/api/v1/xnum/' + id, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Get Xnum Resp');
						console.log(resp);
						self.list = self.list.filter(function (x) {
							return x.id !== id;
						});
					}, function (err) {

						console.log('admin get advs ERR');
						console.log(err);
					});
				};
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
	  'use strict';

	  angular.module('Directives').directive('playerPanelAdmin', ['$window', '$state', '$http', 'Global', 'User', function ($window, $state, $http, Global, User) {
	    var directiveObj = {};

	    directiveObj.restrict = 'E';
	    directiveObj.templateUrl = 'partials/playeradmin';
	    directiveObj.controllerAs = 'playerAdminCtrl';

	    directiveObj.controller = function () {
	      var self = this;

	      console.log('$state in the payoutAdminPanel', $state);
	    };

	    return directiveObj;
	  }]);
	};

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('payoutPanelAdmin', ['$window', '$state', '$http', 'Global', 'User', '$q', function ($window, $state, $http, Global, User, $q) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/payoutadmin';
			directiveObj.controllerAs = 'payoutCtrl';

			directiveObj.controller = function () {
				var self = this;

				self.numPerPage = 10;
				self.currentpage = 0;
				self.numPages = function () {
					return $q(function (resolve, reject) {

						$http.get('api/v1/xnumPayment', { headers: { auth: User.token } }).then(function (resp) {
							console.log('Get advCount Resp');
							console.log(resp);

							resolve(Math.ceil(resp.data / self.numPerPage));
						}, function (err) {

							console.log('admin get advs ERR');
							console.log(err);
							reject(err);
						});
					});
				};

				self.list = [];

				self.getList = function (page) {
					self.currentpage = page;
					$http.get('api/v1/xnumPayment?limit=' + self.numPerPage + '&page=' + self.currentpage, { headers: { auth: User.token } }).then(function (resp) {
						console.log('admin get advs');
						console.log(resp);
						self.list = resp.data;
					}, function (err) {

						console.log('admin get advs ERR');
						console.log(err);
					});
				};

				self.getList(self.currentpage);
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('levelsPanelAdmin', ['$window', '$state', '$http', 'Global', 'User', '$q', function ($window, $state, $http, Global, User, $q) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/leveladmin';
			directiveObj.controllerAs = 'levelAdminCtrl';

			directiveObj.controller = function () {
				var self = this;

				console.log('$state in the levelAdminPanel', $state);

				self.list = [];

				self.currentpage = 0;

				self.numPerPage = 10;

				self.numPages = function () {
					return $q(function (resolve, reject) {

						$http.get('/api/v1/mapsCount', { headers: { auth: User.token } }).then(function (resp) {
							console.log('Get Maps Count Resp');
							console.log(resp);

							resolve(Math.ceil(resp.data / self.numPerPage));
						}, function (err) {

							console.log('admin get advs ERR');
							console.log(err);
							reject(err);
						});
					});
				};

				self.getList = function (page) {
					self.currentpage = page;

					$http.get('/api/v1/maps?limit=' + self.numPerPage + '&page=' + self.currentpage, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Get Xnum Resp');
						console.log(resp);

						self.list = resp.data;
					}, function (err) {

						console.log('admin get advs ERR');
						console.log(err);
					});

					console.log('YEAS');
				};

				self.getList(self.currentpage);
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
	  'use strict';

	  angular.module('Directives').directive('commentsPanelAdmin', ['$window', '$state', '$http', 'Global', 'User', '$q', function ($window, $state, $http, Global, User, $q) {
	    var directiveObj = {};

	    directiveObj.restrict = 'E';
	    directiveObj.templateUrl = 'partials/commentsadmin';
	    directiveObj.controllerAs = 'commentsAdminCtrl';

	    directiveObj.controller = function () {
	      var self = this;

	      console.log('USER');
	      console.log(User);
	      console.log('$state in the commentsAdminPanel', $state);

	      self.numPerPage = 10;
	      self.currentpage = 0;
	      self.numPages = function () {
	        return $q(function (resolve, reject) {

	          $http.get('/api/v1/commentsCount', { headers: { auth: User.token } }).then(function (resp) {
	            console.log('Get advCount Resp');
	            console.log(resp);

	            resolve(Math.ceil(resp.data / self.numPerPage));
	          }, function (err) {

	            console.log('admin get advs ERR');
	            console.log(err);
	            reject(err);
	          });
	        });
	      };

	      self.list = [];

	      self.getList = function (page) {
	        $('#contactusmsglistloading').show();
	        self.currentpage = page;
	        $http.get('api/v1/comments?limit=' + self.numPerPage + '&page=' + self.currentpage, { headers: { auth: User.token } }).then(function (resp) {
	          console.log('admin get advs');
	          console.log(resp);
	          self.list = resp.data;
	          $('#contactusmsglistloading').hide();
	        }, function (err) {

	          console.log('admin get advs ERR');
	          console.log(err);
	          $('#contactusmsglistloading').hide();
	        });
	      };

	      self.getList(self.currentpage);

	      self.deletecomment = function (msgID) {

	        var deleteContactUsXhrCallConfig = {
	          method: 'DELETE',
	          url: 'api/v1/comments/' + msgID,
	          //params: null,
	          //data: loginData,
	          headers: { auth: User.token },
	          //eventHandlers: {},
	          //uploadEventHandlers: {},
	          //xsrfHeaderName: '',
	          //xsrfCookieName: '',
	          //transformRequest: function(data, headersGetter) {},
	          //tranformResponse: function(data, headersGetter, status){},
	          //paramSerializer: '',
	          //cache: false,
	          //timeout: null,
	          //withCredentials: false,
	          responseType: "json"
	        };

	        $http(deleteContactUsXhrCallConfig).then(function (resp) {
	          self.getcontactusMsgs();
	          $('#contactusmsglistloading').hide();
	        }, function (err) {
	          //console.log('Get PayList ERR Response');   
	          // console.log(err);
	          self.cterr = err.data;
	          $('#contactusmsglistloading').hide();
	        });
	      };

	      ///////////////////////////////////////////////////////////////////////////////////////////////
	    };

	    return directiveObj;
	  }]);
	};

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('merchStorePanel', ['$window', '$state', '$http', 'Global', 'User', 'Merch', 'Cart', function ($window, $state, $http, Global, User, Merch, Cart) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/merchstore';
			directiveObj.controllerAs = 'merchstoreCtrl';

			directiveObj.controller = function () {
				var self = this;

				Merch.getStore().then(function (resp) {
					self.store = resp;
					console.log('Merch Get Store');
					console.log(resp);
				}, function (err) {

					console.log('Merch Get StoreERR');
					console.log(err);
				});

				console.log('$state in the merchStorePanel', $state);

				self.cart = Cart;
				console.log('CART?');
				console.log(self.cart);
				self.cart.codeApplied = false;

				self.cart.applyDiscountCode = function () {

					if (!self.cart.codeApplied) {

						$http.post('server/api/redeemcouponcode/', { code: self.cart.discountCode }).then(function (resp) {
							//console.log('Test Angular Get Call in The Shopping Cart JS');
							//console.log(resp);


							if (resp.data.message.wholesale) {
								//then set discount to not applied and update all pricing to wholesale.
								self.cart.codeApplied = false;
								self.cart.discount = 1;

								self.cart.iswholesale = true;
								//so go through the cart model and update unit pricing, and then go through the store model and update the pricing.

								for (var i = 0; i < self.store.products.length; i++) {

									self.store.products[i].price = self.store.products[i].wholesaleprice;
								}

								if (self.cart.items.length > 0) {
									/////clear cart/////
									self.cart.clearItems();

									alert('Sorry -- The items currently in your cart have to be removed to get wholesale pricing. \n\n You now have to re-load your cart. \n\n For future reference click the wholesale link at the bottom of the page and first enter the code and then checkout.');
								}

								//  $('#discountContainer').css('display', 'none');
								// $('#discountContainer').hide();
							} else {
								self.cart.codeApplied = true;
								self.cart.iswholesale = false;
								// console.log(resp.message);
								self.cart.discount = resp.data.message.discountamount;
								//$('#discountContainer').css('display', 'none');
							}
						}, function (err) {
							//console.log('Test Angular Get Call in The Shopping Cart JS ERRRR');
							//console.log(err);
							self.discountcodeerr = err.data.message;
						});
					}
				};

				self.optionsChanged = function (e, prodSku) {
					//console.log(prodSku);
					//console.log(e.target);

				};
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('productOptions', ['$window', '$timeout', '$location', function ($window, $timeout, $location) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/productoptions';
			directiveObj.scope = {
				prod: '=product',
				iswholesale: '=iswholesale'
			};
			directiveObj.link = function ($scope, $element, $attrs) {

				console.log('PROD OPTION cats IN SCOPE');
				console.log($scope.prod);

				$scope.prod.selected = {};
				for (var i = 0; i < $scope.prod.prodoptioncats.length; i++) {
					console.log('Prod Selected ');
					console.log($scope.prod.selected);
					$scope.prod.selected[$scope.prod.prodoptioncats[i].name] = $scope.prod.prodoptioncats[i].options[0].name;
				}
				console.log($scope.prod);

				$scope.optionchanged = function (cat, opt) {
					var imageChangedOnce = false;
					console.log(cat, opt);

					if ($scope.iswholesale) {
						var price = $scope.prod.wholesaleprice;
					} else {
						var price = $scope.prod.baseprice;
					}
					//console.log(price);

					$scope.prod.price = price;

					console.log('PROD OPTION cats IN SCOPE');
					console.log($scope.prod.prodoptioncats);

					for (var key in $scope.prod.prodoptioncats) {

						for (var i = 0; i < $scope.prod.prodoptioncats[key].options.length; i++) {}

						//  if($scope.prod.options[key][i][0] === $scope.prod.selected[key][0]){
						//       if($scope.iswholesale){
						//	 $scope.prod.price = $scope.prod.selected[key][1]*0.5 + $scope.prod.price;
						//	
						//	  $('[data-img-for-sku="'+$scope.prod.sku+'"]').each(function( index ) {
						//		  console.log('Try and update main pic to match option');
						//		  console.log($scope.prod.sku);
						//		  console.log($scope.prod.options[key][i][2]);
						//		         if(!imageChangedOnce){ 
						//                     $(this).attr('src', $scope.prod.Simgs[$scope.prod.options[key][i][2]]);
						//                    console.log( index + ": " + $( this ).text() );
						//							  imageChangedOnce = true;
						//					}
						//              });
						//
						///		 }else{
						//		  $scope.prod.price = $scope.prod.selected[key][1] + $scope.prod.price;
						//		 

						//		  $('[data-img-for-sku="'+$scope.prod.sku+'"]').each(function( index ) {
						//			  console.log('Try and update main pic to match option');
						//			  console.log($scope.prod.sku);
						//			  console.log($scope.prod.options[key][i][2]);
						//			  console.log("OPTION IMAGE KEY");
						//			  console.log($scope.prod.options[key][i][2]);
						//									if(!imageChangedOnce){ 
						//                            $(this).attr('src', $scope.prod.Simgs[$scope.prod.options[key][i][2]]);
						//                           console.log( index + ": " + $( this ).attr('src') );
						//								 imageChangedOnce = true;
						//									}

						//                      });

						//     }
						//for each options..
					} //for each prodoptioncats
				}; // optionchanged....

			};

			return directiveObj;
		}]);
	};

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	__webpack_require__(112).fn($);
	//require('../../libs/lightgallery.js');
	__webpack_require__(113);
	__webpack_require__(115);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('zoomproductPics', ['$timeout', '$window', '$location', '$state', 'Merch', function ($timeout, $window, $location, $state, Merch) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/zoompics';
			directiveObj.scope = {
				prod: '=product'
			};

			directiveObj.link = function ($scope, $element, $attrs) {

				$scope.clickThumb = function ($event) {
					$("#img_" + $scope.prod.id).parent().trigger('zoom.destroy');
					var targetid = $($event.target).attr('id');
					$scope.currentImg = Number(targetid.substr(9));
					$scope.initialize();
				};
				console.log("PRODUCT IN ZOOM PICS");
				console.log($scope);

				$scope.initialize = function () {
					console.log($scope.currentImg);
					console.log("HELLO INIT ZOOM");
					console.log('public/prodImages/' + $scope.prod.id + '/' + $scope.prod.prodimgs[$scope.currentImg].imgM);

					$("#img_" + $scope.prod.id).attr('src', 'public/prodImages/' + $scope.prod.id + '/' + $scope.prod.prodimgs[$scope.currentImg].imgM);

					$("#img_" + $scope.prod.id).css('display', 'block').parent().zoom({ url: 'public/prodImages/' + $scope.prod.id + '/' + $scope.prod.prodimgs[$scope.currentImg].imgL });
				};

				$scope.imgGalclick = function () {

					var dynamicEl = [];
					for (var i = 0; i < $scope.prod.prodimgs.length; i++) {
						dynamicEl.push({ "src": 'public/prodImages/' + $scope.prod.id + '/' + $scope.prod.prodimgs[i].imgL,
							'thumb': 'public/prodImages/' + $scope.prod.id + '/' + $scope.prod.prodimgs[i].imgS
						});
					}

					lightGallery(document.getElementById('lighthouse'), {
						dynamic: true,
						thumbnail: true,
						dynamicEl: dynamicEl
					});
				};

				$scope.currentImg = 0;
				$timeout(function () {
					$scope.initialize();
				}, 1000);
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 112 */
/***/ function(module, exports) {

	'use strict';

	module.exports.fn = function ($) {
		console.log('ZOOM BABY');
		/*!
	 	Zoom 1.7.18
	 	license: MIT
	 	http://www.jacklmoore.com/zoom
	 */

		var defaults = {
			url: false,
			callback: false,
			target: false,
			duration: 120,
			on: 'mouseover', // other options: grab, click, toggle
			touch: true, // enables a touch fallback
			onZoomIn: false,
			onZoomOut: false,
			magnify: 1
		};

		// Core Zoom Logic, independent of event listeners.
		$.zoom = function (target, source, img, magnify) {
			var targetHeight,
			    targetWidth,
			    sourceHeight,
			    sourceWidth,
			    xRatio,
			    yRatio,
			    offset,
			    $target = $(target),
			    position = $target.css('position'),
			    $source = $(source);

			// The parent element needs positioning so that the zoomed element can be correctly positioned within.
			target.style.position = /(absolute|fixed)/.test(position) ? position : 'relative';
			target.style.overflow = 'hidden';
			img.style.width = img.style.height = '';

			$(img).addClass('zoomImg').css({
				position: 'absolute',
				top: 0,
				left: 0,
				opacity: 0,
				width: img.width * magnify,
				height: img.height * magnify,
				border: 'none',
				maxWidth: 'none',
				maxHeight: 'none'
			}).appendTo(target);

			return {
				init: function init() {
					targetWidth = $target.outerWidth();
					targetHeight = $target.outerHeight();

					if (source === target) {
						sourceWidth = targetWidth;
						sourceHeight = targetHeight;
					} else {
						sourceWidth = $source.outerWidth();
						sourceHeight = $source.outerHeight();
					}

					xRatio = (img.width - targetWidth) / sourceWidth;
					yRatio = (img.height - targetHeight) / sourceHeight;

					offset = $source.offset();
				},
				move: function move(e) {
					var left = e.pageX - offset.left,
					    top = e.pageY - offset.top;

					top = Math.max(Math.min(top, sourceHeight), 0);
					left = Math.max(Math.min(left, sourceWidth), 0);

					img.style.left = left * -xRatio + 'px';
					img.style.top = top * -yRatio + 'px';
				}
			};
		};

		$.fn.zoom = function (options) {
			return this.each(function () {
				var settings = $.extend({}, defaults, options || {}),

				//target will display the zoomed image
				target = settings.target && $(settings.target)[0] || this,

				//source will provide zoom location info (thumbnail)
				source = this,
				    $source = $(source),
				    img = document.createElement('img'),
				    $img = $(img),
				    mousemove = 'mousemove.zoom',
				    clicked = false,
				    touched = false;

				// If a url wasn't specified, look for an image element.
				if (!settings.url) {
					var srcElement = source.querySelector('img');
					if (srcElement) {
						settings.url = srcElement.getAttribute('data-src') || srcElement.currentSrc || srcElement.src;
					}
					if (!settings.url) {
						return;
					}
				}

				$source.one('zoom.destroy', function (position, overflow) {
					$source.off(".zoom");
					target.style.position = position;
					target.style.overflow = overflow;
					img.onload = null;
					$img.remove();
				}.bind(this, target.style.position, target.style.overflow));

				img.onload = function () {
					var zoom = $.zoom(target, source, img, settings.magnify);

					function start(e) {
						zoom.init();
						zoom.move(e);

						// Skip the fade-in for IE8 and lower since it chokes on fading-in
						// and changing position based on mousemovement at the same time.
						$img.stop().fadeTo($.support.opacity ? settings.duration : 0, 1, $.isFunction(settings.onZoomIn) ? settings.onZoomIn.call(img) : false);
					}

					function stop() {
						$img.stop().fadeTo(settings.duration, 0, $.isFunction(settings.onZoomOut) ? settings.onZoomOut.call(img) : false);
					}

					// Mouse events
					if (settings.on === 'grab') {
						$source.on('mousedown.zoom', function (e) {
							if (e.which === 1) {
								$(document).one('mouseup.zoom', function () {
									stop();

									$(document).off(mousemove, zoom.move);
								});

								start(e);

								$(document).on(mousemove, zoom.move);

								e.preventDefault();
							}
						});
					} else if (settings.on === 'click') {
						$source.on('click.zoom', function (e) {
							if (clicked) {
								// bubble the event up to the document to trigger the unbind.
								return;
							} else {
								clicked = true;
								start(e);
								$(document).on(mousemove, zoom.move);
								$(document).one('click.zoom', function () {
									stop();
									clicked = false;
									$(document).off(mousemove, zoom.move);
								});
								return false;
							}
						});
					} else if (settings.on === 'toggle') {
						$source.on('click.zoom', function (e) {
							if (clicked) {
								stop();
							} else {
								start(e);
							}
							clicked = !clicked;
						});
					} else if (settings.on === 'mouseover') {
						zoom.init(); // Preemptively call init because IE7 will fire the mousemove handler before the hover handler.

						$source.on('mouseenter.zoom', start).on('mouseleave.zoom', stop).on(mousemove, zoom.move);
					}

					// Touch fallback
					if (settings.touch) {
						$source.on('touchstart.zoom', function (e) {
							e.preventDefault();
							if (touched) {
								touched = false;
								stop();
							} else {
								touched = true;
								start(e.originalEvent.touches[0] || e.originalEvent.changedTouches[0]);
							}
						}).on('touchmove.zoom', function (e) {
							e.preventDefault();
							zoom.move(e.originalEvent.touches[0] || e.originalEvent.changedTouches[0]);
						}).on('touchend.zoom', function (e) {
							e.preventDefault();
							if (touched) {
								touched = false;
								stop();
							}
						});
					}

					if ($.isFunction(settings.callback)) {
						settings.callback.call(img);
					}
				};

				img.src = settings.url;
			});
		};

		$.fn.zoom.defaults = defaults;
	};

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";

	(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(114)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(require('./lg-utils'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(global.lgUtils);
	        global.lightgallery = mod.exports;
	    }
	})(undefined, function (_lgUtils) {
	    'use strict';

	    var _lgUtils2 = _interopRequireDefault(_lgUtils);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var _extends = Object.assign || function (target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];

	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }

	        return target;
	    };

	    /** Polyfill the CustomEvent() constructor functionality in Internet Explorer 9 and higher */
	    (function () {

	        if (typeof window.CustomEvent === 'function') {
	            return false;
	        }

	        function CustomEvent(event, params) {
	            params = params || {
	                bubbles: false,
	                cancelable: false,
	                detail: undefined
	            };
	            var evt = document.createEvent('CustomEvent');
	            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
	            return evt;
	        }

	        CustomEvent.prototype = window.Event.prototype;

	        window.CustomEvent = CustomEvent;
	    })();

	    window.utils = _lgUtils2.default;
	    window.lgData = {
	        uid: 0
	    };

	    window.lgModules = {};
	    var defaults = {

	        mode: 'lg-slide',

	        // Ex : 'ease'
	        cssEasing: 'ease',

	        //'for jquery animation'
	        easing: 'linear',
	        speed: 600,
	        height: '100%',
	        width: '100%',
	        addClass: '',
	        startClass: 'lg-start-zoom',
	        backdropDuration: 150,
	        hideBarsDelay: 6000,

	        useLeft: false,

	        closable: true,
	        loop: true,
	        escKey: true,
	        keyPress: true,
	        controls: true,
	        slideEndAnimatoin: true,
	        hideControlOnEnd: false,
	        mousewheel: false,

	        getCaptionFromTitleOrAlt: true,

	        // .lg-item || '.lg-sub-html'
	        appendSubHtmlTo: '.lg-sub-html',

	        subHtmlSelectorRelative: false,

	        /**
	         * @desc number of preload slides
	         * will exicute only after the current slide is fully loaded.
	         *
	         * @ex you clicked on 4th image and if preload = 1 then 3rd slide and 5th
	         * slide will be loaded in the background after the 4th slide is fully loaded..
	         * if preload is 2 then 2nd 3rd 5th 6th slides will be preloaded.. ... ...
	         *
	         */
	        preload: 1,
	        showAfterLoad: true,
	        selector: '',
	        selectWithin: '',
	        nextHtml: '',
	        prevHtml: '',

	        // 0, 1
	        index: false,

	        iframeMaxWidth: '100%',

	        download: true,
	        counter: true,
	        appendCounterTo: '.lg-toolbar',

	        swipeThreshold: 50,
	        enableSwipe: true,
	        enableDrag: true,

	        dynamic: false,
	        dynamicEl: [],
	        galleryId: 1
	    };

	    function Plugin(element, options) {

	        // Current lightGallery element
	        this.el = element;

	        // lightGallery settings
	        this.s = _extends({}, defaults, options);

	        // When using dynamic mode, ensure dynamicEl is an array
	        if (this.s.dynamic && this.s.dynamicEl !== 'undefined' && this.s.dynamicEl.constructor === Array && !this.s.dynamicEl.length) {
	            throw 'When using dynamic mode, you must also define dynamicEl as an Array.';
	        }

	        // lightGallery modules
	        this.modules = {};

	        // false when lightgallery complete first slide;
	        this.lGalleryOn = false;

	        this.lgBusy = false;

	        // Timeout function for hiding controls;
	        this.hideBartimeout = false;

	        // To determine browser supports for touch events;
	        this.isTouch = 'ontouchstart' in document.documentElement;

	        // Disable hideControlOnEnd if sildeEndAnimation is true
	        if (this.s.slideEndAnimatoin) {
	            this.s.hideControlOnEnd = false;
	        }

	        this.items = [];

	        // Gallery items
	        if (this.s.dynamic) {
	            this.items = this.s.dynamicEl;
	        } else {
	            if (this.s.selector === 'this') {
	                this.items.push(this.el);
	            } else if (this.s.selector !== '') {
	                if (this.s.selectWithin) {
	                    this.items = document.querySelector(this.s.selectWithin).querySelectorAll(this.s.selector);
	                } else {
	                    this.items = this.el.querySelectorAll(this.s.selector);
	                }
	            } else {
	                this.items = this.el.children;
	            }
	        }

	        // .lg-item

	        this.___slide = '';

	        // .lg-outer
	        this.outer = '';

	        this.init();

	        return this;
	    }

	    Plugin.prototype.init = function () {

	        var _this = this;

	        // s.preload should not be more than $item.length
	        if (_this.s.preload > _this.items.length) {
	            _this.s.preload = _this.items.length;
	        }

	        // if dynamic option is enabled execute immediately
	        var _hash = window.location.hash;
	        if (_hash.indexOf('lg=' + this.s.galleryId) > 0) {

	            _this.index = parseInt(_hash.split('&slide=')[1], 10);

	            _lgUtils2.default.addClass(document.body, 'lg-from-hash');
	            if (!_lgUtils2.default.hasClass(document.body, 'lg-on')) {
	                _lgUtils2.default.addClass(document.body, 'lg-on');
	                setTimeout(function () {
	                    _this.build(_this.index);
	                });
	            }
	        }

	        if (_this.s.dynamic) {

	            _lgUtils2.default.trigger(this.el, 'onBeforeOpen');

	            _this.index = _this.s.index || 0;

	            // prevent accidental double execution
	            if (!_lgUtils2.default.hasClass(document.body, 'lg-on')) {
	                _lgUtils2.default.addClass(document.body, 'lg-on');
	                setTimeout(function () {
	                    _this.build(_this.index);
	                });
	            }
	        } else {

	            for (var i = 0; i < _this.items.length; i++) {

	                /*jshint loopfunc: true */
	                (function (index) {

	                    // Using different namespace for click because click event should not unbind if selector is same object('this')
	                    _lgUtils2.default.on(_this.items[index], 'click.lgcustom', function (e) {

	                        e.preventDefault();

	                        _lgUtils2.default.trigger(_this.el, 'onBeforeOpen');

	                        _this.index = _this.s.index || index;

	                        if (!_lgUtils2.default.hasClass(document.body, 'lg-on')) {
	                            _this.build(_this.index);
	                            _lgUtils2.default.addClass(document.body, 'lg-on');
	                        }
	                    });
	                })(i);
	            }
	        }
	    };

	    Plugin.prototype.build = function (index) {

	        var _this = this;

	        _this.structure();

	        for (var key in window.lgModules) {
	            _this.modules[key] = new window.lgModules[key](_this.el);
	        }

	        // initiate slide function
	        _this.slide(index, false, false);

	        if (_this.s.keyPress) {
	            _this.keyPress();
	        }

	        if (_this.items.length > 1) {

	            _this.arrow();

	            setTimeout(function () {
	                _this.enableDrag();
	                _this.enableSwipe();
	            }, 50);

	            if (_this.s.mousewheel) {
	                _this.mousewheel();
	            }
	        }

	        _this.counter();

	        _this.closeGallery();

	        _lgUtils2.default.trigger(_this.el, 'onAfterOpen');

	        // Hide controllers if mouse doesn't move for some period
	        _lgUtils2.default.on(_this.outer, 'mousemove.lg click.lg touchstart.lg', function () {

	            _lgUtils2.default.removeClass(_this.outer, 'lg-hide-items');

	            clearTimeout(_this.hideBartimeout);

	            // Timeout will be cleared on each slide movement also
	            _this.hideBartimeout = setTimeout(function () {
	                _lgUtils2.default.addClass(_this.outer, 'lg-hide-items');
	            }, _this.s.hideBarsDelay);
	        });
	    };

	    Plugin.prototype.structure = function () {
	        var list = '';
	        var controls = '';
	        var i = 0;
	        var subHtmlCont = '';
	        var template;
	        var _this = this;

	        document.body.insertAdjacentHTML('beforeend', '<div class="lg-backdrop"></div>');
	        _lgUtils2.default.setVendor(document.querySelector('.lg-backdrop'), 'TransitionDuration', this.s.backdropDuration + 'ms');

	        // Create gallery items
	        for (i = 0; i < this.items.length; i++) {
	            list += '<div class="lg-item"></div>';
	        }

	        // Create controlls
	        if (this.s.controls && this.items.length > 1) {
	            controls = '<div class="lg-actions">' + '<div class="lg-prev lg-icon">' + this.s.prevHtml + '</div>' + '<div class="lg-next lg-icon">' + this.s.nextHtml + '</div>' + '</div>';
	        }

	        if (this.s.appendSubHtmlTo === '.lg-sub-html') {
	            subHtmlCont = '<div class="lg-sub-html"></div>';
	        }

	        template = '<div class="lg-outer ' + this.s.addClass + ' ' + this.s.startClass + '">' + '<div class="lg" style="width:' + this.s.width + '; height:' + this.s.height + '">' + '<div class="lg-inner">' + list + '</div>' + '<div class="lg-toolbar group">' + '<span class="lg-close lg-icon"></span>' + '</div>' + controls + subHtmlCont + '</div>' + '</div>';

	        document.body.insertAdjacentHTML('beforeend', template);
	        this.outer = document.querySelector('.lg-outer');
	        this.___slide = this.outer.querySelectorAll('.lg-item');

	        if (this.s.useLeft) {
	            _lgUtils2.default.addClass(this.outer, 'lg-use-left');

	            // Set mode lg-slide if use left is true;
	            this.s.mode = 'lg-slide';
	        } else {
	            _lgUtils2.default.addClass(this.outer, 'lg-use-css3');
	        }

	        // For fixed height gallery
	        _this.setTop();
	        _lgUtils2.default.on(window, 'resize.lg orientationchange.lg', function () {
	            setTimeout(function () {
	                _this.setTop();
	            }, 100);
	        });

	        // add class lg-current to remove initial transition
	        _lgUtils2.default.addClass(this.___slide[this.index], 'lg-current');

	        // add Class for css support and transition mode
	        if (this.doCss()) {
	            _lgUtils2.default.addClass(this.outer, 'lg-css3');
	        } else {
	            _lgUtils2.default.addClass(this.outer, 'lg-css');

	            // Set speed 0 because no animation will happen if browser doesn't support css3
	            this.s.speed = 0;
	        }

	        _lgUtils2.default.addClass(this.outer, this.s.mode);

	        if (this.s.enableDrag && this.items.length > 1) {
	            _lgUtils2.default.addClass(this.outer, 'lg-grab');
	        }

	        if (this.s.showAfterLoad) {
	            _lgUtils2.default.addClass(this.outer, 'lg-show-after-load');
	        }

	        if (this.doCss()) {
	            var inner = this.outer.querySelector('.lg-inner');
	            _lgUtils2.default.setVendor(inner, 'TransitionTimingFunction', this.s.cssEasing);
	            _lgUtils2.default.setVendor(inner, 'TransitionDuration', this.s.speed + 'ms');
	        }

	        setTimeout(function () {
	            _lgUtils2.default.addClass(document.querySelector('.lg-backdrop'), 'in');
	        });

	        setTimeout(function () {
	            _lgUtils2.default.addClass(_this.outer, 'lg-visible');
	        }, this.s.backdropDuration);

	        if (this.s.download) {
	            this.outer.querySelector('.lg-toolbar').insertAdjacentHTML('beforeend', '<a id="lg-download" target="_blank" download class="lg-download lg-icon"></a>');
	        }

	        // Store the current scroll top value to scroll back after closing the gallery..
	        this.prevScrollTop = document.documentElement.scrollTop || document.body.scrollTop;
	    };

	    // For fixed height gallery
	    Plugin.prototype.setTop = function () {
	        if (this.s.height !== '100%') {
	            var wH = window.innerHeight;
	            var top = (wH - parseInt(this.s.height, 10)) / 2;
	            var lGallery = this.outer.querySelector('.lg');
	            if (wH >= parseInt(this.s.height, 10)) {
	                lGallery.style.top = top + 'px';
	            } else {
	                lGallery.style.top = '0px';
	            }
	        }
	    };

	    // Find css3 support
	    Plugin.prototype.doCss = function () {
	        // check for css animation support
	        var support = function support() {
	            var transition = ['transition', 'MozTransition', 'WebkitTransition', 'OTransition', 'msTransition', 'KhtmlTransition'];
	            var root = document.documentElement;
	            var i = 0;
	            for (i = 0; i < transition.length; i++) {
	                if (transition[i] in root.style) {
	                    return true;
	                }
	            }
	        };

	        if (support()) {
	            return true;
	        }

	        return false;
	    };

	    /**
	     *  @desc Check the given src is video
	     *  @param {String} src
	     *  @return {Object} video type
	     *  Ex:{ youtube  :  ["//www.youtube.com/watch?v=c0asJgSyxcY", "c0asJgSyxcY"] }
	     */
	    Plugin.prototype.isVideo = function (src, index) {

	        if (!src) {
	            throw new Error("Make sure that slide " + index + " has an image/video src");
	        }

	        var html;
	        if (this.s.dynamic) {
	            html = this.s.dynamicEl[index].html;
	        } else {
	            html = this.items[index].getAttribute('data-html');
	        }

	        if (!src && html) {
	            return {
	                html5: true
	            };
	        }

	        var youtube = src.match(/\/\/(?:www\.)?youtu(?:\.be|be\.com)\/(?:watch\?v=|embed\/)?([a-z0-9\-\_\%]+)/i);
	        var vimeo = src.match(/\/\/(?:www\.)?vimeo.com\/([0-9a-z\-_]+)/i);
	        var dailymotion = src.match(/\/\/(?:www\.)?dai.ly\/([0-9a-z\-_]+)/i);
	        var vk = src.match(/\/\/(?:www\.)?(?:vk\.com|vkontakte\.ru)\/(?:video_ext\.php\?)(.*)/i);

	        if (youtube) {
	            return {
	                youtube: youtube
	            };
	        } else if (vimeo) {
	            return {
	                vimeo: vimeo
	            };
	        } else if (dailymotion) {
	            return {
	                dailymotion: dailymotion
	            };
	        } else if (vk) {
	            return {
	                vk: vk
	            };
	        }
	    };

	    /**
	     *  @desc Create image counter
	     *  Ex: 1/10
	     */
	    Plugin.prototype.counter = function () {
	        if (this.s.counter) {
	            this.outer.querySelector(this.s.appendCounterTo).insertAdjacentHTML('beforeend', '<div id="lg-counter"><span id="lg-counter-current">' + (parseInt(this.index, 10) + 1) + '</span> / <span id="lg-counter-all">' + this.items.length + '</span></div>');
	        }
	    };

	    /**
	     *  @desc add sub-html into the slide
	     *  @param {Number} index - index of the slide
	     */
	    Plugin.prototype.addHtml = function (index) {
	        var subHtml = null;
	        var currentEle;
	        if (this.s.dynamic) {
	            subHtml = this.s.dynamicEl[index].subHtml;
	        } else {
	            currentEle = this.items[index];
	            subHtml = currentEle.getAttribute('data-sub-html');
	            if (this.s.getCaptionFromTitleOrAlt && !subHtml) {
	                subHtml = currentEle.getAttribute('title');
	                if (subHtml && currentEle.querySelector('img')) {
	                    subHtml = currentEle.querySelector('img').getAttribute('alt');
	                }
	            }
	        }

	        if (typeof subHtml !== 'undefined' && subHtml !== null) {

	            // get first letter of subhtml
	            // if first letter starts with . or # get the html form the jQuery object
	            var fL = subHtml.substring(0, 1);
	            if (fL === '.' || fL === '#') {
	                if (this.s.subHtmlSelectorRelative && !this.s.dynamic) {
	                    subHtml = currentEle.querySelector(subHtml).innerHTML;
	                } else {
	                    subHtml = document.querySelector(subHtml).innerHTML;
	                }
	            }
	        } else {
	            subHtml = '';
	        }

	        if (this.s.appendSubHtmlTo === '.lg-sub-html') {
	            this.outer.querySelector(this.s.appendSubHtmlTo).innerHTML = subHtml;
	        } else {
	            this.___slide[index].insertAdjacentHTML('beforeend', subHtml);
	        }

	        // Add lg-empty-html class if title doesn't exist
	        if (typeof subHtml !== 'undefined' && subHtml !== null) {
	            if (subHtml === '') {
	                _lgUtils2.default.addClass(this.outer.querySelector(this.s.appendSubHtmlTo), 'lg-empty-html');
	            } else {
	                _lgUtils2.default.removeClass(this.outer.querySelector(this.s.appendSubHtmlTo), 'lg-empty-html');
	            }
	        }

	        _lgUtils2.default.trigger(this.el, 'onAfterAppendSubHtml', {
	            index: index
	        });
	    };

	    /**
	     *  @desc Preload slides
	     *  @param {Number} index - index of the slide
	     */
	    Plugin.prototype.preload = function (index) {
	        var i = 1;
	        var j = 1;
	        for (i = 1; i <= this.s.preload; i++) {
	            if (i >= this.items.length - index) {
	                break;
	            }

	            this.loadContent(index + i, false, 0);
	        }

	        for (j = 1; j <= this.s.preload; j++) {
	            if (index - j < 0) {
	                break;
	            }

	            this.loadContent(index - j, false, 0);
	        }
	    };

	    /**
	     *  @desc Load slide content into slide.
	     *  @param {Number} index - index of the slide.
	     *  @param {Boolean} rec - if true call loadcontent() function again.
	     *  @param {Boolean} delay - delay for adding complete class. it is 0 except first time.
	     */
	    Plugin.prototype.loadContent = function (index, rec, delay) {

	        var _this = this;
	        var _hasPoster = false;
	        var _img;
	        var _src;
	        var _poster;
	        var _srcset;
	        var _sizes;
	        var _html;
	        var getResponsiveSrc = function getResponsiveSrc(srcItms) {
	            var rsWidth = [];
	            var rsSrc = [];
	            for (var i = 0; i < srcItms.length; i++) {
	                var __src = srcItms[i].split(' ');

	                // Manage empty space
	                if (__src[0] === '') {
	                    __src.splice(0, 1);
	                }

	                rsSrc.push(__src[0]);
	                rsWidth.push(__src[1]);
	            }

	            var wWidth = window.innerWidth;
	            for (var j = 0; j < rsWidth.length; j++) {
	                if (parseInt(rsWidth[j], 10) > wWidth) {
	                    _src = rsSrc[j];
	                    break;
	                }
	            }
	        };

	        if (_this.s.dynamic) {

	            if (_this.s.dynamicEl[index].poster) {
	                _hasPoster = true;
	                _poster = _this.s.dynamicEl[index].poster;
	            }

	            _html = _this.s.dynamicEl[index].html;
	            _src = _this.s.dynamicEl[index].src;

	            if (_this.s.dynamicEl[index].responsive) {
	                var srcDyItms = _this.s.dynamicEl[index].responsive.split(',');
	                getResponsiveSrc(srcDyItms);
	            }

	            _srcset = _this.s.dynamicEl[index].srcset;
	            _sizes = _this.s.dynamicEl[index].sizes;
	        } else {

	            if (_this.items[index].getAttribute('data-poster')) {
	                _hasPoster = true;
	                _poster = _this.items[index].getAttribute('data-poster');
	            }

	            _html = _this.items[index].getAttribute('data-html');
	            _src = _this.items[index].getAttribute('href') || _this.items[index].getAttribute('data-src');

	            if (_this.items[index].getAttribute('data-responsive')) {
	                var srcItms = _this.items[index].getAttribute('data-responsive').split(',');
	                getResponsiveSrc(srcItms);
	            }

	            _srcset = _this.items[index].getAttribute('data-srcset');
	            _sizes = _this.items[index].getAttribute('data-sizes');
	        }

	        //if (_src || _srcset || _sizes || _poster) {

	        var iframe = false;
	        if (_this.s.dynamic) {
	            if (_this.s.dynamicEl[index].iframe) {
	                iframe = true;
	            }
	        } else {
	            if (_this.items[index].getAttribute('data-iframe') === 'true') {
	                iframe = true;
	            }
	        }

	        var _isVideo = _this.isVideo(_src, index);
	        if (!_lgUtils2.default.hasClass(_this.___slide[index], 'lg-loaded')) {
	            if (iframe) {
	                _this.___slide[index].insertAdjacentHTML('afterbegin', '<div class="lg-video-cont" style="max-width:' + _this.s.iframeMaxWidth + '"><div class="lg-video"><iframe class="lg-object" frameborder="0" src="' + _src + '"  allowfullscreen="true"></iframe></div></div>');
	            } else if (_hasPoster) {
	                var videoClass = '';
	                if (_isVideo && _isVideo.youtube) {
	                    videoClass = 'lg-has-youtube';
	                } else if (_isVideo && _isVideo.vimeo) {
	                    videoClass = 'lg-has-vimeo';
	                } else {
	                    videoClass = 'lg-has-html5';
	                }

	                _this.___slide[index].insertAdjacentHTML('beforeend', '<div class="lg-video-cont ' + videoClass + ' "><div class="lg-video"><span class="lg-video-play"></span><img class="lg-object lg-has-poster" src="' + _poster + '" /></div></div>');
	            } else if (_isVideo) {
	                _this.___slide[index].insertAdjacentHTML('beforeend', '<div class="lg-video-cont "><div class="lg-video"></div></div>');
	                _lgUtils2.default.trigger(_this.el, 'hasVideo', {
	                    index: index,
	                    src: _src,
	                    html: _html
	                });
	            } else {
	                _this.___slide[index].insertAdjacentHTML('beforeend', '<div class="lg-img-wrap"><img class="lg-object lg-image" src="' + _src + '" /></div>');
	            }

	            _lgUtils2.default.trigger(_this.el, 'onAferAppendSlide', {
	                index: index
	            });

	            _img = _this.___slide[index].querySelector('.lg-object');
	            if (_sizes) {
	                _img.setAttribute('sizes', _sizes);
	            }

	            if (_srcset) {
	                _img.setAttribute('srcset', _srcset);
	                try {
	                    picturefill({
	                        elements: [_img[0]]
	                    });
	                } catch (e) {
	                    console.error('Make sure you have included Picturefill version 2');
	                }
	            }

	            if (this.s.appendSubHtmlTo !== '.lg-sub-html') {
	                _this.addHtml(index);
	            }

	            _lgUtils2.default.addClass(_this.___slide[index], 'lg-loaded');
	        }

	        _lgUtils2.default.on(_this.___slide[index].querySelector('.lg-object'), 'load.lg error.lg', function () {

	            // For first time add some delay for displaying the start animation.
	            var _speed = 0;

	            // Do not change the delay value because it is required for zoom plugin.
	            // If gallery opened from direct url (hash) speed value should be 0
	            if (delay && !_lgUtils2.default.hasClass(document.body, 'lg-from-hash')) {
	                _speed = delay;
	            }

	            setTimeout(function () {
	                _lgUtils2.default.addClass(_this.___slide[index], 'lg-complete');

	                _lgUtils2.default.trigger(_this.el, 'onSlideItemLoad', {
	                    index: index,
	                    delay: delay || 0
	                });
	            }, _speed);
	        });

	        // @todo check load state for html5 videos
	        if (_isVideo && _isVideo.html5 && !_hasPoster) {
	            _lgUtils2.default.addClass(_this.___slide[index], 'lg-complete');
	        }

	        if (rec === true) {
	            if (!_lgUtils2.default.hasClass(_this.___slide[index], 'lg-complete')) {
	                _lgUtils2.default.on(_this.___slide[index].querySelector('.lg-object'), 'load.lg error.lg', function () {
	                    _this.preload(index);
	                });
	            } else {
	                _this.preload(index);
	            }
	        }

	        //}
	    };

	    /**
	    *   @desc slide function for lightgallery
	        ** Slide() gets call on start
	        ** ** Set lg.on true once slide() function gets called.
	        ** Call loadContent() on slide() function inside setTimeout
	        ** ** On first slide we do not want any animation like slide of fade
	        ** ** So on first slide( if lg.on if false that is first slide) loadContent() should start loading immediately
	        ** ** Else loadContent() should wait for the transition to complete.
	        ** ** So set timeout s.speed + 50
	    <=> ** loadContent() will load slide content in to the particular slide
	        ** ** It has recursion (rec) parameter. if rec === true loadContent() will call preload() function.
	        ** ** preload will execute only when the previous slide is fully loaded (images iframe)
	        ** ** avoid simultaneous image load
	    <=> ** Preload() will check for s.preload value and call loadContent() again accoring to preload value
	        ** loadContent()  <====> Preload();
	    
	    *   @param {Number} index - index of the slide
	    *   @param {Boolean} fromTouch - true if slide function called via touch event or mouse drag
	    *   @param {Boolean} fromThumb - true if slide function called via thumbnail click
	    */
	    Plugin.prototype.slide = function (index, fromTouch, fromThumb) {

	        var _prevIndex = 0;
	        for (var i = 0; i < this.___slide.length; i++) {
	            if (_lgUtils2.default.hasClass(this.___slide[i], 'lg-current')) {
	                _prevIndex = i;
	                break;
	            }
	        }

	        var _this = this;

	        // Prevent if multiple call
	        // Required for hsh plugin
	        if (_this.lGalleryOn && _prevIndex === index) {
	            return;
	        }

	        var _length = this.___slide.length;
	        var _time = _this.lGalleryOn ? this.s.speed : 0;
	        var _next = false;
	        var _prev = false;

	        if (!_this.lgBusy) {

	            if (this.s.download) {
	                var _src;
	                if (_this.s.dynamic) {
	                    _src = _this.s.dynamicEl[index].downloadUrl !== false && (_this.s.dynamicEl[index].downloadUrl || _this.s.dynamicEl[index].src);
	                } else {
	                    _src = _this.items[index].getAttribute('data-download-url') !== 'false' && (_this.items[index].getAttribute('data-download-url') || _this.items[index].getAttribute('href') || _this.items[index].getAttribute('data-src'));
	                }

	                if (_src) {
	                    document.getElementById('lg-download').setAttribute('href', _src);
	                    _lgUtils2.default.removeClass(_this.outer, 'lg-hide-download');
	                } else {
	                    _lgUtils2.default.addClass(_this.outer, 'lg-hide-download');
	                }
	            }

	            _lgUtils2.default.trigger(_this.el, 'onBeforeSlide', {
	                prevIndex: _prevIndex,
	                index: index,
	                fromTouch: fromTouch,
	                fromThumb: fromThumb
	            });

	            _this.lgBusy = true;

	            clearTimeout(_this.hideBartimeout);

	            // Add title if this.s.appendSubHtmlTo === lg-sub-html
	            if (this.s.appendSubHtmlTo === '.lg-sub-html') {

	                // wait for slide animation to complete
	                setTimeout(function () {
	                    _this.addHtml(index);
	                }, _time);
	            }

	            this.arrowDisable(index);

	            if (!fromTouch) {

	                // remove all transitions
	                _lgUtils2.default.addClass(_this.outer, 'lg-no-trans');

	                for (var j = 0; j < this.___slide.length; j++) {
	                    _lgUtils2.default.removeClass(this.___slide[j], 'lg-prev-slide');
	                    _lgUtils2.default.removeClass(this.___slide[j], 'lg-next-slide');
	                }

	                if (index < _prevIndex) {
	                    _prev = true;
	                    if (index === 0 && _prevIndex === _length - 1 && !fromThumb) {
	                        _prev = false;
	                        _next = true;
	                    }
	                } else if (index > _prevIndex) {
	                    _next = true;
	                    if (index === _length - 1 && _prevIndex === 0 && !fromThumb) {
	                        _prev = true;
	                        _next = false;
	                    }
	                }

	                if (_prev) {

	                    //prevslide
	                    _lgUtils2.default.addClass(this.___slide[index], 'lg-prev-slide');
	                    _lgUtils2.default.addClass(this.___slide[_prevIndex], 'lg-next-slide');
	                } else if (_next) {

	                    // next slide
	                    _lgUtils2.default.addClass(this.___slide[index], 'lg-next-slide');
	                    _lgUtils2.default.addClass(this.___slide[_prevIndex], 'lg-prev-slide');
	                }

	                // give 50 ms for browser to add/remove class
	                setTimeout(function () {
	                    _lgUtils2.default.removeClass(_this.outer.querySelector('.lg-current'), 'lg-current');

	                    //_this.$slide.eq(_prevIndex).removeClass('lg-current');
	                    _lgUtils2.default.addClass(_this.___slide[index], 'lg-current');

	                    // reset all transitions
	                    _lgUtils2.default.removeClass(_this.outer, 'lg-no-trans');
	                }, 50);
	            } else {

	                var touchPrev = index - 1;
	                var touchNext = index + 1;

	                if (index === 0 && _prevIndex === _length - 1) {

	                    // next slide
	                    touchNext = 0;
	                    touchPrev = _length - 1;
	                } else if (index === _length - 1 && _prevIndex === 0) {

	                    // prev slide
	                    touchNext = 0;
	                    touchPrev = _length - 1;
	                }

	                _lgUtils2.default.removeClass(_this.outer.querySelector('.lg-prev-slide'), 'lg-prev-slide');
	                _lgUtils2.default.removeClass(_this.outer.querySelector('.lg-current'), 'lg-current');
	                _lgUtils2.default.removeClass(_this.outer.querySelector('.lg-next-slide'), 'lg-next-slide');
	                _lgUtils2.default.addClass(_this.___slide[touchPrev], 'lg-prev-slide');
	                _lgUtils2.default.addClass(_this.___slide[touchNext], 'lg-next-slide');
	                _lgUtils2.default.addClass(_this.___slide[index], 'lg-current');
	            }

	            if (_this.lGalleryOn) {
	                setTimeout(function () {
	                    _this.loadContent(index, true, 0);
	                }, this.s.speed + 50);

	                setTimeout(function () {
	                    _this.lgBusy = false;
	                    _lgUtils2.default.trigger(_this.el, 'onAfterSlide', {
	                        prevIndex: _prevIndex,
	                        index: index,
	                        fromTouch: fromTouch,
	                        fromThumb: fromThumb
	                    });
	                }, this.s.speed);
	            } else {
	                _this.loadContent(index, true, _this.s.backdropDuration);

	                _this.lgBusy = false;
	                _lgUtils2.default.trigger(_this.el, 'onAfterSlide', {
	                    prevIndex: _prevIndex,
	                    index: index,
	                    fromTouch: fromTouch,
	                    fromThumb: fromThumb
	                });
	            }

	            _this.lGalleryOn = true;

	            if (this.s.counter) {
	                if (document.getElementById('lg-counter-current')) {
	                    document.getElementById('lg-counter-current').innerHTML = index + 1;
	                }
	            }
	        }
	    };

	    /**
	     *  @desc Go to next slide
	     *  @param {Boolean} fromTouch - true if slide function called via touch event
	     */
	    Plugin.prototype.goToNextSlide = function (fromTouch) {
	        var _this = this;
	        if (!_this.lgBusy) {
	            if (_this.index + 1 < _this.___slide.length) {
	                _this.index++;
	                _lgUtils2.default.trigger(_this.el, 'onBeforeNextSlide', {
	                    index: _this.index
	                });
	                _this.slide(_this.index, fromTouch, false);
	            } else {
	                if (_this.s.loop) {
	                    _this.index = 0;
	                    _lgUtils2.default.trigger(_this.el, 'onBeforeNextSlide', {
	                        index: _this.index
	                    });
	                    _this.slide(_this.index, fromTouch, false);
	                } else if (_this.s.slideEndAnimatoin) {
	                    _lgUtils2.default.addClass(_this.outer, 'lg-right-end');
	                    setTimeout(function () {
	                        _lgUtils2.default.removeClass(_this.outer, 'lg-right-end');
	                    }, 400);
	                }
	            }
	        }
	    };

	    /**
	     *  @desc Go to previous slide
	     *  @param {Boolean} fromTouch - true if slide function called via touch event
	     */
	    Plugin.prototype.goToPrevSlide = function (fromTouch) {
	        var _this = this;
	        if (!_this.lgBusy) {
	            if (_this.index > 0) {
	                _this.index--;
	                _lgUtils2.default.trigger(_this.el, 'onBeforePrevSlide', {
	                    index: _this.index,
	                    fromTouch: fromTouch
	                });
	                _this.slide(_this.index, fromTouch, false);
	            } else {
	                if (_this.s.loop) {
	                    _this.index = _this.items.length - 1;
	                    _lgUtils2.default.trigger(_this.el, 'onBeforePrevSlide', {
	                        index: _this.index,
	                        fromTouch: fromTouch
	                    });
	                    _this.slide(_this.index, fromTouch, false);
	                } else if (_this.s.slideEndAnimatoin) {
	                    _lgUtils2.default.addClass(_this.outer, 'lg-left-end');
	                    setTimeout(function () {
	                        _lgUtils2.default.removeClass(_this.outer, 'lg-left-end');
	                    }, 400);
	                }
	            }
	        }
	    };

	    Plugin.prototype.keyPress = function () {
	        var _this = this;
	        if (this.items.length > 1) {
	            _lgUtils2.default.on(window, 'keyup.lg', function (e) {
	                if (_this.items.length > 1) {
	                    if (e.keyCode === 37) {
	                        e.preventDefault();
	                        _this.goToPrevSlide();
	                    }

	                    if (e.keyCode === 39) {
	                        e.preventDefault();
	                        _this.goToNextSlide();
	                    }
	                }
	            });
	        }

	        _lgUtils2.default.on(window, 'keydown.lg', function (e) {
	            if (_this.s.escKey === true && e.keyCode === 27) {
	                e.preventDefault();
	                if (!_lgUtils2.default.hasClass(_this.outer, 'lg-thumb-open')) {
	                    _this.destroy();
	                } else {
	                    _lgUtils2.default.removeClass(_this.outer, 'lg-thumb-open');
	                }
	            }
	        });
	    };

	    Plugin.prototype.arrow = function () {
	        var _this = this;
	        _lgUtils2.default.on(this.outer.querySelector('.lg-prev'), 'click.lg', function () {
	            _this.goToPrevSlide();
	        });

	        _lgUtils2.default.on(this.outer.querySelector('.lg-next'), 'click.lg', function () {
	            _this.goToNextSlide();
	        });
	    };

	    Plugin.prototype.arrowDisable = function (index) {

	        // Disable arrows if s.hideControlOnEnd is true
	        if (!this.s.loop && this.s.hideControlOnEnd) {
	            var next = this.outer.querySelector('.lg-next');
	            var prev = this.outer.querySelector('.lg-prev');
	            if (index + 1 < this.___slide.length) {
	                next.removeAttribute('disabled');
	                _lgUtils2.default.removeClass(next, 'disabled');
	            } else {
	                next.setAttribute('disabled', 'disabled');
	                _lgUtils2.default.addClass(next, 'disabled');
	            }

	            if (index > 0) {
	                prev.removeAttribute('disabled');
	                _lgUtils2.default.removeClass(prev, 'disabled');
	            } else {
	                next.setAttribute('disabled', 'disabled');
	                _lgUtils2.default.addClass(next, 'disabled');
	            }
	        }
	    };

	    Plugin.prototype.setTranslate = function (el, xValue, yValue) {
	        // jQuery supports Automatic CSS prefixing since jQuery 1.8.0
	        if (this.s.useLeft) {
	            el.style.left = xValue;
	        } else {
	            _lgUtils2.default.setVendor(el, 'Transform', 'translate3d(' + xValue + 'px, ' + yValue + 'px, 0px)');
	        }
	    };

	    Plugin.prototype.touchMove = function (startCoords, endCoords) {

	        var distance = endCoords - startCoords;

	        if (Math.abs(distance) > 15) {
	            // reset opacity and transition duration
	            _lgUtils2.default.addClass(this.outer, 'lg-dragging');

	            // move current slide
	            this.setTranslate(this.___slide[this.index], distance, 0);

	            // move next and prev slide with current slide
	            this.setTranslate(document.querySelector('.lg-prev-slide'), -this.___slide[this.index].clientWidth + distance, 0);
	            this.setTranslate(document.querySelector('.lg-next-slide'), this.___slide[this.index].clientWidth + distance, 0);
	        }
	    };

	    Plugin.prototype.touchEnd = function (distance) {
	        var _this = this;

	        // keep slide animation for any mode while dragg/swipe
	        if (_this.s.mode !== 'lg-slide') {
	            _lgUtils2.default.addClass(_this.outer, 'lg-slide');
	        }

	        for (var i = 0; i < this.___slide.length; i++) {
	            if (!_lgUtils2.default.hasClass(this.___slide[i], 'lg-current') && !_lgUtils2.default.hasClass(this.___slide[i], 'lg-prev-slide') && !_lgUtils2.default.hasClass(this.___slide[i], 'lg-next-slide')) {
	                this.___slide[i].style.opacity = '0';
	            }
	        }

	        // set transition duration
	        setTimeout(function () {
	            _lgUtils2.default.removeClass(_this.outer, 'lg-dragging');
	            if (distance < 0 && Math.abs(distance) > _this.s.swipeThreshold) {
	                _this.goToNextSlide(true);
	            } else if (distance > 0 && Math.abs(distance) > _this.s.swipeThreshold) {
	                _this.goToPrevSlide(true);
	            } else if (Math.abs(distance) < 5) {

	                // Trigger click if distance is less than 5 pix
	                _lgUtils2.default.trigger(_this.el, 'onSlideClick');
	            }

	            for (var i = 0; i < _this.___slide.length; i++) {
	                _this.___slide[i].removeAttribute('style');
	            }
	        });

	        // remove slide class once drag/swipe is completed if mode is not slide
	        setTimeout(function () {
	            if (!_lgUtils2.default.hasClass(_this.outer, 'lg-dragging') && _this.s.mode !== 'lg-slide') {
	                _lgUtils2.default.removeClass(_this.outer, 'lg-slide');
	            }
	        }, _this.s.speed + 100);
	    };

	    Plugin.prototype.enableSwipe = function () {
	        var _this = this;
	        var startCoords = 0;
	        var endCoords = 0;
	        var isMoved = false;

	        if (_this.s.enableSwipe && _this.isTouch && _this.doCss()) {

	            for (var i = 0; i < _this.___slide.length; i++) {
	                /*jshint loopfunc: true */
	                _lgUtils2.default.on(_this.___slide[i], 'touchstart.lg', function (e) {
	                    if (!_lgUtils2.default.hasClass(_this.outer, 'lg-zoomed') && !_this.lgBusy) {
	                        e.preventDefault();
	                        _this.manageSwipeClass();
	                        startCoords = e.targetTouches[0].pageX;
	                    }
	                });
	            }

	            for (var j = 0; j < _this.___slide.length; j++) {
	                /*jshint loopfunc: true */
	                _lgUtils2.default.on(_this.___slide[j], 'touchmove.lg', function (e) {
	                    if (!_lgUtils2.default.hasClass(_this.outer, 'lg-zoomed')) {
	                        e.preventDefault();
	                        endCoords = e.targetTouches[0].pageX;
	                        _this.touchMove(startCoords, endCoords);
	                        isMoved = true;
	                    }
	                });
	            }

	            for (var k = 0; k < _this.___slide.length; k++) {
	                /*jshint loopfunc: true */
	                _lgUtils2.default.on(_this.___slide[k], 'touchend.lg', function () {
	                    if (!_lgUtils2.default.hasClass(_this.outer, 'lg-zoomed')) {
	                        if (isMoved) {
	                            isMoved = false;
	                            _this.touchEnd(endCoords - startCoords);
	                        } else {
	                            _lgUtils2.default.trigger(_this.el, 'onSlideClick');
	                        }
	                    }
	                });
	            }
	        }
	    };

	    Plugin.prototype.enableDrag = function () {
	        var _this = this;
	        var startCoords = 0;
	        var endCoords = 0;
	        var isDraging = false;
	        var isMoved = false;
	        if (_this.s.enableDrag && !_this.isTouch && _this.doCss()) {
	            for (var i = 0; i < _this.___slide.length; i++) {
	                /*jshint loopfunc: true */
	                _lgUtils2.default.on(_this.___slide[i], 'mousedown.lg', function (e) {
	                    // execute only on .lg-object
	                    if (!_lgUtils2.default.hasClass(_this.outer, 'lg-zoomed')) {
	                        if (_lgUtils2.default.hasClass(e.target, 'lg-object') || _lgUtils2.default.hasClass(e.target, 'lg-video-play')) {
	                            e.preventDefault();

	                            if (!_this.lgBusy) {
	                                _this.manageSwipeClass();
	                                startCoords = e.pageX;
	                                isDraging = true;

	                                // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723
	                                _this.outer.scrollLeft += 1;
	                                _this.outer.scrollLeft -= 1;

	                                // *

	                                _lgUtils2.default.removeClass(_this.outer, 'lg-grab');
	                                _lgUtils2.default.addClass(_this.outer, 'lg-grabbing');

	                                _lgUtils2.default.trigger(_this.el, 'onDragstart');
	                            }
	                        }
	                    }
	                });
	            }

	            _lgUtils2.default.on(window, 'mousemove.lg', function (e) {
	                if (isDraging) {
	                    isMoved = true;
	                    endCoords = e.pageX;
	                    _this.touchMove(startCoords, endCoords);
	                    _lgUtils2.default.trigger(_this.el, 'onDragmove');
	                }
	            });

	            _lgUtils2.default.on(window, 'mouseup.lg', function (e) {
	                if (isMoved) {
	                    isMoved = false;
	                    _this.touchEnd(endCoords - startCoords);
	                    _lgUtils2.default.trigger(_this.el, 'onDragend');
	                } else if (_lgUtils2.default.hasClass(e.target, 'lg-object') || _lgUtils2.default.hasClass(e.target, 'lg-video-play')) {
	                    _lgUtils2.default.trigger(_this.el, 'onSlideClick');
	                }

	                // Prevent execution on click
	                if (isDraging) {
	                    isDraging = false;
	                    _lgUtils2.default.removeClass(_this.outer, 'lg-grabbing');
	                    _lgUtils2.default.addClass(_this.outer, 'lg-grab');
	                }
	            });
	        }
	    };

	    Plugin.prototype.manageSwipeClass = function () {
	        var touchNext = this.index + 1;
	        var touchPrev = this.index - 1;
	        var length = this.___slide.length;
	        if (this.s.loop) {
	            if (this.index === 0) {
	                touchPrev = length - 1;
	            } else if (this.index === length - 1) {
	                touchNext = 0;
	            }
	        }

	        for (var i = 0; i < this.___slide.length; i++) {
	            _lgUtils2.default.removeClass(this.___slide[i], 'lg-next-slide');
	            _lgUtils2.default.removeClass(this.___slide[i], 'lg-prev-slide');
	        }

	        if (touchPrev > -1) {
	            _lgUtils2.default.addClass(this.___slide[touchPrev], 'lg-prev-slide');
	        }

	        _lgUtils2.default.addClass(this.___slide[touchNext], 'lg-next-slide');
	    };

	    Plugin.prototype.mousewheel = function () {
	        var _this = this;
	        _lgUtils2.default.on(_this.outer, 'mousewheel.lg', function (e) {

	            if (!e.deltaY) {
	                return;
	            }

	            if (e.deltaY > 0) {
	                _this.goToPrevSlide();
	            } else {
	                _this.goToNextSlide();
	            }

	            e.preventDefault();
	        });
	    };

	    Plugin.prototype.closeGallery = function () {

	        var _this = this;
	        var mousedown = false;
	        _lgUtils2.default.on(this.outer.querySelector('.lg-close'), 'click.lg', function () {
	            _this.destroy();
	        });

	        if (_this.s.closable) {

	            // If you drag the slide and release outside gallery gets close on chrome
	            // for preventing this check mousedown and mouseup happened on .lg-item or lg-outer
	            _lgUtils2.default.on(_this.outer, 'mousedown.lg', function (e) {

	                if (_lgUtils2.default.hasClass(e.target, 'lg-outer') || _lgUtils2.default.hasClass(e.target, 'lg-item') || _lgUtils2.default.hasClass(e.target, 'lg-img-wrap')) {
	                    mousedown = true;
	                } else {
	                    mousedown = false;
	                }
	            });

	            _lgUtils2.default.on(_this.outer, 'mouseup.lg', function (e) {

	                if (_lgUtils2.default.hasClass(e.target, 'lg-outer') || _lgUtils2.default.hasClass(e.target, 'lg-item') || _lgUtils2.default.hasClass(e.target, 'lg-img-wrap') && mousedown) {
	                    if (!_lgUtils2.default.hasClass(_this.outer, 'lg-dragging')) {
	                        _this.destroy();
	                    }
	                }
	            });
	        }
	    };

	    Plugin.prototype.destroy = function (d) {

	        var _this = this;

	        if (!d) {
	            _lgUtils2.default.trigger(_this.el, 'onBeforeClose');
	        }

	        document.body.scrollTop = _this.prevScrollTop;
	        document.documentElement.scrollTop = _this.prevScrollTop;

	        /**
	         * if d is false or undefined destroy will only close the gallery
	         * plugins instance remains with the element
	         *
	         * if d is true destroy will completely remove the plugin
	         */

	        if (d) {
	            if (!_this.s.dynamic) {
	                // only when not using dynamic mode is $items a jquery collection

	                for (var i = 0; i < this.items.length; i++) {
	                    _lgUtils2.default.off(this.items[i], '.lg');
	                    _lgUtils2.default.off(this.items[i], '.lgcustom');
	                }
	            }

	            var lguid = _this.el.getAttribute('lg-uid');
	            delete window.lgData[lguid];
	            _this.el.removeAttribute('lg-uid');
	        }

	        // Unbind all events added by lightGallery
	        _lgUtils2.default.off(this.el, '.lgtm');

	        // Distroy all lightGallery modules
	        for (var key in window.lgModules) {
	            if (_this.modules[key]) {
	                _this.modules[key].destroy();
	            }
	        }

	        this.lGalleryOn = false;

	        clearTimeout(_this.hideBartimeout);
	        this.hideBartimeout = false;
	        _lgUtils2.default.off(window, '.lg');
	        _lgUtils2.default.removeClass(document.body, 'lg-on');
	        _lgUtils2.default.removeClass(document.body, 'lg-from-hash');

	        if (_this.outer) {
	            _lgUtils2.default.removeClass(_this.outer, 'lg-visible');
	        }

	        _lgUtils2.default.removeClass(document.querySelector('.lg-backdrop'), 'in');
	        setTimeout(function () {
	            try {
	                if (_this.outer) {
	                    _this.outer.parentNode.removeChild(_this.outer);
	                }

	                if (document.querySelector('.lg-backdrop')) {
	                    document.querySelector('.lg-backdrop').parentNode.removeChild(document.querySelector('.lg-backdrop'));
	                }

	                if (!d) {
	                    _lgUtils2.default.trigger(_this.el, 'onCloseAfter');
	                }
	            } catch (err) {}
	        }, _this.s.backdropDuration + 50);
	    };

	    window.lightGallery = function (el, options) {
	        if (!el) {
	            return;
	        }

	        try {
	            if (!el.getAttribute('lg-uid')) {
	                var uid = 'lg' + window.lgData.uid++;
	                window.lgData[uid] = new Plugin(el, options);
	                el.setAttribute('lg-uid', uid);
	            } else {
	                try {
	                    window.lgData[el.getAttribute('lg-uid')].init();
	                } catch (err) {
	                    console.error('lightGallery has not initiated properly');
	                }
	            }
	        } catch (err) {
	            console.error('lightGallery has not initiated properly');
	        }
	    };
	});

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";

	(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(exports);
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports);
	        global.lgUtils = mod.exports;
	    }
	})(undefined, function (exports) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	        value: true
	    });

	    /*
	     *@todo remove function from window and document. Update on and off functions
	     */
	    window.getAttribute = function (label) {
	        return window[label];
	    };

	    window.setAttribute = function (label, value) {
	        window[label] = value;
	    };

	    document.getAttribute = function (label) {
	        return document[label];
	    };

	    document.setAttribute = function (label, value) {
	        document[label] = value;
	    };

	    var utils = {
	        wrap: function wrap(el, className) {
	            if (!el) {
	                return;
	            }

	            var wrapper = document.createElement('div');
	            wrapper.className = className;
	            el.parentNode.insertBefore(wrapper, el);
	            el.parentNode.removeChild(el);
	            wrapper.appendChild(el);
	        },

	        addClass: function addClass(el, className) {
	            if (!el) {
	                return;
	            }

	            if (el.classList) {
	                el.classList.add(className);
	            } else {
	                el.className += ' ' + className;
	            }
	        },

	        removeClass: function removeClass(el, className) {
	            if (!el) {
	                return;
	            }

	            if (el.classList) {
	                el.classList.remove(className);
	            } else {
	                el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
	            }
	        },

	        hasClass: function hasClass(el, className) {
	            if (el.classList) {
	                return el.classList.contains(className);
	            } else {
	                return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
	            }

	            return false;
	        },

	        // ex Transform
	        // ex TransitionTimingFunction
	        setVendor: function setVendor(el, property, value) {
	            if (!el) {
	                return;
	            }

	            el.style[property.charAt(0).toLowerCase() + property.slice(1)] = value;
	            el.style['webkit' + property] = value;
	            el.style['moz' + property] = value;
	            el.style['ms' + property] = value;
	            el.style['o' + property] = value;
	        },

	        trigger: function trigger(el, event) {
	            var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	            if (!el) {
	                return;
	            }

	            var customEvent = new CustomEvent(event, {
	                detail: detail
	            });
	            el.dispatchEvent(customEvent);
	        },

	        Listener: {
	            uid: 0
	        },
	        on: function on(el, events, fn) {
	            if (!el) {
	                return;
	            }

	            events.split(' ').forEach(function (event) {
	                var _id = el.getAttribute('lg-event-uid') || '';
	                utils.Listener.uid++;
	                _id += '&' + utils.Listener.uid;
	                el.setAttribute('lg-event-uid', _id);
	                utils.Listener[event + utils.Listener.uid] = fn;
	                el.addEventListener(event.split('.')[0], fn, false);
	            });
	        },

	        off: function off(el, event) {
	            if (!el) {
	                return;
	            }

	            var _id = el.getAttribute('lg-event-uid');
	            if (_id) {
	                _id = _id.split('&');
	                for (var i = 0; i < _id.length; i++) {
	                    if (_id[i]) {
	                        var _event = event + _id[i];
	                        if (_event.substring(0, 1) === '.') {
	                            for (var key in utils.Listener) {
	                                if (utils.Listener.hasOwnProperty(key)) {
	                                    if (key.split('.').indexOf(_event.split('.')[1]) > -1) {
	                                        el.removeEventListener(key.split('.')[0], utils.Listener[key]);
	                                        el.setAttribute('lg-event-uid', el.getAttribute('lg-event-uid').replace('&' + _id[i], ''));
	                                        delete utils.Listener[key];
	                                    }
	                                }
	                            }
	                        } else {
	                            el.removeEventListener(_event.split('.')[0], utils.Listener[_event]);
	                            el.setAttribute('lg-event-uid', el.getAttribute('lg-event-uid').replace('&' + _id[i], ''));
	                            delete utils.Listener[_event];
	                        }
	                    }
	                }
	            }
	        },

	        param: function param(obj) {
	            return Object.keys(obj).map(function (k) {
	                return encodeURIComponent(k) + '=' + encodeURIComponent(obj[k]);
	            }).join('&');
	        }
	    };

	    exports.default = utils;
	});

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**!
	 * lg-thumbnail.js | 1.0.0 | October 5th 2016
	 * http://sachinchoolur.github.io/lg-thumbnail.js
	 * Copyright (c) 2016 Sachin N; 
	 * @license GPLv3 
	 */(function (f) {
	    if (( false ? "undefined" : _typeof(exports)) === "object" && typeof module !== "undefined") {
	        module.exports = f();
	    } else if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else {
	        var g;if (typeof window !== "undefined") {
	            g = window;
	        } else if (typeof global !== "undefined") {
	            g = global;
	        } else if (typeof self !== "undefined") {
	            g = self;
	        } else {
	            g = this;
	        }g.LgThumbnail = f();
	    }
	})(function () {
	    var define, module, exports;return function e(t, n, r) {
	        function s(o, u) {
	            if (!n[o]) {
	                if (!t[o]) {
	                    var a = typeof require == "function" && require;if (!u && a) return require(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
	                }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
	                    var n = t[o][1][e];return s(n ? n : e);
	                }, l, l.exports, e, t, n, r);
	            }return n[o].exports;
	        }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
	            s(r[o]);
	        }return s;
	    }({ 1: [function (require, module, exports) {
	            (function (global, factory) {
	                if (typeof define === "function" && define.amd) {
	                    define([], factory);
	                } else if (typeof exports !== "undefined") {
	                    factory();
	                } else {
	                    var mod = {
	                        exports: {}
	                    };
	                    factory();
	                    global.lgThumbnail = mod.exports;
	                }
	            })(this, function () {
	                'use strict';

	                var _extends = Object.assign || function (target) {
	                    for (var i = 1; i < arguments.length; i++) {
	                        var source = arguments[i];

	                        for (var key in source) {
	                            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                                target[key] = source[key];
	                            }
	                        }
	                    }

	                    return target;
	                };

	                var thumbnailDefaults = {
	                    thumbnail: true,

	                    animateThumb: true,
	                    currentPagerPosition: 'middle',

	                    thumbWidth: 100,
	                    thumbContHeight: 100,
	                    thumbMargin: 5,

	                    exThumbImage: false,
	                    showThumbByDefault: true,
	                    toggleThumb: true,
	                    pullCaptionUp: true,

	                    enableThumbDrag: true,
	                    enableThumbSwipe: true,
	                    swipeThreshold: 50,

	                    loadYoutubeThumbnail: true,
	                    youtubeThumbSize: 1,

	                    loadVimeoThumbnail: true,
	                    vimeoThumbSize: 'thumbnail_small',

	                    loadDailymotionThumbnail: true
	                };

	                var Thumbnail = function Thumbnail(element) {

	                    this.el = element;

	                    this.core = window.lgData[this.el.getAttribute('lg-uid')];
	                    this.core.s = _extends({}, thumbnailDefaults, this.core.s);

	                    this.thumbOuter = null;
	                    this.thumbOuterWidth = 0;
	                    this.thumbTotalWidth = this.core.items.length * (this.core.s.thumbWidth + this.core.s.thumbMargin);
	                    this.thumbIndex = this.core.index;

	                    // Thumbnail animation value
	                    this.left = 0;

	                    this.init();

	                    return this;
	                };

	                Thumbnail.prototype.init = function () {
	                    var _this = this;
	                    if (this.core.s.thumbnail && this.core.items.length > 1) {
	                        if (this.core.s.showThumbByDefault) {
	                            setTimeout(function () {
	                                utils.addClass(_this.core.outer, 'lg-thumb-open');
	                            }, 700);
	                        }

	                        if (this.core.s.pullCaptionUp) {
	                            utils.addClass(this.core.outer, 'lg-pull-caption-up');
	                        }

	                        this.build();
	                        if (this.core.s.animateThumb) {
	                            if (this.core.s.enableThumbDrag && !this.core.isTouch && this.core.doCss()) {
	                                this.enableThumbDrag();
	                            }

	                            if (this.core.s.enableThumbSwipe && this.core.isTouch && this.core.doCss()) {
	                                this.enableThumbSwipe();
	                            }

	                            this.thumbClickable = false;
	                        } else {
	                            this.thumbClickable = true;
	                        }

	                        this.toggle();
	                        this.thumbkeyPress();
	                    }
	                };

	                Thumbnail.prototype.build = function () {
	                    var _this = this;
	                    var thumbList = '';
	                    var vimeoErrorThumbSize = '';
	                    var $thumb;
	                    var html = '<div class="lg-thumb-outer">' + '<div class="lg-thumb group">' + '</div>' + '</div>';

	                    switch (this.core.s.vimeoThumbSize) {
	                        case 'thumbnail_large':
	                            vimeoErrorThumbSize = '640';
	                            break;
	                        case 'thumbnail_medium':
	                            vimeoErrorThumbSize = '200x150';
	                            break;
	                        case 'thumbnail_small':
	                            vimeoErrorThumbSize = '100x75';
	                    }

	                    utils.addClass(_this.core.outer, 'lg-has-thumb');

	                    _this.core.outer.querySelector('.lg').insertAdjacentHTML('beforeend', html);

	                    _this.thumbOuter = _this.core.outer.querySelector('.lg-thumb-outer');
	                    _this.thumbOuterWidth = _this.thumbOuter.offsetWidth;

	                    if (_this.core.s.animateThumb) {
	                        _this.core.outer.querySelector('.lg-thumb').style.width = _this.thumbTotalWidth + 'px';
	                        _this.core.outer.querySelector('.lg-thumb').style.position = 'relative';
	                    }

	                    if (this.core.s.animateThumb) {
	                        _this.thumbOuter.style.height = _this.core.s.thumbContHeight + 'px';
	                    }

	                    function getThumb(src, thumb, index) {
	                        var isVideo = _this.core.isVideo(src, index) || {};
	                        var thumbImg;
	                        var vimeoId = '';

	                        if (isVideo.youtube || isVideo.vimeo || isVideo.dailymotion) {
	                            if (isVideo.youtube) {
	                                if (_this.core.s.loadYoutubeThumbnail) {
	                                    thumbImg = '//img.youtube.com/vi/' + isVideo.youtube[1] + '/' + _this.core.s.youtubeThumbSize + '.jpg';
	                                } else {
	                                    thumbImg = thumb;
	                                }
	                            } else if (isVideo.vimeo) {
	                                if (_this.core.s.loadVimeoThumbnail) {
	                                    thumbImg = '//i.vimeocdn.com/video/error_' + vimeoErrorThumbSize + '.jpg';
	                                    vimeoId = isVideo.vimeo[1];
	                                } else {
	                                    thumbImg = thumb;
	                                }
	                            } else if (isVideo.dailymotion) {
	                                if (_this.core.s.loadDailymotionThumbnail) {
	                                    thumbImg = '//www.dailymotion.com/thumbnail/video/' + isVideo.dailymotion[1];
	                                } else {
	                                    thumbImg = thumb;
	                                }
	                            }
	                        } else {
	                            thumbImg = thumb;
	                        }

	                        thumbList += '<div data-vimeo-id="' + vimeoId + '" class="lg-thumb-item" style="width:' + _this.core.s.thumbWidth + 'px; margin-right: ' + _this.core.s.thumbMargin + 'px"><img src="' + thumbImg + '" /></div>';
	                        vimeoId = '';
	                    }

	                    if (_this.core.s.dynamic) {
	                        for (var j = 0; j < _this.core.s.dynamicEl.length; j++) {
	                            getThumb(_this.core.s.dynamicEl[j].src, _this.core.s.dynamicEl[j].thumb, j);
	                        }
	                    } else {
	                        for (var i = 0; i < _this.core.items.length; i++) {
	                            if (!_this.core.s.exThumbImage) {
	                                getThumb(_this.core.items[i].getAttribute('href') || _this.core.items[i].getAttribute('data-src'), _this.core.items[i].querySelector('img').getAttribute('src'), i);
	                            } else {
	                                getThumb(_this.core.items[i].getAttribute('href') || _this.core.items[i].getAttribute('data-src'), _this.core.items[i].getAttribute(_this.core.s.exThumbImage), i);
	                            }
	                        }
	                    }

	                    _this.core.outer.querySelector('.lg-thumb').innerHTML = thumbList;

	                    $thumb = _this.core.outer.querySelectorAll('.lg-thumb-item');

	                    for (var n = 0; n < $thumb.length; n++) {

	                        /*jshint loopfunc: true */
	                        (function (index) {
	                            var $this = $thumb[index];
	                            var vimeoVideoId = $this.getAttribute('data-vimeo-id');
	                            if (vimeoVideoId) {

	                                window['lgJsonP' + _this.el.getAttribute('lg-uid') + '' + n] = function (content) {
	                                    $this.querySelector('img').setAttribute('src', content[0][_this.core.s.vimeoThumbSize]);
	                                };

	                                var script = document.createElement('script');
	                                script.className = 'lg-script';
	                                script.src = '//www.vimeo.com/api/v2/video/' + vimeoVideoId + '.json?callback=lgJsonP' + _this.el.getAttribute('lg-uid') + '' + n;
	                                document.body.appendChild(script);
	                            }
	                        })(n);
	                    }

	                    // manage active class for thumbnail
	                    utils.addClass($thumb[_this.core.index], 'active');
	                    utils.on(_this.core.el, 'onBeforeSlide.lgtm', function () {

	                        for (var j = 0; j < $thumb.length; j++) {
	                            utils.removeClass($thumb[j], 'active');
	                        }

	                        utils.addClass($thumb[_this.core.index], 'active');
	                    });

	                    for (var k = 0; k < $thumb.length; k++) {

	                        /*jshint loopfunc: true */
	                        (function (index) {

	                            utils.on($thumb[index], 'click.lg touchend.lg', function () {

	                                setTimeout(function () {

	                                    // In IE9 and bellow touch does not support
	                                    // Go to slide if browser does not support css transitions
	                                    if (_this.thumbClickable && !_this.core.lgBusy || !_this.core.doCss()) {
	                                        _this.core.index = index;
	                                        _this.core.slide(_this.core.index, false, true);
	                                    }
	                                }, 50);
	                            });
	                        })(k);
	                    }

	                    utils.on(_this.core.el, 'onBeforeSlide.lgtm', function () {
	                        _this.animateThumb(_this.core.index);
	                    });

	                    utils.on(window, 'resize.lgthumb orientationchange.lgthumb', function () {
	                        setTimeout(function () {
	                            _this.animateThumb(_this.core.index);
	                            _this.thumbOuterWidth = _this.thumbOuter.offsetWidth;
	                        }, 200);
	                    });
	                };

	                Thumbnail.prototype.setTranslate = function (value) {
	                    utils.setVendor(this.core.outer.querySelector('.lg-thumb'), 'Transform', 'translate3d(-' + value + 'px, 0px, 0px)');
	                };

	                Thumbnail.prototype.animateThumb = function (index) {
	                    var $thumb = this.core.outer.querySelector('.lg-thumb');
	                    if (this.core.s.animateThumb) {
	                        var position;
	                        switch (this.core.s.currentPagerPosition) {
	                            case 'left':
	                                position = 0;
	                                break;
	                            case 'middle':
	                                position = this.thumbOuterWidth / 2 - this.core.s.thumbWidth / 2;
	                                break;
	                            case 'right':
	                                position = this.thumbOuterWidth - this.core.s.thumbWidth;
	                        }
	                        this.left = (this.core.s.thumbWidth + this.core.s.thumbMargin) * index - 1 - position;
	                        if (this.left > this.thumbTotalWidth - this.thumbOuterWidth) {
	                            this.left = this.thumbTotalWidth - this.thumbOuterWidth;
	                        }

	                        if (this.left < 0) {
	                            this.left = 0;
	                        }

	                        if (this.core.lGalleryOn) {
	                            if (!utils.hasClass($thumb, 'on')) {
	                                utils.setVendor(this.core.outer.querySelector('.lg-thumb'), 'TransitionDuration', this.core.s.speed + 'ms');
	                            }

	                            if (!this.core.doCss()) {
	                                $thumb.style.left = -this.left + 'px';
	                            }
	                        } else {
	                            if (!this.core.doCss()) {
	                                $thumb.style.left = -this.left + 'px';
	                            }
	                        }

	                        this.setTranslate(this.left);
	                    }
	                };

	                // Enable thumbnail dragging and swiping
	                Thumbnail.prototype.enableThumbDrag = function () {

	                    var _this = this;
	                    var startCoords = 0;
	                    var endCoords = 0;
	                    var isDraging = false;
	                    var isMoved = false;
	                    var tempLeft = 0;

	                    utils.addClass(_this.thumbOuter, 'lg-grab');

	                    utils.on(_this.core.outer.querySelector('.lg-thumb'), 'mousedown.lgthumb', function (e) {
	                        if (_this.thumbTotalWidth > _this.thumbOuterWidth) {
	                            // execute only on .lg-object
	                            e.preventDefault();
	                            startCoords = e.pageX;
	                            isDraging = true;

	                            // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723
	                            _this.core.outer.scrollLeft += 1;
	                            _this.core.outer.scrollLeft -= 1;

	                            // *
	                            _this.thumbClickable = false;
	                            utils.removeClass(_this.thumbOuter, 'lg-grab');
	                            utils.addClass(_this.thumbOuter, 'lg-grabbing');
	                        }
	                    });

	                    utils.on(window, 'mousemove.lgthumb', function (e) {
	                        if (isDraging) {
	                            tempLeft = _this.left;
	                            isMoved = true;
	                            endCoords = e.pageX;

	                            utils.addClass(_this.thumbOuter, 'lg-dragging');

	                            tempLeft = tempLeft - (endCoords - startCoords);

	                            if (tempLeft > _this.thumbTotalWidth - _this.thumbOuterWidth) {
	                                tempLeft = _this.thumbTotalWidth - _this.thumbOuterWidth;
	                            }

	                            if (tempLeft < 0) {
	                                tempLeft = 0;
	                            }

	                            // move current slide
	                            _this.setTranslate(tempLeft);
	                        }
	                    });

	                    utils.on(window, 'mouseup.lgthumb', function () {
	                        if (isMoved) {
	                            isMoved = false;
	                            utils.removeClass(_this.thumbOuter, 'lg-dragging');

	                            _this.left = tempLeft;

	                            if (Math.abs(endCoords - startCoords) < _this.core.s.swipeThreshold) {
	                                _this.thumbClickable = true;
	                            }
	                        } else {
	                            _this.thumbClickable = true;
	                        }

	                        if (isDraging) {
	                            isDraging = false;
	                            utils.removeClass(_this.thumbOuter, 'lg-grabbing');
	                            utils.addClass(_this.thumbOuter, 'lg-grab');
	                        }
	                    });
	                };

	                Thumbnail.prototype.enableThumbSwipe = function () {
	                    var _this = this;
	                    var startCoords = 0;
	                    var endCoords = 0;
	                    var isMoved = false;
	                    var tempLeft = 0;

	                    utils.on(_this.core.outer.querySelector('.lg-thumb'), 'touchstart.lg', function (e) {
	                        if (_this.thumbTotalWidth > _this.thumbOuterWidth) {
	                            e.preventDefault();
	                            startCoords = e.targetTouches[0].pageX;
	                            _this.thumbClickable = false;
	                        }
	                    });

	                    utils.on(_this.core.outer.querySelector('.lg-thumb'), 'touchmove.lg', function (e) {
	                        if (_this.thumbTotalWidth > _this.thumbOuterWidth) {
	                            e.preventDefault();
	                            endCoords = e.targetTouches[0].pageX;
	                            isMoved = true;

	                            utils.addClass(_this.thumbOuter, 'lg-dragging');

	                            tempLeft = _this.left;

	                            tempLeft = tempLeft - (endCoords - startCoords);

	                            if (tempLeft > _this.thumbTotalWidth - _this.thumbOuterWidth) {
	                                tempLeft = _this.thumbTotalWidth - _this.thumbOuterWidth;
	                            }

	                            if (tempLeft < 0) {
	                                tempLeft = 0;
	                            }

	                            // move current slide
	                            _this.setTranslate(tempLeft);
	                        }
	                    });

	                    utils.on(_this.core.outer.querySelector('.lg-thumb'), 'touchend.lg', function () {
	                        if (_this.thumbTotalWidth > _this.thumbOuterWidth) {

	                            if (isMoved) {
	                                isMoved = false;
	                                utils.removeClass(_this.thumbOuter, 'lg-dragging');
	                                if (Math.abs(endCoords - startCoords) < _this.core.s.swipeThreshold) {
	                                    _this.thumbClickable = true;
	                                }

	                                _this.left = tempLeft;
	                            } else {
	                                _this.thumbClickable = true;
	                            }
	                        } else {
	                            _this.thumbClickable = true;
	                        }
	                    });
	                };

	                Thumbnail.prototype.toggle = function () {
	                    var _this = this;
	                    if (_this.core.s.toggleThumb) {
	                        utils.addClass(_this.core.outer, 'lg-can-toggle');
	                        _this.thumbOuter.insertAdjacentHTML('beforeend', '<span class="lg-toggle-thumb lg-icon"></span>');
	                        utils.on(_this.core.outer.querySelector('.lg-toggle-thumb'), 'click.lg', function () {
	                            if (utils.hasClass(_this.core.outer, 'lg-thumb-open')) {
	                                utils.removeClass(_this.core.outer, 'lg-thumb-open');
	                            } else {
	                                utils.addClass(_this.core.outer, 'lg-thumb-open');
	                            }
	                        });
	                    }
	                };

	                Thumbnail.prototype.thumbkeyPress = function () {
	                    var _this = this;
	                    utils.on(window, 'keydown.lgthumb', function (e) {
	                        if (e.keyCode === 38) {
	                            e.preventDefault();
	                            utils.addClass(_this.core.outer, 'lg-thumb-open');
	                        } else if (e.keyCode === 40) {
	                            e.preventDefault();
	                            utils.removeClass(_this.core.outer, 'lg-thumb-open');
	                        }
	                    });
	                };

	                Thumbnail.prototype.destroy = function () {
	                    if (this.core.s.thumbnail && this.core.items.length > 1) {
	                        utils.off(window, '.lgthumb');
	                        this.thumbOuter.parentNode.removeChild(this.thumbOuter);
	                        utils.removeClass(this.core.outer, 'lg-has-thumb');

	                        var lgScript = document.getElementsByClassName('lg-script');
	                        while (lgScript[0]) {
	                            lgScript[0].parentNode.removeChild(lgScript[0]);
	                        }
	                    }
	                };

	                window.lgModules.thumbnail = Thumbnail;
	            });
	        }, {}] }, {}, [1])(1);
	});

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
	  'use strict';

	  angular.module('Directives').directive('sponsorshipStorePanel', ['$window', '$state', '$http', 'Global', 'User', 'Sponsorship', 'Cart', '$timeout', function ($window, $state, $http, Global, User, Sponsorship, Cart, $timeout) {
	    var directiveObj = {};

	    directiveObj.restrict = 'E';
	    directiveObj.templateUrl = 'partials/sponsorshipstore';
	    directiveObj.controllerAs = 'sponsorshipstoreCtrl';

	    directiveObj.link = function ($scope, $elem, $attr) {

	      Sponsorship.getStore().then(function (resp) {

	        $scope.store = resp;
	        self.intializeAdvCans();
	      }, function (err) {});

	      console.log('$state in the sponsorshipStorePanel', $state);

	      $scope.calcOneMonthRent = function (w, h) {
	        return 1.5 * w * h;
	      };

	      $scope.drawSponsorshipSpot = function (advId) {
	        console.log("DRAW SPONSORSHIP SPOT");
	        console.log("adV_id_" + advId);
	        var canvas = document.getElementById("adV_id_" + advId);
	        var ctx = canvas.getContext("2d");
	        ctx.fillStyle = "#FF0000";
	        ctx.fillRect(0, 0, 80, 80);
	      };

	      $scope.advBuy = function (iter) {
	        Global.advBuy = $scope.store[iter];
	        Cart.addAdv($scope.store[iter].id, $scope.store[iter].locX, $scope.store[iter].locY, $scope.store[iter].width, $scope.store[iter].height);

	        $state.go('advconfig');
	      };

	      self.intializeAdvCans = function () {
	        $timeout(function () {
	          for (var i = 0; i < $scope.store.length; i++) {
	            $scope.drawSponsorshipSpot($scope.store[i].id);
	          }
	        }, 100);
	      };
	    };

	    return directiveObj;
	  }]);
	};

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('storeItem', ['$window', '$state', '$http', 'Global', 'User', 'Merch', function ($window, $state, $http, Global, User, Merch) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/storeitemadmin';
			directiveObj.scope = {
				storeitem: '=storeitem',
				getstore: '&'
			};

			directiveObj.link = function ($scope, $element, $attrs) {

				console.log("STORE ITEM ITEM");
				console.log($scope.storeitem);
				$scope.dberror = '';

				//for(var i=0; i<$scope.storeitem.models.length; i++){

				// $scope.storeitem.models[i].color = "#" + parseInt($scope.storeitem.models[i].color, 16);
				//}

				$scope.updatename = function (id, name) {
					console.log(id);
					console.log(name);

					$http.put('/api/v1/merch/' + id, { 'name': name }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update Name Resp');
						console.log(resp);
					}, function (err) {
						console.log('Update Name Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.updatebaseprice = function (id, baseprice) {
					console.log(baseprice);
					console.log(id);

					$http.put('/api/v1/merch/' + id, { 'baseprice': baseprice }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update BasePrice Resp');
						console.log(resp);
					}, function (err) {
						console.log('Update BasePrice Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.updatewholesaleprice = function (id, wprice) {
					console.log(wprice);
					console.log(id);

					$http.put('/api/v1/merch/' + id, { 'wholesaleprice': wprice }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update WholesalePrice Resp');
						console.log(resp);
					}, function (err) {
						console.log('Update WholesalePrice Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.updateprodinfo = function (id, prodinfo) {
					console.log(prodinfo);
					console.log(id);

					$http.put('/api/v1/merch/' + id, { 'prodinfo': prodinfo }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update Product info Resp');
						console.log(resp);
					}, function (err) {
						console.log('Update Product info  Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.addnewdescription = function (id, desc, descripnum) {
					console.log(id);
					console.log(desc);
					console.log(descripnum);
					if (descripnum === undefined) {
						descripnum = 0;
					}

					$http.post('/api/v1/proddesc', { 'prodId': id, 'description': desc, 'descripnum': descripnum }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Add New Description Resp');
						console.log(resp);
						$scope.getstore(); /// This calls the parent adminCtrl.getadminstore()
					}, function (err) {
						console.log('Add New Description Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.deletedescrip = function (id) {
					console.log(id);

					$http.delete('/api/v1/proddesc/' + id, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Delete Description Resp');
						console.log(resp);
						$scope.getstore(); /// This calls the parent adminCtrl.getadminstore()
					}, function (err) {
						console.log('Delete Description Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.updatedescription = function (id, index, desc) {
					console.log(id);
					console.log(index);
					console.log(desc);
					//$scope.storeitem.description[index] = desc;


					$http.put('/api/v1/proddesc/' + id, { 'descripnum': index, 'description': desc }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update Description Resp');
						console.log(resp);
					}, function (err) {
						console.log('Update Description Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.addpicfile = [];

				$scope.uploadProgress = 0;
				$scope.uploading = false;

				$scope.uploadProgressStyle = function () {
					return { 'width': $scope.uploadProgress + '%' };
				};

				$scope.uploadFileToUrl = function (file, uploadUrl, index) {
					console.log('UPLOAD URL');
					console.log(uploadUrl);
					var fd = new FormData();
					console.log('Files');
					console.log(file.files);
					fd.append('file', file.files[0]);
					console.log('Image Index');
					console.log(index);
					fd.append('imgnum', index);
					fd.append('prodId', $scope.storeitem.id);

					console.log(fd);

					$scope.uploadProgress = 0;

					var uploadAdvXhrCallConfig = {
						method: 'POST',
						url: uploadUrl,
						//params: null,
						data: fd,
						headers: { 'Content-Type': undefined, auth: User.token },
						eventHandlers: {
							readystatechange: function readystatechange(event) {
								if (event.currentTarget.readyState === 4) {
									console.log("readyState=4: Server has finished extra work!");
								}
							}
						},
						uploadEventHandlers: {
							progress: function progress(e) {
								if (e.lengthComputable) {
									$scope.uploadProgress = Math.round(e.loaded * 100 / e.total);
									console.log("progress: " + $scope.uploadProgress + "%");
									if (e.loaded === e.total) {
										console.log("File upload finished!");
										console.log("Server will perform extra work now...");
									}
								}
							}
						},
						//xsrfHeaderName: '',
						//xsrfCookieName: '',
						transformRequest: angular.identity, //function(data, headersGetter) {},
						//tranformResponse: function(data, headersGetter, status){},
						//paramSerializer: '',
						//cache: false,
						//timeout: null,
						//withCredentials: false,
						responseType: "json"
					};

					$http(uploadAdvXhrCallConfig).then(function (resp) {
						console.log('image Upload Resp');
						console.log(resp);

						loader.hide();

						$scope.addpicfile = [];
						document.getElementById("file" + $scope.storeitem.id).value = "";

						$scope.uploading = false;

						$scope.getstore();
					}, function (err) {
						console.log('Image Upload Error');

						console.log(err);
						loader.hide();

						$scope.uploading = false;
					});
				};

				var loader = $('#loader');

				$scope.uploadProdImg = function (index) {

					loader.show();
					$scope.uploading = true;
					var file = document.getElementById("file" + $scope.storeitem.id);
					var url = '/api/v1/prodimg';
					console.log(url, file);
					$scope.uploadFileToUrl(file, url, index);
				};

				$scope.delprodimage = function (id) {
					console.log(id);

					$http.delete('/api/v1/prodimg/' + id, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Delete Description Resp');
						console.log(resp);
						$scope.getstore(); /// This calls the parent adminCtrl.getadminstore()
					}, function (err) {
						console.log('Delete Description Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.updateinventory = function (id, inventory) {

					console.log(inventory);
					console.log(id);

					$http.put('/api/v1/merch/' + id, { 'inventory': inventory }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update Inventory');
						console.log(resp);
					}, function (err) {
						console.log('Update Product info  Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.addoptioncat = function (id, cat) {
					console.log(id);
					console.log(cat);

					if (cat === undefined) {
						cat = '';
					}

					$http.post('/api/v1/prodoptioncat', { 'prodId': id, 'name': cat }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Add New Option Category');
						console.log(resp);
						$scope.getstore(); /// This calls the parent adminCtrl.getadminstore()
					}, function (err) {
						console.log('Add New Description Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.addoptiontoexistingcategory = function (catId, optname) {
					console.log(catId);
					console.log(optname);

					var addoptiontoexistingcategoryobj = { 'catId': catId, 'name': optname };
					$http.post('/api/v1/prodoption', addoptiontoexistingcategoryobj, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Add option to existiong category');
						console.log(resp);
						$scope.getstore(); /// This calls the parent adminCtrl.getadminstore()
					}, function (err) {
						console.log('Add option to existiong category ERR');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.deleteoption = function (id) {
					console.log(id);

					$http.delete('/api/v1/prodoption/' + id, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Delete Description Resp');
						console.log(resp);
						$scope.getstore(); /// This calls the parent adminCtrl.getadminstore()
					}, function (err) {
						console.log('Delete Description Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.updateoptionCatname = function (catId, name) {
					console.log(catId, name);

					$http.put('/api/v1/prodoptioncat/' + catId, { 'name': name }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update Option Cat Name Resp');
						console.log(resp);
					}, function (err) {
						console.log('Update Option Name Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.updateoptionname = function (optionId, name) {
					console.log(optionId, name);

					$http.put('/api/v1/prodoption/' + optionId, { 'name': name }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update Option Name Resp');
						console.log(resp);
					}, function (err) {
						console.log('Update Option Name Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.updateoptionprice = function (optionId, val) {
					console.log(optionId, val);

					$http.put('/api/v1/prodoption/' + optionId, { 'price': val }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update Option Price Resp');
						console.log(resp);
					}, function (err) {
						console.log('Update Option Name Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.updateoptionimglink = function (optionId, index) {
					console.log(optionId, index);

					$http.put('/api/v1/prodoption/' + optionId, { 'imglink': index }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update Option imglink Resp');
						console.log(resp);
					}, function (err) {
						console.log('Update Option Name Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.updateoptioninventory = function (optionId, inventory) {
					console.log(optionId, inventory);

					$http.put('/api/v1/prodoption/' + optionId, { 'inventory': inventory }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update Option inventory Resp');
						console.log(resp);
					}, function (err) {
						console.log('Update Option Name Err');
						console.log(err);$scope.dberror = err;
					});
				};

				$scope.updateOptionstatus = function (optionId, eNum) {
					console.log(optionId, eNum);

					$http.put('/api/v1/prodoption/' + optionId, { 'status': eNum }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update Option Status Resp');
						console.log(resp);
					}, function (err) {
						console.log('Update Option Name Err');
						console.log(err);$scope.dberror = err;
					});
				};
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
	    'use strict';

	    angular.module('Directives').directive("fileread", [function () {
	        return {
	            scope: {
	                fileread: "="
	            },
	            link: function link(scope, element, attributes) {
	                element.bind("change", function (changeEvent) {
	                    //scope.$apply(function () {
	                    scope.fileread = changeEvent.target.files;
	                    //console.log("FILE READ");
	                    //console.log(scope.fileread);
	                    // or all selected files:
	                    // scope.fileread = changeEvent.target.files;
	                    //});
	                });
	            }
	        };
	    }]);
	};

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);
	__webpack_require__(120);

	module.exports.directive = function () {
	  'use strict';

	  angular.module('Directives').directive("rangeSlider", ['$rootScope', function ($rootScope) {
	    return {
	      restrict: 'A',
	      scope: {
	        val: '=val'
	      },

	      link: function link(scope, element, attributes) {

	        console.log('Slider Value');
	        console.log(scope.val);
	        $(element).append("<div id='SliderHandle' class='ui-slider-handle'></div>");
	        var handle = $("#SliderHandle");
	        $(element).css('height', '50px');

	        $(element).slider({
	          range: "min",
	          value: 14,
	          min: 1,
	          max: 365,
	          create: function create() {
	            handle.text($(this).slider("value") + ' Days');
	            $('.ui-widget-header').css('background-color', '#31b0d5');
	          },
	          slide: function slide(event, ui) {
	            scope.val = ui.value;
	            handle.text(ui.value + ' Days');
	            $rootScope.$apply();
	          }
	        });
	      }
	    };
	  }]);
	};

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/*! jQuery UI - v1.12.1 - 2016-09-14
	* http://jqueryui.com
	* Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
	* Copyright jQuery Foundation and other contributors; Licensed MIT */(function(factory){if(true){// AMD. Register as an anonymous module.
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else{// Browser globals
	factory(jQuery);}})(function($){$.ui=$.ui||{};var version=$.ui.version="1.12.1";/*!
	 * jQuery UI Widget 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Widget
	//>>group: Core
	//>>description: Provides a factory for creating stateful widgets with a common API.
	//>>docs: http://api.jqueryui.com/jQuery.widget/
	//>>demos: http://jqueryui.com/widget/
	var widgetUuid=0;var widgetSlice=Array.prototype.slice;$.cleanData=function(orig){return function(elems){var events,elem,i;for(i=0;(elem=elems[i])!=null;i++){try{// Only trigger remove when necessary to save time
	events=$._data(elem,"events");if(events&&events.remove){$(elem).triggerHandler("remove");}// Http://bugs.jquery.com/ticket/8235
	}catch(e){}}orig(elems);};}($.cleanData);$.widget=function(name,base,prototype){var existingConstructor,constructor,basePrototype;// ProxiedPrototype allows the provided prototype to remain unmodified
	// so that it can be used as a mixin for multiple widgets (#8876)
	var proxiedPrototype={};var namespace=name.split(".")[0];name=name.split(".")[1];var fullName=namespace+"-"+name;if(!prototype){prototype=base;base=$.Widget;}if($.isArray(prototype)){prototype=$.extend.apply(null,[{}].concat(prototype));}// Create selector for plugin
	$.expr[":"][fullName.toLowerCase()]=function(elem){return!!$.data(elem,fullName);};$[namespace]=$[namespace]||{};existingConstructor=$[namespace][name];constructor=$[namespace][name]=function(options,element){// Allow instantiation without "new" keyword
	if(!this._createWidget){return new constructor(options,element);}// Allow instantiation without initializing for simple inheritance
	// must use "new" keyword (the code above always passes args)
	if(arguments.length){this._createWidget(options,element);}};// Extend with the existing constructor to carry over any static properties
	$.extend(constructor,existingConstructor,{version:prototype.version,// Copy the object used to create the prototype in case we need to
	// redefine the widget later
	_proto:$.extend({},prototype),// Track widgets that inherit from this widget in case this widget is
	// redefined after a widget inherits from it
	_childConstructors:[]});basePrototype=new base();// We need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options=$.widget.extend({},basePrototype.options);$.each(prototype,function(prop,value){if(!$.isFunction(value)){proxiedPrototype[prop]=value;return;}proxiedPrototype[prop]=function(){function _super(){return base.prototype[prop].apply(this,arguments);}function _superApply(args){return base.prototype[prop].apply(this,args);}return function(){var __super=this._super;var __superApply=this._superApply;var returnValue;this._super=_super;this._superApply=_superApply;returnValue=value.apply(this,arguments);this._super=__super;this._superApply=__superApply;return returnValue;};}();});constructor.prototype=$.widget.extend(basePrototype,{// TODO: remove support for widgetEventPrefix
	// always use the name + a colon as the prefix, e.g., draggable:start
	// don't prefix for widgets that aren't DOM-based
	widgetEventPrefix:existingConstructor?basePrototype.widgetEventPrefix||name:name},proxiedPrototype,{constructor:constructor,namespace:namespace,widgetName:name,widgetFullName:fullName});// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if(existingConstructor){$.each(existingConstructor._childConstructors,function(i,child){var childPrototype=child.prototype;// Redefine the child widget using the same prototype that was
	// originally used, but inherit from the new version of the base
	$.widget(childPrototype.namespace+"."+childPrototype.widgetName,constructor,child._proto);});// Remove the list of existing child constructors from the old constructor
	// so the old child constructors can be garbage collected
	delete existingConstructor._childConstructors;}else{base._childConstructors.push(constructor);}$.widget.bridge(name,constructor);return constructor;};$.widget.extend=function(target){var input=widgetSlice.call(arguments,1);var inputIndex=0;var inputLength=input.length;var key;var value;for(;inputIndex<inputLength;inputIndex++){for(key in input[inputIndex]){value=input[inputIndex][key];if(input[inputIndex].hasOwnProperty(key)&&value!==undefined){// Clone objects
	if($.isPlainObject(value)){target[key]=$.isPlainObject(target[key])?$.widget.extend({},target[key],value):// Don't extend strings, arrays, etc. with objects
	$.widget.extend({},value);// Copy everything else by reference
	}else{target[key]=value;}}}}return target;};$.widget.bridge=function(name,object){var fullName=object.prototype.widgetFullName||name;$.fn[name]=function(options){var isMethodCall=typeof options==="string";var args=widgetSlice.call(arguments,1);var returnValue=this;if(isMethodCall){// If this is an empty collection, we need to have the instance method
	// return undefined instead of the jQuery instance
	if(!this.length&&options==="instance"){returnValue=undefined;}else{this.each(function(){var methodValue;var instance=$.data(this,fullName);if(options==="instance"){returnValue=instance;return false;}if(!instance){return $.error("cannot call methods on "+name+" prior to initialization; "+"attempted to call method '"+options+"'");}if(!$.isFunction(instance[options])||options.charAt(0)==="_"){return $.error("no such method '"+options+"' for "+name+" widget instance");}methodValue=instance[options].apply(instance,args);if(methodValue!==instance&&methodValue!==undefined){returnValue=methodValue&&methodValue.jquery?returnValue.pushStack(methodValue.get()):methodValue;return false;}});}}else{// Allow multiple hashes to be passed on init
	if(args.length){options=$.widget.extend.apply(null,[options].concat(args));}this.each(function(){var instance=$.data(this,fullName);if(instance){instance.option(options||{});if(instance._init){instance._init();}}else{$.data(this,fullName,new object(options,this));}});}return returnValue;};};$.Widget=function()/* options, element */{};$.Widget._childConstructors=[];$.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:false,// Callbacks
	create:null},_createWidget:function _createWidget(options,element){element=$(element||this.defaultElement||this)[0];this.element=$(element);this.uuid=widgetUuid++;this.eventNamespace="."+this.widgetName+this.uuid;this.bindings=$();this.hoverable=$();this.focusable=$();this.classesElementLookup={};if(element!==this){$.data(element,this.widgetFullName,this);this._on(true,this.element,{remove:function remove(event){if(event.target===element){this.destroy();}}});this.document=$(element.style?// Element within the document
	element.ownerDocument:// Element is window or document
	element.document||element);this.window=$(this.document[0].defaultView||this.document[0].parentWindow);}this.options=$.widget.extend({},this.options,this._getCreateOptions(),options);this._create();if(this.options.disabled){this._setOptionDisabled(this.options.disabled);}this._trigger("create",null,this._getCreateEventData());this._init();},_getCreateOptions:function _getCreateOptions(){return{};},_getCreateEventData:$.noop,_create:$.noop,_init:$.noop,destroy:function destroy(){var that=this;this._destroy();$.each(this.classesElementLookup,function(key,value){that._removeClass(value,key);});// We can probably remove the unbind calls in 2.0
	// all event bindings should go through this._on()
	this.element.off(this.eventNamespace).removeData(this.widgetFullName);this.widget().off(this.eventNamespace).removeAttr("aria-disabled");// Clean up events and states
	this.bindings.off(this.eventNamespace);},_destroy:$.noop,widget:function widget(){return this.element;},option:function option(key,value){var options=key;var parts;var curOption;var i;if(arguments.length===0){// Don't return a reference to the internal hash
	return $.widget.extend({},this.options);}if(typeof key==="string"){// Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
	options={};parts=key.split(".");key=parts.shift();if(parts.length){curOption=options[key]=$.widget.extend({},this.options[key]);for(i=0;i<parts.length-1;i++){curOption[parts[i]]=curOption[parts[i]]||{};curOption=curOption[parts[i]];}key=parts.pop();if(arguments.length===1){return curOption[key]===undefined?null:curOption[key];}curOption[key]=value;}else{if(arguments.length===1){return this.options[key]===undefined?null:this.options[key];}options[key]=value;}}this._setOptions(options);return this;},_setOptions:function _setOptions(options){var key;for(key in options){this._setOption(key,options[key]);}return this;},_setOption:function _setOption(key,value){if(key==="classes"){this._setOptionClasses(value);}this.options[key]=value;if(key==="disabled"){this._setOptionDisabled(value);}return this;},_setOptionClasses:function _setOptionClasses(value){var classKey,elements,currentElements;for(classKey in value){currentElements=this.classesElementLookup[classKey];if(value[classKey]===this.options.classes[classKey]||!currentElements||!currentElements.length){continue;}// We are doing this to create a new jQuery object because the _removeClass() call
	// on the next line is going to destroy the reference to the current elements being
	// tracked. We need to save a copy of this collection so that we can add the new classes
	// below.
	elements=$(currentElements.get());this._removeClass(currentElements,classKey);// We don't use _addClass() here, because that uses this.options.classes
	// for generating the string of classes. We want to use the value passed in from
	// _setOption(), this is the new value of the classes option which was passed to
	// _setOption(). We pass this value directly to _classes().
	elements.addClass(this._classes({element:elements,keys:classKey,classes:value,add:true}));}},_setOptionDisabled:function _setOptionDisabled(value){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!value);// If the widget is becoming disabled, then nothing is interactive
	if(value){this._removeClass(this.hoverable,null,"ui-state-hover");this._removeClass(this.focusable,null,"ui-state-focus");}},enable:function enable(){return this._setOptions({disabled:false});},disable:function disable(){return this._setOptions({disabled:true});},_classes:function _classes(options){var full=[];var that=this;options=$.extend({element:this.element,classes:this.options.classes||{}},options);function processClassString(classes,checkOption){var current,i;for(i=0;i<classes.length;i++){current=that.classesElementLookup[classes[i]]||$();if(options.add){current=$($.unique(current.get().concat(options.element.get())));}else{current=$(current.not(options.element).get());}that.classesElementLookup[classes[i]]=current;full.push(classes[i]);if(checkOption&&options.classes[classes[i]]){full.push(options.classes[classes[i]]);}}}this._on(options.element,{"remove":"_untrackClassesElement"});if(options.keys){processClassString(options.keys.match(/\S+/g)||[],true);}if(options.extra){processClassString(options.extra.match(/\S+/g)||[]);}return full.join(" ");},_untrackClassesElement:function _untrackClassesElement(event){var that=this;$.each(that.classesElementLookup,function(key,value){if($.inArray(event.target,value)!==-1){that.classesElementLookup[key]=$(value.not(event.target).get());}});},_removeClass:function _removeClass(element,keys,extra){return this._toggleClass(element,keys,extra,false);},_addClass:function _addClass(element,keys,extra){return this._toggleClass(element,keys,extra,true);},_toggleClass:function _toggleClass(element,keys,extra,add){add=typeof add==="boolean"?add:extra;var shift=typeof element==="string"||element===null,options={extra:shift?keys:extra,keys:shift?element:keys,element:shift?this.element:element,add:add};options.element.toggleClass(this._classes(options),add);return this;},_on:function _on(suppressDisabledCheck,element,handlers){var delegateElement;var instance=this;// No suppressDisabledCheck flag, shuffle arguments
	if(typeof suppressDisabledCheck!=="boolean"){handlers=element;element=suppressDisabledCheck;suppressDisabledCheck=false;}// No element argument, shuffle and use this.element
	if(!handlers){handlers=element;element=this.element;delegateElement=this.widget();}else{element=delegateElement=$(element);this.bindings=this.bindings.add(element);}$.each(handlers,function(event,handler){function handlerProxy(){// Allow widgets to customize the disabled handling
	// - disabled as an array instead of boolean
	// - disabled class as method for disabling individual parts
	if(!suppressDisabledCheck&&(instance.options.disabled===true||$(this).hasClass("ui-state-disabled"))){return;}return(typeof handler==="string"?instance[handler]:handler).apply(instance,arguments);}// Copy the guid so direct unbinding works
	if(typeof handler!=="string"){handlerProxy.guid=handler.guid=handler.guid||handlerProxy.guid||$.guid++;}var match=event.match(/^([\w:-]*)\s*(.*)$/);var eventName=match[1]+instance.eventNamespace;var selector=match[2];if(selector){delegateElement.on(eventName,selector,handlerProxy);}else{element.on(eventName,handlerProxy);}});},_off:function _off(element,eventName){eventName=(eventName||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace;element.off(eventName).off(eventName);// Clear the stack to avoid memory leaks (#10056)
	this.bindings=$(this.bindings.not(element).get());this.focusable=$(this.focusable.not(element).get());this.hoverable=$(this.hoverable.not(element).get());},_delay:function _delay(handler,delay){function handlerProxy(){return(typeof handler==="string"?instance[handler]:handler).apply(instance,arguments);}var instance=this;return setTimeout(handlerProxy,delay||0);},_hoverable:function _hoverable(element){this.hoverable=this.hoverable.add(element);this._on(element,{mouseenter:function mouseenter(event){this._addClass($(event.currentTarget),null,"ui-state-hover");},mouseleave:function mouseleave(event){this._removeClass($(event.currentTarget),null,"ui-state-hover");}});},_focusable:function _focusable(element){this.focusable=this.focusable.add(element);this._on(element,{focusin:function focusin(event){this._addClass($(event.currentTarget),null,"ui-state-focus");},focusout:function focusout(event){this._removeClass($(event.currentTarget),null,"ui-state-focus");}});},_trigger:function _trigger(type,event,data){var prop,orig;var callback=this.options[type];data=data||{};event=$.Event(event);event.type=(type===this.widgetEventPrefix?type:this.widgetEventPrefix+type).toLowerCase();// The original event may come from any element
	// so we need to reset the target on the new event
	event.target=this.element[0];// Copy original event properties over to the new event
	orig=event.originalEvent;if(orig){for(prop in orig){if(!(prop in event)){event[prop]=orig[prop];}}}this.element.trigger(event,data);return!($.isFunction(callback)&&callback.apply(this.element[0],[event].concat(data))===false||event.isDefaultPrevented());}};$.each({show:"fadeIn",hide:"fadeOut"},function(method,defaultEffect){$.Widget.prototype["_"+method]=function(element,options,callback){if(typeof options==="string"){options={effect:options};}var hasOptions;var effectName=!options?method:options===true||typeof options==="number"?defaultEffect:options.effect||defaultEffect;options=options||{};if(typeof options==="number"){options={duration:options};}hasOptions=!$.isEmptyObject(options);options.complete=callback;if(options.delay){element.delay(options.delay);}if(hasOptions&&$.effects&&$.effects.effect[effectName]){element[method](options);}else if(effectName!==method&&element[effectName]){element[effectName](options.duration,options.easing,callback);}else{element.queue(function(next){$(this)[method]();if(callback){callback.call(element[0]);}next();});}};});var widget=$.widget;/*!
	 * jQuery UI Position 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/position/
	 *///>>label: Position
	//>>group: Core
	//>>description: Positions elements relative to other elements.
	//>>docs: http://api.jqueryui.com/position/
	//>>demos: http://jqueryui.com/position/
	(function(){var cachedScrollbarWidth,max=Math.max,abs=Math.abs,rhorizontal=/left|center|right/,rvertical=/top|center|bottom/,roffset=/[\+\-]\d+(\.[\d]+)?%?/,rposition=/^\w+/,rpercent=/%$/,_position=$.fn.position;function getOffsets(offsets,width,height){return[parseFloat(offsets[0])*(rpercent.test(offsets[0])?width/100:1),parseFloat(offsets[1])*(rpercent.test(offsets[1])?height/100:1)];}function parseCss(element,property){return parseInt($.css(element,property),10)||0;}function getDimensions(elem){var raw=elem[0];if(raw.nodeType===9){return{width:elem.width(),height:elem.height(),offset:{top:0,left:0}};}if($.isWindow(raw)){return{width:elem.width(),height:elem.height(),offset:{top:elem.scrollTop(),left:elem.scrollLeft()}};}if(raw.preventDefault){return{width:0,height:0,offset:{top:raw.pageY,left:raw.pageX}};}return{width:elem.outerWidth(),height:elem.outerHeight(),offset:elem.offset()};}$.position={scrollbarWidth:function scrollbarWidth(){if(cachedScrollbarWidth!==undefined){return cachedScrollbarWidth;}var w1,w2,div=$("<div "+"style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>"+"<div style='height:100px;width:auto;'></div></div>"),innerDiv=div.children()[0];$("body").append(div);w1=innerDiv.offsetWidth;div.css("overflow","scroll");w2=innerDiv.offsetWidth;if(w1===w2){w2=div[0].clientWidth;}div.remove();return cachedScrollbarWidth=w1-w2;},getScrollInfo:function getScrollInfo(within){var overflowX=within.isWindow||within.isDocument?"":within.element.css("overflow-x"),overflowY=within.isWindow||within.isDocument?"":within.element.css("overflow-y"),hasOverflowX=overflowX==="scroll"||overflowX==="auto"&&within.width<within.element[0].scrollWidth,hasOverflowY=overflowY==="scroll"||overflowY==="auto"&&within.height<within.element[0].scrollHeight;return{width:hasOverflowY?$.position.scrollbarWidth():0,height:hasOverflowX?$.position.scrollbarWidth():0};},getWithinInfo:function getWithinInfo(element){var withinElement=$(element||window),isWindow=$.isWindow(withinElement[0]),isDocument=!!withinElement[0]&&withinElement[0].nodeType===9,hasOffset=!isWindow&&!isDocument;return{element:withinElement,isWindow:isWindow,isDocument:isDocument,offset:hasOffset?$(element).offset():{left:0,top:0},scrollLeft:withinElement.scrollLeft(),scrollTop:withinElement.scrollTop(),width:withinElement.outerWidth(),height:withinElement.outerHeight()};}};$.fn.position=function(options){if(!options||!options.of){return _position.apply(this,arguments);}// Make a copy, we don't want to modify arguments
	options=$.extend({},options);var atOffset,targetWidth,targetHeight,targetOffset,basePosition,dimensions,target=$(options.of),within=$.position.getWithinInfo(options.within),scrollInfo=$.position.getScrollInfo(within),collision=(options.collision||"flip").split(" "),offsets={};dimensions=getDimensions(target);if(target[0].preventDefault){// Force left top to allow flipping
	options.at="left top";}targetWidth=dimensions.width;targetHeight=dimensions.height;targetOffset=dimensions.offset;// Clone to reuse original targetOffset later
	basePosition=$.extend({},targetOffset);// Force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each(["my","at"],function(){var pos=(options[this]||"").split(" "),horizontalOffset,verticalOffset;if(pos.length===1){pos=rhorizontal.test(pos[0])?pos.concat(["center"]):rvertical.test(pos[0])?["center"].concat(pos):["center","center"];}pos[0]=rhorizontal.test(pos[0])?pos[0]:"center";pos[1]=rvertical.test(pos[1])?pos[1]:"center";// Calculate offsets
	horizontalOffset=roffset.exec(pos[0]);verticalOffset=roffset.exec(pos[1]);offsets[this]=[horizontalOffset?horizontalOffset[0]:0,verticalOffset?verticalOffset[0]:0];// Reduce to just the positions without the offsets
	options[this]=[rposition.exec(pos[0])[0],rposition.exec(pos[1])[0]];});// Normalize collision option
	if(collision.length===1){collision[1]=collision[0];}if(options.at[0]==="right"){basePosition.left+=targetWidth;}else if(options.at[0]==="center"){basePosition.left+=targetWidth/2;}if(options.at[1]==="bottom"){basePosition.top+=targetHeight;}else if(options.at[1]==="center"){basePosition.top+=targetHeight/2;}atOffset=getOffsets(offsets.at,targetWidth,targetHeight);basePosition.left+=atOffset[0];basePosition.top+=atOffset[1];return this.each(function(){var collisionPosition,using,elem=$(this),elemWidth=elem.outerWidth(),elemHeight=elem.outerHeight(),marginLeft=parseCss(this,"marginLeft"),marginTop=parseCss(this,"marginTop"),collisionWidth=elemWidth+marginLeft+parseCss(this,"marginRight")+scrollInfo.width,collisionHeight=elemHeight+marginTop+parseCss(this,"marginBottom")+scrollInfo.height,position=$.extend({},basePosition),myOffset=getOffsets(offsets.my,elem.outerWidth(),elem.outerHeight());if(options.my[0]==="right"){position.left-=elemWidth;}else if(options.my[0]==="center"){position.left-=elemWidth/2;}if(options.my[1]==="bottom"){position.top-=elemHeight;}else if(options.my[1]==="center"){position.top-=elemHeight/2;}position.left+=myOffset[0];position.top+=myOffset[1];collisionPosition={marginLeft:marginLeft,marginTop:marginTop};$.each(["left","top"],function(i,dir){if($.ui.position[collision[i]]){$.ui.position[collision[i]][dir](position,{targetWidth:targetWidth,targetHeight:targetHeight,elemWidth:elemWidth,elemHeight:elemHeight,collisionPosition:collisionPosition,collisionWidth:collisionWidth,collisionHeight:collisionHeight,offset:[atOffset[0]+myOffset[0],atOffset[1]+myOffset[1]],my:options.my,at:options.at,within:within,elem:elem});}});if(options.using){// Adds feedback as second argument to using callback, if present
	using=function using(props){var left=targetOffset.left-position.left,right=left+targetWidth-elemWidth,top=targetOffset.top-position.top,bottom=top+targetHeight-elemHeight,feedback={target:{element:target,left:targetOffset.left,top:targetOffset.top,width:targetWidth,height:targetHeight},element:{element:elem,left:position.left,top:position.top,width:elemWidth,height:elemHeight},horizontal:right<0?"left":left>0?"right":"center",vertical:bottom<0?"top":top>0?"bottom":"middle"};if(targetWidth<elemWidth&&abs(left+right)<targetWidth){feedback.horizontal="center";}if(targetHeight<elemHeight&&abs(top+bottom)<targetHeight){feedback.vertical="middle";}if(max(abs(left),abs(right))>max(abs(top),abs(bottom))){feedback.important="horizontal";}else{feedback.important="vertical";}options.using.call(this,props,feedback);};}elem.offset($.extend(position,{using:using}));});};$.ui.position={fit:{left:function left(position,data){var within=data.within,withinOffset=within.isWindow?within.scrollLeft:within.offset.left,outerWidth=within.width,collisionPosLeft=position.left-data.collisionPosition.marginLeft,overLeft=withinOffset-collisionPosLeft,overRight=collisionPosLeft+data.collisionWidth-outerWidth-withinOffset,newOverRight;// Element is wider than within
	if(data.collisionWidth>outerWidth){// Element is initially over the left side of within
	if(overLeft>0&&overRight<=0){newOverRight=position.left+overLeft+data.collisionWidth-outerWidth-withinOffset;position.left+=overLeft-newOverRight;// Element is initially over right side of within
	}else if(overRight>0&&overLeft<=0){position.left=withinOffset;// Element is initially over both left and right sides of within
	}else{if(overLeft>overRight){position.left=withinOffset+outerWidth-data.collisionWidth;}else{position.left=withinOffset;}}// Too far left -> align with left edge
	}else if(overLeft>0){position.left+=overLeft;// Too far right -> align with right edge
	}else if(overRight>0){position.left-=overRight;// Adjust based on position and margin
	}else{position.left=max(position.left-collisionPosLeft,position.left);}},top:function top(position,data){var within=data.within,withinOffset=within.isWindow?within.scrollTop:within.offset.top,outerHeight=data.within.height,collisionPosTop=position.top-data.collisionPosition.marginTop,overTop=withinOffset-collisionPosTop,overBottom=collisionPosTop+data.collisionHeight-outerHeight-withinOffset,newOverBottom;// Element is taller than within
	if(data.collisionHeight>outerHeight){// Element is initially over the top of within
	if(overTop>0&&overBottom<=0){newOverBottom=position.top+overTop+data.collisionHeight-outerHeight-withinOffset;position.top+=overTop-newOverBottom;// Element is initially over bottom of within
	}else if(overBottom>0&&overTop<=0){position.top=withinOffset;// Element is initially over both top and bottom of within
	}else{if(overTop>overBottom){position.top=withinOffset+outerHeight-data.collisionHeight;}else{position.top=withinOffset;}}// Too far up -> align with top
	}else if(overTop>0){position.top+=overTop;// Too far down -> align with bottom edge
	}else if(overBottom>0){position.top-=overBottom;// Adjust based on position and margin
	}else{position.top=max(position.top-collisionPosTop,position.top);}}},flip:{left:function left(position,data){var within=data.within,withinOffset=within.offset.left+within.scrollLeft,outerWidth=within.width,offsetLeft=within.isWindow?within.scrollLeft:within.offset.left,collisionPosLeft=position.left-data.collisionPosition.marginLeft,overLeft=collisionPosLeft-offsetLeft,overRight=collisionPosLeft+data.collisionWidth-outerWidth-offsetLeft,myOffset=data.my[0]==="left"?-data.elemWidth:data.my[0]==="right"?data.elemWidth:0,atOffset=data.at[0]==="left"?data.targetWidth:data.at[0]==="right"?-data.targetWidth:0,offset=-2*data.offset[0],newOverRight,newOverLeft;if(overLeft<0){newOverRight=position.left+myOffset+atOffset+offset+data.collisionWidth-outerWidth-withinOffset;if(newOverRight<0||newOverRight<abs(overLeft)){position.left+=myOffset+atOffset+offset;}}else if(overRight>0){newOverLeft=position.left-data.collisionPosition.marginLeft+myOffset+atOffset+offset-offsetLeft;if(newOverLeft>0||abs(newOverLeft)<overRight){position.left+=myOffset+atOffset+offset;}}},top:function top(position,data){var within=data.within,withinOffset=within.offset.top+within.scrollTop,outerHeight=within.height,offsetTop=within.isWindow?within.scrollTop:within.offset.top,collisionPosTop=position.top-data.collisionPosition.marginTop,overTop=collisionPosTop-offsetTop,overBottom=collisionPosTop+data.collisionHeight-outerHeight-offsetTop,top=data.my[1]==="top",myOffset=top?-data.elemHeight:data.my[1]==="bottom"?data.elemHeight:0,atOffset=data.at[1]==="top"?data.targetHeight:data.at[1]==="bottom"?-data.targetHeight:0,offset=-2*data.offset[1],newOverTop,newOverBottom;if(overTop<0){newOverBottom=position.top+myOffset+atOffset+offset+data.collisionHeight-outerHeight-withinOffset;if(newOverBottom<0||newOverBottom<abs(overTop)){position.top+=myOffset+atOffset+offset;}}else if(overBottom>0){newOverTop=position.top-data.collisionPosition.marginTop+myOffset+atOffset+offset-offsetTop;if(newOverTop>0||abs(newOverTop)<overBottom){position.top+=myOffset+atOffset+offset;}}}},flipfit:{left:function left(){$.ui.position.flip.left.apply(this,arguments);$.ui.position.fit.left.apply(this,arguments);},top:function top(){$.ui.position.flip.top.apply(this,arguments);$.ui.position.fit.top.apply(this,arguments);}}};})();var position=$.ui.position;/*!
	 * jQuery UI :data 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: :data Selector
	//>>group: Core
	//>>description: Selects elements which have data stored under the specified key.
	//>>docs: http://api.jqueryui.com/data-selector/
	var data=$.extend($.expr[":"],{data:$.expr.createPseudo?$.expr.createPseudo(function(dataName){return function(elem){return!!$.data(elem,dataName);};}):// Support: jQuery <1.8
	function(elem,i,match){return!!$.data(elem,match[3]);}});/*!
	 * jQuery UI Disable Selection 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: disableSelection
	//>>group: Core
	//>>description: Disable selection of text content within the set of matched elements.
	//>>docs: http://api.jqueryui.com/disableSelection/
	// This file is deprecated
	var disableSelection=$.fn.extend({disableSelection:function(){var eventType="onselectstart"in document.createElement("div")?"selectstart":"mousedown";return function(){return this.on(eventType+".ui-disableSelection",function(event){event.preventDefault();});};}(),enableSelection:function enableSelection(){return this.off(".ui-disableSelection");}});/*!
	 * jQuery UI Effects 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Effects Core
	//>>group: Effects
	// jscs:disable maximumLineLength
	//>>description: Extends the internal jQuery effects. Includes morphing and easing. Required by all other effects.
	// jscs:enable maximumLineLength
	//>>docs: http://api.jqueryui.com/category/effects-core/
	//>>demos: http://jqueryui.com/effect/
	var dataSpace="ui-effects-",dataSpaceStyle="ui-effects-style",dataSpaceAnimated="ui-effects-animated",// Create a local jQuery because jQuery Color relies on it and the
	// global may not exist with AMD and a custom build (#10199)
	jQuery=$;$.effects={effect:{}};/*!
	 * jQuery Color Animations v2.1.2
	 * https://github.com/jquery/jquery-color
	 *
	 * Copyright 2014 jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * Date: Wed Jan 16 08:47:09 2013 -0600
	 */(function(jQuery,undefined){var stepHooks="backgroundColor borderBottomColor borderLeftColor borderRightColor "+"borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",// Plusequals test for += 100 -= 100
	rplusequals=/^([\-+])=\s*(\d+\.?\d*)/,// A set of RE's that can match strings and generate color tuples.
	stringParsers=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function parse(execResult){return[execResult[1],execResult[2],execResult[3],execResult[4]];}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function parse(execResult){return[execResult[1]*2.55,execResult[2]*2.55,execResult[3]*2.55,execResult[4]];}},{// This regex ignores A-F because it's compared against an already lowercased string
	re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function parse(execResult){return[parseInt(execResult[1],16),parseInt(execResult[2],16),parseInt(execResult[3],16)];}},{// This regex ignores A-F because it's compared against an already lowercased string
	re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function parse(execResult){return[parseInt(execResult[1]+execResult[1],16),parseInt(execResult[2]+execResult[2],16),parseInt(execResult[3]+execResult[3],16)];}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function parse(execResult){return[execResult[1],execResult[2]/100,execResult[3]/100,execResult[4]];}}],// JQuery.Color( )
	color=jQuery.Color=function(color,green,blue,alpha){return new jQuery.Color.fn.parse(color,green,blue,alpha);},spaces={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},propTypes={"byte":{floor:true,max:255},"percent":{max:1},"degrees":{mod:360,floor:true}},support=color.support={},// Element for support tests
	supportElem=jQuery("<p>")[0],// Colors = jQuery.Color.names
	colors,// Local aliases of functions called often
	each=jQuery.each;// Determine rgba support immediately
	supportElem.style.cssText="background-color:rgba(1,1,1,.5)";support.rgba=supportElem.style.backgroundColor.indexOf("rgba")>-1;// Define cache name and alpha properties
	// for rgba and hsla spaces
	each(spaces,function(spaceName,space){space.cache="_"+spaceName;space.props.alpha={idx:3,type:"percent",def:1};});function clamp(value,prop,allowEmpty){var type=propTypes[prop.type]||{};if(value==null){return allowEmpty||!prop.def?null:prop.def;}// ~~ is an short way of doing floor for positive numbers
	value=type.floor?~~value:parseFloat(value);// IE will pass in empty strings as value for alpha,
	// which will hit this case
	if(isNaN(value)){return prop.def;}if(type.mod){// We add mod before modding to make sure that negatives values
	// get converted properly: -10 -> 350
	return(value+type.mod)%type.mod;}// For now all property types without mod have min and max
	return 0>value?0:type.max<value?type.max:value;}function stringParse(string){var inst=color(),rgba=inst._rgba=[];string=string.toLowerCase();each(stringParsers,function(i,parser){var parsed,match=parser.re.exec(string),values=match&&parser.parse(match),spaceName=parser.space||"rgba";if(values){parsed=inst[spaceName](values);// If this was an rgba parse the assignment might happen twice
	// oh well....
	inst[spaces[spaceName].cache]=parsed[spaces[spaceName].cache];rgba=inst._rgba=parsed._rgba;// Exit each( stringParsers ) here because we matched
	return false;}});// Found a stringParser that handled it
	if(rgba.length){// If this came from a parsed string, force "transparent" when alpha is 0
	// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
	if(rgba.join()==="0,0,0,0"){jQuery.extend(rgba,colors.transparent);}return inst;}// Named colors
	return colors[string];}color.fn=jQuery.extend(color.prototype,{parse:function parse(red,green,blue,alpha){if(red===undefined){this._rgba=[null,null,null,null];return this;}if(red.jquery||red.nodeType){red=jQuery(red).css(green);green=undefined;}var inst=this,type=jQuery.type(red),rgba=this._rgba=[];// More than 1 argument specified - assume ( red, green, blue, alpha )
	if(green!==undefined){red=[red,green,blue,alpha];type="array";}if(type==="string"){return this.parse(stringParse(red)||colors._default);}if(type==="array"){each(spaces.rgba.props,function(key,prop){rgba[prop.idx]=clamp(red[prop.idx],prop);});return this;}if(type==="object"){if(red instanceof color){each(spaces,function(spaceName,space){if(red[space.cache]){inst[space.cache]=red[space.cache].slice();}});}else{each(spaces,function(spaceName,space){var cache=space.cache;each(space.props,function(key,prop){// If the cache doesn't exist, and we know how to convert
	if(!inst[cache]&&space.to){// If the value was null, we don't need to copy it
	// if the key was alpha, we don't need to copy it either
	if(key==="alpha"||red[key]==null){return;}inst[cache]=space.to(inst._rgba);}// This is the only case where we allow nulls for ALL properties.
	// call clamp with alwaysAllowEmpty
	inst[cache][prop.idx]=clamp(red[key],prop,true);});// Everything defined but alpha?
	if(inst[cache]&&jQuery.inArray(null,inst[cache].slice(0,3))<0){// Use the default of 1
	inst[cache][3]=1;if(space.from){inst._rgba=space.from(inst[cache]);}}});}return this;}},is:function is(compare){var is=color(compare),same=true,inst=this;each(spaces,function(_,space){var localCache,isCache=is[space.cache];if(isCache){localCache=inst[space.cache]||space.to&&space.to(inst._rgba)||[];each(space.props,function(_,prop){if(isCache[prop.idx]!=null){same=isCache[prop.idx]===localCache[prop.idx];return same;}});}return same;});return same;},_space:function _space(){var used=[],inst=this;each(spaces,function(spaceName,space){if(inst[space.cache]){used.push(spaceName);}});return used.pop();},transition:function transition(other,distance){var end=color(other),spaceName=end._space(),space=spaces[spaceName],startColor=this.alpha()===0?color("transparent"):this,start=startColor[space.cache]||space.to(startColor._rgba),result=start.slice();end=end[space.cache];each(space.props,function(key,prop){var index=prop.idx,startValue=start[index],endValue=end[index],type=propTypes[prop.type]||{};// If null, don't override start value
	if(endValue===null){return;}// If null - use end
	if(startValue===null){result[index]=endValue;}else{if(type.mod){if(endValue-startValue>type.mod/2){startValue+=type.mod;}else if(startValue-endValue>type.mod/2){startValue-=type.mod;}}result[index]=clamp((endValue-startValue)*distance+startValue,prop);}});return this[spaceName](result);},blend:function blend(opaque){// If we are already opaque - return ourself
	if(this._rgba[3]===1){return this;}var rgb=this._rgba.slice(),a=rgb.pop(),blend=color(opaque)._rgba;return color(jQuery.map(rgb,function(v,i){return(1-a)*blend[i]+a*v;}));},toRgbaString:function toRgbaString(){var prefix="rgba(",rgba=jQuery.map(this._rgba,function(v,i){return v==null?i>2?1:0:v;});if(rgba[3]===1){rgba.pop();prefix="rgb(";}return prefix+rgba.join()+")";},toHslaString:function toHslaString(){var prefix="hsla(",hsla=jQuery.map(this.hsla(),function(v,i){if(v==null){v=i>2?1:0;}// Catch 1 and 2
	if(i&&i<3){v=Math.round(v*100)+"%";}return v;});if(hsla[3]===1){hsla.pop();prefix="hsl(";}return prefix+hsla.join()+")";},toHexString:function toHexString(includeAlpha){var rgba=this._rgba.slice(),alpha=rgba.pop();if(includeAlpha){rgba.push(~~(alpha*255));}return"#"+jQuery.map(rgba,function(v){// Default to 0 when nulls exist
	v=(v||0).toString(16);return v.length===1?"0"+v:v;}).join("");},toString:function toString(){return this._rgba[3]===0?"transparent":this.toRgbaString();}});color.fn.parse.prototype=color.fn;// Hsla conversions adapted from:
	// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021
	function hue2rgb(p,q,h){h=(h+1)%1;if(h*6<1){return p+(q-p)*h*6;}if(h*2<1){return q;}if(h*3<2){return p+(q-p)*(2/3-h)*6;}return p;}spaces.hsla.to=function(rgba){if(rgba[0]==null||rgba[1]==null||rgba[2]==null){return[null,null,null,rgba[3]];}var r=rgba[0]/255,g=rgba[1]/255,b=rgba[2]/255,a=rgba[3],max=Math.max(r,g,b),min=Math.min(r,g,b),diff=max-min,add=max+min,l=add*0.5,h,s;if(min===max){h=0;}else if(r===max){h=60*(g-b)/diff+360;}else if(g===max){h=60*(b-r)/diff+120;}else{h=60*(r-g)/diff+240;}// Chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
	// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
	if(diff===0){s=0;}else if(l<=0.5){s=diff/add;}else{s=diff/(2-add);}return[Math.round(h)%360,s,l,a==null?1:a];};spaces.hsla.from=function(hsla){if(hsla[0]==null||hsla[1]==null||hsla[2]==null){return[null,null,null,hsla[3]];}var h=hsla[0]/360,s=hsla[1],l=hsla[2],a=hsla[3],q=l<=0.5?l*(1+s):l+s-l*s,p=2*l-q;return[Math.round(hue2rgb(p,q,h+1/3)*255),Math.round(hue2rgb(p,q,h)*255),Math.round(hue2rgb(p,q,h-1/3)*255),a];};each(spaces,function(spaceName,space){var props=space.props,cache=space.cache,to=space.to,from=space.from;// Makes rgba() and hsla()
	color.fn[spaceName]=function(value){// Generate a cache for this space if it doesn't exist
	if(to&&!this[cache]){this[cache]=to(this._rgba);}if(value===undefined){return this[cache].slice();}var ret,type=jQuery.type(value),arr=type==="array"||type==="object"?value:arguments,local=this[cache].slice();each(props,function(key,prop){var val=arr[type==="object"?key:prop.idx];if(val==null){val=local[prop.idx];}local[prop.idx]=clamp(val,prop);});if(from){ret=color(from(local));ret[cache]=local;return ret;}else{return color(local);}};// Makes red() green() blue() alpha() hue() saturation() lightness()
	each(props,function(key,prop){// Alpha is included in more than one space
	if(color.fn[key]){return;}color.fn[key]=function(value){var vtype=jQuery.type(value),fn=key==="alpha"?this._hsla?"hsla":"rgba":spaceName,local=this[fn](),cur=local[prop.idx],match;if(vtype==="undefined"){return cur;}if(vtype==="function"){value=value.call(this,cur);vtype=jQuery.type(value);}if(value==null&&prop.empty){return this;}if(vtype==="string"){match=rplusequals.exec(value);if(match){value=cur+parseFloat(match[2])*(match[1]==="+"?1:-1);}}local[prop.idx]=value;return this[fn](local);};});});// Add cssHook and .fx.step function for each named hook.
	// accept a space separated string of properties
	color.hook=function(hook){var hooks=hook.split(" ");each(hooks,function(i,hook){jQuery.cssHooks[hook]={set:function set(elem,value){var parsed,curElem,backgroundColor="";if(value!=="transparent"&&(jQuery.type(value)!=="string"||(parsed=stringParse(value)))){value=color(parsed||value);if(!support.rgba&&value._rgba[3]!==1){curElem=hook==="backgroundColor"?elem.parentNode:elem;while((backgroundColor===""||backgroundColor==="transparent")&&curElem&&curElem.style){try{backgroundColor=jQuery.css(curElem,"backgroundColor");curElem=curElem.parentNode;}catch(e){}}value=value.blend(backgroundColor&&backgroundColor!=="transparent"?backgroundColor:"_default");}value=value.toRgbaString();}try{elem.style[hook]=value;}catch(e){// Wrapped to prevent IE from throwing errors on "invalid" values like
	// 'auto' or 'inherit'
	}}};jQuery.fx.step[hook]=function(fx){if(!fx.colorInit){fx.start=color(fx.elem,hook);fx.end=color(fx.end);fx.colorInit=true;}jQuery.cssHooks[hook].set(fx.elem,fx.start.transition(fx.end,fx.pos));};});};color.hook(stepHooks);jQuery.cssHooks.borderColor={expand:function expand(value){var expanded={};each(["Top","Right","Bottom","Left"],function(i,part){expanded["border"+part+"Color"]=value;});return expanded;}};// Basic color names only.
	// Usage of any of the other color names requires adding yourself or including
	// jquery.color.svg-names.js.
	colors=jQuery.Color.names={// 4.1. Basic color keywords
	aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",// 4.2.3. "transparent" color keyword
	transparent:[null,null,null,0],_default:"#ffffff"};})(jQuery);/******************************************************************************//****************************** CLASS ANIMATIONS ******************************//******************************************************************************/(function(){var classAnimationActions=["add","remove","toggle"],shorthandStyles={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};$.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(_,prop){$.fx.step[prop]=function(fx){if(fx.end!=="none"&&!fx.setAttr||fx.pos===1&&!fx.setAttr){jQuery.style(fx.elem,prop,fx.end);fx.setAttr=true;}};});function getElementStyles(elem){var key,len,style=elem.ownerDocument.defaultView?elem.ownerDocument.defaultView.getComputedStyle(elem,null):elem.currentStyle,styles={};if(style&&style.length&&style[0]&&style[style[0]]){len=style.length;while(len--){key=style[len];if(typeof style[key]==="string"){styles[$.camelCase(key)]=style[key];}}// Support: Opera, IE <9
	}else{for(key in style){if(typeof style[key]==="string"){styles[key]=style[key];}}}return styles;}function styleDifference(oldStyle,newStyle){var diff={},name,value;for(name in newStyle){value=newStyle[name];if(oldStyle[name]!==value){if(!shorthandStyles[name]){if($.fx.step[name]||!isNaN(parseFloat(value))){diff[name]=value;}}}}return diff;}// Support: jQuery <1.8
	if(!$.fn.addBack){$.fn.addBack=function(selector){return this.add(selector==null?this.prevObject:this.prevObject.filter(selector));};}$.effects.animateClass=function(value,duration,easing,callback){var o=$.speed(duration,easing,callback);return this.queue(function(){var animated=$(this),baseClass=animated.attr("class")||"",applyClassChange,allAnimations=o.children?animated.find("*").addBack():animated;// Map the animated objects to store the original styles.
	allAnimations=allAnimations.map(function(){var el=$(this);return{el:el,start:getElementStyles(this)};});// Apply class change
	applyClassChange=function applyClassChange(){$.each(classAnimationActions,function(i,action){if(value[action]){animated[action+"Class"](value[action]);}});};applyClassChange();// Map all animated objects again - calculate new styles and diff
	allAnimations=allAnimations.map(function(){this.end=getElementStyles(this.el[0]);this.diff=styleDifference(this.start,this.end);return this;});// Apply original class
	animated.attr("class",baseClass);// Map all animated objects again - this time collecting a promise
	allAnimations=allAnimations.map(function(){var styleInfo=this,dfd=$.Deferred(),opts=$.extend({},o,{queue:false,complete:function complete(){dfd.resolve(styleInfo);}});this.el.animate(this.diff,opts);return dfd.promise();});// Once all animations have completed:
	$.when.apply($,allAnimations.get()).done(function(){// Set the final class
	applyClassChange();// For each animated element,
	// clear all css properties that were animated
	$.each(arguments,function(){var el=this.el;$.each(this.diff,function(key){el.css(key,"");});});// This is guarnteed to be there if you use jQuery.speed()
	// it also handles dequeuing the next anim...
	o.complete.call(animated[0]);});});};$.fn.extend({addClass:function(orig){return function(classNames,speed,easing,callback){return speed?$.effects.animateClass.call(this,{add:classNames},speed,easing,callback):orig.apply(this,arguments);};}($.fn.addClass),removeClass:function(orig){return function(classNames,speed,easing,callback){return arguments.length>1?$.effects.animateClass.call(this,{remove:classNames},speed,easing,callback):orig.apply(this,arguments);};}($.fn.removeClass),toggleClass:function(orig){return function(classNames,force,speed,easing,callback){if(typeof force==="boolean"||force===undefined){if(!speed){// Without speed parameter
	return orig.apply(this,arguments);}else{return $.effects.animateClass.call(this,force?{add:classNames}:{remove:classNames},speed,easing,callback);}}else{// Without force parameter
	return $.effects.animateClass.call(this,{toggle:classNames},force,speed,easing);}};}($.fn.toggleClass),switchClass:function switchClass(remove,add,speed,easing,callback){return $.effects.animateClass.call(this,{add:add,remove:remove},speed,easing,callback);}});})();/******************************************************************************//*********************************** EFFECTS **********************************//******************************************************************************/(function(){if($.expr&&$.expr.filters&&$.expr.filters.animated){$.expr.filters.animated=function(orig){return function(elem){return!!$(elem).data(dataSpaceAnimated)||orig(elem);};}($.expr.filters.animated);}if($.uiBackCompat!==false){$.extend($.effects,{// Saves a set of properties in a data storage
	save:function save(element,set){var i=0,length=set.length;for(;i<length;i++){if(set[i]!==null){element.data(dataSpace+set[i],element[0].style[set[i]]);}}},// Restores a set of previously saved properties from a data storage
	restore:function restore(element,set){var val,i=0,length=set.length;for(;i<length;i++){if(set[i]!==null){val=element.data(dataSpace+set[i]);element.css(set[i],val);}}},setMode:function setMode(el,mode){if(mode==="toggle"){mode=el.is(":hidden")?"show":"hide";}return mode;},// Wraps the element around a wrapper that copies position properties
	createWrapper:function createWrapper(element){// If the element is already wrapped, return it
	if(element.parent().is(".ui-effects-wrapper")){return element.parent();}// Wrap the element
	var props={width:element.outerWidth(true),height:element.outerHeight(true),"float":element.css("float")},wrapper=$("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),// Store the size in case width/height are defined in % - Fixes #5245
	size={width:element.width(),height:element.height()},active=document.activeElement;// Support: Firefox
	// Firefox incorrectly exposes anonymous content
	// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
	try{active.id;}catch(e){active=document.body;}element.wrap(wrapper);// Fixes #7595 - Elements lose focus when wrapped.
	if(element[0]===active||$.contains(element[0],active)){$(active).trigger("focus");}// Hotfix for jQuery 1.4 since some change in wrap() seems to actually
	// lose the reference to the wrapped element
	wrapper=element.parent();// Transfer positioning properties to the wrapper
	if(element.css("position")==="static"){wrapper.css({position:"relative"});element.css({position:"relative"});}else{$.extend(props,{position:element.css("position"),zIndex:element.css("z-index")});$.each(["top","left","bottom","right"],function(i,pos){props[pos]=element.css(pos);if(isNaN(parseInt(props[pos],10))){props[pos]="auto";}});element.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"});}element.css(size);return wrapper.css(props).show();},removeWrapper:function removeWrapper(element){var active=document.activeElement;if(element.parent().is(".ui-effects-wrapper")){element.parent().replaceWith(element);// Fixes #7595 - Elements lose focus when wrapped.
	if(element[0]===active||$.contains(element[0],active)){$(active).trigger("focus");}}return element;}});}$.extend($.effects,{version:"1.12.1",define:function define(name,mode,effect){if(!effect){effect=mode;mode="effect";}$.effects.effect[name]=effect;$.effects.effect[name].mode=mode;return effect;},scaledDimensions:function scaledDimensions(element,percent,direction){if(percent===0){return{height:0,width:0,outerHeight:0,outerWidth:0};}var x=direction!=="horizontal"?(percent||100)/100:1,y=direction!=="vertical"?(percent||100)/100:1;return{height:element.height()*y,width:element.width()*x,outerHeight:element.outerHeight()*y,outerWidth:element.outerWidth()*x};},clipToBox:function clipToBox(animation){return{width:animation.clip.right-animation.clip.left,height:animation.clip.bottom-animation.clip.top,left:animation.clip.left,top:animation.clip.top};},// Injects recently queued functions to be first in line (after "inprogress")
	unshift:function unshift(element,queueLength,count){var queue=element.queue();if(queueLength>1){queue.splice.apply(queue,[1,0].concat(queue.splice(queueLength,count)));}element.dequeue();},saveStyle:function saveStyle(element){element.data(dataSpaceStyle,element[0].style.cssText);},restoreStyle:function restoreStyle(element){element[0].style.cssText=element.data(dataSpaceStyle)||"";element.removeData(dataSpaceStyle);},mode:function mode(element,_mode){var hidden=element.is(":hidden");if(_mode==="toggle"){_mode=hidden?"show":"hide";}if(hidden?_mode==="hide":_mode==="show"){_mode="none";}return _mode;},// Translates a [top,left] array into a baseline value
	getBaseline:function getBaseline(origin,original){var y,x;switch(origin[0]){case"top":y=0;break;case"middle":y=0.5;break;case"bottom":y=1;break;default:y=origin[0]/original.height;}switch(origin[1]){case"left":x=0;break;case"center":x=0.5;break;case"right":x=1;break;default:x=origin[1]/original.width;}return{x:x,y:y};},// Creates a placeholder element so that the original element can be made absolute
	createPlaceholder:function createPlaceholder(element){var placeholder,cssPosition=element.css("position"),position=element.position();// Lock in margins first to account for form elements, which
	// will change margin if you explicitly set height
	// see: http://jsfiddle.net/JZSMt/3/ https://bugs.webkit.org/show_bug.cgi?id=107380
	// Support: Safari
	element.css({marginTop:element.css("marginTop"),marginBottom:element.css("marginBottom"),marginLeft:element.css("marginLeft"),marginRight:element.css("marginRight")}).outerWidth(element.outerWidth()).outerHeight(element.outerHeight());if(/^(static|relative)/.test(cssPosition)){cssPosition="absolute";placeholder=$("<"+element[0].nodeName+">").insertAfter(element).css({// Convert inline to inline block to account for inline elements
	// that turn to inline block based on content (like img)
	display:/^(inline|ruby)/.test(element.css("display"))?"inline-block":"block",visibility:"hidden",// Margins need to be set to account for margin collapse
	marginTop:element.css("marginTop"),marginBottom:element.css("marginBottom"),marginLeft:element.css("marginLeft"),marginRight:element.css("marginRight"),"float":element.css("float")}).outerWidth(element.outerWidth()).outerHeight(element.outerHeight()).addClass("ui-effects-placeholder");element.data(dataSpace+"placeholder",placeholder);}element.css({position:cssPosition,left:position.left,top:position.top});return placeholder;},removePlaceholder:function removePlaceholder(element){var dataKey=dataSpace+"placeholder",placeholder=element.data(dataKey);if(placeholder){placeholder.remove();element.removeData(dataKey);}},// Removes a placeholder if it exists and restores
	// properties that were modified during placeholder creation
	cleanUp:function cleanUp(element){$.effects.restoreStyle(element);$.effects.removePlaceholder(element);},setTransition:function setTransition(element,list,factor,value){value=value||{};$.each(list,function(i,x){var unit=element.cssUnit(x);if(unit[0]>0){value[x]=unit[0]*factor+unit[1];}});return value;}});// Return an effect options object for the given parameters:
	function _normalizeArguments(effect,options,speed,callback){// Allow passing all options as the first parameter
	if($.isPlainObject(effect)){options=effect;effect=effect.effect;}// Convert to an object
	effect={effect:effect};// Catch (effect, null, ...)
	if(options==null){options={};}// Catch (effect, callback)
	if($.isFunction(options)){callback=options;speed=null;options={};}// Catch (effect, speed, ?)
	if(typeof options==="number"||$.fx.speeds[options]){callback=speed;speed=options;options={};}// Catch (effect, options, callback)
	if($.isFunction(speed)){callback=speed;speed=null;}// Add options to effect
	if(options){$.extend(effect,options);}speed=speed||options.duration;effect.duration=$.fx.off?0:typeof speed==="number"?speed:speed in $.fx.speeds?$.fx.speeds[speed]:$.fx.speeds._default;effect.complete=callback||options.complete;return effect;}function standardAnimationOption(option){// Valid standard speeds (nothing, number, named speed)
	if(!option||typeof option==="number"||$.fx.speeds[option]){return true;}// Invalid strings - treat as "normal" speed
	if(typeof option==="string"&&!$.effects.effect[option]){return true;}// Complete callback
	if($.isFunction(option)){return true;}// Options hash (but not naming an effect)
	if((typeof option==="undefined"?"undefined":_typeof(option))==="object"&&!option.effect){return true;}// Didn't match any standard API
	return false;}$.fn.extend({effect:function effect()/* effect, options, speed, callback */{var args=_normalizeArguments.apply(this,arguments),effectMethod=$.effects.effect[args.effect],defaultMode=effectMethod.mode,queue=args.queue,queueName=queue||"fx",complete=args.complete,mode=args.mode,modes=[],prefilter=function prefilter(next){var el=$(this),normalizedMode=$.effects.mode(el,mode)||defaultMode;// Sentinel for duck-punching the :animated psuedo-selector
	el.data(dataSpaceAnimated,true);// Save effect mode for later use,
	// we can't just call $.effects.mode again later,
	// as the .show() below destroys the initial state
	modes.push(normalizedMode);// See $.uiBackCompat inside of run() for removal of defaultMode in 1.13
	if(defaultMode&&(normalizedMode==="show"||normalizedMode===defaultMode&&normalizedMode==="hide")){el.show();}if(!defaultMode||normalizedMode!=="none"){$.effects.saveStyle(el);}if($.isFunction(next)){next();}};if($.fx.off||!effectMethod){// Delegate to the original method (e.g., .show()) if possible
	if(mode){return this[mode](args.duration,complete);}else{return this.each(function(){if(complete){complete.call(this);}});}}function run(next){var elem=$(this);function cleanup(){elem.removeData(dataSpaceAnimated);$.effects.cleanUp(elem);if(args.mode==="hide"){elem.hide();}done();}function done(){if($.isFunction(complete)){complete.call(elem[0]);}if($.isFunction(next)){next();}}// Override mode option on a per element basis,
	// as toggle can be either show or hide depending on element state
	args.mode=modes.shift();if($.uiBackCompat!==false&&!defaultMode){if(elem.is(":hidden")?mode==="hide":mode==="show"){// Call the core method to track "olddisplay" properly
	elem[mode]();done();}else{effectMethod.call(elem[0],args,done);}}else{if(args.mode==="none"){// Call the core method to track "olddisplay" properly
	elem[mode]();done();}else{effectMethod.call(elem[0],args,cleanup);}}}// Run prefilter on all elements first to ensure that
	// any showing or hiding happens before placeholder creation,
	// which ensures that any layout changes are correctly captured.
	return queue===false?this.each(prefilter).each(run):this.queue(queueName,prefilter).queue(queueName,run);},show:function(orig){return function(option){if(standardAnimationOption(option)){return orig.apply(this,arguments);}else{var args=_normalizeArguments.apply(this,arguments);args.mode="show";return this.effect.call(this,args);}};}($.fn.show),hide:function(orig){return function(option){if(standardAnimationOption(option)){return orig.apply(this,arguments);}else{var args=_normalizeArguments.apply(this,arguments);args.mode="hide";return this.effect.call(this,args);}};}($.fn.hide),toggle:function(orig){return function(option){if(standardAnimationOption(option)||typeof option==="boolean"){return orig.apply(this,arguments);}else{var args=_normalizeArguments.apply(this,arguments);args.mode="toggle";return this.effect.call(this,args);}};}($.fn.toggle),cssUnit:function cssUnit(key){var style=this.css(key),val=[];$.each(["em","px","%","pt"],function(i,unit){if(style.indexOf(unit)>0){val=[parseFloat(style),unit];}});return val;},cssClip:function cssClip(clipObj){if(clipObj){return this.css("clip","rect("+clipObj.top+"px "+clipObj.right+"px "+clipObj.bottom+"px "+clipObj.left+"px)");}return parseClip(this.css("clip"),this);},transfer:function transfer(options,done){var element=$(this),target=$(options.to),targetFixed=target.css("position")==="fixed",body=$("body"),fixTop=targetFixed?body.scrollTop():0,fixLeft=targetFixed?body.scrollLeft():0,endPosition=target.offset(),animation={top:endPosition.top-fixTop,left:endPosition.left-fixLeft,height:target.innerHeight(),width:target.innerWidth()},startPosition=element.offset(),transfer=$("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(options.className).css({top:startPosition.top-fixTop,left:startPosition.left-fixLeft,height:element.innerHeight(),width:element.innerWidth(),position:targetFixed?"fixed":"absolute"}).animate(animation,options.duration,options.easing,function(){transfer.remove();if($.isFunction(done)){done();}});}});function parseClip(str,element){var outerWidth=element.outerWidth(),outerHeight=element.outerHeight(),clipRegex=/^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,values=clipRegex.exec(str)||["",0,outerWidth,outerHeight,0];return{top:parseFloat(values[1])||0,right:values[2]==="auto"?outerWidth:parseFloat(values[2]),bottom:values[3]==="auto"?outerHeight:parseFloat(values[3]),left:parseFloat(values[4])||0};}$.fx.step.clip=function(fx){if(!fx.clipInit){fx.start=$(fx.elem).cssClip();if(typeof fx.end==="string"){fx.end=parseClip(fx.end,fx.elem);}fx.clipInit=true;}$(fx.elem).cssClip({top:fx.pos*(fx.end.top-fx.start.top)+fx.start.top,right:fx.pos*(fx.end.right-fx.start.right)+fx.start.right,bottom:fx.pos*(fx.end.bottom-fx.start.bottom)+fx.start.bottom,left:fx.pos*(fx.end.left-fx.start.left)+fx.start.left});};})();/******************************************************************************//*********************************** EASING ***********************************//******************************************************************************/(function(){// Based on easing equations from Robert Penner (http://www.robertpenner.com/easing)
	var baseEasings={};$.each(["Quad","Cubic","Quart","Quint","Expo"],function(i,name){baseEasings[name]=function(p){return Math.pow(p,i+2);};});$.extend(baseEasings,{Sine:function Sine(p){return 1-Math.cos(p*Math.PI/2);},Circ:function Circ(p){return 1-Math.sqrt(1-p*p);},Elastic:function Elastic(p){return p===0||p===1?p:-Math.pow(2,8*(p-1))*Math.sin(((p-1)*80-7.5)*Math.PI/15);},Back:function Back(p){return p*p*(3*p-2);},Bounce:function Bounce(p){var pow2,bounce=4;while(p<((pow2=Math.pow(2,--bounce))-1)/11){}return 1/Math.pow(4,3-bounce)-7.5625*Math.pow((pow2*3-2)/22-p,2);}});$.each(baseEasings,function(name,easeIn){$.easing["easeIn"+name]=easeIn;$.easing["easeOut"+name]=function(p){return 1-easeIn(1-p);};$.easing["easeInOut"+name]=function(p){return p<0.5?easeIn(p*2)/2:1-easeIn(p*-2+2)/2;};});})();var effect=$.effects;/*!
	 * jQuery UI Effects Blind 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Blind Effect
	//>>group: Effects
	//>>description: Blinds the element.
	//>>docs: http://api.jqueryui.com/blind-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectBlind=$.effects.define("blind","hide",function(options,done){var map={up:["bottom","top"],vertical:["bottom","top"],down:["top","bottom"],left:["right","left"],horizontal:["right","left"],right:["left","right"]},element=$(this),direction=options.direction||"up",start=element.cssClip(),animate={clip:$.extend({},start)},placeholder=$.effects.createPlaceholder(element);animate.clip[map[direction][0]]=animate.clip[map[direction][1]];if(options.mode==="show"){element.cssClip(animate.clip);if(placeholder){placeholder.css($.effects.clipToBox(animate));}animate.clip=start;}if(placeholder){placeholder.animate($.effects.clipToBox(animate),options.duration,options.easing);}element.animate(animate,{queue:false,duration:options.duration,easing:options.easing,complete:done});});/*!
	 * jQuery UI Effects Bounce 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Bounce Effect
	//>>group: Effects
	//>>description: Bounces an element horizontally or vertically n times.
	//>>docs: http://api.jqueryui.com/bounce-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectBounce=$.effects.define("bounce",function(options,done){var upAnim,downAnim,refValue,element=$(this),// Defaults:
	mode=options.mode,hide=mode==="hide",show=mode==="show",direction=options.direction||"up",distance=options.distance,times=options.times||5,// Number of internal animations
	anims=times*2+(show||hide?1:0),speed=options.duration/anims,easing=options.easing,// Utility:
	ref=direction==="up"||direction==="down"?"top":"left",motion=direction==="up"||direction==="left",i=0,queuelen=element.queue().length;$.effects.createPlaceholder(element);refValue=element.css(ref);// Default distance for the BIGGEST bounce is the outer Distance / 3
	if(!distance){distance=element[ref==="top"?"outerHeight":"outerWidth"]()/3;}if(show){downAnim={opacity:1};downAnim[ref]=refValue;// If we are showing, force opacity 0 and set the initial position
	// then do the "first" animation
	element.css("opacity",0).css(ref,motion?-distance*2:distance*2).animate(downAnim,speed,easing);}// Start at the smallest distance if we are hiding
	if(hide){distance=distance/Math.pow(2,times-1);}downAnim={};downAnim[ref]=refValue;// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
	for(;i<times;i++){upAnim={};upAnim[ref]=(motion?"-=":"+=")+distance;element.animate(upAnim,speed,easing).animate(downAnim,speed,easing);distance=hide?distance*2:distance/2;}// Last Bounce when Hiding
	if(hide){upAnim={opacity:0};upAnim[ref]=(motion?"-=":"+=")+distance;element.animate(upAnim,speed,easing);}element.queue(done);$.effects.unshift(element,queuelen,anims+1);});/*!
	 * jQuery UI Effects Clip 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Clip Effect
	//>>group: Effects
	//>>description: Clips the element on and off like an old TV.
	//>>docs: http://api.jqueryui.com/clip-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectClip=$.effects.define("clip","hide",function(options,done){var start,animate={},element=$(this),direction=options.direction||"vertical",both=direction==="both",horizontal=both||direction==="horizontal",vertical=both||direction==="vertical";start=element.cssClip();animate.clip={top:vertical?(start.bottom-start.top)/2:start.top,right:horizontal?(start.right-start.left)/2:start.right,bottom:vertical?(start.bottom-start.top)/2:start.bottom,left:horizontal?(start.right-start.left)/2:start.left};$.effects.createPlaceholder(element);if(options.mode==="show"){element.cssClip(animate.clip);animate.clip=start;}element.animate(animate,{queue:false,duration:options.duration,easing:options.easing,complete:done});});/*!
	 * jQuery UI Effects Drop 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Drop Effect
	//>>group: Effects
	//>>description: Moves an element in one direction and hides it at the same time.
	//>>docs: http://api.jqueryui.com/drop-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectDrop=$.effects.define("drop","hide",function(options,done){var distance,element=$(this),mode=options.mode,show=mode==="show",direction=options.direction||"left",ref=direction==="up"||direction==="down"?"top":"left",motion=direction==="up"||direction==="left"?"-=":"+=",oppositeMotion=motion==="+="?"-=":"+=",animation={opacity:0};$.effects.createPlaceholder(element);distance=options.distance||element[ref==="top"?"outerHeight":"outerWidth"](true)/2;animation[ref]=motion+distance;if(show){element.css(animation);animation[ref]=oppositeMotion+distance;animation.opacity=1;}// Animate
	element.animate(animation,{queue:false,duration:options.duration,easing:options.easing,complete:done});});/*!
	 * jQuery UI Effects Explode 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Explode Effect
	//>>group: Effects
	// jscs:disable maximumLineLength
	//>>description: Explodes an element in all directions into n pieces. Implodes an element to its original wholeness.
	// jscs:enable maximumLineLength
	//>>docs: http://api.jqueryui.com/explode-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectExplode=$.effects.define("explode","hide",function(options,done){var i,j,left,top,mx,my,rows=options.pieces?Math.round(Math.sqrt(options.pieces)):3,cells=rows,element=$(this),mode=options.mode,show=mode==="show",// Show and then visibility:hidden the element before calculating offset
	offset=element.show().css("visibility","hidden").offset(),// Width and height of a piece
	width=Math.ceil(element.outerWidth()/cells),height=Math.ceil(element.outerHeight()/rows),pieces=[];// Children animate complete:
	function childComplete(){pieces.push(this);if(pieces.length===rows*cells){animComplete();}}// Clone the element for each row and cell.
	for(i=0;i<rows;i++){// ===>
	top=offset.top+i*height;my=i-(rows-1)/2;for(j=0;j<cells;j++){// |||
	left=offset.left+j*width;mx=j-(cells-1)/2;// Create a clone of the now hidden main element that will be absolute positioned
	// within a wrapper div off the -left and -top equal to size of our pieces
	element.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-j*width,top:-i*height})// Select the wrapper - make it overflow: hidden and absolute positioned based on
	// where the original was located +left and +top equal to the size of pieces
	.parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:width,height:height,left:left+(show?mx*width:0),top:top+(show?my*height:0),opacity:show?0:1}).animate({left:left+(show?0:mx*width),top:top+(show?0:my*height),opacity:show?1:0},options.duration||500,options.easing,childComplete);}}function animComplete(){element.css({visibility:"visible"});$(pieces).remove();done();}});/*!
	 * jQuery UI Effects Fade 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Fade Effect
	//>>group: Effects
	//>>description: Fades the element.
	//>>docs: http://api.jqueryui.com/fade-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectFade=$.effects.define("fade","toggle",function(options,done){var show=options.mode==="show";$(this).css("opacity",show?0:1).animate({opacity:show?1:0},{queue:false,duration:options.duration,easing:options.easing,complete:done});});/*!
	 * jQuery UI Effects Fold 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Fold Effect
	//>>group: Effects
	//>>description: Folds an element first horizontally and then vertically.
	//>>docs: http://api.jqueryui.com/fold-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectFold=$.effects.define("fold","hide",function(options,done){// Create element
	var element=$(this),mode=options.mode,show=mode==="show",hide=mode==="hide",size=options.size||15,percent=/([0-9]+)%/.exec(size),horizFirst=!!options.horizFirst,ref=horizFirst?["right","bottom"]:["bottom","right"],duration=options.duration/2,placeholder=$.effects.createPlaceholder(element),start=element.cssClip(),animation1={clip:$.extend({},start)},animation2={clip:$.extend({},start)},distance=[start[ref[0]],start[ref[1]]],queuelen=element.queue().length;if(percent){size=parseInt(percent[1],10)/100*distance[hide?0:1];}animation1.clip[ref[0]]=size;animation2.clip[ref[0]]=size;animation2.clip[ref[1]]=0;if(show){element.cssClip(animation2.clip);if(placeholder){placeholder.css($.effects.clipToBox(animation2));}animation2.clip=start;}// Animate
	element.queue(function(next){if(placeholder){placeholder.animate($.effects.clipToBox(animation1),duration,options.easing).animate($.effects.clipToBox(animation2),duration,options.easing);}next();}).animate(animation1,duration,options.easing).animate(animation2,duration,options.easing).queue(done);$.effects.unshift(element,queuelen,4);});/*!
	 * jQuery UI Effects Highlight 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Highlight Effect
	//>>group: Effects
	//>>description: Highlights the background of an element in a defined color for a custom duration.
	//>>docs: http://api.jqueryui.com/highlight-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectHighlight=$.effects.define("highlight","show",function(options,done){var element=$(this),animation={backgroundColor:element.css("backgroundColor")};if(options.mode==="hide"){animation.opacity=0;}$.effects.saveStyle(element);element.css({backgroundImage:"none",backgroundColor:options.color||"#ffff99"}).animate(animation,{queue:false,duration:options.duration,easing:options.easing,complete:done});});/*!
	 * jQuery UI Effects Size 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Size Effect
	//>>group: Effects
	//>>description: Resize an element to a specified width and height.
	//>>docs: http://api.jqueryui.com/size-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectSize=$.effects.define("size",function(options,done){// Create element
	var baseline,factor,temp,element=$(this),// Copy for children
	cProps=["fontSize"],vProps=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],hProps=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],// Set options
	mode=options.mode,restore=mode!=="effect",scale=options.scale||"both",origin=options.origin||["middle","center"],position=element.css("position"),pos=element.position(),original=$.effects.scaledDimensions(element),from=options.from||original,to=options.to||$.effects.scaledDimensions(element,0);$.effects.createPlaceholder(element);if(mode==="show"){temp=from;from=to;to=temp;}// Set scaling factor
	factor={from:{y:from.height/original.height,x:from.width/original.width},to:{y:to.height/original.height,x:to.width/original.width}};// Scale the css box
	if(scale==="box"||scale==="both"){// Vertical props scaling
	if(factor.from.y!==factor.to.y){from=$.effects.setTransition(element,vProps,factor.from.y,from);to=$.effects.setTransition(element,vProps,factor.to.y,to);}// Horizontal props scaling
	if(factor.from.x!==factor.to.x){from=$.effects.setTransition(element,hProps,factor.from.x,from);to=$.effects.setTransition(element,hProps,factor.to.x,to);}}// Scale the content
	if(scale==="content"||scale==="both"){// Vertical props scaling
	if(factor.from.y!==factor.to.y){from=$.effects.setTransition(element,cProps,factor.from.y,from);to=$.effects.setTransition(element,cProps,factor.to.y,to);}}// Adjust the position properties based on the provided origin points
	if(origin){baseline=$.effects.getBaseline(origin,original);from.top=(original.outerHeight-from.outerHeight)*baseline.y+pos.top;from.left=(original.outerWidth-from.outerWidth)*baseline.x+pos.left;to.top=(original.outerHeight-to.outerHeight)*baseline.y+pos.top;to.left=(original.outerWidth-to.outerWidth)*baseline.x+pos.left;}element.css(from);// Animate the children if desired
	if(scale==="content"||scale==="both"){vProps=vProps.concat(["marginTop","marginBottom"]).concat(cProps);hProps=hProps.concat(["marginLeft","marginRight"]);// Only animate children with width attributes specified
	// TODO: is this right? should we include anything with css width specified as well
	element.find("*[width]").each(function(){var child=$(this),childOriginal=$.effects.scaledDimensions(child),childFrom={height:childOriginal.height*factor.from.y,width:childOriginal.width*factor.from.x,outerHeight:childOriginal.outerHeight*factor.from.y,outerWidth:childOriginal.outerWidth*factor.from.x},childTo={height:childOriginal.height*factor.to.y,width:childOriginal.width*factor.to.x,outerHeight:childOriginal.height*factor.to.y,outerWidth:childOriginal.width*factor.to.x};// Vertical props scaling
	if(factor.from.y!==factor.to.y){childFrom=$.effects.setTransition(child,vProps,factor.from.y,childFrom);childTo=$.effects.setTransition(child,vProps,factor.to.y,childTo);}// Horizontal props scaling
	if(factor.from.x!==factor.to.x){childFrom=$.effects.setTransition(child,hProps,factor.from.x,childFrom);childTo=$.effects.setTransition(child,hProps,factor.to.x,childTo);}if(restore){$.effects.saveStyle(child);}// Animate children
	child.css(childFrom);child.animate(childTo,options.duration,options.easing,function(){// Restore children
	if(restore){$.effects.restoreStyle(child);}});});}// Animate
	element.animate(to,{queue:false,duration:options.duration,easing:options.easing,complete:function complete(){var offset=element.offset();if(to.opacity===0){element.css("opacity",from.opacity);}if(!restore){element.css("position",position==="static"?"relative":position).offset(offset);// Need to save style here so that automatic style restoration
	// doesn't restore to the original styles from before the animation.
	$.effects.saveStyle(element);}done();}});});/*!
	 * jQuery UI Effects Scale 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Scale Effect
	//>>group: Effects
	//>>description: Grows or shrinks an element and its content.
	//>>docs: http://api.jqueryui.com/scale-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectScale=$.effects.define("scale",function(options,done){// Create element
	var el=$(this),mode=options.mode,percent=parseInt(options.percent,10)||(parseInt(options.percent,10)===0?0:mode!=="effect"?0:100),newOptions=$.extend(true,{from:$.effects.scaledDimensions(el),to:$.effects.scaledDimensions(el,percent,options.direction||"both"),origin:options.origin||["middle","center"]},options);// Fade option to support puff
	if(options.fade){newOptions.from.opacity=1;newOptions.to.opacity=0;}$.effects.effect.size.call(this,newOptions,done);});/*!
	 * jQuery UI Effects Puff 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Puff Effect
	//>>group: Effects
	//>>description: Creates a puff effect by scaling the element up and hiding it at the same time.
	//>>docs: http://api.jqueryui.com/puff-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectPuff=$.effects.define("puff","hide",function(options,done){var newOptions=$.extend(true,{},options,{fade:true,percent:parseInt(options.percent,10)||150});$.effects.effect.scale.call(this,newOptions,done);});/*!
	 * jQuery UI Effects Pulsate 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Pulsate Effect
	//>>group: Effects
	//>>description: Pulsates an element n times by changing the opacity to zero and back.
	//>>docs: http://api.jqueryui.com/pulsate-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectPulsate=$.effects.define("pulsate","show",function(options,done){var element=$(this),mode=options.mode,show=mode==="show",hide=mode==="hide",showhide=show||hide,// Showing or hiding leaves off the "last" animation
	anims=(options.times||5)*2+(showhide?1:0),duration=options.duration/anims,animateTo=0,i=1,queuelen=element.queue().length;if(show||!element.is(":visible")){element.css("opacity",0).show();animateTo=1;}// Anims - 1 opacity "toggles"
	for(;i<anims;i++){element.animate({opacity:animateTo},duration,options.easing);animateTo=1-animateTo;}element.animate({opacity:animateTo},duration,options.easing);element.queue(done);$.effects.unshift(element,queuelen,anims+1);});/*!
	 * jQuery UI Effects Shake 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Shake Effect
	//>>group: Effects
	//>>description: Shakes an element horizontally or vertically n times.
	//>>docs: http://api.jqueryui.com/shake-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectShake=$.effects.define("shake",function(options,done){var i=1,element=$(this),direction=options.direction||"left",distance=options.distance||20,times=options.times||3,anims=times*2+1,speed=Math.round(options.duration/anims),ref=direction==="up"||direction==="down"?"top":"left",positiveMotion=direction==="up"||direction==="left",animation={},animation1={},animation2={},queuelen=element.queue().length;$.effects.createPlaceholder(element);// Animation
	animation[ref]=(positiveMotion?"-=":"+=")+distance;animation1[ref]=(positiveMotion?"+=":"-=")+distance*2;animation2[ref]=(positiveMotion?"-=":"+=")+distance*2;// Animate
	element.animate(animation,speed,options.easing);// Shakes
	for(;i<times;i++){element.animate(animation1,speed,options.easing).animate(animation2,speed,options.easing);}element.animate(animation1,speed,options.easing).animate(animation,speed/2,options.easing).queue(done);$.effects.unshift(element,queuelen,anims+1);});/*!
	 * jQuery UI Effects Slide 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Slide Effect
	//>>group: Effects
	//>>description: Slides an element in and out of the viewport.
	//>>docs: http://api.jqueryui.com/slide-effect/
	//>>demos: http://jqueryui.com/effect/
	var effectsEffectSlide=$.effects.define("slide","show",function(options,done){var startClip,startRef,element=$(this),map={up:["bottom","top"],down:["top","bottom"],left:["right","left"],right:["left","right"]},mode=options.mode,direction=options.direction||"left",ref=direction==="up"||direction==="down"?"top":"left",positiveMotion=direction==="up"||direction==="left",distance=options.distance||element[ref==="top"?"outerHeight":"outerWidth"](true),animation={};$.effects.createPlaceholder(element);startClip=element.cssClip();startRef=element.position()[ref];// Define hide animation
	animation[ref]=(positiveMotion?-1:1)*distance+startRef;animation.clip=element.cssClip();animation.clip[map[direction][1]]=animation.clip[map[direction][0]];// Reverse the animation if we're showing
	if(mode==="show"){element.cssClip(animation.clip);element.css(ref,animation[ref]);animation.clip=startClip;animation[ref]=startRef;}// Actually animate
	element.animate(animation,{queue:false,duration:options.duration,easing:options.easing,complete:done});});/*!
	 * jQuery UI Effects Transfer 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Transfer Effect
	//>>group: Effects
	//>>description: Displays a transfer effect from one element to another.
	//>>docs: http://api.jqueryui.com/transfer-effect/
	//>>demos: http://jqueryui.com/effect/
	var effect;if($.uiBackCompat!==false){effect=$.effects.define("transfer",function(options,done){$(this).transfer(options,done);});}var effectsEffectTransfer=effect;/*!
	 * jQuery UI Focusable 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: :focusable Selector
	//>>group: Core
	//>>description: Selects elements which can be focused.
	//>>docs: http://api.jqueryui.com/focusable-selector/
	// Selectors
	$.ui.focusable=function(element,hasTabindex){var map,mapName,img,focusableIfVisible,fieldset,nodeName=element.nodeName.toLowerCase();if("area"===nodeName){map=element.parentNode;mapName=map.name;if(!element.href||!mapName||map.nodeName.toLowerCase()!=="map"){return false;}img=$("img[usemap='#"+mapName+"']");return img.length>0&&img.is(":visible");}if(/^(input|select|textarea|button|object)$/.test(nodeName)){focusableIfVisible=!element.disabled;if(focusableIfVisible){// Form controls within a disabled fieldset are disabled.
	// However, controls within the fieldset's legend do not get disabled.
	// Since controls generally aren't placed inside legends, we skip
	// this portion of the check.
	fieldset=$(element).closest("fieldset")[0];if(fieldset){focusableIfVisible=!fieldset.disabled;}}}else if("a"===nodeName){focusableIfVisible=element.href||hasTabindex;}else{focusableIfVisible=hasTabindex;}return focusableIfVisible&&$(element).is(":visible")&&visible($(element));};// Support: IE 8 only
	// IE 8 doesn't resolve inherit to visible/hidden for computed values
	function visible(element){var visibility=element.css("visibility");while(visibility==="inherit"){element=element.parent();visibility=element.css("visibility");}return visibility!=="hidden";}$.extend($.expr[":"],{focusable:function focusable(element){return $.ui.focusable(element,$.attr(element,"tabindex")!=null);}});var focusable=$.ui.focusable;// Support: IE8 Only
	// IE8 does not support the form attribute and when it is supplied. It overwrites the form prop
	// with a string, so we need to find the proper form.
	var form=$.fn.form=function(){return typeof this[0].form==="string"?this.closest("form"):$(this[0].form);};/*!
	 * jQuery UI Form Reset Mixin 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Form Reset Mixin
	//>>group: Core
	//>>description: Refresh input widgets when their form is reset
	//>>docs: http://api.jqueryui.com/form-reset-mixin/
	var formResetMixin=$.ui.formResetMixin={_formResetHandler:function _formResetHandler(){var form=$(this);// Wait for the form reset to actually happen before refreshing
	setTimeout(function(){var instances=form.data("ui-form-reset-instances");$.each(instances,function(){this.refresh();});});},_bindFormResetHandler:function _bindFormResetHandler(){this.form=this.element.form();if(!this.form.length){return;}var instances=this.form.data("ui-form-reset-instances")||[];if(!instances.length){// We don't use _on() here because we use a single event handler per form
	this.form.on("reset.ui-form-reset",this._formResetHandler);}instances.push(this);this.form.data("ui-form-reset-instances",instances);},_unbindFormResetHandler:function _unbindFormResetHandler(){if(!this.form.length){return;}var instances=this.form.data("ui-form-reset-instances");instances.splice($.inArray(this,instances),1);if(instances.length){this.form.data("ui-form-reset-instances",instances);}else{this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset");}}};/*!
	 * jQuery UI Support for jQuery core 1.7.x 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 *///>>label: jQuery 1.7 Support
	//>>group: Core
	//>>description: Support version 1.7.x of jQuery core
	// Support: jQuery 1.7 only
	// Not a great way to check versions, but since we only support 1.7+ and only
	// need to detect <1.8, this is a simple check that should suffice. Checking
	// for "1.7." would be a bit safer, but the version string is 1.7, not 1.7.0
	// and we'll never reach 1.70.0 (if we do, we certainly won't be supporting
	// 1.7 anymore). See #11197 for why we're not using feature detection.
	if($.fn.jquery.substring(0,3)==="1.7"){// Setters for .innerWidth(), .innerHeight(), .outerWidth(), .outerHeight()
	// Unlike jQuery Core 1.8+, these only support numeric values to set the
	// dimensions in pixels
	$.each(["Width","Height"],function(i,name){var side=name==="Width"?["Left","Right"]:["Top","Bottom"],type=name.toLowerCase(),orig={innerWidth:$.fn.innerWidth,innerHeight:$.fn.innerHeight,outerWidth:$.fn.outerWidth,outerHeight:$.fn.outerHeight};function reduce(elem,size,border,margin){$.each(side,function(){size-=parseFloat($.css(elem,"padding"+this))||0;if(border){size-=parseFloat($.css(elem,"border"+this+"Width"))||0;}if(margin){size-=parseFloat($.css(elem,"margin"+this))||0;}});return size;}$.fn["inner"+name]=function(size){if(size===undefined){return orig["inner"+name].call(this);}return this.each(function(){$(this).css(type,reduce(this,size)+"px");});};$.fn["outer"+name]=function(size,margin){if(typeof size!=="number"){return orig["outer"+name].call(this,size);}return this.each(function(){$(this).css(type,reduce(this,size,true,margin)+"px");});};});$.fn.addBack=function(selector){return this.add(selector==null?this.prevObject:this.prevObject.filter(selector));};};/*!
	 * jQuery UI Keycode 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Keycode
	//>>group: Core
	//>>description: Provide keycodes as keynames
	//>>docs: http://api.jqueryui.com/jQuery.ui.keyCode/
	var keycode=$.ui.keyCode={BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38};// Internal use only
	var escapeSelector=$.ui.escapeSelector=function(){var selectorEscape=/([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g;return function(selector){return selector.replace(selectorEscape,"\\$1");};}();/*!
	 * jQuery UI Labels 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: labels
	//>>group: Core
	//>>description: Find all the labels associated with a given input
	//>>docs: http://api.jqueryui.com/labels/
	var labels=$.fn.labels=function(){var ancestor,selector,id,labels,ancestors;// Check control.labels first
	if(this[0].labels&&this[0].labels.length){return this.pushStack(this[0].labels);}// Support: IE <= 11, FF <= 37, Android <= 2.3 only
	// Above browsers do not support control.labels. Everything below is to support them
	// as well as document fragments. control.labels does not work on document fragments
	labels=this.eq(0).parents("label");// Look for the label based on the id
	id=this.attr("id");if(id){// We don't search against the document in case the element
	// is disconnected from the DOM
	ancestor=this.eq(0).parents().last();// Get a full set of top level ancestors
	ancestors=ancestor.add(ancestor.length?ancestor.siblings():this.siblings());// Create a selector for the label based on the id
	selector="label[for='"+$.ui.escapeSelector(id)+"']";labels=labels.add(ancestors.find(selector).addBack(selector));}// Return whatever we have found for labels
	return this.pushStack(labels);};/*!
	 * jQuery UI Scroll Parent 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: scrollParent
	//>>group: Core
	//>>description: Get the closest ancestor element that is scrollable.
	//>>docs: http://api.jqueryui.com/scrollParent/
	var scrollParent=$.fn.scrollParent=function(includeHidden){var position=this.css("position"),excludeStaticParent=position==="absolute",overflowRegex=includeHidden?/(auto|scroll|hidden)/:/(auto|scroll)/,scrollParent=this.parents().filter(function(){var parent=$(this);if(excludeStaticParent&&parent.css("position")==="static"){return false;}return overflowRegex.test(parent.css("overflow")+parent.css("overflow-y")+parent.css("overflow-x"));}).eq(0);return position==="fixed"||!scrollParent.length?$(this[0].ownerDocument||document):scrollParent;};/*!
	 * jQuery UI Tabbable 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: :tabbable Selector
	//>>group: Core
	//>>description: Selects elements which can be tabbed to.
	//>>docs: http://api.jqueryui.com/tabbable-selector/
	var tabbable=$.extend($.expr[":"],{tabbable:function tabbable(element){var tabIndex=$.attr(element,"tabindex"),hasTabindex=tabIndex!=null;return(!hasTabindex||tabIndex>=0)&&$.ui.focusable(element,hasTabindex);}});/*!
	 * jQuery UI Unique ID 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: uniqueId
	//>>group: Core
	//>>description: Functions to generate and remove uniqueId's
	//>>docs: http://api.jqueryui.com/uniqueId/
	var uniqueId=$.fn.extend({uniqueId:function(){var uuid=0;return function(){return this.each(function(){if(!this.id){this.id="ui-id-"+ ++uuid;}});};}(),removeUniqueId:function removeUniqueId(){return this.each(function(){if(/^ui-id-\d+$/.test(this.id)){$(this).removeAttr("id");}});}});/*!
	 * jQuery UI Accordion 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Accordion
	//>>group: Widgets
	// jscs:disable maximumLineLength
	//>>description: Displays collapsible content panels for presenting information in a limited amount of space.
	// jscs:enable maximumLineLength
	//>>docs: http://api.jqueryui.com/accordion/
	//>>demos: http://jqueryui.com/accordion/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/accordion.css
	//>>css.theme: ../../themes/base/theme.css
	var widgetsAccordion=$.widget("ui.accordion",{version:"1.12.1",options:{active:0,animate:{},classes:{"ui-accordion-header":"ui-corner-top","ui-accordion-header-collapsed":"ui-corner-all","ui-accordion-content":"ui-corner-bottom"},collapsible:false,event:"click",header:"> li > :first-child, > :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},// Callbacks
	activate:null,beforeActivate:null},hideProps:{borderTopWidth:"hide",borderBottomWidth:"hide",paddingTop:"hide",paddingBottom:"hide",height:"hide"},showProps:{borderTopWidth:"show",borderBottomWidth:"show",paddingTop:"show",paddingBottom:"show",height:"show"},_create:function _create(){var options=this.options;this.prevShow=this.prevHide=$();this._addClass("ui-accordion","ui-widget ui-helper-reset");this.element.attr("role","tablist");// Don't allow collapsible: false and active: false / null
	if(!options.collapsible&&(options.active===false||options.active==null)){options.active=0;}this._processPanels();// handle negative values
	if(options.active<0){options.active+=this.headers.length;}this._refresh();},_getCreateEventData:function _getCreateEventData(){return{header:this.active,panel:!this.active.length?$():this.active.next()};},_createIcons:function _createIcons(){var icon,children,icons=this.options.icons;if(icons){icon=$("<span>");this._addClass(icon,"ui-accordion-header-icon","ui-icon "+icons.header);icon.prependTo(this.headers);children=this.active.children(".ui-accordion-header-icon");this._removeClass(children,icons.header)._addClass(children,null,icons.activeHeader)._addClass(this.headers,"ui-accordion-icons");}},_destroyIcons:function _destroyIcons(){this._removeClass(this.headers,"ui-accordion-icons");this.headers.children(".ui-accordion-header-icon").remove();},_destroy:function _destroy(){var contents;// Clean up main element
	this.element.removeAttr("role");// Clean up headers
	this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId();this._destroyIcons();// Clean up content panels
	contents=this.headers.next().css("display","").removeAttr("role aria-hidden aria-labelledby").removeUniqueId();if(this.options.heightStyle!=="content"){contents.css("height","");}},_setOption:function _setOption(key,value){if(key==="active"){// _activate() will handle invalid values and update this.options
	this._activate(value);return;}if(key==="event"){if(this.options.event){this._off(this.headers,this.options.event);}this._setupEvents(value);}this._super(key,value);// Setting collapsible: false while collapsed; open first panel
	if(key==="collapsible"&&!value&&this.options.active===false){this._activate(0);}if(key==="icons"){this._destroyIcons();if(value){this._createIcons();}}},_setOptionDisabled:function _setOptionDisabled(value){this._super(value);this.element.attr("aria-disabled",value);// Support: IE8 Only
	// #5332 / #6059 - opacity doesn't cascade to positioned elements in IE
	// so we need to add the disabled class to the headers and panels
	this._toggleClass(null,"ui-state-disabled",!!value);this._toggleClass(this.headers.add(this.headers.next()),null,"ui-state-disabled",!!value);},_keydown:function _keydown(event){if(event.altKey||event.ctrlKey){return;}var keyCode=$.ui.keyCode,length=this.headers.length,currentIndex=this.headers.index(event.target),toFocus=false;switch(event.keyCode){case keyCode.RIGHT:case keyCode.DOWN:toFocus=this.headers[(currentIndex+1)%length];break;case keyCode.LEFT:case keyCode.UP:toFocus=this.headers[(currentIndex-1+length)%length];break;case keyCode.SPACE:case keyCode.ENTER:this._eventHandler(event);break;case keyCode.HOME:toFocus=this.headers[0];break;case keyCode.END:toFocus=this.headers[length-1];break;}if(toFocus){$(event.target).attr("tabIndex",-1);$(toFocus).attr("tabIndex",0);$(toFocus).trigger("focus");event.preventDefault();}},_panelKeyDown:function _panelKeyDown(event){if(event.keyCode===$.ui.keyCode.UP&&event.ctrlKey){$(event.currentTarget).prev().trigger("focus");}},refresh:function refresh(){var options=this.options;this._processPanels();// Was collapsed or no panel
	if(options.active===false&&options.collapsible===true||!this.headers.length){options.active=false;this.active=$();// active false only when collapsible is true
	}else if(options.active===false){this._activate(0);// was active, but active panel is gone
	}else if(this.active.length&&!$.contains(this.element[0],this.active[0])){// all remaining panel are disabled
	if(this.headers.length===this.headers.find(".ui-state-disabled").length){options.active=false;this.active=$();// activate previous panel
	}else{this._activate(Math.max(0,options.active-1));}// was active, active panel still exists
	}else{// make sure active index is correct
	options.active=this.headers.index(this.active);}this._destroyIcons();this._refresh();},_processPanels:function _processPanels(){var prevHeaders=this.headers,prevPanels=this.panels;this.headers=this.element.find(this.options.header);this._addClass(this.headers,"ui-accordion-header ui-accordion-header-collapsed","ui-state-default");this.panels=this.headers.next().filter(":not(.ui-accordion-content-active)").hide();this._addClass(this.panels,"ui-accordion-content","ui-helper-reset ui-widget-content");// Avoid memory leaks (#10056)
	if(prevPanels){this._off(prevHeaders.not(this.headers));this._off(prevPanels.not(this.panels));}},_refresh:function _refresh(){var maxHeight,options=this.options,heightStyle=options.heightStyle,parent=this.element.parent();this.active=this._findActive(options.active);this._addClass(this.active,"ui-accordion-header-active","ui-state-active")._removeClass(this.active,"ui-accordion-header-collapsed");this._addClass(this.active.next(),"ui-accordion-content-active");this.active.next().show();this.headers.attr("role","tab").each(function(){var header=$(this),headerId=header.uniqueId().attr("id"),panel=header.next(),panelId=panel.uniqueId().attr("id");header.attr("aria-controls",panelId);panel.attr("aria-labelledby",headerId);}).next().attr("role","tabpanel");this.headers.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}).next().attr({"aria-hidden":"true"}).hide();// Make sure at least one header is in the tab order
	if(!this.active.length){this.headers.eq(0).attr("tabIndex",0);}else{this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}).next().attr({"aria-hidden":"false"});}this._createIcons();this._setupEvents(options.event);if(heightStyle==="fill"){maxHeight=parent.height();this.element.siblings(":visible").each(function(){var elem=$(this),position=elem.css("position");if(position==="absolute"||position==="fixed"){return;}maxHeight-=elem.outerHeight(true);});this.headers.each(function(){maxHeight-=$(this).outerHeight(true);});this.headers.next().each(function(){$(this).height(Math.max(0,maxHeight-$(this).innerHeight()+$(this).height()));}).css("overflow","auto");}else if(heightStyle==="auto"){maxHeight=0;this.headers.next().each(function(){var isVisible=$(this).is(":visible");if(!isVisible){$(this).show();}maxHeight=Math.max(maxHeight,$(this).css("height","").height());if(!isVisible){$(this).hide();}}).height(maxHeight);}},_activate:function _activate(index){var active=this._findActive(index)[0];// Trying to activate the already active panel
	if(active===this.active[0]){return;}// Trying to collapse, simulate a click on the currently active header
	active=active||this.active[0];this._eventHandler({target:active,currentTarget:active,preventDefault:$.noop});},_findActive:function _findActive(selector){return typeof selector==="number"?this.headers.eq(selector):$();},_setupEvents:function _setupEvents(event){var events={keydown:"_keydown"};if(event){$.each(event.split(" "),function(index,eventName){events[eventName]="_eventHandler";});}this._off(this.headers.add(this.headers.next()));this._on(this.headers,events);this._on(this.headers.next(),{keydown:"_panelKeyDown"});this._hoverable(this.headers);this._focusable(this.headers);},_eventHandler:function _eventHandler(event){var activeChildren,clickedChildren,options=this.options,active=this.active,clicked=$(event.currentTarget),clickedIsActive=clicked[0]===active[0],collapsing=clickedIsActive&&options.collapsible,toShow=collapsing?$():clicked.next(),toHide=active.next(),eventData={oldHeader:active,oldPanel:toHide,newHeader:collapsing?$():clicked,newPanel:toShow};event.preventDefault();if(// click on active header, but not collapsible
	clickedIsActive&&!options.collapsible||// allow canceling activation
	this._trigger("beforeActivate",event,eventData)===false){return;}options.active=collapsing?false:this.headers.index(clicked);// When the call to ._toggle() comes after the class changes
	// it causes a very odd bug in IE 8 (see #6720)
	this.active=clickedIsActive?$():clicked;this._toggle(eventData);// Switch classes
	// corner classes on the previously active header stay after the animation
	this._removeClass(active,"ui-accordion-header-active","ui-state-active");if(options.icons){activeChildren=active.children(".ui-accordion-header-icon");this._removeClass(activeChildren,null,options.icons.activeHeader)._addClass(activeChildren,null,options.icons.header);}if(!clickedIsActive){this._removeClass(clicked,"ui-accordion-header-collapsed")._addClass(clicked,"ui-accordion-header-active","ui-state-active");if(options.icons){clickedChildren=clicked.children(".ui-accordion-header-icon");this._removeClass(clickedChildren,null,options.icons.header)._addClass(clickedChildren,null,options.icons.activeHeader);}this._addClass(clicked.next(),"ui-accordion-content-active");}},_toggle:function _toggle(data){var toShow=data.newPanel,toHide=this.prevShow.length?this.prevShow:data.oldPanel;// Handle activating a panel during the animation for another activation
	this.prevShow.add(this.prevHide).stop(true,true);this.prevShow=toShow;this.prevHide=toHide;if(this.options.animate){this._animate(toShow,toHide,data);}else{toHide.hide();toShow.show();this._toggleComplete(data);}toHide.attr({"aria-hidden":"true"});toHide.prev().attr({"aria-selected":"false","aria-expanded":"false"});// if we're switching panels, remove the old header from the tab order
	// if we're opening from collapsed state, remove the previous header from the tab order
	// if we're collapsing, then keep the collapsing header in the tab order
	if(toShow.length&&toHide.length){toHide.prev().attr({"tabIndex":-1,"aria-expanded":"false"});}else if(toShow.length){this.headers.filter(function(){return parseInt($(this).attr("tabIndex"),10)===0;}).attr("tabIndex",-1);}toShow.attr("aria-hidden","false").prev().attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0});},_animate:function _animate(toShow,toHide,data){var total,easing,duration,that=this,adjust=0,boxSizing=toShow.css("box-sizing"),down=toShow.length&&(!toHide.length||toShow.index()<toHide.index()),animate=this.options.animate||{},options=down&&animate.down||animate,complete=function complete(){that._toggleComplete(data);};if(typeof options==="number"){duration=options;}if(typeof options==="string"){easing=options;}// fall back from options to animation in case of partial down settings
	easing=easing||options.easing||animate.easing;duration=duration||options.duration||animate.duration;if(!toHide.length){return toShow.animate(this.showProps,duration,easing,complete);}if(!toShow.length){return toHide.animate(this.hideProps,duration,easing,complete);}total=toShow.show().outerHeight();toHide.animate(this.hideProps,{duration:duration,easing:easing,step:function step(now,fx){fx.now=Math.round(now);}});toShow.hide().animate(this.showProps,{duration:duration,easing:easing,complete:complete,step:function step(now,fx){fx.now=Math.round(now);if(fx.prop!=="height"){if(boxSizing==="content-box"){adjust+=fx.now;}}else if(that.options.heightStyle!=="content"){fx.now=Math.round(total-toHide.outerHeight()-adjust);adjust=0;}}});},_toggleComplete:function _toggleComplete(data){var toHide=data.oldPanel,prev=toHide.prev();this._removeClass(toHide,"ui-accordion-content-active");this._removeClass(prev,"ui-accordion-header-active")._addClass(prev,"ui-accordion-header-collapsed");// Work around for rendering bug in IE (#5421)
	if(toHide.length){toHide.parent()[0].className=toHide.parent()[0].className;}this._trigger("activate",null,data);}});var safeActiveElement=$.ui.safeActiveElement=function(document){var activeElement;// Support: IE 9 only
	// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
	try{activeElement=document.activeElement;}catch(error){activeElement=document.body;}// Support: IE 9 - 11 only
	// IE may return null instead of an element
	// Interestingly, this only seems to occur when NOT in an iframe
	if(!activeElement){activeElement=document.body;}// Support: IE 11 only
	// IE11 returns a seemingly empty object in some cases when accessing
	// document.activeElement from an <iframe>
	if(!activeElement.nodeName){activeElement=document.body;}return activeElement;};/*!
	 * jQuery UI Menu 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Menu
	//>>group: Widgets
	//>>description: Creates nestable menus.
	//>>docs: http://api.jqueryui.com/menu/
	//>>demos: http://jqueryui.com/menu/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/menu.css
	//>>css.theme: ../../themes/base/theme.css
	var widgetsMenu=$.widget("ui.menu",{version:"1.12.1",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-caret-1-e"},items:"> *",menus:"ul",position:{my:"left top",at:"right top"},role:"menu",// Callbacks
	blur:null,focus:null,select:null},_create:function _create(){this.activeMenu=this.element;// Flag used to prevent firing of the click handler
	// as the event bubbles up through nested menus
	this.mouseHandled=false;this.element.uniqueId().attr({role:this.options.role,tabIndex:0});this._addClass("ui-menu","ui-widget ui-widget-content");this._on({// Prevent focus from sticking to links inside menu after clicking
	// them (focus should always stay on UL during navigation).
	"mousedown .ui-menu-item":function mousedownUiMenuItem(event){event.preventDefault();},"click .ui-menu-item":function clickUiMenuItem(event){var target=$(event.target);var active=$($.ui.safeActiveElement(this.document[0]));if(!this.mouseHandled&&target.not(".ui-state-disabled").length){this.select(event);// Only set the mouseHandled flag if the event will bubble, see #9469.
	if(!event.isPropagationStopped()){this.mouseHandled=true;}// Open submenu on click
	if(target.has(".ui-menu").length){this.expand(event);}else if(!this.element.is(":focus")&&active.closest(".ui-menu").length){// Redirect focus to the menu
	this.element.trigger("focus",[true]);// If the active item is on the top level, let it stay active.
	// Otherwise, blur the active item since it is no longer visible.
	if(this.active&&this.active.parents(".ui-menu").length===1){clearTimeout(this.timer);}}}},"mouseenter .ui-menu-item":function mouseenterUiMenuItem(event){// Ignore mouse events while typeahead is active, see #10458.
	// Prevents focusing the wrong item when typeahead causes a scroll while the mouse
	// is over an item in the menu
	if(this.previousFilter){return;}var actualTarget=$(event.target).closest(".ui-menu-item"),target=$(event.currentTarget);// Ignore bubbled events on parent items, see #11641
	if(actualTarget[0]!==target[0]){return;}// Remove ui-state-active class from siblings of the newly focused menu item
	// to avoid a jump caused by adjacent elements both having a class with a border
	this._removeClass(target.siblings().children(".ui-state-active"),null,"ui-state-active");this.focus(event,target);},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function focus(event,keepActiveItem){// If there's already an active item, keep it active
	// If not, activate the first item
	var item=this.active||this.element.find(this.options.items).eq(0);if(!keepActiveItem){this.focus(event,item);}},blur:function blur(event){this._delay(function(){var notContained=!$.contains(this.element[0],$.ui.safeActiveElement(this.document[0]));if(notContained){this.collapseAll(event);}});},keydown:"_keydown"});this.refresh();// Clicks outside of a menu collapse any open menus
	this._on(this.document,{click:function click(event){if(this._closeOnDocumentClick(event)){this.collapseAll(event);}// Reset the mouseHandled flag
	this.mouseHandled=false;}});},_destroy:function _destroy(){var items=this.element.find(".ui-menu-item").removeAttr("role aria-disabled"),submenus=items.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");// Destroy (sub)menus
	this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled "+"tabIndex").removeUniqueId().show();submenus.children().each(function(){var elem=$(this);if(elem.data("ui-menu-submenu-caret")){elem.remove();}});},_keydown:function _keydown(event){var match,prev,character,skip,preventDefault=true;switch(event.keyCode){case $.ui.keyCode.PAGE_UP:this.previousPage(event);break;case $.ui.keyCode.PAGE_DOWN:this.nextPage(event);break;case $.ui.keyCode.HOME:this._move("first","first",event);break;case $.ui.keyCode.END:this._move("last","last",event);break;case $.ui.keyCode.UP:this.previous(event);break;case $.ui.keyCode.DOWN:this.next(event);break;case $.ui.keyCode.LEFT:this.collapse(event);break;case $.ui.keyCode.RIGHT:if(this.active&&!this.active.is(".ui-state-disabled")){this.expand(event);}break;case $.ui.keyCode.ENTER:case $.ui.keyCode.SPACE:this._activate(event);break;case $.ui.keyCode.ESCAPE:this.collapse(event);break;default:preventDefault=false;prev=this.previousFilter||"";skip=false;// Support number pad values
	character=event.keyCode>=96&&event.keyCode<=105?(event.keyCode-96).toString():String.fromCharCode(event.keyCode);clearTimeout(this.filterTimer);if(character===prev){skip=true;}else{character=prev+character;}match=this._filterMenuItems(character);match=skip&&match.index(this.active.next())!==-1?this.active.nextAll(".ui-menu-item"):match;// If no matches on the current filter, reset to the last character pressed
	// to move down the menu to the first item that starts with that character
	if(!match.length){character=String.fromCharCode(event.keyCode);match=this._filterMenuItems(character);}if(match.length){this.focus(event,match);this.previousFilter=character;this.filterTimer=this._delay(function(){delete this.previousFilter;},1000);}else{delete this.previousFilter;}}if(preventDefault){event.preventDefault();}},_activate:function _activate(event){if(this.active&&!this.active.is(".ui-state-disabled")){if(this.active.children("[aria-haspopup='true']").length){this.expand(event);}else{this.select(event);}}},refresh:function refresh(){var menus,items,newSubmenus,newItems,newWrappers,that=this,icon=this.options.icons.submenu,submenus=this.element.find(this.options.menus);this._toggleClass("ui-menu-icons",null,!!this.element.find(".ui-icon").length);// Initialize nested menus
	newSubmenus=submenus.filter(":not(.ui-menu)").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each(function(){var menu=$(this),item=menu.prev(),submenuCaret=$("<span>").data("ui-menu-submenu-caret",true);that._addClass(submenuCaret,"ui-menu-icon","ui-icon "+icon);item.attr("aria-haspopup","true").prepend(submenuCaret);menu.attr("aria-labelledby",item.attr("id"));});this._addClass(newSubmenus,"ui-menu","ui-widget ui-widget-content ui-front");menus=submenus.add(this.element);items=menus.find(this.options.items);// Initialize menu-items containing spaces and/or dashes only as dividers
	items.not(".ui-menu-item").each(function(){var item=$(this);if(that._isDivider(item)){that._addClass(item,"ui-menu-divider","ui-widget-content");}});// Don't refresh list items that are already adapted
	newItems=items.not(".ui-menu-item, .ui-menu-divider");newWrappers=newItems.children().not(".ui-menu").uniqueId().attr({tabIndex:-1,role:this._itemRole()});this._addClass(newItems,"ui-menu-item")._addClass(newWrappers,"ui-menu-item-wrapper");// Add aria-disabled attribute to any disabled menu item
	items.filter(".ui-state-disabled").attr("aria-disabled","true");// If the active item has been removed, blur the menu
	if(this.active&&!$.contains(this.element[0],this.active[0])){this.blur();}},_itemRole:function _itemRole(){return{menu:"menuitem",listbox:"option"}[this.options.role];},_setOption:function _setOption(key,value){if(key==="icons"){var icons=this.element.find(".ui-menu-icon");this._removeClass(icons,null,this.options.icons.submenu)._addClass(icons,null,value.submenu);}this._super(key,value);},_setOptionDisabled:function _setOptionDisabled(value){this._super(value);this.element.attr("aria-disabled",String(value));this._toggleClass(null,"ui-state-disabled",!!value);},focus:function focus(event,item){var nested,focused,activeParent;this.blur(event,event&&event.type==="focus");this._scrollIntoView(item);this.active=item.first();focused=this.active.children(".ui-menu-item-wrapper");this._addClass(focused,null,"ui-state-active");// Only update aria-activedescendant if there's a role
	// otherwise we assume focus is managed elsewhere
	if(this.options.role){this.element.attr("aria-activedescendant",focused.attr("id"));}// Highlight active parent menu item, if any
	activeParent=this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper");this._addClass(activeParent,null,"ui-state-active");if(event&&event.type==="keydown"){this._close();}else{this.timer=this._delay(function(){this._close();},this.delay);}nested=item.children(".ui-menu");if(nested.length&&event&&/^mouse/.test(event.type)){this._startOpening(nested);}this.activeMenu=item.parent();this._trigger("focus",event,{item:item});},_scrollIntoView:function _scrollIntoView(item){var borderTop,paddingTop,offset,scroll,elementHeight,itemHeight;if(this._hasScroll()){borderTop=parseFloat($.css(this.activeMenu[0],"borderTopWidth"))||0;paddingTop=parseFloat($.css(this.activeMenu[0],"paddingTop"))||0;offset=item.offset().top-this.activeMenu.offset().top-borderTop-paddingTop;scroll=this.activeMenu.scrollTop();elementHeight=this.activeMenu.height();itemHeight=item.outerHeight();if(offset<0){this.activeMenu.scrollTop(scroll+offset);}else if(offset+itemHeight>elementHeight){this.activeMenu.scrollTop(scroll+offset-elementHeight+itemHeight);}}},blur:function blur(event,fromFocus){if(!fromFocus){clearTimeout(this.timer);}if(!this.active){return;}this._removeClass(this.active.children(".ui-menu-item-wrapper"),null,"ui-state-active");this._trigger("blur",event,{item:this.active});this.active=null;},_startOpening:function _startOpening(submenu){clearTimeout(this.timer);// Don't open if already open fixes a Firefox bug that caused a .5 pixel
	// shift in the submenu position when mousing over the caret icon
	if(submenu.attr("aria-hidden")!=="true"){return;}this.timer=this._delay(function(){this._close();this._open(submenu);},this.delay);},_open:function _open(submenu){var position=$.extend({of:this.active},this.options.position);clearTimeout(this.timer);this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden","true");submenu.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(position);},collapseAll:function collapseAll(event,all){clearTimeout(this.timer);this.timer=this._delay(function(){// If we were passed an event, look for the submenu that contains the event
	var currentMenu=all?this.element:$(event&&event.target).closest(this.element.find(".ui-menu"));// If we found no valid submenu ancestor, use the main menu to close all
	// sub menus anyway
	if(!currentMenu.length){currentMenu=this.element;}this._close(currentMenu);this.blur(event);// Work around active item staying active after menu is blurred
	this._removeClass(currentMenu.find(".ui-state-active"),null,"ui-state-active");this.activeMenu=currentMenu;},this.delay);},// With no arguments, closes the currently active menu - if nothing is active
	// it closes all menus.  If passed an argument, it will search for menus BELOW
	_close:function _close(startMenu){if(!startMenu){startMenu=this.active?this.active.parent():this.element;}startMenu.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false");},_closeOnDocumentClick:function _closeOnDocumentClick(event){return!$(event.target).closest(".ui-menu").length;},_isDivider:function _isDivider(item){// Match hyphen, em dash, en dash
	return!/[^\-\u2014\u2013\s]/.test(item.text());},collapse:function collapse(event){var newItem=this.active&&this.active.parent().closest(".ui-menu-item",this.element);if(newItem&&newItem.length){this._close();this.focus(event,newItem);}},expand:function expand(event){var newItem=this.active&&this.active.children(".ui-menu ").find(this.options.items).first();if(newItem&&newItem.length){this._open(newItem.parent());// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
	this._delay(function(){this.focus(event,newItem);});}},next:function next(event){this._move("next","first",event);},previous:function previous(event){this._move("prev","last",event);},isFirstItem:function isFirstItem(){return this.active&&!this.active.prevAll(".ui-menu-item").length;},isLastItem:function isLastItem(){return this.active&&!this.active.nextAll(".ui-menu-item").length;},_move:function _move(direction,filter,event){var next;if(this.active){if(direction==="first"||direction==="last"){next=this.active[direction==="first"?"prevAll":"nextAll"](".ui-menu-item").eq(-1);}else{next=this.active[direction+"All"](".ui-menu-item").eq(0);}}if(!next||!next.length||!this.active){next=this.activeMenu.find(this.options.items)[filter]();}this.focus(event,next);},nextPage:function nextPage(event){var item,base,height;if(!this.active){this.next(event);return;}if(this.isLastItem()){return;}if(this._hasScroll()){base=this.active.offset().top;height=this.element.height();this.active.nextAll(".ui-menu-item").each(function(){item=$(this);return item.offset().top-base-height<0;});this.focus(event,item);}else{this.focus(event,this.activeMenu.find(this.options.items)[!this.active?"first":"last"]());}},previousPage:function previousPage(event){var item,base,height;if(!this.active){this.next(event);return;}if(this.isFirstItem()){return;}if(this._hasScroll()){base=this.active.offset().top;height=this.element.height();this.active.prevAll(".ui-menu-item").each(function(){item=$(this);return item.offset().top-base+height>0;});this.focus(event,item);}else{this.focus(event,this.activeMenu.find(this.options.items).first());}},_hasScroll:function _hasScroll(){return this.element.outerHeight()<this.element.prop("scrollHeight");},select:function select(event){// TODO: It should never be possible to not have an active item at this
	// point, but the tests don't trigger mouseenter before click.
	this.active=this.active||$(event.target).closest(".ui-menu-item");var ui={item:this.active};if(!this.active.has(".ui-menu").length){this.collapseAll(event,true);}this._trigger("select",event,ui);},_filterMenuItems:function _filterMenuItems(character){var escapedCharacter=character.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"),regex=new RegExp("^"+escapedCharacter,"i");return this.activeMenu.find(this.options.items)// Only match on items, not dividers or other content (#10571)
	.filter(".ui-menu-item").filter(function(){return regex.test($.trim($(this).children(".ui-menu-item-wrapper").text()));});}});/*!
	 * jQuery UI Autocomplete 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Autocomplete
	//>>group: Widgets
	//>>description: Lists suggested words as the user is typing.
	//>>docs: http://api.jqueryui.com/autocomplete/
	//>>demos: http://jqueryui.com/autocomplete/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/autocomplete.css
	//>>css.theme: ../../themes/base/theme.css
	$.widget("ui.autocomplete",{version:"1.12.1",defaultElement:"<input>",options:{appendTo:null,autoFocus:false,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,// Callbacks
	change:null,close:null,focus:null,open:null,response:null,search:null,select:null},requestIndex:0,pending:0,_create:function _create(){// Some browsers only repeat keydown events, not keypress events,
	// so we use the suppressKeyPress flag to determine if we've already
	// handled the keydown event. #7269
	// Unfortunately the code for & in keypress is the same as the up arrow,
	// so we use the suppressKeyPressRepeat flag to avoid handling keypress
	// events when we know the keydown event was used to modify the
	// search term. #7799
	var suppressKeyPress,suppressKeyPressRepeat,suppressInput,nodeName=this.element[0].nodeName.toLowerCase(),isTextarea=nodeName==="textarea",isInput=nodeName==="input";// Textareas are always multi-line
	// Inputs are always single-line, even if inside a contentEditable element
	// IE also treats inputs as contentEditable
	// All other element types are determined by whether or not they're contentEditable
	this.isMultiLine=isTextarea||!isInput&&this._isContentEditable(this.element);this.valueMethod=this.element[isTextarea||isInput?"val":"text"];this.isNewMenu=true;this._addClass("ui-autocomplete-input");this.element.attr("autocomplete","off");this._on(this.element,{keydown:function keydown(event){if(this.element.prop("readOnly")){suppressKeyPress=true;suppressInput=true;suppressKeyPressRepeat=true;return;}suppressKeyPress=false;suppressInput=false;suppressKeyPressRepeat=false;var keyCode=$.ui.keyCode;switch(event.keyCode){case keyCode.PAGE_UP:suppressKeyPress=true;this._move("previousPage",event);break;case keyCode.PAGE_DOWN:suppressKeyPress=true;this._move("nextPage",event);break;case keyCode.UP:suppressKeyPress=true;this._keyEvent("previous",event);break;case keyCode.DOWN:suppressKeyPress=true;this._keyEvent("next",event);break;case keyCode.ENTER:// when menu is open and has focus
	if(this.menu.active){// #6055 - Opera still allows the keypress to occur
	// which causes forms to submit
	suppressKeyPress=true;event.preventDefault();this.menu.select(event);}break;case keyCode.TAB:if(this.menu.active){this.menu.select(event);}break;case keyCode.ESCAPE:if(this.menu.element.is(":visible")){if(!this.isMultiLine){this._value(this.term);}this.close(event);// Different browsers have different default behavior for escape
	// Single press can mean undo or clear
	// Double press in IE means clear the whole form
	event.preventDefault();}break;default:suppressKeyPressRepeat=true;// search timeout should be triggered before the input value is changed
	this._searchTimeout(event);break;}},keypress:function keypress(event){if(suppressKeyPress){suppressKeyPress=false;if(!this.isMultiLine||this.menu.element.is(":visible")){event.preventDefault();}return;}if(suppressKeyPressRepeat){return;}// Replicate some key handlers to allow them to repeat in Firefox and Opera
	var keyCode=$.ui.keyCode;switch(event.keyCode){case keyCode.PAGE_UP:this._move("previousPage",event);break;case keyCode.PAGE_DOWN:this._move("nextPage",event);break;case keyCode.UP:this._keyEvent("previous",event);break;case keyCode.DOWN:this._keyEvent("next",event);break;}},input:function input(event){if(suppressInput){suppressInput=false;event.preventDefault();return;}this._searchTimeout(event);},focus:function focus(){this.selectedItem=null;this.previous=this._value();},blur:function blur(event){if(this.cancelBlur){delete this.cancelBlur;return;}clearTimeout(this.searching);this.close(event);this._change(event);}});this._initSource();this.menu=$("<ul>").appendTo(this._appendTo()).menu({// disable ARIA support, the live region takes care of that
	role:null}).hide().menu("instance");this._addClass(this.menu.element,"ui-autocomplete","ui-front");this._on(this.menu.element,{mousedown:function mousedown(event){// prevent moving focus out of the text field
	event.preventDefault();// IE doesn't prevent moving focus even with event.preventDefault()
	// so we set a flag to know when we should ignore the blur event
	this.cancelBlur=true;this._delay(function(){delete this.cancelBlur;// Support: IE 8 only
	// Right clicking a menu item or selecting text from the menu items will
	// result in focus moving out of the input. However, we've already received
	// and ignored the blur event because of the cancelBlur flag set above. So
	// we restore focus to ensure that the menu closes properly based on the user's
	// next actions.
	if(this.element[0]!==$.ui.safeActiveElement(this.document[0])){this.element.trigger("focus");}});},menufocus:function menufocus(event,ui){var label,item;// support: Firefox
	// Prevent accidental activation of menu items in Firefox (#7024 #9118)
	if(this.isNewMenu){this.isNewMenu=false;if(event.originalEvent&&/^mouse/.test(event.originalEvent.type)){this.menu.blur();this.document.one("mousemove",function(){$(event.target).trigger(event.originalEvent);});return;}}item=ui.item.data("ui-autocomplete-item");if(false!==this._trigger("focus",event,{item:item})){// use value to match what will end up in the input, if it was a key event
	if(event.originalEvent&&/^key/.test(event.originalEvent.type)){this._value(item.value);}}// Announce the value in the liveRegion
	label=ui.item.attr("aria-label")||item.value;if(label&&$.trim(label).length){this.liveRegion.children().hide();$("<div>").text(label).appendTo(this.liveRegion);}},menuselect:function menuselect(event,ui){var item=ui.item.data("ui-autocomplete-item"),previous=this.previous;// Only trigger when focus was lost (click on menu)
	if(this.element[0]!==$.ui.safeActiveElement(this.document[0])){this.element.trigger("focus");this.previous=previous;// #6109 - IE triggers two focus events and the second
	// is asynchronous, so we need to reset the previous
	// term synchronously and asynchronously :-(
	this._delay(function(){this.previous=previous;this.selectedItem=item;});}if(false!==this._trigger("select",event,{item:item})){this._value(item.value);}// reset the term after the select event
	// this allows custom select handling to work properly
	this.term=this._value();this.close(event);this.selectedItem=item;}});this.liveRegion=$("<div>",{role:"status","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body);this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible");// Turning off autocomplete prevents the browser from remembering the
	// value when navigating through history, so we re-enable autocomplete
	// if the page is unloaded before the widget is destroyed. #7790
	this._on(this.window,{beforeunload:function beforeunload(){this.element.removeAttr("autocomplete");}});},_destroy:function _destroy(){clearTimeout(this.searching);this.element.removeAttr("autocomplete");this.menu.element.remove();this.liveRegion.remove();},_setOption:function _setOption(key,value){this._super(key,value);if(key==="source"){this._initSource();}if(key==="appendTo"){this.menu.element.appendTo(this._appendTo());}if(key==="disabled"&&value&&this.xhr){this.xhr.abort();}},_isEventTargetInWidget:function _isEventTargetInWidget(event){var menuElement=this.menu.element[0];return event.target===this.element[0]||event.target===menuElement||$.contains(menuElement,event.target);},_closeOnClickOutside:function _closeOnClickOutside(event){if(!this._isEventTargetInWidget(event)){this.close();}},_appendTo:function _appendTo(){var element=this.options.appendTo;if(element){element=element.jquery||element.nodeType?$(element):this.document.find(element).eq(0);}if(!element||!element[0]){element=this.element.closest(".ui-front, dialog");}if(!element.length){element=this.document[0].body;}return element;},_initSource:function _initSource(){var array,url,that=this;if($.isArray(this.options.source)){array=this.options.source;this.source=function(request,response){response($.ui.autocomplete.filter(array,request.term));};}else if(typeof this.options.source==="string"){url=this.options.source;this.source=function(request,response){if(that.xhr){that.xhr.abort();}that.xhr=$.ajax({url:url,data:request,dataType:"json",success:function success(data){response(data);},error:function error(){response([]);}});};}else{this.source=this.options.source;}},_searchTimeout:function _searchTimeout(event){clearTimeout(this.searching);this.searching=this._delay(function(){// Search if the value has changed, or if the user retypes the same value (see #7434)
	var equalValues=this.term===this._value(),menuVisible=this.menu.element.is(":visible"),modifierKey=event.altKey||event.ctrlKey||event.metaKey||event.shiftKey;if(!equalValues||equalValues&&!menuVisible&&!modifierKey){this.selectedItem=null;this.search(null,event);}},this.options.delay);},search:function search(value,event){value=value!=null?value:this._value();// Always save the actual value, not the one passed as an argument
	this.term=this._value();if(value.length<this.options.minLength){return this.close(event);}if(this._trigger("search",event)===false){return;}return this._search(value);},_search:function _search(value){this.pending++;this._addClass("ui-autocomplete-loading");this.cancelSearch=false;this.source({term:value},this._response());},_response:function _response(){var index=++this.requestIndex;return $.proxy(function(content){if(index===this.requestIndex){this.__response(content);}this.pending--;if(!this.pending){this._removeClass("ui-autocomplete-loading");}},this);},__response:function __response(content){if(content){content=this._normalize(content);}this._trigger("response",null,{content:content});if(!this.options.disabled&&content&&content.length&&!this.cancelSearch){this._suggest(content);this._trigger("open");}else{// use ._close() instead of .close() so we don't cancel future searches
	this._close();}},close:function close(event){this.cancelSearch=true;this._close(event);},_close:function _close(event){// Remove the handler that closes the menu on outside clicks
	this._off(this.document,"mousedown");if(this.menu.element.is(":visible")){this.menu.element.hide();this.menu.blur();this.isNewMenu=true;this._trigger("close",event);}},_change:function _change(event){if(this.previous!==this._value()){this._trigger("change",event,{item:this.selectedItem});}},_normalize:function _normalize(items){// assume all items have the right format when the first item is complete
	if(items.length&&items[0].label&&items[0].value){return items;}return $.map(items,function(item){if(typeof item==="string"){return{label:item,value:item};}return $.extend({},item,{label:item.label||item.value,value:item.value||item.label});});},_suggest:function _suggest(items){var ul=this.menu.element.empty();this._renderMenu(ul,items);this.isNewMenu=true;this.menu.refresh();// Size and position menu
	ul.show();this._resizeMenu();ul.position($.extend({of:this.element},this.options.position));if(this.options.autoFocus){this.menu.next();}// Listen for interactions outside of the widget (#6642)
	this._on(this.document,{mousedown:"_closeOnClickOutside"});},_resizeMenu:function _resizeMenu(){var ul=this.menu.element;ul.outerWidth(Math.max(// Firefox wraps long text (possibly a rounding bug)
	// so we add 1px to avoid the wrapping (#7513)
	ul.width("").outerWidth()+1,this.element.outerWidth()));},_renderMenu:function _renderMenu(ul,items){var that=this;$.each(items,function(index,item){that._renderItemData(ul,item);});},_renderItemData:function _renderItemData(ul,item){return this._renderItem(ul,item).data("ui-autocomplete-item",item);},_renderItem:function _renderItem(ul,item){return $("<li>").append($("<div>").text(item.label)).appendTo(ul);},_move:function _move(direction,event){if(!this.menu.element.is(":visible")){this.search(null,event);return;}if(this.menu.isFirstItem()&&/^previous/.test(direction)||this.menu.isLastItem()&&/^next/.test(direction)){if(!this.isMultiLine){this._value(this.term);}this.menu.blur();return;}this.menu[direction](event);},widget:function widget(){return this.menu.element;},_value:function _value(){return this.valueMethod.apply(this.element,arguments);},_keyEvent:function _keyEvent(keyEvent,event){if(!this.isMultiLine||this.menu.element.is(":visible")){this._move(keyEvent,event);// Prevents moving cursor to beginning/end of the text field in some browsers
	event.preventDefault();}},// Support: Chrome <=50
	// We should be able to just use this.element.prop( "isContentEditable" )
	// but hidden elements always report false in Chrome.
	// https://code.google.com/p/chromium/issues/detail?id=313082
	_isContentEditable:function _isContentEditable(element){if(!element.length){return false;}var editable=element.prop("contentEditable");if(editable==="inherit"){return this._isContentEditable(element.parent());}return editable==="true";}});$.extend($.ui.autocomplete,{escapeRegex:function escapeRegex(value){return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");},filter:function filter(array,term){var matcher=new RegExp($.ui.autocomplete.escapeRegex(term),"i");return $.grep(array,function(value){return matcher.test(value.label||value.value||value);});}});// Live region extension, adding a `messages` option
	// NOTE: This is an experimental API. We are still investigating
	// a full solution for string manipulation and internationalization.
	$.widget("ui.autocomplete",$.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function results(amount){return amount+(amount>1?" results are":" result is")+" available, use up and down arrow keys to navigate.";}}},__response:function __response(content){var message;this._superApply(arguments);if(this.options.disabled||this.cancelSearch){return;}if(content&&content.length){message=this.options.messages.results(content.length);}else{message=this.options.messages.noResults;}this.liveRegion.children().hide();$("<div>").text(message).appendTo(this.liveRegion);}});var widgetsAutocomplete=$.ui.autocomplete;/*!
	 * jQuery UI Controlgroup 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Controlgroup
	//>>group: Widgets
	//>>description: Visually groups form control widgets
	//>>docs: http://api.jqueryui.com/controlgroup/
	//>>demos: http://jqueryui.com/controlgroup/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/controlgroup.css
	//>>css.theme: ../../themes/base/theme.css
	var controlgroupCornerRegex=/ui-corner-([a-z]){2,6}/g;var widgetsControlgroup=$.widget("ui.controlgroup",{version:"1.12.1",defaultElement:"<div>",options:{direction:"horizontal",disabled:null,onlyVisible:true,items:{"button":"input[type=button], input[type=submit], input[type=reset], button, a","controlgroupLabel":".ui-controlgroup-label","checkboxradio":"input[type='checkbox'], input[type='radio']","selectmenu":"select","spinner":".ui-spinner-input"}},_create:function _create(){this._enhance();},// To support the enhanced option in jQuery Mobile, we isolate DOM manipulation
	_enhance:function _enhance(){this.element.attr("role","toolbar");this.refresh();},_destroy:function _destroy(){this._callChildMethod("destroy");this.childWidgets.removeData("ui-controlgroup-data");this.element.removeAttr("role");if(this.options.items.controlgroupLabel){this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap();}},_initWidgets:function _initWidgets(){var that=this,childWidgets=[];// First we iterate over each of the items options
	$.each(this.options.items,function(widget,selector){var labels;var options={};// Make sure the widget has a selector set
	if(!selector){return;}if(widget==="controlgroupLabel"){labels=that.element.find(selector);labels.each(function(){var element=$(this);if(element.children(".ui-controlgroup-label-contents").length){return;}element.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>");});that._addClass(labels,null,"ui-widget ui-widget-content ui-state-default");childWidgets=childWidgets.concat(labels.get());return;}// Make sure the widget actually exists
	if(!$.fn[widget]){return;}// We assume everything is in the middle to start because we can't determine
	// first / last elements until all enhancments are done.
	if(that["_"+widget+"Options"]){options=that["_"+widget+"Options"]("middle");}else{options={classes:{}};}// Find instances of this widget inside controlgroup and init them
	that.element.find(selector).each(function(){var element=$(this);var instance=element[widget]("instance");// We need to clone the default options for this type of widget to avoid
	// polluting the variable options which has a wider scope than a single widget.
	var instanceOptions=$.widget.extend({},options);// If the button is the child of a spinner ignore it
	// TODO: Find a more generic solution
	if(widget==="button"&&element.parent(".ui-spinner").length){return;}// Create the widget if it doesn't exist
	if(!instance){instance=element[widget]()[widget]("instance");}if(instance){instanceOptions.classes=that._resolveClassesValues(instanceOptions.classes,instance);}element[widget](instanceOptions);// Store an instance of the controlgroup to be able to reference
	// from the outermost element for changing options and refresh
	var widgetElement=element[widget]("widget");$.data(widgetElement[0],"ui-controlgroup-data",instance?instance:element[widget]("instance"));childWidgets.push(widgetElement[0]);});});this.childWidgets=$($.unique(childWidgets));this._addClass(this.childWidgets,"ui-controlgroup-item");},_callChildMethod:function _callChildMethod(method){this.childWidgets.each(function(){var element=$(this),data=element.data("ui-controlgroup-data");if(data&&data[method]){data[method]();}});},_updateCornerClass:function _updateCornerClass(element,position){var remove="ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all";var add=this._buildSimpleOptions(position,"label").classes.label;this._removeClass(element,null,remove);this._addClass(element,null,add);},_buildSimpleOptions:function _buildSimpleOptions(position,key){var direction=this.options.direction==="vertical";var result={classes:{}};result.classes[key]={"middle":"","first":"ui-corner-"+(direction?"top":"left"),"last":"ui-corner-"+(direction?"bottom":"right"),"only":"ui-corner-all"}[position];return result;},_spinnerOptions:function _spinnerOptions(position){var options=this._buildSimpleOptions(position,"ui-spinner");options.classes["ui-spinner-up"]="";options.classes["ui-spinner-down"]="";return options;},_buttonOptions:function _buttonOptions(position){return this._buildSimpleOptions(position,"ui-button");},_checkboxradioOptions:function _checkboxradioOptions(position){return this._buildSimpleOptions(position,"ui-checkboxradio-label");},_selectmenuOptions:function _selectmenuOptions(position){var direction=this.options.direction==="vertical";return{width:direction?"auto":false,classes:{middle:{"ui-selectmenu-button-open":"","ui-selectmenu-button-closed":""},first:{"ui-selectmenu-button-open":"ui-corner-"+(direction?"top":"tl"),"ui-selectmenu-button-closed":"ui-corner-"+(direction?"top":"left")},last:{"ui-selectmenu-button-open":direction?"":"ui-corner-tr","ui-selectmenu-button-closed":"ui-corner-"+(direction?"bottom":"right")},only:{"ui-selectmenu-button-open":"ui-corner-top","ui-selectmenu-button-closed":"ui-corner-all"}}[position]};},_resolveClassesValues:function _resolveClassesValues(classes,instance){var result={};$.each(classes,function(key){var current=instance.options.classes[key]||"";current=$.trim(current.replace(controlgroupCornerRegex,""));result[key]=(current+" "+classes[key]).replace(/\s+/g," ");});return result;},_setOption:function _setOption(key,value){if(key==="direction"){this._removeClass("ui-controlgroup-"+this.options.direction);}this._super(key,value);if(key==="disabled"){this._callChildMethod(value?"disable":"enable");return;}this.refresh();},refresh:function refresh(){var children,that=this;this._addClass("ui-controlgroup ui-controlgroup-"+this.options.direction);if(this.options.direction==="horizontal"){this._addClass(null,"ui-helper-clearfix");}this._initWidgets();children=this.childWidgets;// We filter here because we need to track all childWidgets not just the visible ones
	if(this.options.onlyVisible){children=children.filter(":visible");}if(children.length){// We do this last because we need to make sure all enhancment is done
	// before determining first and last
	$.each(["first","last"],function(index,value){var instance=children[value]().data("ui-controlgroup-data");if(instance&&that["_"+instance.widgetName+"Options"]){var options=that["_"+instance.widgetName+"Options"](children.length===1?"only":value);options.classes=that._resolveClassesValues(options.classes,instance);instance.element[instance.widgetName](options);}else{that._updateCornerClass(children[value](),value);}});// Finally call the refresh method on each of the child widgets.
	this._callChildMethod("refresh");}}});/*!
	 * jQuery UI Checkboxradio 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Checkboxradio
	//>>group: Widgets
	//>>description: Enhances a form with multiple themeable checkboxes or radio buttons.
	//>>docs: http://api.jqueryui.com/checkboxradio/
	//>>demos: http://jqueryui.com/checkboxradio/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/button.css
	//>>css.structure: ../../themes/base/checkboxradio.css
	//>>css.theme: ../../themes/base/theme.css
	$.widget("ui.checkboxradio",[$.ui.formResetMixin,{version:"1.12.1",options:{disabled:null,label:null,icon:true,classes:{"ui-checkboxradio-label":"ui-corner-all","ui-checkboxradio-icon":"ui-corner-all"}},_getCreateOptions:function _getCreateOptions(){var disabled,labels;var that=this;var options=this._super()||{};// We read the type here, because it makes more sense to throw a element type error first,
	// rather then the error for lack of a label. Often if its the wrong type, it
	// won't have a label (e.g. calling on a div, btn, etc)
	this._readType();labels=this.element.labels();// If there are multiple labels, use the last one
	this.label=$(labels[labels.length-1]);if(!this.label.length){$.error("No label found for checkboxradio widget");}this.originalLabel="";// We need to get the label text but this may also need to make sure it does not contain the
	// input itself.
	this.label.contents().not(this.element[0]).each(function(){// The label contents could be text, html, or a mix. We concat each element to get a
	// string representation of the label, without the input as part of it.
	that.originalLabel+=this.nodeType===3?$(this).text():this.outerHTML;});// Set the label option if we found label text
	if(this.originalLabel){options.label=this.originalLabel;}disabled=this.element[0].disabled;if(disabled!=null){options.disabled=disabled;}return options;},_create:function _create(){var checked=this.element[0].checked;this._bindFormResetHandler();if(this.options.disabled==null){this.options.disabled=this.element[0].disabled;}this._setOption("disabled",this.options.disabled);this._addClass("ui-checkboxradio","ui-helper-hidden-accessible");this._addClass(this.label,"ui-checkboxradio-label","ui-button ui-widget");if(this.type==="radio"){this._addClass(this.label,"ui-checkboxradio-radio-label");}if(this.options.label&&this.options.label!==this.originalLabel){this._updateLabel();}else if(this.originalLabel){this.options.label=this.originalLabel;}this._enhance();if(checked){this._addClass(this.label,"ui-checkboxradio-checked","ui-state-active");if(this.icon){this._addClass(this.icon,null,"ui-state-hover");}}this._on({change:"_toggleClasses",focus:function focus(){this._addClass(this.label,null,"ui-state-focus ui-visual-focus");},blur:function blur(){this._removeClass(this.label,null,"ui-state-focus ui-visual-focus");}});},_readType:function _readType(){var nodeName=this.element[0].nodeName.toLowerCase();this.type=this.element[0].type;if(nodeName!=="input"||!/radio|checkbox/.test(this.type)){$.error("Can't create checkboxradio on element.nodeName="+nodeName+" and element.type="+this.type);}},// Support jQuery Mobile enhanced option
	_enhance:function _enhance(){this._updateIcon(this.element[0].checked);},widget:function widget(){return this.label;},_getRadioGroup:function _getRadioGroup(){var group;var name=this.element[0].name;var nameSelector="input[name='"+$.ui.escapeSelector(name)+"']";if(!name){return $([]);}if(this.form.length){group=$(this.form[0].elements).filter(nameSelector);}else{// Not inside a form, check all inputs that also are not inside a form
	group=$(nameSelector).filter(function(){return $(this).form().length===0;});}return group.not(this.element);},_toggleClasses:function _toggleClasses(){var checked=this.element[0].checked;this._toggleClass(this.label,"ui-checkboxradio-checked","ui-state-active",checked);if(this.options.icon&&this.type==="checkbox"){this._toggleClass(this.icon,null,"ui-icon-check ui-state-checked",checked)._toggleClass(this.icon,null,"ui-icon-blank",!checked);}if(this.type==="radio"){this._getRadioGroup().each(function(){var instance=$(this).checkboxradio("instance");if(instance){instance._removeClass(instance.label,"ui-checkboxradio-checked","ui-state-active");}});}},_destroy:function _destroy(){this._unbindFormResetHandler();if(this.icon){this.icon.remove();this.iconSpace.remove();}},_setOption:function _setOption(key,value){// We don't allow the value to be set to nothing
	if(key==="label"&&!value){return;}this._super(key,value);if(key==="disabled"){this._toggleClass(this.label,null,"ui-state-disabled",value);this.element[0].disabled=value;// Don't refresh when setting disabled
	return;}this.refresh();},_updateIcon:function _updateIcon(checked){var toAdd="ui-icon ui-icon-background ";if(this.options.icon){if(!this.icon){this.icon=$("<span>");this.iconSpace=$("<span> </span>");this._addClass(this.iconSpace,"ui-checkboxradio-icon-space");}if(this.type==="checkbox"){toAdd+=checked?"ui-icon-check ui-state-checked":"ui-icon-blank";this._removeClass(this.icon,null,checked?"ui-icon-blank":"ui-icon-check");}else{toAdd+="ui-icon-blank";}this._addClass(this.icon,"ui-checkboxradio-icon",toAdd);if(!checked){this._removeClass(this.icon,null,"ui-icon-check ui-state-checked");}this.icon.prependTo(this.label).after(this.iconSpace);}else if(this.icon!==undefined){this.icon.remove();this.iconSpace.remove();delete this.icon;}},_updateLabel:function _updateLabel(){// Remove the contents of the label ( minus the icon, icon space, and input )
	var contents=this.label.contents().not(this.element[0]);if(this.icon){contents=contents.not(this.icon[0]);}if(this.iconSpace){contents=contents.not(this.iconSpace[0]);}contents.remove();this.label.append(this.options.label);},refresh:function refresh(){var checked=this.element[0].checked,isDisabled=this.element[0].disabled;this._updateIcon(checked);this._toggleClass(this.label,"ui-checkboxradio-checked","ui-state-active",checked);if(this.options.label!==null){this._updateLabel();}if(isDisabled!==this.options.disabled){this._setOptions({"disabled":isDisabled});}}}]);var widgetsCheckboxradio=$.ui.checkboxradio;/*!
	 * jQuery UI Button 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Button
	//>>group: Widgets
	//>>description: Enhances a form with themeable buttons.
	//>>docs: http://api.jqueryui.com/button/
	//>>demos: http://jqueryui.com/button/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/button.css
	//>>css.theme: ../../themes/base/theme.css
	$.widget("ui.button",{version:"1.12.1",defaultElement:"<button>",options:{classes:{"ui-button":"ui-corner-all"},disabled:null,icon:null,iconPosition:"beginning",label:null,showLabel:true},_getCreateOptions:function _getCreateOptions(){var disabled,// This is to support cases like in jQuery Mobile where the base widget does have
	// an implementation of _getCreateOptions
	options=this._super()||{};this.isInput=this.element.is("input");disabled=this.element[0].disabled;if(disabled!=null){options.disabled=disabled;}this.originalLabel=this.isInput?this.element.val():this.element.html();if(this.originalLabel){options.label=this.originalLabel;}return options;},_create:function _create(){if(!this.option.showLabel&!this.options.icon){this.options.showLabel=true;}// We have to check the option again here even though we did in _getCreateOptions,
	// because null may have been passed on init which would override what was set in
	// _getCreateOptions
	if(this.options.disabled==null){this.options.disabled=this.element[0].disabled||false;}this.hasTitle=!!this.element.attr("title");// Check to see if the label needs to be set or if its already correct
	if(this.options.label&&this.options.label!==this.originalLabel){if(this.isInput){this.element.val(this.options.label);}else{this.element.html(this.options.label);}}this._addClass("ui-button","ui-widget");this._setOption("disabled",this.options.disabled);this._enhance();if(this.element.is("a")){this._on({"keyup":function keyup(event){if(event.keyCode===$.ui.keyCode.SPACE){event.preventDefault();// Support: PhantomJS <= 1.9, IE 8 Only
	// If a native click is available use it so we actually cause navigation
	// otherwise just trigger a click event
	if(this.element[0].click){this.element[0].click();}else{this.element.trigger("click");}}}});}},_enhance:function _enhance(){if(!this.element.is("button")){this.element.attr("role","button");}if(this.options.icon){this._updateIcon("icon",this.options.icon);this._updateTooltip();}},_updateTooltip:function _updateTooltip(){this.title=this.element.attr("title");if(!this.options.showLabel&&!this.title){this.element.attr("title",this.options.label);}},_updateIcon:function _updateIcon(option,value){var icon=option!=="iconPosition",position=icon?this.options.iconPosition:value,displayBlock=position==="top"||position==="bottom";// Create icon
	if(!this.icon){this.icon=$("<span>");this._addClass(this.icon,"ui-button-icon","ui-icon");if(!this.options.showLabel){this._addClass("ui-button-icon-only");}}else if(icon){// If we are updating the icon remove the old icon class
	this._removeClass(this.icon,null,this.options.icon);}// If we are updating the icon add the new icon class
	if(icon){this._addClass(this.icon,null,value);}this._attachIcon(position);// If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove
	// the iconSpace if there is one.
	if(displayBlock){this._addClass(this.icon,null,"ui-widget-icon-block");if(this.iconSpace){this.iconSpace.remove();}}else{// Position is beginning or end so remove the ui-widget-icon-block class and add the
	// space if it does not exist
	if(!this.iconSpace){this.iconSpace=$("<span> </span>");this._addClass(this.iconSpace,"ui-button-icon-space");}this._removeClass(this.icon,null,"ui-wiget-icon-block");this._attachIconSpace(position);}},_destroy:function _destroy(){this.element.removeAttr("role");if(this.icon){this.icon.remove();}if(this.iconSpace){this.iconSpace.remove();}if(!this.hasTitle){this.element.removeAttr("title");}},_attachIconSpace:function _attachIconSpace(iconPosition){this.icon[/^(?:end|bottom)/.test(iconPosition)?"before":"after"](this.iconSpace);},_attachIcon:function _attachIcon(iconPosition){this.element[/^(?:end|bottom)/.test(iconPosition)?"append":"prepend"](this.icon);},_setOptions:function _setOptions(options){var newShowLabel=options.showLabel===undefined?this.options.showLabel:options.showLabel,newIcon=options.icon===undefined?this.options.icon:options.icon;if(!newShowLabel&&!newIcon){options.showLabel=true;}this._super(options);},_setOption:function _setOption(key,value){if(key==="icon"){if(value){this._updateIcon(key,value);}else if(this.icon){this.icon.remove();if(this.iconSpace){this.iconSpace.remove();}}}if(key==="iconPosition"){this._updateIcon(key,value);}// Make sure we can't end up with a button that has neither text nor icon
	if(key==="showLabel"){this._toggleClass("ui-button-icon-only",null,!value);this._updateTooltip();}if(key==="label"){if(this.isInput){this.element.val(value);}else{// If there is an icon, append it, else nothing then append the value
	// this avoids removal of the icon when setting label text
	this.element.html(value);if(this.icon){this._attachIcon(this.options.iconPosition);this._attachIconSpace(this.options.iconPosition);}}}this._super(key,value);if(key==="disabled"){this._toggleClass(null,"ui-state-disabled",value);this.element[0].disabled=value;if(value){this.element.blur();}}},refresh:function refresh(){// Make sure to only check disabled if its an element that supports this otherwise
	// check for the disabled class to determine state
	var isDisabled=this.element.is("input, button")?this.element[0].disabled:this.element.hasClass("ui-button-disabled");if(isDisabled!==this.options.disabled){this._setOptions({disabled:isDisabled});}this._updateTooltip();}});// DEPRECATED
	if($.uiBackCompat!==false){// Text and Icons options
	$.widget("ui.button",$.ui.button,{options:{text:true,icons:{primary:null,secondary:null}},_create:function _create(){if(this.options.showLabel&&!this.options.text){this.options.showLabel=this.options.text;}if(!this.options.showLabel&&this.options.text){this.options.text=this.options.showLabel;}if(!this.options.icon&&(this.options.icons.primary||this.options.icons.secondary)){if(this.options.icons.primary){this.options.icon=this.options.icons.primary;}else{this.options.icon=this.options.icons.secondary;this.options.iconPosition="end";}}else if(this.options.icon){this.options.icons.primary=this.options.icon;}this._super();},_setOption:function _setOption(key,value){if(key==="text"){this._super("showLabel",value);return;}if(key==="showLabel"){this.options.text=value;}if(key==="icon"){this.options.icons.primary=value;}if(key==="icons"){if(value.primary){this._super("icon",value.primary);this._super("iconPosition","beginning");}else if(value.secondary){this._super("icon",value.secondary);this._super("iconPosition","end");}}this._superApply(arguments);}});$.fn.button=function(orig){return function(){if(!this.length||this.length&&this[0].tagName!=="INPUT"||this.length&&this[0].tagName==="INPUT"&&this.attr("type")!=="checkbox"&&this.attr("type")!=="radio"){return orig.apply(this,arguments);}if(!$.ui.checkboxradio){$.error("Checkboxradio widget missing");}if(arguments.length===0){return this.checkboxradio({"icon":false});}return this.checkboxradio.apply(this,arguments);};}($.fn.button);$.fn.buttonset=function(){if(!$.ui.controlgroup){$.error("Controlgroup widget missing");}if(arguments[0]==="option"&&arguments[1]==="items"&&arguments[2]){return this.controlgroup.apply(this,[arguments[0],"items.button",arguments[2]]);}if(arguments[0]==="option"&&arguments[1]==="items"){return this.controlgroup.apply(this,[arguments[0],"items.button"]);}if(_typeof(arguments[0])==="object"&&arguments[0].items){arguments[0].items={button:arguments[0].items};}return this.controlgroup.apply(this,arguments);};}var widgetsButton=$.ui.button;// jscs:disable maximumLineLength
	/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers *//*!
	 * jQuery UI Datepicker 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Datepicker
	//>>group: Widgets
	//>>description: Displays a calendar from an input or inline for selecting dates.
	//>>docs: http://api.jqueryui.com/datepicker/
	//>>demos: http://jqueryui.com/datepicker/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/datepicker.css
	//>>css.theme: ../../themes/base/theme.css
	$.extend($.ui,{datepicker:{version:"1.12.1"}});var datepicker_instActive;function datepicker_getZindex(elem){var position,value;while(elem.length&&elem[0]!==document){// Ignore z-index if position is set to a value where z-index is ignored by the browser
	// This makes behavior of this function consistent across browsers
	// WebKit always returns auto if the element is positioned
	position=elem.css("position");if(position==="absolute"||position==="relative"||position==="fixed"){// IE returns 0 when zIndex is not specified
	// other browsers return a string
	// we ignore the case of nested elements with an explicit value of 0
	// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
	value=parseInt(elem.css("zIndex"),10);if(!isNaN(value)&&value!==0){return value;}}elem=elem.parent();}return 0;}/* Date picker manager.
	   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
	   Settings for (groups of) date pickers are maintained in an instance object,
	   allowing multiple different settings on the same page. */function Datepicker(){this._curInst=null;// The current instance in use
	this._keyEvent=false;// If the last event was a key event
	this._disabledInputs=[];// List of date picker inputs that have been disabled
	this._datepickerShowing=false;// True if the popup picker is showing , false if not
	this._inDialog=false;// True if showing within a "dialog", false if not
	this._mainDivId="ui-datepicker-div";// The ID of the main datepicker division
	this._inlineClass="ui-datepicker-inline";// The name of the inline marker class
	this._appendClass="ui-datepicker-append";// The name of the append marker class
	this._triggerClass="ui-datepicker-trigger";// The name of the trigger marker class
	this._dialogClass="ui-datepicker-dialog";// The name of the dialog marker class
	this._disableClass="ui-datepicker-disabled";// The name of the disabled covering marker class
	this._unselectableClass="ui-datepicker-unselectable";// The name of the unselectable cell marker class
	this._currentClass="ui-datepicker-current-day";// The name of the current day marker class
	this._dayOverClass="ui-datepicker-days-cell-over";// The name of the day hover marker class
	this.regional=[];// Available regional settings, indexed by language code
	this.regional[""]={// Default regional settings
	closeText:"Done",// Display text for close link
	prevText:"Prev",// Display text for previous month link
	nextText:"Next",// Display text for next month link
	currentText:"Today",// Display text for current month link
	monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],// Names of months for drop-down and formatting
	monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],// For formatting
	dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],// For formatting
	dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],// For formatting
	dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],// Column headings for days starting at Sunday
	weekHeader:"Wk",// Column header for week of the year
	dateFormat:"mm/dd/yy",// See format options on parseDate
	firstDay:0,// The first day of the week, Sun = 0, Mon = 1, ...
	isRTL:false,// True if right-to-left language, false if left-to-right
	showMonthAfterYear:false,// True if the year select precedes month, false for month then year
	yearSuffix:""// Additional text to append to the year in the month headers
	};this._defaults={// Global defaults for all the date picker instances
	showOn:"focus",// "focus" for popup on focus,
	// "button" for trigger button, or "both" for either
	showAnim:"fadeIn",// Name of jQuery animation for popup
	showOptions:{},// Options for enhanced animations
	defaultDate:null,// Used when field is blank: actual date,
	// +/-number for offset from today, null for today
	appendText:"",// Display text following the input box, e.g. showing the format
	buttonText:"...",// Text for trigger button
	buttonImage:"",// URL for trigger button image
	buttonImageOnly:false,// True if the image appears alone, false if it appears on a button
	hideIfNoPrevNext:false,// True to hide next/previous month links
	// if not applicable, false to just disable them
	navigationAsDateFormat:false,// True if date formatting applied to prev/today/next links
	gotoCurrent:false,// True if today link goes back to current selection instead
	changeMonth:false,// True if month can be selected directly, false if only prev/next
	changeYear:false,// True if year can be selected directly, false if only prev/next
	yearRange:"c-10:c+10",// Range of years to display in drop-down,
	// either relative to today's year (-nn:+nn), relative to currently displayed year
	// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
	showOtherMonths:false,// True to show dates in other months, false to leave blank
	selectOtherMonths:false,// True to allow selection of dates in other months, false for unselectable
	showWeek:false,// True to show week of the year, false to not show it
	calculateWeek:this.iso8601Week,// How to calculate the week of the year,
	// takes a Date and returns the number of the week for it
	shortYearCutoff:"+10",// Short year values < this are in the current century,
	// > this are in the previous century,
	// string value starting with "+" for current year + value
	minDate:null,// The earliest selectable date, or null for no limit
	maxDate:null,// The latest selectable date, or null for no limit
	duration:"fast",// Duration of display/closure
	beforeShowDay:null,// Function that takes a date and returns an array with
	// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
	// [2] = cell title (optional), e.g. $.datepicker.noWeekends
	beforeShow:null,// Function that takes an input field and
	// returns a set of custom settings for the date picker
	onSelect:null,// Define a callback function when a date is selected
	onChangeMonthYear:null,// Define a callback function when the month or year is changed
	onClose:null,// Define a callback function when the datepicker is closed
	numberOfMonths:1,// Number of months to show at a time
	showCurrentAtPos:0,// The position in multipe months at which to show the current month (starting at 0)
	stepMonths:1,// Number of months to step back/forward
	stepBigMonths:12,// Number of months to step back/forward for the big links
	altField:"",// Selector for an alternate field to store selected dates into
	altFormat:"",// The date format to use for the alternate field
	constrainInput:true,// The input is constrained by the current date format
	showButtonPanel:false,// True to show button panel, false to not show it
	autoSize:false,// True to size the input for the date format, false to leave as is
	disabled:false// The initial disabled state
	};$.extend(this._defaults,this.regional[""]);this.regional.en=$.extend(true,{},this.regional[""]);this.regional["en-US"]=$.extend(true,{},this.regional.en);this.dpDiv=datepicker_bindHover($("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));}$.extend(Datepicker.prototype,{/* Class name added to elements to indicate already configured with a date picker. */markerClassName:"hasDatepicker",//Keep track of the maximum number of rows displayed (see #7043)
	maxRows:4,// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker:function _widgetDatepicker(){return this.dpDiv;},/* Override the default settings for all instances of the date picker.
		 * @param  settings  object - the new settings to use as defaults (anonymous object)
		 * @return the manager object
		 */setDefaults:function setDefaults(settings){datepicker_extendRemove(this._defaults,settings||{});return this;},/* Attach the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
		 */_attachDatepicker:function _attachDatepicker(target,settings){var nodeName,inline,inst;nodeName=target.nodeName.toLowerCase();inline=nodeName==="div"||nodeName==="span";if(!target.id){this.uuid+=1;target.id="dp"+this.uuid;}inst=this._newInst($(target),inline);inst.settings=$.extend({},settings||{});if(nodeName==="input"){this._connectDatepicker(target,inst);}else if(inline){this._inlineDatepicker(target,inst);}},/* Create a new instance object. */_newInst:function _newInst(target,inline){var id=target[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1");// escape jQuery meta chars
	return{id:id,input:target,// associated target
	selectedDay:0,selectedMonth:0,selectedYear:0,// current selection
	drawMonth:0,drawYear:0,// month being drawn
	inline:inline,// is datepicker inline or not
	dpDiv:!inline?this.dpDiv:// presentation div
	datepicker_bindHover($("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))};},/* Attach the date picker to an input field. */_connectDatepicker:function _connectDatepicker(target,inst){var input=$(target);inst.append=$([]);inst.trigger=$([]);if(input.hasClass(this.markerClassName)){return;}this._attachments(input,inst);input.addClass(this.markerClassName).on("keydown",this._doKeyDown).on("keypress",this._doKeyPress).on("keyup",this._doKeyUp);this._autoSize(inst);$.data(target,"datepicker",inst);//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
	if(inst.settings.disabled){this._disableDatepicker(target);}},/* Make attachments based on settings. */_attachments:function _attachments(input,inst){var showOn,buttonText,buttonImage,appendText=this._get(inst,"appendText"),isRTL=this._get(inst,"isRTL");if(inst.append){inst.append.remove();}if(appendText){inst.append=$("<span class='"+this._appendClass+"'>"+appendText+"</span>");input[isRTL?"before":"after"](inst.append);}input.off("focus",this._showDatepicker);if(inst.trigger){inst.trigger.remove();}showOn=this._get(inst,"showOn");if(showOn==="focus"||showOn==="both"){// pop-up date picker when in the marked field
	input.on("focus",this._showDatepicker);}if(showOn==="button"||showOn==="both"){// pop-up date picker when button clicked
	buttonText=this._get(inst,"buttonText");buttonImage=this._get(inst,"buttonImage");inst.trigger=$(this._get(inst,"buttonImageOnly")?$("<img/>").addClass(this._triggerClass).attr({src:buttonImage,alt:buttonText,title:buttonText}):$("<button type='button'></button>").addClass(this._triggerClass).html(!buttonImage?buttonText:$("<img/>").attr({src:buttonImage,alt:buttonText,title:buttonText})));input[isRTL?"before":"after"](inst.trigger);inst.trigger.on("click",function(){if($.datepicker._datepickerShowing&&$.datepicker._lastInput===input[0]){$.datepicker._hideDatepicker();}else if($.datepicker._datepickerShowing&&$.datepicker._lastInput!==input[0]){$.datepicker._hideDatepicker();$.datepicker._showDatepicker(input[0]);}else{$.datepicker._showDatepicker(input[0]);}return false;});}},/* Apply the maximum length for the date format. */_autoSize:function _autoSize(inst){if(this._get(inst,"autoSize")&&!inst.inline){var findMax,max,maxI,i,date=new Date(2009,12-1,20),// Ensure double digits
	dateFormat=this._get(inst,"dateFormat");if(dateFormat.match(/[DM]/)){findMax=function findMax(names){max=0;maxI=0;for(i=0;i<names.length;i++){if(names[i].length>max){max=names[i].length;maxI=i;}}return maxI;};date.setMonth(findMax(this._get(inst,dateFormat.match(/MM/)?"monthNames":"monthNamesShort")));date.setDate(findMax(this._get(inst,dateFormat.match(/DD/)?"dayNames":"dayNamesShort"))+20-date.getDay());}inst.input.attr("size",this._formatDate(inst,date).length);}},/* Attach an inline date picker to a div. */_inlineDatepicker:function _inlineDatepicker(target,inst){var divSpan=$(target);if(divSpan.hasClass(this.markerClassName)){return;}divSpan.addClass(this.markerClassName).append(inst.dpDiv);$.data(target,"datepicker",inst);this._setDate(inst,this._getDefaultDate(inst),true);this._updateDatepicker(inst);this._updateAlternate(inst);//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
	if(inst.settings.disabled){this._disableDatepicker(target);}// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
	// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
	inst.dpDiv.css("display","block");},/* Pop-up the date picker in a "dialog" box.
		 * @param  input element - ignored
		 * @param  date	string or Date - the initial date to display
		 * @param  onSelect  function - the function to call when a date is selected
		 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
		 * @param  pos int[2] - coordinates for the dialog's position within the screen or
		 *					event - with x/y coordinates or
		 *					leave empty for default (screen centre)
		 * @return the manager object
		 */_dialogDatepicker:function _dialogDatepicker(input,date,onSelect,settings,pos){var id,browserWidth,browserHeight,scrollX,scrollY,inst=this._dialogInst;// internal instance
	if(!inst){this.uuid+=1;id="dp"+this.uuid;this._dialogInput=$("<input type='text' id='"+id+"' style='position: absolute; top: -100px; width: 0px;'/>");this._dialogInput.on("keydown",this._doKeyDown);$("body").append(this._dialogInput);inst=this._dialogInst=this._newInst(this._dialogInput,false);inst.settings={};$.data(this._dialogInput[0],"datepicker",inst);}datepicker_extendRemove(inst.settings,settings||{});date=date&&date.constructor===Date?this._formatDate(inst,date):date;this._dialogInput.val(date);this._pos=pos?pos.length?pos:[pos.pageX,pos.pageY]:null;if(!this._pos){browserWidth=document.documentElement.clientWidth;browserHeight=document.documentElement.clientHeight;scrollX=document.documentElement.scrollLeft||document.body.scrollLeft;scrollY=document.documentElement.scrollTop||document.body.scrollTop;this._pos=// should use actual width/height below
	[browserWidth/2-100+scrollX,browserHeight/2-150+scrollY];}// Move input on screen for focus, but hidden behind dialog
	this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px");inst.settings.onSelect=onSelect;this._inDialog=true;this.dpDiv.addClass(this._dialogClass);this._showDatepicker(this._dialogInput[0]);if($.blockUI){$.blockUI(this.dpDiv);}$.data(this._dialogInput[0],"datepicker",inst);return this;},/* Detach a datepicker from its control.
		 * @param  target	element - the target input field or division or span
		 */_destroyDatepicker:function _destroyDatepicker(target){var nodeName,$target=$(target),inst=$.data(target,"datepicker");if(!$target.hasClass(this.markerClassName)){return;}nodeName=target.nodeName.toLowerCase();$.removeData(target,"datepicker");if(nodeName==="input"){inst.append.remove();inst.trigger.remove();$target.removeClass(this.markerClassName).off("focus",this._showDatepicker).off("keydown",this._doKeyDown).off("keypress",this._doKeyPress).off("keyup",this._doKeyUp);}else if(nodeName==="div"||nodeName==="span"){$target.removeClass(this.markerClassName).empty();}if(datepicker_instActive===inst){datepicker_instActive=null;}},/* Enable the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 */_enableDatepicker:function _enableDatepicker(target){var nodeName,inline,$target=$(target),inst=$.data(target,"datepicker");if(!$target.hasClass(this.markerClassName)){return;}nodeName=target.nodeName.toLowerCase();if(nodeName==="input"){target.disabled=false;inst.trigger.filter("button").each(function(){this.disabled=false;}).end().filter("img").css({opacity:"1.0",cursor:""});}else if(nodeName==="div"||nodeName==="span"){inline=$target.children("."+this._inlineClass);inline.children().removeClass("ui-state-disabled");inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",false);}this._disabledInputs=$.map(this._disabledInputs,function(value){return value===target?null:value;});// delete entry
	},/* Disable the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 */_disableDatepicker:function _disableDatepicker(target){var nodeName,inline,$target=$(target),inst=$.data(target,"datepicker");if(!$target.hasClass(this.markerClassName)){return;}nodeName=target.nodeName.toLowerCase();if(nodeName==="input"){target.disabled=true;inst.trigger.filter("button").each(function(){this.disabled=true;}).end().filter("img").css({opacity:"0.5",cursor:"default"});}else if(nodeName==="div"||nodeName==="span"){inline=$target.children("."+this._inlineClass);inline.children().addClass("ui-state-disabled");inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",true);}this._disabledInputs=$.map(this._disabledInputs,function(value){return value===target?null:value;});// delete entry
	this._disabledInputs[this._disabledInputs.length]=target;},/* Is the first field in a jQuery collection disabled as a datepicker?
		 * @param  target	element - the target input field or division or span
		 * @return boolean - true if disabled, false if enabled
		 */_isDisabledDatepicker:function _isDisabledDatepicker(target){if(!target){return false;}for(var i=0;i<this._disabledInputs.length;i++){if(this._disabledInputs[i]===target){return true;}}return false;},/* Retrieve the instance data for the target control.
		 * @param  target  element - the target input field or division or span
		 * @return  object - the associated instance data
		 * @throws  error if a jQuery problem getting data
		 */_getInst:function _getInst(target){try{return $.data(target,"datepicker");}catch(err){throw"Missing instance data for this datepicker";}},/* Update or retrieve the settings for a date picker attached to an input field or division.
		 * @param  target  element - the target input field or division or span
		 * @param  name	object - the new settings to update or
		 *				string - the name of the setting to change or retrieve,
		 *				when retrieving also "all" for all instance settings or
		 *				"defaults" for all global defaults
		 * @param  value   any - the new value for the setting
		 *				(omit if above is an object or to retrieve a value)
		 */_optionDatepicker:function _optionDatepicker(target,name,value){var settings,date,minDate,maxDate,inst=this._getInst(target);if(arguments.length===2&&typeof name==="string"){return name==="defaults"?$.extend({},$.datepicker._defaults):inst?name==="all"?$.extend({},inst.settings):this._get(inst,name):null;}settings=name||{};if(typeof name==="string"){settings={};settings[name]=value;}if(inst){if(this._curInst===inst){this._hideDatepicker();}date=this._getDateDatepicker(target,true);minDate=this._getMinMaxDate(inst,"min");maxDate=this._getMinMaxDate(inst,"max");datepicker_extendRemove(inst.settings,settings);// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
	if(minDate!==null&&settings.dateFormat!==undefined&&settings.minDate===undefined){inst.settings.minDate=this._formatDate(inst,minDate);}if(maxDate!==null&&settings.dateFormat!==undefined&&settings.maxDate===undefined){inst.settings.maxDate=this._formatDate(inst,maxDate);}if("disabled"in settings){if(settings.disabled){this._disableDatepicker(target);}else{this._enableDatepicker(target);}}this._attachments($(target),inst);this._autoSize(inst);this._setDate(inst,date);this._updateAlternate(inst);this._updateDatepicker(inst);}},// Change method deprecated
	_changeDatepicker:function _changeDatepicker(target,name,value){this._optionDatepicker(target,name,value);},/* Redraw the date picker attached to an input field or division.
		 * @param  target  element - the target input field or division or span
		 */_refreshDatepicker:function _refreshDatepicker(target){var inst=this._getInst(target);if(inst){this._updateDatepicker(inst);}},/* Set the dates for a jQuery selection.
		 * @param  target element - the target input field or division or span
		 * @param  date	Date - the new date
		 */_setDateDatepicker:function _setDateDatepicker(target,date){var inst=this._getInst(target);if(inst){this._setDate(inst,date);this._updateDatepicker(inst);this._updateAlternate(inst);}},/* Get the date(s) for the first entry in a jQuery selection.
		 * @param  target element - the target input field or division or span
		 * @param  noDefault boolean - true if no default date is to be used
		 * @return Date - the current date
		 */_getDateDatepicker:function _getDateDatepicker(target,noDefault){var inst=this._getInst(target);if(inst&&!inst.inline){this._setDateFromField(inst,noDefault);}return inst?this._getDate(inst):null;},/* Handle keystrokes. */_doKeyDown:function _doKeyDown(event){var onSelect,dateStr,sel,inst=$.datepicker._getInst(event.target),handled=true,isRTL=inst.dpDiv.is(".ui-datepicker-rtl");inst._keyEvent=true;if($.datepicker._datepickerShowing){switch(event.keyCode){case 9:$.datepicker._hideDatepicker();handled=false;break;// hide on tab out
	case 13:sel=$("td."+$.datepicker._dayOverClass+":not(."+$.datepicker._currentClass+")",inst.dpDiv);if(sel[0]){$.datepicker._selectDay(event.target,inst.selectedMonth,inst.selectedYear,sel[0]);}onSelect=$.datepicker._get(inst,"onSelect");if(onSelect){dateStr=$.datepicker._formatDate(inst);// Trigger custom callback
	onSelect.apply(inst.input?inst.input[0]:null,[dateStr,inst]);}else{$.datepicker._hideDatepicker();}return false;// don't submit the form
	case 27:$.datepicker._hideDatepicker();break;// hide on escape
	case 33:$.datepicker._adjustDate(event.target,event.ctrlKey?-$.datepicker._get(inst,"stepBigMonths"):-$.datepicker._get(inst,"stepMonths"),"M");break;// previous month/year on page up/+ ctrl
	case 34:$.datepicker._adjustDate(event.target,event.ctrlKey?+$.datepicker._get(inst,"stepBigMonths"):+$.datepicker._get(inst,"stepMonths"),"M");break;// next month/year on page down/+ ctrl
	case 35:if(event.ctrlKey||event.metaKey){$.datepicker._clearDate(event.target);}handled=event.ctrlKey||event.metaKey;break;// clear on ctrl or command +end
	case 36:if(event.ctrlKey||event.metaKey){$.datepicker._gotoToday(event.target);}handled=event.ctrlKey||event.metaKey;break;// current on ctrl or command +home
	case 37:if(event.ctrlKey||event.metaKey){$.datepicker._adjustDate(event.target,isRTL?+1:-1,"D");}handled=event.ctrlKey||event.metaKey;// -1 day on ctrl or command +left
	if(event.originalEvent.altKey){$.datepicker._adjustDate(event.target,event.ctrlKey?-$.datepicker._get(inst,"stepBigMonths"):-$.datepicker._get(inst,"stepMonths"),"M");}// next month/year on alt +left on Mac
	break;case 38:if(event.ctrlKey||event.metaKey){$.datepicker._adjustDate(event.target,-7,"D");}handled=event.ctrlKey||event.metaKey;break;// -1 week on ctrl or command +up
	case 39:if(event.ctrlKey||event.metaKey){$.datepicker._adjustDate(event.target,isRTL?-1:+1,"D");}handled=event.ctrlKey||event.metaKey;// +1 day on ctrl or command +right
	if(event.originalEvent.altKey){$.datepicker._adjustDate(event.target,event.ctrlKey?+$.datepicker._get(inst,"stepBigMonths"):+$.datepicker._get(inst,"stepMonths"),"M");}// next month/year on alt +right
	break;case 40:if(event.ctrlKey||event.metaKey){$.datepicker._adjustDate(event.target,+7,"D");}handled=event.ctrlKey||event.metaKey;break;// +1 week on ctrl or command +down
	default:handled=false;}}else if(event.keyCode===36&&event.ctrlKey){// display the date picker on ctrl+home
	$.datepicker._showDatepicker(this);}else{handled=false;}if(handled){event.preventDefault();event.stopPropagation();}},/* Filter entered characters - based on date format. */_doKeyPress:function _doKeyPress(event){var chars,chr,inst=$.datepicker._getInst(event.target);if($.datepicker._get(inst,"constrainInput")){chars=$.datepicker._possibleChars($.datepicker._get(inst,"dateFormat"));chr=String.fromCharCode(event.charCode==null?event.keyCode:event.charCode);return event.ctrlKey||event.metaKey||chr<" "||!chars||chars.indexOf(chr)>-1;}},/* Synchronise manual entry and field/alternate field. */_doKeyUp:function _doKeyUp(event){var date,inst=$.datepicker._getInst(event.target);if(inst.input.val()!==inst.lastVal){try{date=$.datepicker.parseDate($.datepicker._get(inst,"dateFormat"),inst.input?inst.input.val():null,$.datepicker._getFormatConfig(inst));if(date){// only if valid
	$.datepicker._setDateFromField(inst);$.datepicker._updateAlternate(inst);$.datepicker._updateDatepicker(inst);}}catch(err){}}return true;},/* Pop-up the date picker for a given input field.
		 * If false returned from beforeShow event handler do not show.
		 * @param  input  element - the input field attached to the date picker or
		 *					event - if triggered by focus
		 */_showDatepicker:function _showDatepicker(input){input=input.target||input;if(input.nodeName.toLowerCase()!=="input"){// find from button/image trigger
	input=$("input",input.parentNode)[0];}if($.datepicker._isDisabledDatepicker(input)||$.datepicker._lastInput===input){// already here
	return;}var inst,beforeShow,beforeShowSettings,isFixed,offset,showAnim,duration;inst=$.datepicker._getInst(input);if($.datepicker._curInst&&$.datepicker._curInst!==inst){$.datepicker._curInst.dpDiv.stop(true,true);if(inst&&$.datepicker._datepickerShowing){$.datepicker._hideDatepicker($.datepicker._curInst.input[0]);}}beforeShow=$.datepicker._get(inst,"beforeShow");beforeShowSettings=beforeShow?beforeShow.apply(input,[input,inst]):{};if(beforeShowSettings===false){return;}datepicker_extendRemove(inst.settings,beforeShowSettings);inst.lastVal=null;$.datepicker._lastInput=input;$.datepicker._setDateFromField(inst);if($.datepicker._inDialog){// hide cursor
	input.value="";}if(!$.datepicker._pos){// position below input
	$.datepicker._pos=$.datepicker._findPos(input);$.datepicker._pos[1]+=input.offsetHeight;// add the height
	}isFixed=false;$(input).parents().each(function(){isFixed|=$(this).css("position")==="fixed";return!isFixed;});offset={left:$.datepicker._pos[0],top:$.datepicker._pos[1]};$.datepicker._pos=null;//to avoid flashes on Firefox
	inst.dpDiv.empty();// determine sizing offscreen
	inst.dpDiv.css({position:"absolute",display:"block",top:"-1000px"});$.datepicker._updateDatepicker(inst);// fix width for dynamic number of date pickers
	// and adjust position before showing
	offset=$.datepicker._checkOffset(inst,offset,isFixed);inst.dpDiv.css({position:$.datepicker._inDialog&&$.blockUI?"static":isFixed?"fixed":"absolute",display:"none",left:offset.left+"px",top:offset.top+"px"});if(!inst.inline){showAnim=$.datepicker._get(inst,"showAnim");duration=$.datepicker._get(inst,"duration");inst.dpDiv.css("z-index",datepicker_getZindex($(input))+1);$.datepicker._datepickerShowing=true;if($.effects&&$.effects.effect[showAnim]){inst.dpDiv.show(showAnim,$.datepicker._get(inst,"showOptions"),duration);}else{inst.dpDiv[showAnim||"show"](showAnim?duration:null);}if($.datepicker._shouldFocusInput(inst)){inst.input.trigger("focus");}$.datepicker._curInst=inst;}},/* Generate the date picker content. */_updateDatepicker:function _updateDatepicker(inst){this.maxRows=4;//Reset the max number of rows being displayed (see #7043)
	datepicker_instActive=inst;// for delegate hover events
	inst.dpDiv.empty().append(this._generateHTML(inst));this._attachHandlers(inst);var origyearshtml,numMonths=this._getNumberOfMonths(inst),cols=numMonths[1],width=17,activeCell=inst.dpDiv.find("."+this._dayOverClass+" a");if(activeCell.length>0){datepicker_handleMouseover.apply(activeCell.get(0));}inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");if(cols>1){inst.dpDiv.addClass("ui-datepicker-multi-"+cols).css("width",width*cols+"em");}inst.dpDiv[(numMonths[0]!==1||numMonths[1]!==1?"add":"remove")+"Class"]("ui-datepicker-multi");inst.dpDiv[(this._get(inst,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl");if(inst===$.datepicker._curInst&&$.datepicker._datepickerShowing&&$.datepicker._shouldFocusInput(inst)){inst.input.trigger("focus");}// Deffered render of the years select (to avoid flashes on Firefox)
	if(inst.yearshtml){origyearshtml=inst.yearshtml;setTimeout(function(){//assure that inst.yearshtml didn't change.
	if(origyearshtml===inst.yearshtml&&inst.yearshtml){inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);}origyearshtml=inst.yearshtml=null;},0);}},// #6694 - don't focus the input if it's already focused
	// this breaks the change event in IE
	// Support: IE and jQuery <1.9
	_shouldFocusInput:function _shouldFocusInput(inst){return inst.input&&inst.input.is(":visible")&&!inst.input.is(":disabled")&&!inst.input.is(":focus");},/* Check positioning to remain on screen. */_checkOffset:function _checkOffset(inst,offset,isFixed){var dpWidth=inst.dpDiv.outerWidth(),dpHeight=inst.dpDiv.outerHeight(),inputWidth=inst.input?inst.input.outerWidth():0,inputHeight=inst.input?inst.input.outerHeight():0,viewWidth=document.documentElement.clientWidth+(isFixed?0:$(document).scrollLeft()),viewHeight=document.documentElement.clientHeight+(isFixed?0:$(document).scrollTop());offset.left-=this._get(inst,"isRTL")?dpWidth-inputWidth:0;offset.left-=isFixed&&offset.left===inst.input.offset().left?$(document).scrollLeft():0;offset.top-=isFixed&&offset.top===inst.input.offset().top+inputHeight?$(document).scrollTop():0;// Now check if datepicker is showing outside window viewport - move to a better place if so.
	offset.left-=Math.min(offset.left,offset.left+dpWidth>viewWidth&&viewWidth>dpWidth?Math.abs(offset.left+dpWidth-viewWidth):0);offset.top-=Math.min(offset.top,offset.top+dpHeight>viewHeight&&viewHeight>dpHeight?Math.abs(dpHeight+inputHeight):0);return offset;},/* Find an object's position on the screen. */_findPos:function _findPos(obj){var position,inst=this._getInst(obj),isRTL=this._get(inst,"isRTL");while(obj&&(obj.type==="hidden"||obj.nodeType!==1||$.expr.filters.hidden(obj))){obj=obj[isRTL?"previousSibling":"nextSibling"];}position=$(obj).offset();return[position.left,position.top];},/* Hide the date picker from view.
		 * @param  input  element - the input field attached to the date picker
		 */_hideDatepicker:function _hideDatepicker(input){var showAnim,duration,postProcess,onClose,inst=this._curInst;if(!inst||input&&inst!==$.data(input,"datepicker")){return;}if(this._datepickerShowing){showAnim=this._get(inst,"showAnim");duration=this._get(inst,"duration");postProcess=function postProcess(){$.datepicker._tidyDialog(inst);};// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
	if($.effects&&($.effects.effect[showAnim]||$.effects[showAnim])){inst.dpDiv.hide(showAnim,$.datepicker._get(inst,"showOptions"),duration,postProcess);}else{inst.dpDiv[showAnim==="slideDown"?"slideUp":showAnim==="fadeIn"?"fadeOut":"hide"](showAnim?duration:null,postProcess);}if(!showAnim){postProcess();}this._datepickerShowing=false;onClose=this._get(inst,"onClose");if(onClose){onClose.apply(inst.input?inst.input[0]:null,[inst.input?inst.input.val():"",inst]);}this._lastInput=null;if(this._inDialog){this._dialogInput.css({position:"absolute",left:"0",top:"-100px"});if($.blockUI){$.unblockUI();$("body").append(this.dpDiv);}}this._inDialog=false;}},/* Tidy up after a dialog display. */_tidyDialog:function _tidyDialog(inst){inst.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar");},/* Close date picker if clicked elsewhere. */_checkExternalClick:function _checkExternalClick(event){if(!$.datepicker._curInst){return;}var $target=$(event.target),inst=$.datepicker._getInst($target[0]);if($target[0].id!==$.datepicker._mainDivId&&$target.parents("#"+$.datepicker._mainDivId).length===0&&!$target.hasClass($.datepicker.markerClassName)&&!$target.closest("."+$.datepicker._triggerClass).length&&$.datepicker._datepickerShowing&&!($.datepicker._inDialog&&$.blockUI)||$target.hasClass($.datepicker.markerClassName)&&$.datepicker._curInst!==inst){$.datepicker._hideDatepicker();}},/* Adjust one of the date sub-fields. */_adjustDate:function _adjustDate(id,offset,period){var target=$(id),inst=this._getInst(target[0]);if(this._isDisabledDatepicker(target[0])){return;}this._adjustInstDate(inst,offset+(period==="M"?this._get(inst,"showCurrentAtPos"):0),// undo positioning
	period);this._updateDatepicker(inst);},/* Action for current link. */_gotoToday:function _gotoToday(id){var date,target=$(id),inst=this._getInst(target[0]);if(this._get(inst,"gotoCurrent")&&inst.currentDay){inst.selectedDay=inst.currentDay;inst.drawMonth=inst.selectedMonth=inst.currentMonth;inst.drawYear=inst.selectedYear=inst.currentYear;}else{date=new Date();inst.selectedDay=date.getDate();inst.drawMonth=inst.selectedMonth=date.getMonth();inst.drawYear=inst.selectedYear=date.getFullYear();}this._notifyChange(inst);this._adjustDate(target);},/* Action for selecting a new month/year. */_selectMonthYear:function _selectMonthYear(id,select,period){var target=$(id),inst=this._getInst(target[0]);inst["selected"+(period==="M"?"Month":"Year")]=inst["draw"+(period==="M"?"Month":"Year")]=parseInt(select.options[select.selectedIndex].value,10);this._notifyChange(inst);this._adjustDate(target);},/* Action for selecting a day. */_selectDay:function _selectDay(id,month,year,td){var inst,target=$(id);if($(td).hasClass(this._unselectableClass)||this._isDisabledDatepicker(target[0])){return;}inst=this._getInst(target[0]);inst.selectedDay=inst.currentDay=$("a",td).html();inst.selectedMonth=inst.currentMonth=month;inst.selectedYear=inst.currentYear=year;this._selectDate(id,this._formatDate(inst,inst.currentDay,inst.currentMonth,inst.currentYear));},/* Erase the input field and hide the date picker. */_clearDate:function _clearDate(id){var target=$(id);this._selectDate(target,"");},/* Update the input field with the selected date. */_selectDate:function _selectDate(id,dateStr){var onSelect,target=$(id),inst=this._getInst(target[0]);dateStr=dateStr!=null?dateStr:this._formatDate(inst);if(inst.input){inst.input.val(dateStr);}this._updateAlternate(inst);onSelect=this._get(inst,"onSelect");if(onSelect){onSelect.apply(inst.input?inst.input[0]:null,[dateStr,inst]);// trigger custom callback
	}else if(inst.input){inst.input.trigger("change");// fire the change event
	}if(inst.inline){this._updateDatepicker(inst);}else{this._hideDatepicker();this._lastInput=inst.input[0];if(_typeof(inst.input[0])!=="object"){inst.input.trigger("focus");// restore focus
	}this._lastInput=null;}},/* Update any alternate field to synchronise with the main field. */_updateAlternate:function _updateAlternate(inst){var altFormat,date,dateStr,altField=this._get(inst,"altField");if(altField){// update alternate field too
	altFormat=this._get(inst,"altFormat")||this._get(inst,"dateFormat");date=this._getDate(inst);dateStr=this.formatDate(altFormat,date,this._getFormatConfig(inst));$(altField).val(dateStr);}},/* Set as beforeShowDay function to prevent selection of weekends.
		 * @param  date  Date - the date to customise
		 * @return [boolean, string] - is this date selectable?, what is its CSS class?
		 */noWeekends:function noWeekends(date){var day=date.getDay();return[day>0&&day<6,""];},/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
		 * @param  date  Date - the date to get the week for
		 * @return  number - the number of the week within the year that contains this date
		 */iso8601Week:function iso8601Week(date){var time,checkDate=new Date(date.getTime());// Find Thursday of this week starting on Monday
	checkDate.setDate(checkDate.getDate()+4-(checkDate.getDay()||7));time=checkDate.getTime();checkDate.setMonth(0);// Compare with Jan 1
	checkDate.setDate(1);return Math.floor(Math.round((time-checkDate)/86400000)/7)+1;},/* Parse a string value into a date object.
		 * See formatDate below for the possible formats.
		 *
		 * @param  format string - the expected format of the date
		 * @param  value string - the date in the above format
		 * @param  settings Object - attributes include:
		 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
		 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
		 *					dayNames		string[7] - names of the days from Sunday (optional)
		 *					monthNamesShort string[12] - abbreviated names of the months (optional)
		 *					monthNames		string[12] - names of the months (optional)
		 * @return  Date - the extracted date value or null if value is blank
		 */parseDate:function parseDate(format,value,settings){if(format==null||value==null){throw"Invalid arguments";}value=(typeof value==="undefined"?"undefined":_typeof(value))==="object"?value.toString():value+"";if(value===""){return null;}var iFormat,dim,extra,iValue=0,shortYearCutoffTemp=(settings?settings.shortYearCutoff:null)||this._defaults.shortYearCutoff,shortYearCutoff=typeof shortYearCutoffTemp!=="string"?shortYearCutoffTemp:new Date().getFullYear()%100+parseInt(shortYearCutoffTemp,10),dayNamesShort=(settings?settings.dayNamesShort:null)||this._defaults.dayNamesShort,dayNames=(settings?settings.dayNames:null)||this._defaults.dayNames,monthNamesShort=(settings?settings.monthNamesShort:null)||this._defaults.monthNamesShort,monthNames=(settings?settings.monthNames:null)||this._defaults.monthNames,year=-1,month=-1,day=-1,doy=-1,literal=false,date,// Check whether a format character is doubled
	lookAhead=function lookAhead(match){var matches=iFormat+1<format.length&&format.charAt(iFormat+1)===match;if(matches){iFormat++;}return matches;},// Extract a number from the string value
	getNumber=function getNumber(match){var isDoubled=lookAhead(match),size=match==="@"?14:match==="!"?20:match==="y"&&isDoubled?4:match==="o"?3:2,minSize=match==="y"?size:1,digits=new RegExp("^\\d{"+minSize+","+size+"}"),num=value.substring(iValue).match(digits);if(!num){throw"Missing number at position "+iValue;}iValue+=num[0].length;return parseInt(num[0],10);},// Extract a name from the string value and convert to an index
	getName=function getName(match,shortNames,longNames){var index=-1,names=$.map(lookAhead(match)?longNames:shortNames,function(v,k){return[[k,v]];}).sort(function(a,b){return-(a[1].length-b[1].length);});$.each(names,function(i,pair){var name=pair[1];if(value.substr(iValue,name.length).toLowerCase()===name.toLowerCase()){index=pair[0];iValue+=name.length;return false;}});if(index!==-1){return index+1;}else{throw"Unknown name at position "+iValue;}},// Confirm that a literal character matches the string value
	checkLiteral=function checkLiteral(){if(value.charAt(iValue)!==format.charAt(iFormat)){throw"Unexpected literal at position "+iValue;}iValue++;};for(iFormat=0;iFormat<format.length;iFormat++){if(literal){if(format.charAt(iFormat)==="'"&&!lookAhead("'")){literal=false;}else{checkLiteral();}}else{switch(format.charAt(iFormat)){case"d":day=getNumber("d");break;case"D":getName("D",dayNamesShort,dayNames);break;case"o":doy=getNumber("o");break;case"m":month=getNumber("m");break;case"M":month=getName("M",monthNamesShort,monthNames);break;case"y":year=getNumber("y");break;case"@":date=new Date(getNumber("@"));year=date.getFullYear();month=date.getMonth()+1;day=date.getDate();break;case"!":date=new Date((getNumber("!")-this._ticksTo1970)/10000);year=date.getFullYear();month=date.getMonth()+1;day=date.getDate();break;case"'":if(lookAhead("'")){checkLiteral();}else{literal=true;}break;default:checkLiteral();}}}if(iValue<value.length){extra=value.substr(iValue);if(!/^\s+/.test(extra)){throw"Extra/unparsed characters found in date: "+extra;}}if(year===-1){year=new Date().getFullYear();}else if(year<100){year+=new Date().getFullYear()-new Date().getFullYear()%100+(year<=shortYearCutoff?0:-100);}if(doy>-1){month=1;day=doy;do{dim=this._getDaysInMonth(year,month-1);if(day<=dim){break;}month++;day-=dim;}while(true);}date=this._daylightSavingAdjust(new Date(year,month-1,day));if(date.getFullYear()!==year||date.getMonth()+1!==month||date.getDate()!==day){throw"Invalid date";// E.g. 31/02/00
	}return date;},/* Standard date formats. */ATOM:"yy-mm-dd",// RFC 3339 (ISO 8601)
	COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",// RFC 822
	TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",// ISO 8601
	_ticksTo1970:((1970-1)*365+Math.floor(1970/4)-Math.floor(1970/100)+Math.floor(1970/400))*24*60*60*10000000,/* Format a date object into a string value.
		 * The format can be combinations of the following:
		 * d  - day of month (no leading zero)
		 * dd - day of month (two digit)
		 * o  - day of year (no leading zeros)
		 * oo - day of year (three digit)
		 * D  - day name short
		 * DD - day name long
		 * m  - month of year (no leading zero)
		 * mm - month of year (two digit)
		 * M  - month name short
		 * MM - month name long
		 * y  - year (two digit)
		 * yy - year (four digit)
		 * @ - Unix timestamp (ms since 01/01/1970)
		 * ! - Windows ticks (100ns since 01/01/0001)
		 * "..." - literal text
		 * '' - single quote
		 *
		 * @param  format string - the desired format of the date
		 * @param  date Date - the date value to format
		 * @param  settings Object - attributes include:
		 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
		 *					dayNames		string[7] - names of the days from Sunday (optional)
		 *					monthNamesShort string[12] - abbreviated names of the months (optional)
		 *					monthNames		string[12] - names of the months (optional)
		 * @return  string - the date in the above format
		 */formatDate:function formatDate(format,date,settings){if(!date){return"";}var iFormat,dayNamesShort=(settings?settings.dayNamesShort:null)||this._defaults.dayNamesShort,dayNames=(settings?settings.dayNames:null)||this._defaults.dayNames,monthNamesShort=(settings?settings.monthNamesShort:null)||this._defaults.monthNamesShort,monthNames=(settings?settings.monthNames:null)||this._defaults.monthNames,// Check whether a format character is doubled
	lookAhead=function lookAhead(match){var matches=iFormat+1<format.length&&format.charAt(iFormat+1)===match;if(matches){iFormat++;}return matches;},// Format a number, with leading zero if necessary
	formatNumber=function formatNumber(match,value,len){var num=""+value;if(lookAhead(match)){while(num.length<len){num="0"+num;}}return num;},// Format a name, short or long as requested
	formatName=function formatName(match,value,shortNames,longNames){return lookAhead(match)?longNames[value]:shortNames[value];},output="",literal=false;if(date){for(iFormat=0;iFormat<format.length;iFormat++){if(literal){if(format.charAt(iFormat)==="'"&&!lookAhead("'")){literal=false;}else{output+=format.charAt(iFormat);}}else{switch(format.charAt(iFormat)){case"d":output+=formatNumber("d",date.getDate(),2);break;case"D":output+=formatName("D",date.getDay(),dayNamesShort,dayNames);break;case"o":output+=formatNumber("o",Math.round((new Date(date.getFullYear(),date.getMonth(),date.getDate()).getTime()-new Date(date.getFullYear(),0,0).getTime())/86400000),3);break;case"m":output+=formatNumber("m",date.getMonth()+1,2);break;case"M":output+=formatName("M",date.getMonth(),monthNamesShort,monthNames);break;case"y":output+=lookAhead("y")?date.getFullYear():(date.getFullYear()%100<10?"0":"")+date.getFullYear()%100;break;case"@":output+=date.getTime();break;case"!":output+=date.getTime()*10000+this._ticksTo1970;break;case"'":if(lookAhead("'")){output+="'";}else{literal=true;}break;default:output+=format.charAt(iFormat);}}}}return output;},/* Extract all possible characters from the date format. */_possibleChars:function _possibleChars(format){var iFormat,chars="",literal=false,// Check whether a format character is doubled
	lookAhead=function lookAhead(match){var matches=iFormat+1<format.length&&format.charAt(iFormat+1)===match;if(matches){iFormat++;}return matches;};for(iFormat=0;iFormat<format.length;iFormat++){if(literal){if(format.charAt(iFormat)==="'"&&!lookAhead("'")){literal=false;}else{chars+=format.charAt(iFormat);}}else{switch(format.charAt(iFormat)){case"d":case"m":case"y":case"@":chars+="0123456789";break;case"D":case"M":return null;// Accept anything
	case"'":if(lookAhead("'")){chars+="'";}else{literal=true;}break;default:chars+=format.charAt(iFormat);}}}return chars;},/* Get a setting value, defaulting if necessary. */_get:function _get(inst,name){return inst.settings[name]!==undefined?inst.settings[name]:this._defaults[name];},/* Parse existing date and initialise date picker. */_setDateFromField:function _setDateFromField(inst,noDefault){if(inst.input.val()===inst.lastVal){return;}var dateFormat=this._get(inst,"dateFormat"),dates=inst.lastVal=inst.input?inst.input.val():null,defaultDate=this._getDefaultDate(inst),date=defaultDate,settings=this._getFormatConfig(inst);try{date=this.parseDate(dateFormat,dates,settings)||defaultDate;}catch(event){dates=noDefault?"":dates;}inst.selectedDay=date.getDate();inst.drawMonth=inst.selectedMonth=date.getMonth();inst.drawYear=inst.selectedYear=date.getFullYear();inst.currentDay=dates?date.getDate():0;inst.currentMonth=dates?date.getMonth():0;inst.currentYear=dates?date.getFullYear():0;this._adjustInstDate(inst);},/* Retrieve the default date shown on opening. */_getDefaultDate:function _getDefaultDate(inst){return this._restrictMinMax(inst,this._determineDate(inst,this._get(inst,"defaultDate"),new Date()));},/* A date may be specified as an exact value or a relative one. */_determineDate:function _determineDate(inst,date,defaultDate){var offsetNumeric=function offsetNumeric(offset){var date=new Date();date.setDate(date.getDate()+offset);return date;},offsetString=function offsetString(offset){try{return $.datepicker.parseDate($.datepicker._get(inst,"dateFormat"),offset,$.datepicker._getFormatConfig(inst));}catch(e){// Ignore
	}var date=(offset.toLowerCase().match(/^c/)?$.datepicker._getDate(inst):null)||new Date(),year=date.getFullYear(),month=date.getMonth(),day=date.getDate(),pattern=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,matches=pattern.exec(offset);while(matches){switch(matches[2]||"d"){case"d":case"D":day+=parseInt(matches[1],10);break;case"w":case"W":day+=parseInt(matches[1],10)*7;break;case"m":case"M":month+=parseInt(matches[1],10);day=Math.min(day,$.datepicker._getDaysInMonth(year,month));break;case"y":case"Y":year+=parseInt(matches[1],10);day=Math.min(day,$.datepicker._getDaysInMonth(year,month));break;}matches=pattern.exec(offset);}return new Date(year,month,day);},newDate=date==null||date===""?defaultDate:typeof date==="string"?offsetString(date):typeof date==="number"?isNaN(date)?defaultDate:offsetNumeric(date):new Date(date.getTime());newDate=newDate&&newDate.toString()==="Invalid Date"?defaultDate:newDate;if(newDate){newDate.setHours(0);newDate.setMinutes(0);newDate.setSeconds(0);newDate.setMilliseconds(0);}return this._daylightSavingAdjust(newDate);},/* Handle switch to/from daylight saving.
		 * Hours may be non-zero on daylight saving cut-over:
		 * > 12 when midnight changeover, but then cannot generate
		 * midnight datetime, so jump to 1AM, otherwise reset.
		 * @param  date  (Date) the date to check
		 * @return  (Date) the corrected date
		 */_daylightSavingAdjust:function _daylightSavingAdjust(date){if(!date){return null;}date.setHours(date.getHours()>12?date.getHours()+2:0);return date;},/* Set the date(s) directly. */_setDate:function _setDate(inst,date,noChange){var clear=!date,origMonth=inst.selectedMonth,origYear=inst.selectedYear,newDate=this._restrictMinMax(inst,this._determineDate(inst,date,new Date()));inst.selectedDay=inst.currentDay=newDate.getDate();inst.drawMonth=inst.selectedMonth=inst.currentMonth=newDate.getMonth();inst.drawYear=inst.selectedYear=inst.currentYear=newDate.getFullYear();if((origMonth!==inst.selectedMonth||origYear!==inst.selectedYear)&&!noChange){this._notifyChange(inst);}this._adjustInstDate(inst);if(inst.input){inst.input.val(clear?"":this._formatDate(inst));}},/* Retrieve the date(s) directly. */_getDate:function _getDate(inst){var startDate=!inst.currentYear||inst.input&&inst.input.val()===""?null:this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay));return startDate;},/* Attach the onxxx handlers.  These are declared statically so
		 * they work with static code transformers like Caja.
		 */_attachHandlers:function _attachHandlers(inst){var stepMonths=this._get(inst,"stepMonths"),id="#"+inst.id.replace(/\\\\/g,"\\");inst.dpDiv.find("[data-handler]").map(function(){var handler={prev:function prev(){$.datepicker._adjustDate(id,-stepMonths,"M");},next:function next(){$.datepicker._adjustDate(id,+stepMonths,"M");},hide:function hide(){$.datepicker._hideDatepicker();},today:function today(){$.datepicker._gotoToday(id);},selectDay:function selectDay(){$.datepicker._selectDay(id,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this);return false;},selectMonth:function selectMonth(){$.datepicker._selectMonthYear(id,this,"M");return false;},selectYear:function selectYear(){$.datepicker._selectMonthYear(id,this,"Y");return false;}};$(this).on(this.getAttribute("data-event"),handler[this.getAttribute("data-handler")]);});},/* Generate the HTML for the current state of the date picker. */_generateHTML:function _generateHTML(inst){var maxDraw,prevText,prev,nextText,next,currentText,gotoDate,controls,buttonPanel,firstDay,showWeek,dayNames,dayNamesMin,monthNames,monthNamesShort,beforeShowDay,showOtherMonths,selectOtherMonths,defaultDate,html,dow,row,group,col,selectedDate,cornerClass,calender,thead,day,daysInMonth,leadDays,curRows,numRows,printDate,dRow,tbody,daySettings,otherMonth,unselectable,tempDate=new Date(),today=this._daylightSavingAdjust(new Date(tempDate.getFullYear(),tempDate.getMonth(),tempDate.getDate())),// clear time
	isRTL=this._get(inst,"isRTL"),showButtonPanel=this._get(inst,"showButtonPanel"),hideIfNoPrevNext=this._get(inst,"hideIfNoPrevNext"),navigationAsDateFormat=this._get(inst,"navigationAsDateFormat"),numMonths=this._getNumberOfMonths(inst),showCurrentAtPos=this._get(inst,"showCurrentAtPos"),stepMonths=this._get(inst,"stepMonths"),isMultiMonth=numMonths[0]!==1||numMonths[1]!==1,currentDate=this._daylightSavingAdjust(!inst.currentDay?new Date(9999,9,9):new Date(inst.currentYear,inst.currentMonth,inst.currentDay)),minDate=this._getMinMaxDate(inst,"min"),maxDate=this._getMinMaxDate(inst,"max"),drawMonth=inst.drawMonth-showCurrentAtPos,drawYear=inst.drawYear;if(drawMonth<0){drawMonth+=12;drawYear--;}if(maxDate){maxDraw=this._daylightSavingAdjust(new Date(maxDate.getFullYear(),maxDate.getMonth()-numMonths[0]*numMonths[1]+1,maxDate.getDate()));maxDraw=minDate&&maxDraw<minDate?minDate:maxDraw;while(this._daylightSavingAdjust(new Date(drawYear,drawMonth,1))>maxDraw){drawMonth--;if(drawMonth<0){drawMonth=11;drawYear--;}}}inst.drawMonth=drawMonth;inst.drawYear=drawYear;prevText=this._get(inst,"prevText");prevText=!navigationAsDateFormat?prevText:this.formatDate(prevText,this._daylightSavingAdjust(new Date(drawYear,drawMonth-stepMonths,1)),this._getFormatConfig(inst));prev=this._canAdjustMonth(inst,-1,drawYear,drawMonth)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'"+" title='"+prevText+"'><span class='ui-icon ui-icon-circle-triangle-"+(isRTL?"e":"w")+"'>"+prevText+"</span></a>":hideIfNoPrevNext?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+prevText+"'><span class='ui-icon ui-icon-circle-triangle-"+(isRTL?"e":"w")+"'>"+prevText+"</span></a>";nextText=this._get(inst,"nextText");nextText=!navigationAsDateFormat?nextText:this.formatDate(nextText,this._daylightSavingAdjust(new Date(drawYear,drawMonth+stepMonths,1)),this._getFormatConfig(inst));next=this._canAdjustMonth(inst,+1,drawYear,drawMonth)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'"+" title='"+nextText+"'><span class='ui-icon ui-icon-circle-triangle-"+(isRTL?"w":"e")+"'>"+nextText+"</span></a>":hideIfNoPrevNext?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+nextText+"'><span class='ui-icon ui-icon-circle-triangle-"+(isRTL?"w":"e")+"'>"+nextText+"</span></a>";currentText=this._get(inst,"currentText");gotoDate=this._get(inst,"gotoCurrent")&&inst.currentDay?currentDate:today;currentText=!navigationAsDateFormat?currentText:this.formatDate(currentText,gotoDate,this._getFormatConfig(inst));controls=!inst.inline?"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+this._get(inst,"closeText")+"</button>":"";buttonPanel=showButtonPanel?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(isRTL?controls:"")+(this._isInRange(inst,gotoDate)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'"+">"+currentText+"</button>":"")+(isRTL?"":controls)+"</div>":"";firstDay=parseInt(this._get(inst,"firstDay"),10);firstDay=isNaN(firstDay)?0:firstDay;showWeek=this._get(inst,"showWeek");dayNames=this._get(inst,"dayNames");dayNamesMin=this._get(inst,"dayNamesMin");monthNames=this._get(inst,"monthNames");monthNamesShort=this._get(inst,"monthNamesShort");beforeShowDay=this._get(inst,"beforeShowDay");showOtherMonths=this._get(inst,"showOtherMonths");selectOtherMonths=this._get(inst,"selectOtherMonths");defaultDate=this._getDefaultDate(inst);html="";for(row=0;row<numMonths[0];row++){group="";this.maxRows=4;for(col=0;col<numMonths[1];col++){selectedDate=this._daylightSavingAdjust(new Date(drawYear,drawMonth,inst.selectedDay));cornerClass=" ui-corner-all";calender="";if(isMultiMonth){calender+="<div class='ui-datepicker-group";if(numMonths[1]>1){switch(col){case 0:calender+=" ui-datepicker-group-first";cornerClass=" ui-corner-"+(isRTL?"right":"left");break;case numMonths[1]-1:calender+=" ui-datepicker-group-last";cornerClass=" ui-corner-"+(isRTL?"left":"right");break;default:calender+=" ui-datepicker-group-middle";cornerClass="";break;}}calender+="'>";}calender+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+cornerClass+"'>"+(/all|left/.test(cornerClass)&&row===0?isRTL?next:prev:"")+(/all|right/.test(cornerClass)&&row===0?isRTL?prev:next:"")+this._generateMonthYearHeader(inst,drawMonth,drawYear,minDate,maxDate,row>0||col>0,monthNames,monthNamesShort)+// draw month headers
	"</div><table class='ui-datepicker-calendar'><thead>"+"<tr>";thead=showWeek?"<th class='ui-datepicker-week-col'>"+this._get(inst,"weekHeader")+"</th>":"";for(dow=0;dow<7;dow++){// days of the week
	day=(dow+firstDay)%7;thead+="<th scope='col'"+((dow+firstDay+6)%7>=5?" class='ui-datepicker-week-end'":"")+">"+"<span title='"+dayNames[day]+"'>"+dayNamesMin[day]+"</span></th>";}calender+=thead+"</tr></thead><tbody>";daysInMonth=this._getDaysInMonth(drawYear,drawMonth);if(drawYear===inst.selectedYear&&drawMonth===inst.selectedMonth){inst.selectedDay=Math.min(inst.selectedDay,daysInMonth);}leadDays=(this._getFirstDayOfMonth(drawYear,drawMonth)-firstDay+7)%7;curRows=Math.ceil((leadDays+daysInMonth)/7);// calculate the number of rows to generate
	numRows=isMultiMonth?this.maxRows>curRows?this.maxRows:curRows:curRows;//If multiple months, use the higher number of rows (see #7043)
	this.maxRows=numRows;printDate=this._daylightSavingAdjust(new Date(drawYear,drawMonth,1-leadDays));for(dRow=0;dRow<numRows;dRow++){// create date picker rows
	calender+="<tr>";tbody=!showWeek?"":"<td class='ui-datepicker-week-col'>"+this._get(inst,"calculateWeek")(printDate)+"</td>";for(dow=0;dow<7;dow++){// create date picker days
	daySettings=beforeShowDay?beforeShowDay.apply(inst.input?inst.input[0]:null,[printDate]):[true,""];otherMonth=printDate.getMonth()!==drawMonth;unselectable=otherMonth&&!selectOtherMonths||!daySettings[0]||minDate&&printDate<minDate||maxDate&&printDate>maxDate;tbody+="<td class='"+((dow+firstDay+6)%7>=5?" ui-datepicker-week-end":"")+(// highlight weekends
	otherMonth?" ui-datepicker-other-month":"")+(// highlight days from other months
	printDate.getTime()===selectedDate.getTime()&&drawMonth===inst.selectedMonth&&inst._keyEvent||// user pressed key
	defaultDate.getTime()===printDate.getTime()&&defaultDate.getTime()===selectedDate.getTime()?// or defaultDate is current printedDate and defaultDate is selectedDate
	" "+this._dayOverClass:"")+(// highlight selected day
	unselectable?" "+this._unselectableClass+" ui-state-disabled":"")+(// highlight unselectable days
	otherMonth&&!showOtherMonths?"":" "+daySettings[1]+(// highlight custom dates
	printDate.getTime()===currentDate.getTime()?" "+this._currentClass:"")+(// highlight selected day
	printDate.getTime()===today.getTime()?" ui-datepicker-today":""))+"'"+(// highlight today (if different)
	(!otherMonth||showOtherMonths)&&daySettings[2]?" title='"+daySettings[2].replace(/'/g,"&#39;")+"'":"")+(// cell title
	unselectable?"":" data-handler='selectDay' data-event='click' data-month='"+printDate.getMonth()+"' data-year='"+printDate.getFullYear()+"'")+">"+(// actions
	otherMonth&&!showOtherMonths?"&#xa0;":// display for other months
	unselectable?"<span class='ui-state-default'>"+printDate.getDate()+"</span>":"<a class='ui-state-default"+(printDate.getTime()===today.getTime()?" ui-state-highlight":"")+(printDate.getTime()===currentDate.getTime()?" ui-state-active":"")+(// highlight selected day
	otherMonth?" ui-priority-secondary":"")+// distinguish dates from other months
	"' href='#'>"+printDate.getDate()+"</a>")+"</td>";// display selectable date
	printDate.setDate(printDate.getDate()+1);printDate=this._daylightSavingAdjust(printDate);}calender+=tbody+"</tr>";}drawMonth++;if(drawMonth>11){drawMonth=0;drawYear++;}calender+="</tbody></table>"+(isMultiMonth?"</div>"+(numMonths[0]>0&&col===numMonths[1]-1?"<div class='ui-datepicker-row-break'></div>":""):"");group+=calender;}html+=group;}html+=buttonPanel;inst._keyEvent=false;return html;},/* Generate the month and year header. */_generateMonthYearHeader:function _generateMonthYearHeader(inst,drawMonth,drawYear,minDate,maxDate,secondary,monthNames,monthNamesShort){var inMinYear,inMaxYear,month,years,thisYear,determineYear,year,endYear,changeMonth=this._get(inst,"changeMonth"),changeYear=this._get(inst,"changeYear"),showMonthAfterYear=this._get(inst,"showMonthAfterYear"),html="<div class='ui-datepicker-title'>",monthHtml="";// Month selection
	if(secondary||!changeMonth){monthHtml+="<span class='ui-datepicker-month'>"+monthNames[drawMonth]+"</span>";}else{inMinYear=minDate&&minDate.getFullYear()===drawYear;inMaxYear=maxDate&&maxDate.getFullYear()===drawYear;monthHtml+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";for(month=0;month<12;month++){if((!inMinYear||month>=minDate.getMonth())&&(!inMaxYear||month<=maxDate.getMonth())){monthHtml+="<option value='"+month+"'"+(month===drawMonth?" selected='selected'":"")+">"+monthNamesShort[month]+"</option>";}}monthHtml+="</select>";}if(!showMonthAfterYear){html+=monthHtml+(secondary||!(changeMonth&&changeYear)?"&#xa0;":"");}// Year selection
	if(!inst.yearshtml){inst.yearshtml="";if(secondary||!changeYear){html+="<span class='ui-datepicker-year'>"+drawYear+"</span>";}else{// determine range of years to display
	years=this._get(inst,"yearRange").split(":");thisYear=new Date().getFullYear();determineYear=function determineYear(value){var year=value.match(/c[+\-].*/)?drawYear+parseInt(value.substring(1),10):value.match(/[+\-].*/)?thisYear+parseInt(value,10):parseInt(value,10);return isNaN(year)?thisYear:year;};year=determineYear(years[0]);endYear=Math.max(year,determineYear(years[1]||""));year=minDate?Math.max(year,minDate.getFullYear()):year;endYear=maxDate?Math.min(endYear,maxDate.getFullYear()):endYear;inst.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";for(;year<=endYear;year++){inst.yearshtml+="<option value='"+year+"'"+(year===drawYear?" selected='selected'":"")+">"+year+"</option>";}inst.yearshtml+="</select>";html+=inst.yearshtml;inst.yearshtml=null;}}html+=this._get(inst,"yearSuffix");if(showMonthAfterYear){html+=(secondary||!(changeMonth&&changeYear)?"&#xa0;":"")+monthHtml;}html+="</div>";// Close datepicker_header
	return html;},/* Adjust one of the date sub-fields. */_adjustInstDate:function _adjustInstDate(inst,offset,period){var year=inst.selectedYear+(period==="Y"?offset:0),month=inst.selectedMonth+(period==="M"?offset:0),day=Math.min(inst.selectedDay,this._getDaysInMonth(year,month))+(period==="D"?offset:0),date=this._restrictMinMax(inst,this._daylightSavingAdjust(new Date(year,month,day)));inst.selectedDay=date.getDate();inst.drawMonth=inst.selectedMonth=date.getMonth();inst.drawYear=inst.selectedYear=date.getFullYear();if(period==="M"||period==="Y"){this._notifyChange(inst);}},/* Ensure a date is within any min/max bounds. */_restrictMinMax:function _restrictMinMax(inst,date){var minDate=this._getMinMaxDate(inst,"min"),maxDate=this._getMinMaxDate(inst,"max"),newDate=minDate&&date<minDate?minDate:date;return maxDate&&newDate>maxDate?maxDate:newDate;},/* Notify change of month/year. */_notifyChange:function _notifyChange(inst){var onChange=this._get(inst,"onChangeMonthYear");if(onChange){onChange.apply(inst.input?inst.input[0]:null,[inst.selectedYear,inst.selectedMonth+1,inst]);}},/* Determine the number of months to show. */_getNumberOfMonths:function _getNumberOfMonths(inst){var numMonths=this._get(inst,"numberOfMonths");return numMonths==null?[1,1]:typeof numMonths==="number"?[1,numMonths]:numMonths;},/* Determine the current maximum date - ensure no time components are set. */_getMinMaxDate:function _getMinMaxDate(inst,minMax){return this._determineDate(inst,this._get(inst,minMax+"Date"),null);},/* Find the number of days in a given month. */_getDaysInMonth:function _getDaysInMonth(year,month){return 32-this._daylightSavingAdjust(new Date(year,month,32)).getDate();},/* Find the day of the week of the first of a month. */_getFirstDayOfMonth:function _getFirstDayOfMonth(year,month){return new Date(year,month,1).getDay();},/* Determines if we should allow a "next/prev" month display change. */_canAdjustMonth:function _canAdjustMonth(inst,offset,curYear,curMonth){var numMonths=this._getNumberOfMonths(inst),date=this._daylightSavingAdjust(new Date(curYear,curMonth+(offset<0?offset:numMonths[0]*numMonths[1]),1));if(offset<0){date.setDate(this._getDaysInMonth(date.getFullYear(),date.getMonth()));}return this._isInRange(inst,date);},/* Is the given date in the accepted range? */_isInRange:function _isInRange(inst,date){var yearSplit,currentYear,minDate=this._getMinMaxDate(inst,"min"),maxDate=this._getMinMaxDate(inst,"max"),minYear=null,maxYear=null,years=this._get(inst,"yearRange");if(years){yearSplit=years.split(":");currentYear=new Date().getFullYear();minYear=parseInt(yearSplit[0],10);maxYear=parseInt(yearSplit[1],10);if(yearSplit[0].match(/[+\-].*/)){minYear+=currentYear;}if(yearSplit[1].match(/[+\-].*/)){maxYear+=currentYear;}}return(!minDate||date.getTime()>=minDate.getTime())&&(!maxDate||date.getTime()<=maxDate.getTime())&&(!minYear||date.getFullYear()>=minYear)&&(!maxYear||date.getFullYear()<=maxYear);},/* Provide the configuration settings for formatting/parsing. */_getFormatConfig:function _getFormatConfig(inst){var shortYearCutoff=this._get(inst,"shortYearCutoff");shortYearCutoff=typeof shortYearCutoff!=="string"?shortYearCutoff:new Date().getFullYear()%100+parseInt(shortYearCutoff,10);return{shortYearCutoff:shortYearCutoff,dayNamesShort:this._get(inst,"dayNamesShort"),dayNames:this._get(inst,"dayNames"),monthNamesShort:this._get(inst,"monthNamesShort"),monthNames:this._get(inst,"monthNames")};},/* Format the given date for display. */_formatDate:function _formatDate(inst,day,month,year){if(!day){inst.currentDay=inst.selectedDay;inst.currentMonth=inst.selectedMonth;inst.currentYear=inst.selectedYear;}var date=day?(typeof day==="undefined"?"undefined":_typeof(day))==="object"?day:this._daylightSavingAdjust(new Date(year,month,day)):this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay));return this.formatDate(this._get(inst,"dateFormat"),date,this._getFormatConfig(inst));}});/*
	 * Bind hover events for datepicker elements.
	 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
	 * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
	 */function datepicker_bindHover(dpDiv){var selector="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return dpDiv.on("mouseout",selector,function(){$(this).removeClass("ui-state-hover");if(this.className.indexOf("ui-datepicker-prev")!==-1){$(this).removeClass("ui-datepicker-prev-hover");}if(this.className.indexOf("ui-datepicker-next")!==-1){$(this).removeClass("ui-datepicker-next-hover");}}).on("mouseover",selector,datepicker_handleMouseover);}function datepicker_handleMouseover(){if(!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline?datepicker_instActive.dpDiv.parent()[0]:datepicker_instActive.input[0])){$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");$(this).addClass("ui-state-hover");if(this.className.indexOf("ui-datepicker-prev")!==-1){$(this).addClass("ui-datepicker-prev-hover");}if(this.className.indexOf("ui-datepicker-next")!==-1){$(this).addClass("ui-datepicker-next-hover");}}}/* jQuery extend now ignores nulls! */function datepicker_extendRemove(target,props){$.extend(target,props);for(var name in props){if(props[name]==null){target[name]=props[name];}}return target;}/* Invoke the datepicker functionality.
	   @param  options  string - a command, optionally followed by additional parameters or
						Object - settings for attaching new datepicker functionality
	   @return  jQuery object */$.fn.datepicker=function(options){/* Verify an empty collection wasn't passed - Fixes #6976 */if(!this.length){return this;}/* Initialise the date picker. */if(!$.datepicker.initialized){$(document).on("mousedown",$.datepicker._checkExternalClick);$.datepicker.initialized=true;}/* Append datepicker main container to body if not exist. */if($("#"+$.datepicker._mainDivId).length===0){$("body").append($.datepicker.dpDiv);}var otherArgs=Array.prototype.slice.call(arguments,1);if(typeof options==="string"&&(options==="isDisabled"||options==="getDate"||options==="widget")){return $.datepicker["_"+options+"Datepicker"].apply($.datepicker,[this[0]].concat(otherArgs));}if(options==="option"&&arguments.length===2&&typeof arguments[1]==="string"){return $.datepicker["_"+options+"Datepicker"].apply($.datepicker,[this[0]].concat(otherArgs));}return this.each(function(){typeof options==="string"?$.datepicker["_"+options+"Datepicker"].apply($.datepicker,[this].concat(otherArgs)):$.datepicker._attachDatepicker(this,options);});};$.datepicker=new Datepicker();// singleton instance
	$.datepicker.initialized=false;$.datepicker.uuid=new Date().getTime();$.datepicker.version="1.12.1";var widgetsDatepicker=$.datepicker;// This file is deprecated
	var ie=$.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());/*!
	 * jQuery UI Mouse 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Mouse
	//>>group: Widgets
	//>>description: Abstracts mouse-based interactions to assist in creating certain widgets.
	//>>docs: http://api.jqueryui.com/mouse/
	var mouseHandled=false;$(document).on("mouseup",function(){mouseHandled=false;});var widgetsMouse=$.widget("ui.mouse",{version:"1.12.1",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function _mouseInit(){var that=this;this.element.on("mousedown."+this.widgetName,function(event){return that._mouseDown(event);}).on("click."+this.widgetName,function(event){if(true===$.data(event.target,that.widgetName+".preventClickEvent")){$.removeData(event.target,that.widgetName+".preventClickEvent");event.stopImmediatePropagation();return false;}});this.started=false;},// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy:function _mouseDestroy(){this.element.off("."+this.widgetName);if(this._mouseMoveDelegate){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate);}},_mouseDown:function _mouseDown(event){// don't let more than one widget handle mouseStart
	if(mouseHandled){return;}this._mouseMoved=false;// We may have missed mouseup (out of window)
	this._mouseStarted&&this._mouseUp(event);this._mouseDownEvent=event;var that=this,btnIsLeft=event.which===1,// event.target.nodeName works around a bug in IE 8 with
	// disabled inputs (#7620)
	elIsCancel=typeof this.options.cancel==="string"&&event.target.nodeName?$(event.target).closest(this.options.cancel).length:false;if(!btnIsLeft||elIsCancel||!this._mouseCapture(event)){return true;}this.mouseDelayMet=!this.options.delay;if(!this.mouseDelayMet){this._mouseDelayTimer=setTimeout(function(){that.mouseDelayMet=true;},this.options.delay);}if(this._mouseDistanceMet(event)&&this._mouseDelayMet(event)){this._mouseStarted=this._mouseStart(event)!==false;if(!this._mouseStarted){event.preventDefault();return true;}}// Click event may never have fired (Gecko & Opera)
	if(true===$.data(event.target,this.widgetName+".preventClickEvent")){$.removeData(event.target,this.widgetName+".preventClickEvent");}// These delegates are required to keep context
	this._mouseMoveDelegate=function(event){return that._mouseMove(event);};this._mouseUpDelegate=function(event){return that._mouseUp(event);};this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate);event.preventDefault();mouseHandled=true;return true;},_mouseMove:function _mouseMove(event){// Only check for mouseups outside the document if you've moved inside the document
	// at least once. This prevents the firing of mouseup in the case of IE<9, which will
	// fire a mousemove event if content is placed under the cursor. See #7778
	// Support: IE <9
	if(this._mouseMoved){// IE mouseup check - mouseup happened when mouse was out of window
	if($.ui.ie&&(!document.documentMode||document.documentMode<9)&&!event.button){return this._mouseUp(event);// Iframe mouseup check - mouseup occurred in another document
	}else if(!event.which){// Support: Safari <=8 - 9
	// Safari sets which to 0 if you press any of the following keys
	// during a drag (#14461)
	if(event.originalEvent.altKey||event.originalEvent.ctrlKey||event.originalEvent.metaKey||event.originalEvent.shiftKey){this.ignoreMissingWhich=true;}else if(!this.ignoreMissingWhich){return this._mouseUp(event);}}}if(event.which||event.button){this._mouseMoved=true;}if(this._mouseStarted){this._mouseDrag(event);return event.preventDefault();}if(this._mouseDistanceMet(event)&&this._mouseDelayMet(event)){this._mouseStarted=this._mouseStart(this._mouseDownEvent,event)!==false;this._mouseStarted?this._mouseDrag(event):this._mouseUp(event);}return!this._mouseStarted;},_mouseUp:function _mouseUp(event){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate);if(this._mouseStarted){this._mouseStarted=false;if(event.target===this._mouseDownEvent.target){$.data(event.target,this.widgetName+".preventClickEvent",true);}this._mouseStop(event);}if(this._mouseDelayTimer){clearTimeout(this._mouseDelayTimer);delete this._mouseDelayTimer;}this.ignoreMissingWhich=false;mouseHandled=false;event.preventDefault();},_mouseDistanceMet:function _mouseDistanceMet(event){return Math.max(Math.abs(this._mouseDownEvent.pageX-event.pageX),Math.abs(this._mouseDownEvent.pageY-event.pageY))>=this.options.distance;},_mouseDelayMet:function _mouseDelayMet()/* event */{return this.mouseDelayMet;},// These are placeholder methods, to be overriden by extending plugin
	_mouseStart:function _mouseStart()/* event */{},_mouseDrag:function _mouseDrag()/* event */{},_mouseStop:function _mouseStop()/* event */{},_mouseCapture:function _mouseCapture()/* event */{return true;}});// $.ui.plugin is deprecated. Use $.widget() extensions instead.
	var plugin=$.ui.plugin={add:function add(module,option,set){var i,proto=$.ui[module].prototype;for(i in set){proto.plugins[i]=proto.plugins[i]||[];proto.plugins[i].push([option,set[i]]);}},call:function call(instance,name,args,allowDisconnected){var i,set=instance.plugins[name];if(!set){return;}if(!allowDisconnected&&(!instance.element[0].parentNode||instance.element[0].parentNode.nodeType===11)){return;}for(i=0;i<set.length;i++){if(instance.options[set[i][0]]){set[i][1].apply(instance.element,args);}}}};var safeBlur=$.ui.safeBlur=function(element){// Support: IE9 - 10 only
	// If the <body> is blurred, IE will switch windows, see #9420
	if(element&&element.nodeName.toLowerCase()!=="body"){$(element).trigger("blur");}};/*!
	 * jQuery UI Draggable 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Draggable
	//>>group: Interactions
	//>>description: Enables dragging functionality for any element.
	//>>docs: http://api.jqueryui.com/draggable/
	//>>demos: http://jqueryui.com/draggable/
	//>>css.structure: ../../themes/base/draggable.css
	$.widget("ui.draggable",$.ui.mouse,{version:"1.12.1",widgetEventPrefix:"drag",options:{addClasses:true,appendTo:"parent",axis:false,connectToSortable:false,containment:false,cursor:"auto",cursorAt:false,grid:false,handle:false,helper:"original",iframeFix:false,opacity:false,refreshPositions:false,revert:false,revertDuration:500,scope:"default",scroll:true,scrollSensitivity:20,scrollSpeed:20,snap:false,snapMode:"both",snapTolerance:20,stack:false,zIndex:false,// Callbacks
	drag:null,start:null,stop:null},_create:function _create(){if(this.options.helper==="original"){this._setPositionRelative();}if(this.options.addClasses){this._addClass("ui-draggable");}this._setHandleClassName();this._mouseInit();},_setOption:function _setOption(key,value){this._super(key,value);if(key==="handle"){this._removeHandleClassName();this._setHandleClassName();}},_destroy:function _destroy(){if((this.helper||this.element).is(".ui-draggable-dragging")){this.destroyOnClear=true;return;}this._removeHandleClassName();this._mouseDestroy();},_mouseCapture:function _mouseCapture(event){var o=this.options;// Among others, prevent a drag on a resizable-handle
	if(this.helper||o.disabled||$(event.target).closest(".ui-resizable-handle").length>0){return false;}//Quit if we're not on a valid handle
	this.handle=this._getHandle(event);if(!this.handle){return false;}this._blurActiveElement(event);this._blockFrames(o.iframeFix===true?"iframe":o.iframeFix);return true;},_blockFrames:function _blockFrames(selector){this.iframeBlocks=this.document.find(selector).map(function(){var iframe=$(this);return $("<div>").css("position","absolute").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0];});},_unblockFrames:function _unblockFrames(){if(this.iframeBlocks){this.iframeBlocks.remove();delete this.iframeBlocks;}},_blurActiveElement:function _blurActiveElement(event){var activeElement=$.ui.safeActiveElement(this.document[0]),target=$(event.target);// Don't blur if the event occurred on an element that is within
	// the currently focused element
	// See #10527, #12472
	if(target.closest(activeElement).length){return;}// Blur any element that currently has focus, see #4261
	$.ui.safeBlur(activeElement);},_mouseStart:function _mouseStart(event){var o=this.options;//Create and append the visible helper
	this.helper=this._createHelper(event);this._addClass(this.helper,"ui-draggable-dragging");//Cache the helper size
	this._cacheHelperProportions();//If ddmanager is used for droppables, set the global draggable
	if($.ui.ddmanager){$.ui.ddmanager.current=this;}/*
			 * - Position generation -
			 * This block generates everything position related - it's the core of draggables.
			 *///Cache the margins of the original element
	this._cacheMargins();//Store the helper's css position
	this.cssPosition=this.helper.css("position");this.scrollParent=this.helper.scrollParent(true);this.offsetParent=this.helper.offsetParent();this.hasFixedAncestor=this.helper.parents().filter(function(){return $(this).css("position")==="fixed";}).length>0;//The element's absolute position on the page minus margins
	this.positionAbs=this.element.offset();this._refreshOffsets(event);//Generate the original position
	this.originalPosition=this.position=this._generatePosition(event,false);this.originalPageX=event.pageX;this.originalPageY=event.pageY;//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
	o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt);//Set a containment if given in the options
	this._setContainment();//Trigger event + callbacks
	if(this._trigger("start",event)===false){this._clear();return false;}//Recache the helper size
	this._cacheHelperProportions();//Prepare the droppable offsets
	if($.ui.ddmanager&&!o.dropBehaviour){$.ui.ddmanager.prepareOffsets(this,event);}// Execute the drag once - this causes the helper not to be visible before getting its
	// correct position
	this._mouseDrag(event,true);// If the ddmanager is used for droppables, inform the manager that dragging has started
	// (see #5003)
	if($.ui.ddmanager){$.ui.ddmanager.dragStart(this,event);}return true;},_refreshOffsets:function _refreshOffsets(event){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:false,parent:this._getParentOffset(),relative:this._getRelativeOffset()};this.offset.click={left:event.pageX-this.offset.left,top:event.pageY-this.offset.top};},_mouseDrag:function _mouseDrag(event,noPropagation){// reset any necessary cached properties (see #5009)
	if(this.hasFixedAncestor){this.offset.parent=this._getParentOffset();}//Compute the helpers position
	this.position=this._generatePosition(event,true);this.positionAbs=this._convertPositionTo("absolute");//Call plugins and callbacks and use the resulting position if something is returned
	if(!noPropagation){var ui=this._uiHash();if(this._trigger("drag",event,ui)===false){this._mouseUp(new $.Event("mouseup",event));return false;}this.position=ui.position;}this.helper[0].style.left=this.position.left+"px";this.helper[0].style.top=this.position.top+"px";if($.ui.ddmanager){$.ui.ddmanager.drag(this,event);}return false;},_mouseStop:function _mouseStop(event){//If we are using droppables, inform the manager about the drop
	var that=this,dropped=false;if($.ui.ddmanager&&!this.options.dropBehaviour){dropped=$.ui.ddmanager.drop(this,event);}//if a drop comes from outside (a sortable)
	if(this.dropped){dropped=this.dropped;this.dropped=false;}if(this.options.revert==="invalid"&&!dropped||this.options.revert==="valid"&&dropped||this.options.revert===true||$.isFunction(this.options.revert)&&this.options.revert.call(this.element,dropped)){$(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){if(that._trigger("stop",event)!==false){that._clear();}});}else{if(this._trigger("stop",event)!==false){this._clear();}}return false;},_mouseUp:function _mouseUp(event){this._unblockFrames();// If the ddmanager is used for droppables, inform the manager that dragging has stopped
	// (see #5003)
	if($.ui.ddmanager){$.ui.ddmanager.dragStop(this,event);}// Only need to focus if the event occurred on the draggable itself, see #10527
	if(this.handleElement.is(event.target)){// The interaction is over; whether or not the click resulted in a drag,
	// focus the element
	this.element.trigger("focus");}return $.ui.mouse.prototype._mouseUp.call(this,event);},cancel:function cancel(){if(this.helper.is(".ui-draggable-dragging")){this._mouseUp(new $.Event("mouseup",{target:this.element[0]}));}else{this._clear();}return this;},_getHandle:function _getHandle(event){return this.options.handle?!!$(event.target).closest(this.element.find(this.options.handle)).length:true;},_setHandleClassName:function _setHandleClassName(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element;this._addClass(this.handleElement,"ui-draggable-handle");},_removeHandleClassName:function _removeHandleClassName(){this._removeClass(this.handleElement,"ui-draggable-handle");},_createHelper:function _createHelper(event){var o=this.options,helperIsFunction=$.isFunction(o.helper),helper=helperIsFunction?$(o.helper.apply(this.element[0],[event])):o.helper==="clone"?this.element.clone().removeAttr("id"):this.element;if(!helper.parents("body").length){helper.appendTo(o.appendTo==="parent"?this.element[0].parentNode:o.appendTo);}// Http://bugs.jqueryui.com/ticket/9446
	// a helper function can return the original element
	// which wouldn't have been set to relative in _create
	if(helperIsFunction&&helper[0]===this.element[0]){this._setPositionRelative();}if(helper[0]!==this.element[0]&&!/(fixed|absolute)/.test(helper.css("position"))){helper.css("position","absolute");}return helper;},_setPositionRelative:function _setPositionRelative(){if(!/^(?:r|a|f)/.test(this.element.css("position"))){this.element[0].style.position="relative";}},_adjustOffsetFromHelper:function _adjustOffsetFromHelper(obj){if(typeof obj==="string"){obj=obj.split(" ");}if($.isArray(obj)){obj={left:+obj[0],top:+obj[1]||0};}if("left"in obj){this.offset.click.left=obj.left+this.margins.left;}if("right"in obj){this.offset.click.left=this.helperProportions.width-obj.right+this.margins.left;}if("top"in obj){this.offset.click.top=obj.top+this.margins.top;}if("bottom"in obj){this.offset.click.top=this.helperProportions.height-obj.bottom+this.margins.top;}},_isRootNode:function _isRootNode(element){return /(html|body)/i.test(element.tagName)||element===this.document[0];},_getParentOffset:function _getParentOffset(){//Get the offsetParent and cache its position
	var po=this.offsetParent.offset(),document=this.document[0];// This is a special case where we need to modify a offset calculated on start, since the
	// following happened:
	// 1. The position of the helper is absolute, so it's position is calculated based on the
	// next positioned parent
	// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
	// the document, which means that the scroll is included in the initial calculation of the
	// offset of the parent, and never recalculated upon drag
	if(this.cssPosition==="absolute"&&this.scrollParent[0]!==document&&$.contains(this.scrollParent[0],this.offsetParent[0])){po.left+=this.scrollParent.scrollLeft();po.top+=this.scrollParent.scrollTop();}if(this._isRootNode(this.offsetParent[0])){po={top:0,left:0};}return{top:po.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:po.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)};},_getRelativeOffset:function _getRelativeOffset(){if(this.cssPosition!=="relative"){return{top:0,left:0};}var p=this.element.position(),scrollIsRootNode=this._isRootNode(this.scrollParent[0]);return{top:p.top-(parseInt(this.helper.css("top"),10)||0)+(!scrollIsRootNode?this.scrollParent.scrollTop():0),left:p.left-(parseInt(this.helper.css("left"),10)||0)+(!scrollIsRootNode?this.scrollParent.scrollLeft():0)};},_cacheMargins:function _cacheMargins(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0};},_cacheHelperProportions:function _cacheHelperProportions(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()};},_setContainment:function _setContainment(){var isUserScrollable,c,ce,o=this.options,document=this.document[0];this.relativeContainer=null;if(!o.containment){this.containment=null;return;}if(o.containment==="window"){this.containment=[$(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,$(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,$(window).scrollLeft()+$(window).width()-this.helperProportions.width-this.margins.left,$(window).scrollTop()+($(window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];return;}if(o.containment==="document"){this.containment=[0,0,$(document).width()-this.helperProportions.width-this.margins.left,($(document).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];return;}if(o.containment.constructor===Array){this.containment=o.containment;return;}if(o.containment==="parent"){o.containment=this.helper[0].parentNode;}c=$(o.containment);ce=c[0];if(!ce){return;}isUserScrollable=/(scroll|auto)/.test(c.css("overflow"));this.containment=[(parseInt(c.css("borderLeftWidth"),10)||0)+(parseInt(c.css("paddingLeft"),10)||0),(parseInt(c.css("borderTopWidth"),10)||0)+(parseInt(c.css("paddingTop"),10)||0),(isUserScrollable?Math.max(ce.scrollWidth,ce.offsetWidth):ce.offsetWidth)-(parseInt(c.css("borderRightWidth"),10)||0)-(parseInt(c.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(isUserScrollable?Math.max(ce.scrollHeight,ce.offsetHeight):ce.offsetHeight)-(parseInt(c.css("borderBottomWidth"),10)||0)-(parseInt(c.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom];this.relativeContainer=c;},_convertPositionTo:function _convertPositionTo(d,pos){if(!pos){pos=this.position;}var mod=d==="absolute"?1:-1,scrollIsRootNode=this._isRootNode(this.scrollParent[0]);return{top:// The absolute mouse position
	pos.top+// Only for relative positioned nodes: Relative offset from element to offset parent
	this.offset.relative.top*mod+// The offsetParent's offset without borders (offset + border)
	this.offset.parent.top*mod-(this.cssPosition==="fixed"?-this.offset.scroll.top:scrollIsRootNode?0:this.offset.scroll.top)*mod,left:// The absolute mouse position
	pos.left+// Only for relative positioned nodes: Relative offset from element to offset parent
	this.offset.relative.left*mod+// The offsetParent's offset without borders (offset + border)
	this.offset.parent.left*mod-(this.cssPosition==="fixed"?-this.offset.scroll.left:scrollIsRootNode?0:this.offset.scroll.left)*mod};},_generatePosition:function _generatePosition(event,constrainPosition){var containment,co,top,left,o=this.options,scrollIsRootNode=this._isRootNode(this.scrollParent[0]),pageX=event.pageX,pageY=event.pageY;// Cache the scroll
	if(!scrollIsRootNode||!this.offset.scroll){this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()};}/*
			 * - Position constraining -
			 * Constrain the position to a mix of grid, containment.
			 */// If we are not dragging yet, we won't check for options
	if(constrainPosition){if(this.containment){if(this.relativeContainer){co=this.relativeContainer.offset();containment=[this.containment[0]+co.left,this.containment[1]+co.top,this.containment[2]+co.left,this.containment[3]+co.top];}else{containment=this.containment;}if(event.pageX-this.offset.click.left<containment[0]){pageX=containment[0]+this.offset.click.left;}if(event.pageY-this.offset.click.top<containment[1]){pageY=containment[1]+this.offset.click.top;}if(event.pageX-this.offset.click.left>containment[2]){pageX=containment[2]+this.offset.click.left;}if(event.pageY-this.offset.click.top>containment[3]){pageY=containment[3]+this.offset.click.top;}}if(o.grid){//Check for grid elements set to 0 to prevent divide by 0 error causing invalid
	// argument errors in IE (see ticket #6950)
	top=o.grid[1]?this.originalPageY+Math.round((pageY-this.originalPageY)/o.grid[1])*o.grid[1]:this.originalPageY;pageY=containment?top-this.offset.click.top>=containment[1]||top-this.offset.click.top>containment[3]?top:top-this.offset.click.top>=containment[1]?top-o.grid[1]:top+o.grid[1]:top;left=o.grid[0]?this.originalPageX+Math.round((pageX-this.originalPageX)/o.grid[0])*o.grid[0]:this.originalPageX;pageX=containment?left-this.offset.click.left>=containment[0]||left-this.offset.click.left>containment[2]?left:left-this.offset.click.left>=containment[0]?left-o.grid[0]:left+o.grid[0]:left;}if(o.axis==="y"){pageX=this.originalPageX;}if(o.axis==="x"){pageY=this.originalPageY;}}return{top:// The absolute mouse position
	pageY-// Click offset (relative to the element)
	this.offset.click.top-// Only for relative positioned nodes: Relative offset from element to offset parent
	this.offset.relative.top-// The offsetParent's offset without borders (offset + border)
	this.offset.parent.top+(this.cssPosition==="fixed"?-this.offset.scroll.top:scrollIsRootNode?0:this.offset.scroll.top),left:// The absolute mouse position
	pageX-// Click offset (relative to the element)
	this.offset.click.left-// Only for relative positioned nodes: Relative offset from element to offset parent
	this.offset.relative.left-// The offsetParent's offset without borders (offset + border)
	this.offset.parent.left+(this.cssPosition==="fixed"?-this.offset.scroll.left:scrollIsRootNode?0:this.offset.scroll.left)};},_clear:function _clear(){this._removeClass(this.helper,"ui-draggable-dragging");if(this.helper[0]!==this.element[0]&&!this.cancelHelperRemoval){this.helper.remove();}this.helper=null;this.cancelHelperRemoval=false;if(this.destroyOnClear){this.destroy();}},// From now on bulk stuff - mainly helpers
	_trigger:function _trigger(type,event,ui){ui=ui||this._uiHash();$.ui.plugin.call(this,type,[event,ui,this],true);// Absolute position and offset (see #6884 ) have to be recalculated after plugins
	if(/^(drag|start|stop)/.test(type)){this.positionAbs=this._convertPositionTo("absolute");ui.offset=this.positionAbs;}return $.Widget.prototype._trigger.call(this,type,event,ui);},plugins:{},_uiHash:function _uiHash(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs};}});$.ui.plugin.add("draggable","connectToSortable",{start:function start(event,ui,draggable){var uiSortable=$.extend({},ui,{item:draggable.element});draggable.sortables=[];$(draggable.options.connectToSortable).each(function(){var sortable=$(this).sortable("instance");if(sortable&&!sortable.options.disabled){draggable.sortables.push(sortable);// RefreshPositions is called at drag start to refresh the containerCache
	// which is used in drag. This ensures it's initialized and synchronized
	// with any changes that might have happened on the page since initialization.
	sortable.refreshPositions();sortable._trigger("activate",event,uiSortable);}});},stop:function stop(event,ui,draggable){var uiSortable=$.extend({},ui,{item:draggable.element});draggable.cancelHelperRemoval=false;$.each(draggable.sortables,function(){var sortable=this;if(sortable.isOver){sortable.isOver=0;// Allow this sortable to handle removing the helper
	draggable.cancelHelperRemoval=true;sortable.cancelHelperRemoval=false;// Use _storedCSS To restore properties in the sortable,
	// as this also handles revert (#9675) since the draggable
	// may have modified them in unexpected ways (#8809)
	sortable._storedCSS={position:sortable.placeholder.css("position"),top:sortable.placeholder.css("top"),left:sortable.placeholder.css("left")};sortable._mouseStop(event);// Once drag has ended, the sortable should return to using
	// its original helper, not the shared helper from draggable
	sortable.options.helper=sortable.options._helper;}else{// Prevent this Sortable from removing the helper.
	// However, don't set the draggable to remove the helper
	// either as another connected Sortable may yet handle the removal.
	sortable.cancelHelperRemoval=true;sortable._trigger("deactivate",event,uiSortable);}});},drag:function drag(event,ui,draggable){$.each(draggable.sortables,function(){var innermostIntersecting=false,sortable=this;// Copy over variables that sortable's _intersectsWith uses
	sortable.positionAbs=draggable.positionAbs;sortable.helperProportions=draggable.helperProportions;sortable.offset.click=draggable.offset.click;if(sortable._intersectsWith(sortable.containerCache)){innermostIntersecting=true;$.each(draggable.sortables,function(){// Copy over variables that sortable's _intersectsWith uses
	this.positionAbs=draggable.positionAbs;this.helperProportions=draggable.helperProportions;this.offset.click=draggable.offset.click;if(this!==sortable&&this._intersectsWith(this.containerCache)&&$.contains(sortable.element[0],this.element[0])){innermostIntersecting=false;}return innermostIntersecting;});}if(innermostIntersecting){// If it intersects, we use a little isOver variable and set it once,
	// so that the move-in stuff gets fired only once.
	if(!sortable.isOver){sortable.isOver=1;// Store draggable's parent in case we need to reappend to it later.
	draggable._parent=ui.helper.parent();sortable.currentItem=ui.helper.appendTo(sortable.element).data("ui-sortable-item",true);// Store helper option to later restore it
	sortable.options._helper=sortable.options.helper;sortable.options.helper=function(){return ui.helper[0];};// Fire the start events of the sortable with our passed browser event,
	// and our own helper (so it doesn't create a new one)
	event.target=sortable.currentItem[0];sortable._mouseCapture(event,true);sortable._mouseStart(event,true,true);// Because the browser event is way off the new appended portlet,
	// modify necessary variables to reflect the changes
	sortable.offset.click.top=draggable.offset.click.top;sortable.offset.click.left=draggable.offset.click.left;sortable.offset.parent.left-=draggable.offset.parent.left-sortable.offset.parent.left;sortable.offset.parent.top-=draggable.offset.parent.top-sortable.offset.parent.top;draggable._trigger("toSortable",event);// Inform draggable that the helper is in a valid drop zone,
	// used solely in the revert option to handle "valid/invalid".
	draggable.dropped=sortable.element;// Need to refreshPositions of all sortables in the case that
	// adding to one sortable changes the location of the other sortables (#9675)
	$.each(draggable.sortables,function(){this.refreshPositions();});// Hack so receive/update callbacks work (mostly)
	draggable.currentItem=draggable.element;sortable.fromOutside=draggable;}if(sortable.currentItem){sortable._mouseDrag(event);// Copy the sortable's position because the draggable's can potentially reflect
	// a relative position, while sortable is always absolute, which the dragged
	// element has now become. (#8809)
	ui.position=sortable.position;}}else{// If it doesn't intersect with the sortable, and it intersected before,
	// we fake the drag stop of the sortable, but make sure it doesn't remove
	// the helper by using cancelHelperRemoval.
	if(sortable.isOver){sortable.isOver=0;sortable.cancelHelperRemoval=true;// Calling sortable's mouseStop would trigger a revert,
	// so revert must be temporarily false until after mouseStop is called.
	sortable.options._revert=sortable.options.revert;sortable.options.revert=false;sortable._trigger("out",event,sortable._uiHash(sortable));sortable._mouseStop(event,true);// Restore sortable behaviors that were modfied
	// when the draggable entered the sortable area (#9481)
	sortable.options.revert=sortable.options._revert;sortable.options.helper=sortable.options._helper;if(sortable.placeholder){sortable.placeholder.remove();}// Restore and recalculate the draggable's offset considering the sortable
	// may have modified them in unexpected ways. (#8809, #10669)
	ui.helper.appendTo(draggable._parent);draggable._refreshOffsets(event);ui.position=draggable._generatePosition(event,true);draggable._trigger("fromSortable",event);// Inform draggable that the helper is no longer in a valid drop zone
	draggable.dropped=false;// Need to refreshPositions of all sortables just in case removing
	// from one sortable changes the location of other sortables (#9675)
	$.each(draggable.sortables,function(){this.refreshPositions();});}}});}});$.ui.plugin.add("draggable","cursor",{start:function start(event,ui,instance){var t=$("body"),o=instance.options;if(t.css("cursor")){o._cursor=t.css("cursor");}t.css("cursor",o.cursor);},stop:function stop(event,ui,instance){var o=instance.options;if(o._cursor){$("body").css("cursor",o._cursor);}}});$.ui.plugin.add("draggable","opacity",{start:function start(event,ui,instance){var t=$(ui.helper),o=instance.options;if(t.css("opacity")){o._opacity=t.css("opacity");}t.css("opacity",o.opacity);},stop:function stop(event,ui,instance){var o=instance.options;if(o._opacity){$(ui.helper).css("opacity",o._opacity);}}});$.ui.plugin.add("draggable","scroll",{start:function start(event,ui,i){if(!i.scrollParentNotHidden){i.scrollParentNotHidden=i.helper.scrollParent(false);}if(i.scrollParentNotHidden[0]!==i.document[0]&&i.scrollParentNotHidden[0].tagName!=="HTML"){i.overflowOffset=i.scrollParentNotHidden.offset();}},drag:function drag(event,ui,i){var o=i.options,scrolled=false,scrollParent=i.scrollParentNotHidden[0],document=i.document[0];if(scrollParent!==document&&scrollParent.tagName!=="HTML"){if(!o.axis||o.axis!=="x"){if(i.overflowOffset.top+scrollParent.offsetHeight-event.pageY<o.scrollSensitivity){scrollParent.scrollTop=scrolled=scrollParent.scrollTop+o.scrollSpeed;}else if(event.pageY-i.overflowOffset.top<o.scrollSensitivity){scrollParent.scrollTop=scrolled=scrollParent.scrollTop-o.scrollSpeed;}}if(!o.axis||o.axis!=="y"){if(i.overflowOffset.left+scrollParent.offsetWidth-event.pageX<o.scrollSensitivity){scrollParent.scrollLeft=scrolled=scrollParent.scrollLeft+o.scrollSpeed;}else if(event.pageX-i.overflowOffset.left<o.scrollSensitivity){scrollParent.scrollLeft=scrolled=scrollParent.scrollLeft-o.scrollSpeed;}}}else{if(!o.axis||o.axis!=="x"){if(event.pageY-$(document).scrollTop()<o.scrollSensitivity){scrolled=$(document).scrollTop($(document).scrollTop()-o.scrollSpeed);}else if($(window).height()-(event.pageY-$(document).scrollTop())<o.scrollSensitivity){scrolled=$(document).scrollTop($(document).scrollTop()+o.scrollSpeed);}}if(!o.axis||o.axis!=="y"){if(event.pageX-$(document).scrollLeft()<o.scrollSensitivity){scrolled=$(document).scrollLeft($(document).scrollLeft()-o.scrollSpeed);}else if($(window).width()-(event.pageX-$(document).scrollLeft())<o.scrollSensitivity){scrolled=$(document).scrollLeft($(document).scrollLeft()+o.scrollSpeed);}}}if(scrolled!==false&&$.ui.ddmanager&&!o.dropBehaviour){$.ui.ddmanager.prepareOffsets(i,event);}}});$.ui.plugin.add("draggable","snap",{start:function start(event,ui,i){var o=i.options;i.snapElements=[];$(o.snap.constructor!==String?o.snap.items||":data(ui-draggable)":o.snap).each(function(){var $t=$(this),$o=$t.offset();if(this!==i.element[0]){i.snapElements.push({item:this,width:$t.outerWidth(),height:$t.outerHeight(),top:$o.top,left:$o.left});}});},drag:function drag(event,ui,inst){var ts,bs,ls,rs,l,r,t,b,i,first,o=inst.options,d=o.snapTolerance,x1=ui.offset.left,x2=x1+inst.helperProportions.width,y1=ui.offset.top,y2=y1+inst.helperProportions.height;for(i=inst.snapElements.length-1;i>=0;i--){l=inst.snapElements[i].left-inst.margins.left;r=l+inst.snapElements[i].width;t=inst.snapElements[i].top-inst.margins.top;b=t+inst.snapElements[i].height;if(x2<l-d||x1>r+d||y2<t-d||y1>b+d||!$.contains(inst.snapElements[i].item.ownerDocument,inst.snapElements[i].item)){if(inst.snapElements[i].snapping){inst.options.snap.release&&inst.options.snap.release.call(inst.element,event,$.extend(inst._uiHash(),{snapItem:inst.snapElements[i].item}));}inst.snapElements[i].snapping=false;continue;}if(o.snapMode!=="inner"){ts=Math.abs(t-y2)<=d;bs=Math.abs(b-y1)<=d;ls=Math.abs(l-x2)<=d;rs=Math.abs(r-x1)<=d;if(ts){ui.position.top=inst._convertPositionTo("relative",{top:t-inst.helperProportions.height,left:0}).top;}if(bs){ui.position.top=inst._convertPositionTo("relative",{top:b,left:0}).top;}if(ls){ui.position.left=inst._convertPositionTo("relative",{top:0,left:l-inst.helperProportions.width}).left;}if(rs){ui.position.left=inst._convertPositionTo("relative",{top:0,left:r}).left;}}first=ts||bs||ls||rs;if(o.snapMode!=="outer"){ts=Math.abs(t-y1)<=d;bs=Math.abs(b-y2)<=d;ls=Math.abs(l-x1)<=d;rs=Math.abs(r-x2)<=d;if(ts){ui.position.top=inst._convertPositionTo("relative",{top:t,left:0}).top;}if(bs){ui.position.top=inst._convertPositionTo("relative",{top:b-inst.helperProportions.height,left:0}).top;}if(ls){ui.position.left=inst._convertPositionTo("relative",{top:0,left:l}).left;}if(rs){ui.position.left=inst._convertPositionTo("relative",{top:0,left:r-inst.helperProportions.width}).left;}}if(!inst.snapElements[i].snapping&&(ts||bs||ls||rs||first)){inst.options.snap.snap&&inst.options.snap.snap.call(inst.element,event,$.extend(inst._uiHash(),{snapItem:inst.snapElements[i].item}));}inst.snapElements[i].snapping=ts||bs||ls||rs||first;}}});$.ui.plugin.add("draggable","stack",{start:function start(event,ui,instance){var min,o=instance.options,group=$.makeArray($(o.stack)).sort(function(a,b){return(parseInt($(a).css("zIndex"),10)||0)-(parseInt($(b).css("zIndex"),10)||0);});if(!group.length){return;}min=parseInt($(group[0]).css("zIndex"),10)||0;$(group).each(function(i){$(this).css("zIndex",min+i);});this.css("zIndex",min+group.length);}});$.ui.plugin.add("draggable","zIndex",{start:function start(event,ui,instance){var t=$(ui.helper),o=instance.options;if(t.css("zIndex")){o._zIndex=t.css("zIndex");}t.css("zIndex",o.zIndex);},stop:function stop(event,ui,instance){var o=instance.options;if(o._zIndex){$(ui.helper).css("zIndex",o._zIndex);}}});var widgetsDraggable=$.ui.draggable;/*!
	 * jQuery UI Resizable 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Resizable
	//>>group: Interactions
	//>>description: Enables resize functionality for any element.
	//>>docs: http://api.jqueryui.com/resizable/
	//>>demos: http://jqueryui.com/resizable/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/resizable.css
	//>>css.theme: ../../themes/base/theme.css
	$.widget("ui.resizable",$.ui.mouse,{version:"1.12.1",widgetEventPrefix:"resize",options:{alsoResize:false,animate:false,animateDuration:"slow",animateEasing:"swing",aspectRatio:false,autoHide:false,classes:{"ui-resizable-se":"ui-icon ui-icon-gripsmall-diagonal-se"},containment:false,ghost:false,grid:false,handles:"e,s,se",helper:false,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,// See #7960
	zIndex:90,// Callbacks
	resize:null,start:null,stop:null},_num:function _num(value){return parseFloat(value)||0;},_isNumber:function _isNumber(value){return!isNaN(parseFloat(value));},_hasScroll:function _hasScroll(el,a){if($(el).css("overflow")==="hidden"){return false;}var scroll=a&&a==="left"?"scrollLeft":"scrollTop",has=false;if(el[scroll]>0){return true;}// TODO: determine which cases actually cause this to happen
	// if the element doesn't have the scroll set, see if it's possible to
	// set the scroll
	el[scroll]=1;has=el[scroll]>0;el[scroll]=0;return has;},_create:function _create(){var margins,o=this.options,that=this;this._addClass("ui-resizable");$.extend(this,{_aspectRatio:!!o.aspectRatio,aspectRatio:o.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:o.helper||o.ghost||o.animate?o.helper||"ui-resizable-helper":null});// Wrap the element if it cannot hold child nodes
	if(this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)){this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")}));this.element=this.element.parent().data("ui-resizable",this.element.resizable("instance"));this.elementIsWrapper=true;margins={marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom"),marginLeft:this.originalElement.css("marginLeft")};this.element.css(margins);this.originalElement.css("margin",0);// support: Safari
	// Prevent Safari textarea resize
	this.originalResizeStyle=this.originalElement.css("resize");this.originalElement.css("resize","none");this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"}));// Support: IE9
	// avoid IE jump (hard set the margin)
	this.originalElement.css(margins);this._proportionallyResize();}this._setupHandles();if(o.autoHide){$(this.element).on("mouseenter",function(){if(o.disabled){return;}that._removeClass("ui-resizable-autohide");that._handles.show();}).on("mouseleave",function(){if(o.disabled){return;}if(!that.resizing){that._addClass("ui-resizable-autohide");that._handles.hide();}});}this._mouseInit();},_destroy:function _destroy(){this._mouseDestroy();var wrapper,_destroy=function _destroy(exp){$(exp).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove();};// TODO: Unwrap at same DOM position
	if(this.elementIsWrapper){_destroy(this.element);wrapper=this.element;this.originalElement.css({position:wrapper.css("position"),width:wrapper.outerWidth(),height:wrapper.outerHeight(),top:wrapper.css("top"),left:wrapper.css("left")}).insertAfter(wrapper);wrapper.remove();}this.originalElement.css("resize",this.originalResizeStyle);_destroy(this.originalElement);return this;},_setOption:function _setOption(key,value){this._super(key,value);switch(key){case"handles":this._removeHandles();this._setupHandles();break;default:break;}},_setupHandles:function _setupHandles(){var o=this.options,handle,i,n,hname,axis,that=this;this.handles=o.handles||(!$(".ui-resizable-handle",this.element).length?"e,s,se":{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"});this._handles=$();if(this.handles.constructor===String){if(this.handles==="all"){this.handles="n,e,s,w,se,sw,ne,nw";}n=this.handles.split(",");this.handles={};for(i=0;i<n.length;i++){handle=$.trim(n[i]);hname="ui-resizable-"+handle;axis=$("<div>");this._addClass(axis,"ui-resizable-handle "+hname);axis.css({zIndex:o.zIndex});this.handles[handle]=".ui-resizable-"+handle;this.element.append(axis);}}this._renderAxis=function(target){var i,axis,padPos,padWrapper;target=target||this.element;for(i in this.handles){if(this.handles[i].constructor===String){this.handles[i]=this.element.children(this.handles[i]).first().show();}else if(this.handles[i].jquery||this.handles[i].nodeType){this.handles[i]=$(this.handles[i]);this._on(this.handles[i],{"mousedown":that._mouseDown});}if(this.elementIsWrapper&&this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)){axis=$(this.handles[i],this.element);padWrapper=/sw|ne|nw|se|n|s/.test(i)?axis.outerHeight():axis.outerWidth();padPos=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join("");target.css(padPos,padWrapper);this._proportionallyResize();}this._handles=this._handles.add(this.handles[i]);}};// TODO: make renderAxis a prototype function
	this._renderAxis(this.element);this._handles=this._handles.add(this.element.find(".ui-resizable-handle"));this._handles.disableSelection();this._handles.on("mouseover",function(){if(!that.resizing){if(this.className){axis=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);}that.axis=axis&&axis[1]?axis[1]:"se";}});if(o.autoHide){this._handles.hide();this._addClass("ui-resizable-autohide");}},_removeHandles:function _removeHandles(){this._handles.remove();},_mouseCapture:function _mouseCapture(event){var i,handle,capture=false;for(i in this.handles){handle=$(this.handles[i])[0];if(handle===event.target||$.contains(handle,event.target)){capture=true;}}return!this.options.disabled&&capture;},_mouseStart:function _mouseStart(event){var curleft,curtop,cursor,o=this.options,el=this.element;this.resizing=true;this._renderProxy();curleft=this._num(this.helper.css("left"));curtop=this._num(this.helper.css("top"));if(o.containment){curleft+=$(o.containment).scrollLeft()||0;curtop+=$(o.containment).scrollTop()||0;}this.offset=this.helper.offset();this.position={left:curleft,top:curtop};this.size=this._helper?{width:this.helper.width(),height:this.helper.height()}:{width:el.width(),height:el.height()};this.originalSize=this._helper?{width:el.outerWidth(),height:el.outerHeight()}:{width:el.width(),height:el.height()};this.sizeDiff={width:el.outerWidth()-el.width(),height:el.outerHeight()-el.height()};this.originalPosition={left:curleft,top:curtop};this.originalMousePosition={left:event.pageX,top:event.pageY};this.aspectRatio=typeof o.aspectRatio==="number"?o.aspectRatio:this.originalSize.width/this.originalSize.height||1;cursor=$(".ui-resizable-"+this.axis).css("cursor");$("body").css("cursor",cursor==="auto"?this.axis+"-resize":cursor);this._addClass("ui-resizable-resizing");this._propagate("start",event);return true;},_mouseDrag:function _mouseDrag(event){var data,props,smp=this.originalMousePosition,a=this.axis,dx=event.pageX-smp.left||0,dy=event.pageY-smp.top||0,trigger=this._change[a];this._updatePrevProperties();if(!trigger){return false;}data=trigger.apply(this,[event,dx,dy]);this._updateVirtualBoundaries(event.shiftKey);if(this._aspectRatio||event.shiftKey){data=this._updateRatio(data,event);}data=this._respectSize(data,event);this._updateCache(data);this._propagate("resize",event);props=this._applyChanges();if(!this._helper&&this._proportionallyResizeElements.length){this._proportionallyResize();}if(!$.isEmptyObject(props)){this._updatePrevProperties();this._trigger("resize",event,this.ui());this._applyChanges();}return false;},_mouseStop:function _mouseStop(event){this.resizing=false;var pr,ista,soffseth,soffsetw,s,left,top,o=this.options,that=this;if(this._helper){pr=this._proportionallyResizeElements;ista=pr.length&&/textarea/i.test(pr[0].nodeName);soffseth=ista&&this._hasScroll(pr[0],"left")?0:that.sizeDiff.height;soffsetw=ista?0:that.sizeDiff.width;s={width:that.helper.width()-soffsetw,height:that.helper.height()-soffseth};left=parseFloat(that.element.css("left"))+(that.position.left-that.originalPosition.left)||null;top=parseFloat(that.element.css("top"))+(that.position.top-that.originalPosition.top)||null;if(!o.animate){this.element.css($.extend(s,{top:top,left:left}));}that.helper.height(that.size.height);that.helper.width(that.size.width);if(this._helper&&!o.animate){this._proportionallyResize();}}$("body").css("cursor","auto");this._removeClass("ui-resizable-resizing");this._propagate("stop",event);if(this._helper){this.helper.remove();}return false;},_updatePrevProperties:function _updatePrevProperties(){this.prevPosition={top:this.position.top,left:this.position.left};this.prevSize={width:this.size.width,height:this.size.height};},_applyChanges:function _applyChanges(){var props={};if(this.position.top!==this.prevPosition.top){props.top=this.position.top+"px";}if(this.position.left!==this.prevPosition.left){props.left=this.position.left+"px";}if(this.size.width!==this.prevSize.width){props.width=this.size.width+"px";}if(this.size.height!==this.prevSize.height){props.height=this.size.height+"px";}this.helper.css(props);return props;},_updateVirtualBoundaries:function _updateVirtualBoundaries(forceAspectRatio){var pMinWidth,pMaxWidth,pMinHeight,pMaxHeight,b,o=this.options;b={minWidth:this._isNumber(o.minWidth)?o.minWidth:0,maxWidth:this._isNumber(o.maxWidth)?o.maxWidth:Infinity,minHeight:this._isNumber(o.minHeight)?o.minHeight:0,maxHeight:this._isNumber(o.maxHeight)?o.maxHeight:Infinity};if(this._aspectRatio||forceAspectRatio){pMinWidth=b.minHeight*this.aspectRatio;pMinHeight=b.minWidth/this.aspectRatio;pMaxWidth=b.maxHeight*this.aspectRatio;pMaxHeight=b.maxWidth/this.aspectRatio;if(pMinWidth>b.minWidth){b.minWidth=pMinWidth;}if(pMinHeight>b.minHeight){b.minHeight=pMinHeight;}if(pMaxWidth<b.maxWidth){b.maxWidth=pMaxWidth;}if(pMaxHeight<b.maxHeight){b.maxHeight=pMaxHeight;}}this._vBoundaries=b;},_updateCache:function _updateCache(data){this.offset=this.helper.offset();if(this._isNumber(data.left)){this.position.left=data.left;}if(this._isNumber(data.top)){this.position.top=data.top;}if(this._isNumber(data.height)){this.size.height=data.height;}if(this._isNumber(data.width)){this.size.width=data.width;}},_updateRatio:function _updateRatio(data){var cpos=this.position,csize=this.size,a=this.axis;if(this._isNumber(data.height)){data.width=data.height*this.aspectRatio;}else if(this._isNumber(data.width)){data.height=data.width/this.aspectRatio;}if(a==="sw"){data.left=cpos.left+(csize.width-data.width);data.top=null;}if(a==="nw"){data.top=cpos.top+(csize.height-data.height);data.left=cpos.left+(csize.width-data.width);}return data;},_respectSize:function _respectSize(data){var o=this._vBoundaries,a=this.axis,ismaxw=this._isNumber(data.width)&&o.maxWidth&&o.maxWidth<data.width,ismaxh=this._isNumber(data.height)&&o.maxHeight&&o.maxHeight<data.height,isminw=this._isNumber(data.width)&&o.minWidth&&o.minWidth>data.width,isminh=this._isNumber(data.height)&&o.minHeight&&o.minHeight>data.height,dw=this.originalPosition.left+this.originalSize.width,dh=this.originalPosition.top+this.originalSize.height,cw=/sw|nw|w/.test(a),ch=/nw|ne|n/.test(a);if(isminw){data.width=o.minWidth;}if(isminh){data.height=o.minHeight;}if(ismaxw){data.width=o.maxWidth;}if(ismaxh){data.height=o.maxHeight;}if(isminw&&cw){data.left=dw-o.minWidth;}if(ismaxw&&cw){data.left=dw-o.maxWidth;}if(isminh&&ch){data.top=dh-o.minHeight;}if(ismaxh&&ch){data.top=dh-o.maxHeight;}// Fixing jump error on top/left - bug #2330
	if(!data.width&&!data.height&&!data.left&&data.top){data.top=null;}else if(!data.width&&!data.height&&!data.top&&data.left){data.left=null;}return data;},_getPaddingPlusBorderDimensions:function _getPaddingPlusBorderDimensions(element){var i=0,widths=[],borders=[element.css("borderTopWidth"),element.css("borderRightWidth"),element.css("borderBottomWidth"),element.css("borderLeftWidth")],paddings=[element.css("paddingTop"),element.css("paddingRight"),element.css("paddingBottom"),element.css("paddingLeft")];for(;i<4;i++){widths[i]=parseFloat(borders[i])||0;widths[i]+=parseFloat(paddings[i])||0;}return{height:widths[0]+widths[2],width:widths[1]+widths[3]};},_proportionallyResize:function _proportionallyResize(){if(!this._proportionallyResizeElements.length){return;}var prel,i=0,element=this.helper||this.element;for(;i<this._proportionallyResizeElements.length;i++){prel=this._proportionallyResizeElements[i];// TODO: Seems like a bug to cache this.outerDimensions
	// considering that we are in a loop.
	if(!this.outerDimensions){this.outerDimensions=this._getPaddingPlusBorderDimensions(prel);}prel.css({height:element.height()-this.outerDimensions.height||0,width:element.width()-this.outerDimensions.width||0});}},_renderProxy:function _renderProxy(){var el=this.element,o=this.options;this.elementOffset=el.offset();if(this._helper){this.helper=this.helper||$("<div style='overflow:hidden;'></div>");this._addClass(this.helper,this._helper);this.helper.css({width:this.element.outerWidth(),height:this.element.outerHeight(),position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++o.zIndex//TODO: Don't modify option
	});this.helper.appendTo("body").disableSelection();}else{this.helper=this.element;}},_change:{e:function e(event,dx){return{width:this.originalSize.width+dx};},w:function w(event,dx){var cs=this.originalSize,sp=this.originalPosition;return{left:sp.left+dx,width:cs.width-dx};},n:function n(event,dx,dy){var cs=this.originalSize,sp=this.originalPosition;return{top:sp.top+dy,height:cs.height-dy};},s:function s(event,dx,dy){return{height:this.originalSize.height+dy};},se:function se(event,dx,dy){return $.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[event,dx,dy]));},sw:function sw(event,dx,dy){return $.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[event,dx,dy]));},ne:function ne(event,dx,dy){return $.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[event,dx,dy]));},nw:function nw(event,dx,dy){return $.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[event,dx,dy]));}},_propagate:function _propagate(n,event){$.ui.plugin.call(this,n,[event,this.ui()]);n!=="resize"&&this._trigger(n,event,this.ui());},plugins:{},ui:function ui(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition};}});/*
	 * Resizable Extensions
	 */$.ui.plugin.add("resizable","animate",{stop:function stop(event){var that=$(this).resizable("instance"),o=that.options,pr=that._proportionallyResizeElements,ista=pr.length&&/textarea/i.test(pr[0].nodeName),soffseth=ista&&that._hasScroll(pr[0],"left")?0:that.sizeDiff.height,soffsetw=ista?0:that.sizeDiff.width,style={width:that.size.width-soffsetw,height:that.size.height-soffseth},left=parseFloat(that.element.css("left"))+(that.position.left-that.originalPosition.left)||null,top=parseFloat(that.element.css("top"))+(that.position.top-that.originalPosition.top)||null;that.element.animate($.extend(style,top&&left?{top:top,left:left}:{}),{duration:o.animateDuration,easing:o.animateEasing,step:function step(){var data={width:parseFloat(that.element.css("width")),height:parseFloat(that.element.css("height")),top:parseFloat(that.element.css("top")),left:parseFloat(that.element.css("left"))};if(pr&&pr.length){$(pr[0]).css({width:data.width,height:data.height});}// Propagating resize, and updating values for each animation step
	that._updateCache(data);that._propagate("resize",event);}});}});$.ui.plugin.add("resizable","containment",{start:function start(){var element,p,co,ch,cw,width,height,that=$(this).resizable("instance"),o=that.options,el=that.element,oc=o.containment,ce=oc instanceof $?oc.get(0):/parent/.test(oc)?el.parent().get(0):oc;if(!ce){return;}that.containerElement=$(ce);if(/document/.test(oc)||oc===document){that.containerOffset={left:0,top:0};that.containerPosition={left:0,top:0};that.parentData={element:$(document),left:0,top:0,width:$(document).width(),height:$(document).height()||document.body.parentNode.scrollHeight};}else{element=$(ce);p=[];$(["Top","Right","Left","Bottom"]).each(function(i,name){p[i]=that._num(element.css("padding"+name));});that.containerOffset=element.offset();that.containerPosition=element.position();that.containerSize={height:element.innerHeight()-p[3],width:element.innerWidth()-p[1]};co=that.containerOffset;ch=that.containerSize.height;cw=that.containerSize.width;width=that._hasScroll(ce,"left")?ce.scrollWidth:cw;height=that._hasScroll(ce)?ce.scrollHeight:ch;that.parentData={element:ce,left:co.left,top:co.top,width:width,height:height};}},resize:function resize(event){var woset,hoset,isParent,isOffsetRelative,that=$(this).resizable("instance"),o=that.options,co=that.containerOffset,cp=that.position,pRatio=that._aspectRatio||event.shiftKey,cop={top:0,left:0},ce=that.containerElement,continueResize=true;if(ce[0]!==document&&/static/.test(ce.css("position"))){cop=co;}if(cp.left<(that._helper?co.left:0)){that.size.width=that.size.width+(that._helper?that.position.left-co.left:that.position.left-cop.left);if(pRatio){that.size.height=that.size.width/that.aspectRatio;continueResize=false;}that.position.left=o.helper?co.left:0;}if(cp.top<(that._helper?co.top:0)){that.size.height=that.size.height+(that._helper?that.position.top-co.top:that.position.top);if(pRatio){that.size.width=that.size.height*that.aspectRatio;continueResize=false;}that.position.top=that._helper?co.top:0;}isParent=that.containerElement.get(0)===that.element.parent().get(0);isOffsetRelative=/relative|absolute/.test(that.containerElement.css("position"));if(isParent&&isOffsetRelative){that.offset.left=that.parentData.left+that.position.left;that.offset.top=that.parentData.top+that.position.top;}else{that.offset.left=that.element.offset().left;that.offset.top=that.element.offset().top;}woset=Math.abs(that.sizeDiff.width+(that._helper?that.offset.left-cop.left:that.offset.left-co.left));hoset=Math.abs(that.sizeDiff.height+(that._helper?that.offset.top-cop.top:that.offset.top-co.top));if(woset+that.size.width>=that.parentData.width){that.size.width=that.parentData.width-woset;if(pRatio){that.size.height=that.size.width/that.aspectRatio;continueResize=false;}}if(hoset+that.size.height>=that.parentData.height){that.size.height=that.parentData.height-hoset;if(pRatio){that.size.width=that.size.height*that.aspectRatio;continueResize=false;}}if(!continueResize){that.position.left=that.prevPosition.left;that.position.top=that.prevPosition.top;that.size.width=that.prevSize.width;that.size.height=that.prevSize.height;}},stop:function stop(){var that=$(this).resizable("instance"),o=that.options,co=that.containerOffset,cop=that.containerPosition,ce=that.containerElement,helper=$(that.helper),ho=helper.offset(),w=helper.outerWidth()-that.sizeDiff.width,h=helper.outerHeight()-that.sizeDiff.height;if(that._helper&&!o.animate&&/relative/.test(ce.css("position"))){$(this).css({left:ho.left-cop.left-co.left,width:w,height:h});}if(that._helper&&!o.animate&&/static/.test(ce.css("position"))){$(this).css({left:ho.left-cop.left-co.left,width:w,height:h});}}});$.ui.plugin.add("resizable","alsoResize",{start:function start(){var that=$(this).resizable("instance"),o=that.options;$(o.alsoResize).each(function(){var el=$(this);el.data("ui-resizable-alsoresize",{width:parseFloat(el.width()),height:parseFloat(el.height()),left:parseFloat(el.css("left")),top:parseFloat(el.css("top"))});});},resize:function resize(event,ui){var that=$(this).resizable("instance"),o=that.options,os=that.originalSize,op=that.originalPosition,delta={height:that.size.height-os.height||0,width:that.size.width-os.width||0,top:that.position.top-op.top||0,left:that.position.left-op.left||0};$(o.alsoResize).each(function(){var el=$(this),start=$(this).data("ui-resizable-alsoresize"),style={},css=el.parents(ui.originalElement[0]).length?["width","height"]:["width","height","top","left"];$.each(css,function(i,prop){var sum=(start[prop]||0)+(delta[prop]||0);if(sum&&sum>=0){style[prop]=sum||null;}});el.css(style);});},stop:function stop(){$(this).removeData("ui-resizable-alsoresize");}});$.ui.plugin.add("resizable","ghost",{start:function start(){var that=$(this).resizable("instance"),cs=that.size;that.ghost=that.originalElement.clone();that.ghost.css({opacity:0.25,display:"block",position:"relative",height:cs.height,width:cs.width,margin:0,left:0,top:0});that._addClass(that.ghost,"ui-resizable-ghost");// DEPRECATED
	// TODO: remove after 1.12
	if($.uiBackCompat!==false&&typeof that.options.ghost==="string"){// Ghost option
	that.ghost.addClass(this.options.ghost);}that.ghost.appendTo(that.helper);},resize:function resize(){var that=$(this).resizable("instance");if(that.ghost){that.ghost.css({position:"relative",height:that.size.height,width:that.size.width});}},stop:function stop(){var that=$(this).resizable("instance");if(that.ghost&&that.helper){that.helper.get(0).removeChild(that.ghost.get(0));}}});$.ui.plugin.add("resizable","grid",{resize:function resize(){var outerDimensions,that=$(this).resizable("instance"),o=that.options,cs=that.size,os=that.originalSize,op=that.originalPosition,a=that.axis,grid=typeof o.grid==="number"?[o.grid,o.grid]:o.grid,gridX=grid[0]||1,gridY=grid[1]||1,ox=Math.round((cs.width-os.width)/gridX)*gridX,oy=Math.round((cs.height-os.height)/gridY)*gridY,newWidth=os.width+ox,newHeight=os.height+oy,isMaxWidth=o.maxWidth&&o.maxWidth<newWidth,isMaxHeight=o.maxHeight&&o.maxHeight<newHeight,isMinWidth=o.minWidth&&o.minWidth>newWidth,isMinHeight=o.minHeight&&o.minHeight>newHeight;o.grid=grid;if(isMinWidth){newWidth+=gridX;}if(isMinHeight){newHeight+=gridY;}if(isMaxWidth){newWidth-=gridX;}if(isMaxHeight){newHeight-=gridY;}if(/^(se|s|e)$/.test(a)){that.size.width=newWidth;that.size.height=newHeight;}else if(/^(ne)$/.test(a)){that.size.width=newWidth;that.size.height=newHeight;that.position.top=op.top-oy;}else if(/^(sw)$/.test(a)){that.size.width=newWidth;that.size.height=newHeight;that.position.left=op.left-ox;}else{if(newHeight-gridY<=0||newWidth-gridX<=0){outerDimensions=that._getPaddingPlusBorderDimensions(this);}if(newHeight-gridY>0){that.size.height=newHeight;that.position.top=op.top-oy;}else{newHeight=gridY-outerDimensions.height;that.size.height=newHeight;that.position.top=op.top+os.height-newHeight;}if(newWidth-gridX>0){that.size.width=newWidth;that.position.left=op.left-ox;}else{newWidth=gridX-outerDimensions.width;that.size.width=newWidth;that.position.left=op.left+os.width-newWidth;}}}});var widgetsResizable=$.ui.resizable;/*!
	 * jQuery UI Dialog 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Dialog
	//>>group: Widgets
	//>>description: Displays customizable dialog windows.
	//>>docs: http://api.jqueryui.com/dialog/
	//>>demos: http://jqueryui.com/dialog/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/dialog.css
	//>>css.theme: ../../themes/base/theme.css
	$.widget("ui.dialog",{version:"1.12.1",options:{appendTo:"body",autoOpen:true,buttons:[],classes:{"ui-dialog":"ui-corner-all","ui-dialog-titlebar":"ui-corner-all"},closeOnEscape:true,closeText:"Close",draggable:true,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:false,position:{my:"center",at:"center",of:window,collision:"fit",// Ensure the titlebar is always visible
	using:function using(pos){var topOffset=$(this).css(pos).offset().top;if(topOffset<0){$(this).css("top",pos.top-topOffset);}}},resizable:true,show:null,title:null,width:300,// Callbacks
	beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},sizeRelatedOptions:{buttons:true,height:true,maxHeight:true,maxWidth:true,minHeight:true,minWidth:true,width:true},resizableRelatedOptions:{maxHeight:true,maxWidth:true,minHeight:true,minWidth:true},_create:function _create(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height};this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)};this.originalTitle=this.element.attr("title");if(this.options.title==null&&this.originalTitle!=null){this.options.title=this.originalTitle;}// Dialogs can't be disabled
	if(this.options.disabled){this.options.disabled=false;}this._createWrapper();this.element.show().removeAttr("title").appendTo(this.uiDialog);this._addClass("ui-dialog-content","ui-widget-content");this._createTitlebar();this._createButtonPane();if(this.options.draggable&&$.fn.draggable){this._makeDraggable();}if(this.options.resizable&&$.fn.resizable){this._makeResizable();}this._isOpen=false;this._trackFocus();},_init:function _init(){if(this.options.autoOpen){this.open();}},_appendTo:function _appendTo(){var element=this.options.appendTo;if(element&&(element.jquery||element.nodeType)){return $(element);}return this.document.find(element||"body").eq(0);},_destroy:function _destroy(){var next,originalPosition=this.originalPosition;this._untrackInstance();this._destroyOverlay();this.element.removeUniqueId().css(this.originalCss)// Without detaching first, the following becomes really slow
	.detach();this.uiDialog.remove();if(this.originalTitle){this.element.attr("title",this.originalTitle);}next=originalPosition.parent.children().eq(originalPosition.index);// Don't try to place the dialog next to itself (#8613)
	if(next.length&&next[0]!==this.element[0]){next.before(this.element);}else{originalPosition.parent.append(this.element);}},widget:function widget(){return this.uiDialog;},disable:$.noop,enable:$.noop,close:function close(event){var that=this;if(!this._isOpen||this._trigger("beforeClose",event)===false){return;}this._isOpen=false;this._focusedElement=null;this._destroyOverlay();this._untrackInstance();if(!this.opener.filter(":focusable").trigger("focus").length){// Hiding a focused element doesn't trigger blur in WebKit
	// so in case we have nothing to focus on, explicitly blur the active element
	// https://bugs.webkit.org/show_bug.cgi?id=47182
	$.ui.safeBlur($.ui.safeActiveElement(this.document[0]));}this._hide(this.uiDialog,this.options.hide,function(){that._trigger("close",event);});},isOpen:function isOpen(){return this._isOpen;},moveToTop:function moveToTop(){this._moveToTop();},_moveToTop:function _moveToTop(event,silent){var moved=false,zIndices=this.uiDialog.siblings(".ui-front:visible").map(function(){return+$(this).css("z-index");}).get(),zIndexMax=Math.max.apply(null,zIndices);if(zIndexMax>=+this.uiDialog.css("z-index")){this.uiDialog.css("z-index",zIndexMax+1);moved=true;}if(moved&&!silent){this._trigger("focus",event);}return moved;},open:function open(){var that=this;if(this._isOpen){if(this._moveToTop()){this._focusTabbable();}return;}this._isOpen=true;this.opener=$($.ui.safeActiveElement(this.document[0]));this._size();this._position();this._createOverlay();this._moveToTop(null,true);// Ensure the overlay is moved to the top with the dialog, but only when
	// opening. The overlay shouldn't move after the dialog is open so that
	// modeless dialogs opened after the modal dialog stack properly.
	if(this.overlay){this.overlay.css("z-index",this.uiDialog.css("z-index")-1);}this._show(this.uiDialog,this.options.show,function(){that._focusTabbable();that._trigger("focus");});// Track the dialog immediately upon openening in case a focus event
	// somehow occurs outside of the dialog before an element inside the
	// dialog is focused (#10152)
	this._makeFocusTarget();this._trigger("open");},_focusTabbable:function _focusTabbable(){// Set focus to the first match:
	// 1. An element that was focused previously
	// 2. First element inside the dialog matching [autofocus]
	// 3. Tabbable element inside the content element
	// 4. Tabbable element inside the buttonpane
	// 5. The close button
	// 6. The dialog itself
	var hasFocus=this._focusedElement;if(!hasFocus){hasFocus=this.element.find("[autofocus]");}if(!hasFocus.length){hasFocus=this.element.find(":tabbable");}if(!hasFocus.length){hasFocus=this.uiDialogButtonPane.find(":tabbable");}if(!hasFocus.length){hasFocus=this.uiDialogTitlebarClose.filter(":tabbable");}if(!hasFocus.length){hasFocus=this.uiDialog;}hasFocus.eq(0).trigger("focus");},_keepFocus:function _keepFocus(event){function checkFocus(){var activeElement=$.ui.safeActiveElement(this.document[0]),isActive=this.uiDialog[0]===activeElement||$.contains(this.uiDialog[0],activeElement);if(!isActive){this._focusTabbable();}}event.preventDefault();checkFocus.call(this);// support: IE
	// IE <= 8 doesn't prevent moving focus even with event.preventDefault()
	// so we check again later
	this._delay(checkFocus);},_createWrapper:function _createWrapper(){this.uiDialog=$("<div>").hide().attr({// Setting tabIndex makes the div focusable
	tabIndex:-1,role:"dialog"}).appendTo(this._appendTo());this._addClass(this.uiDialog,"ui-dialog","ui-widget ui-widget-content ui-front");this._on(this.uiDialog,{keydown:function keydown(event){if(this.options.closeOnEscape&&!event.isDefaultPrevented()&&event.keyCode&&event.keyCode===$.ui.keyCode.ESCAPE){event.preventDefault();this.close(event);return;}// Prevent tabbing out of dialogs
	if(event.keyCode!==$.ui.keyCode.TAB||event.isDefaultPrevented()){return;}var tabbables=this.uiDialog.find(":tabbable"),first=tabbables.filter(":first"),last=tabbables.filter(":last");if((event.target===last[0]||event.target===this.uiDialog[0])&&!event.shiftKey){this._delay(function(){first.trigger("focus");});event.preventDefault();}else if((event.target===first[0]||event.target===this.uiDialog[0])&&event.shiftKey){this._delay(function(){last.trigger("focus");});event.preventDefault();}},mousedown:function mousedown(event){if(this._moveToTop(event)){this._focusTabbable();}}});// We assume that any existing aria-describedby attribute means
	// that the dialog content is marked up properly
	// otherwise we brute force the content as the description
	if(!this.element.find("[aria-describedby]").length){this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")});}},_createTitlebar:function _createTitlebar(){var uiDialogTitle;this.uiDialogTitlebar=$("<div>");this._addClass(this.uiDialogTitlebar,"ui-dialog-titlebar","ui-widget-header ui-helper-clearfix");this._on(this.uiDialogTitlebar,{mousedown:function mousedown(event){// Don't prevent click on close button (#8838)
	// Focusing a dialog that is partially scrolled out of view
	// causes the browser to scroll it into view, preventing the click event
	if(!$(event.target).closest(".ui-dialog-titlebar-close")){// Dialog isn't getting focus when dragging (#8063)
	this.uiDialog.trigger("focus");}}});// Support: IE
	// Use type="button" to prevent enter keypresses in textboxes from closing the
	// dialog in IE (#9312)
	this.uiDialogTitlebarClose=$("<button type='button'></button>").button({label:$("<a>").text(this.options.closeText).html(),icon:"ui-icon-closethick",showLabel:false}).appendTo(this.uiDialogTitlebar);this._addClass(this.uiDialogTitlebarClose,"ui-dialog-titlebar-close");this._on(this.uiDialogTitlebarClose,{click:function click(event){event.preventDefault();this.close(event);}});uiDialogTitle=$("<span>").uniqueId().prependTo(this.uiDialogTitlebar);this._addClass(uiDialogTitle,"ui-dialog-title");this._title(uiDialogTitle);this.uiDialogTitlebar.prependTo(this.uiDialog);this.uiDialog.attr({"aria-labelledby":uiDialogTitle.attr("id")});},_title:function _title(title){if(this.options.title){title.text(this.options.title);}else{title.html("&#160;");}},_createButtonPane:function _createButtonPane(){this.uiDialogButtonPane=$("<div>");this._addClass(this.uiDialogButtonPane,"ui-dialog-buttonpane","ui-widget-content ui-helper-clearfix");this.uiButtonSet=$("<div>").appendTo(this.uiDialogButtonPane);this._addClass(this.uiButtonSet,"ui-dialog-buttonset");this._createButtons();},_createButtons:function _createButtons(){var that=this,buttons=this.options.buttons;// If we already have a button pane, remove it
	this.uiDialogButtonPane.remove();this.uiButtonSet.empty();if($.isEmptyObject(buttons)||$.isArray(buttons)&&!buttons.length){this._removeClass(this.uiDialog,"ui-dialog-buttons");return;}$.each(buttons,function(name,props){var click,buttonOptions;props=$.isFunction(props)?{click:props,text:name}:props;// Default to a non-submitting button
	props=$.extend({type:"button"},props);// Change the context for the click callback to be the main element
	click=props.click;buttonOptions={icon:props.icon,iconPosition:props.iconPosition,showLabel:props.showLabel,// Deprecated options
	icons:props.icons,text:props.text};delete props.click;delete props.icon;delete props.iconPosition;delete props.showLabel;// Deprecated options
	delete props.icons;if(typeof props.text==="boolean"){delete props.text;}$("<button></button>",props).button(buttonOptions).appendTo(that.uiButtonSet).on("click",function(){click.apply(that.element[0],arguments);});});this._addClass(this.uiDialog,"ui-dialog-buttons");this.uiDialogButtonPane.appendTo(this.uiDialog);},_makeDraggable:function _makeDraggable(){var that=this,options=this.options;function filteredUi(ui){return{position:ui.position,offset:ui.offset};}this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function start(event,ui){that._addClass($(this),"ui-dialog-dragging");that._blockFrames();that._trigger("dragStart",event,filteredUi(ui));},drag:function drag(event,ui){that._trigger("drag",event,filteredUi(ui));},stop:function stop(event,ui){var left=ui.offset.left-that.document.scrollLeft(),top=ui.offset.top-that.document.scrollTop();options.position={my:"left top",at:"left"+(left>=0?"+":"")+left+" "+"top"+(top>=0?"+":"")+top,of:that.window};that._removeClass($(this),"ui-dialog-dragging");that._unblockFrames();that._trigger("dragStop",event,filteredUi(ui));}});},_makeResizable:function _makeResizable(){var that=this,options=this.options,handles=options.resizable,// .ui-resizable has position: relative defined in the stylesheet
	// but dialogs have to use absolute or fixed positioning
	position=this.uiDialog.css("position"),resizeHandles=typeof handles==="string"?handles:"n,e,s,w,se,sw,ne,nw";function filteredUi(ui){return{originalPosition:ui.originalPosition,originalSize:ui.originalSize,position:ui.position,size:ui.size};}this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:options.maxWidth,maxHeight:options.maxHeight,minWidth:options.minWidth,minHeight:this._minHeight(),handles:resizeHandles,start:function start(event,ui){that._addClass($(this),"ui-dialog-resizing");that._blockFrames();that._trigger("resizeStart",event,filteredUi(ui));},resize:function resize(event,ui){that._trigger("resize",event,filteredUi(ui));},stop:function stop(event,ui){var offset=that.uiDialog.offset(),left=offset.left-that.document.scrollLeft(),top=offset.top-that.document.scrollTop();options.height=that.uiDialog.height();options.width=that.uiDialog.width();options.position={my:"left top",at:"left"+(left>=0?"+":"")+left+" "+"top"+(top>=0?"+":"")+top,of:that.window};that._removeClass($(this),"ui-dialog-resizing");that._unblockFrames();that._trigger("resizeStop",event,filteredUi(ui));}}).css("position",position);},_trackFocus:function _trackFocus(){this._on(this.widget(),{focusin:function focusin(event){this._makeFocusTarget();this._focusedElement=$(event.target);}});},_makeFocusTarget:function _makeFocusTarget(){this._untrackInstance();this._trackingInstances().unshift(this);},_untrackInstance:function _untrackInstance(){var instances=this._trackingInstances(),exists=$.inArray(this,instances);if(exists!==-1){instances.splice(exists,1);}},_trackingInstances:function _trackingInstances(){var instances=this.document.data("ui-dialog-instances");if(!instances){instances=[];this.document.data("ui-dialog-instances",instances);}return instances;},_minHeight:function _minHeight(){var options=this.options;return options.height==="auto"?options.minHeight:Math.min(options.minHeight,options.height);},_position:function _position(){// Need to show the dialog to get the actual offset in the position plugin
	var isVisible=this.uiDialog.is(":visible");if(!isVisible){this.uiDialog.show();}this.uiDialog.position(this.options.position);if(!isVisible){this.uiDialog.hide();}},_setOptions:function _setOptions(options){var that=this,resize=false,resizableOptions={};$.each(options,function(key,value){that._setOption(key,value);if(key in that.sizeRelatedOptions){resize=true;}if(key in that.resizableRelatedOptions){resizableOptions[key]=value;}});if(resize){this._size();this._position();}if(this.uiDialog.is(":data(ui-resizable)")){this.uiDialog.resizable("option",resizableOptions);}},_setOption:function _setOption(key,value){var isDraggable,isResizable,uiDialog=this.uiDialog;if(key==="disabled"){return;}this._super(key,value);if(key==="appendTo"){this.uiDialog.appendTo(this._appendTo());}if(key==="buttons"){this._createButtons();}if(key==="closeText"){this.uiDialogTitlebarClose.button({// Ensure that we always pass a string
	label:$("<a>").text(""+this.options.closeText).html()});}if(key==="draggable"){isDraggable=uiDialog.is(":data(ui-draggable)");if(isDraggable&&!value){uiDialog.draggable("destroy");}if(!isDraggable&&value){this._makeDraggable();}}if(key==="position"){this._position();}if(key==="resizable"){// currently resizable, becoming non-resizable
	isResizable=uiDialog.is(":data(ui-resizable)");if(isResizable&&!value){uiDialog.resizable("destroy");}// Currently resizable, changing handles
	if(isResizable&&typeof value==="string"){uiDialog.resizable("option","handles",value);}// Currently non-resizable, becoming resizable
	if(!isResizable&&value!==false){this._makeResizable();}}if(key==="title"){this._title(this.uiDialogTitlebar.find(".ui-dialog-title"));}},_size:function _size(){// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
	// divs will both have width and height set, so we need to reset them
	var nonContentHeight,minContentHeight,maxContentHeight,options=this.options;// Reset content sizing
	this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0});if(options.minWidth>options.width){options.width=options.minWidth;}// Reset wrapper sizing
	// determine the height of all the non-content elements
	nonContentHeight=this.uiDialog.css({height:"auto",width:options.width}).outerHeight();minContentHeight=Math.max(0,options.minHeight-nonContentHeight);maxContentHeight=typeof options.maxHeight==="number"?Math.max(0,options.maxHeight-nonContentHeight):"none";if(options.height==="auto"){this.element.css({minHeight:minContentHeight,maxHeight:maxContentHeight,height:"auto"});}else{this.element.height(Math.max(0,options.height-nonContentHeight));}if(this.uiDialog.is(":data(ui-resizable)")){this.uiDialog.resizable("option","minHeight",this._minHeight());}},_blockFrames:function _blockFrames(){this.iframeBlocks=this.document.find("iframe").map(function(){var iframe=$(this);return $("<div>").css({position:"absolute",width:iframe.outerWidth(),height:iframe.outerHeight()}).appendTo(iframe.parent()).offset(iframe.offset())[0];});},_unblockFrames:function _unblockFrames(){if(this.iframeBlocks){this.iframeBlocks.remove();delete this.iframeBlocks;}},_allowInteraction:function _allowInteraction(event){if($(event.target).closest(".ui-dialog").length){return true;}// TODO: Remove hack when datepicker implements
	// the .ui-front logic (#8989)
	return!!$(event.target).closest(".ui-datepicker").length;},_createOverlay:function _createOverlay(){if(!this.options.modal){return;}// We use a delay in case the overlay is created from an
	// event that we're going to be cancelling (#2804)
	var isOpening=true;this._delay(function(){isOpening=false;});if(!this.document.data("ui-dialog-overlays")){// Prevent use of anchors and inputs
	// Using _on() for an event handler shared across many instances is
	// safe because the dialogs stack and must be closed in reverse order
	this._on(this.document,{focusin:function focusin(event){if(isOpening){return;}if(!this._allowInteraction(event)){event.preventDefault();this._trackingInstances()[0]._focusTabbable();}}});}this.overlay=$("<div>").appendTo(this._appendTo());this._addClass(this.overlay,null,"ui-widget-overlay ui-front");this._on(this.overlay,{mousedown:"_keepFocus"});this.document.data("ui-dialog-overlays",(this.document.data("ui-dialog-overlays")||0)+1);},_destroyOverlay:function _destroyOverlay(){if(!this.options.modal){return;}if(this.overlay){var overlays=this.document.data("ui-dialog-overlays")-1;if(!overlays){this._off(this.document,"focusin");this.document.removeData("ui-dialog-overlays");}else{this.document.data("ui-dialog-overlays",overlays);}this.overlay.remove();this.overlay=null;}}});// DEPRECATED
	// TODO: switch return back to widget declaration at top of file when this is removed
	if($.uiBackCompat!==false){// Backcompat for dialogClass option
	$.widget("ui.dialog",$.ui.dialog,{options:{dialogClass:""},_createWrapper:function _createWrapper(){this._super();this.uiDialog.addClass(this.options.dialogClass);},_setOption:function _setOption(key,value){if(key==="dialogClass"){this.uiDialog.removeClass(this.options.dialogClass).addClass(value);}this._superApply(arguments);}});}var widgetsDialog=$.ui.dialog;/*!
	 * jQuery UI Droppable 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Droppable
	//>>group: Interactions
	//>>description: Enables drop targets for draggable elements.
	//>>docs: http://api.jqueryui.com/droppable/
	//>>demos: http://jqueryui.com/droppable/
	$.widget("ui.droppable",{version:"1.12.1",widgetEventPrefix:"drop",options:{accept:"*",addClasses:true,greedy:false,scope:"default",tolerance:"intersect",// Callbacks
	activate:null,deactivate:null,drop:null,out:null,over:null},_create:function _create(){var proportions,o=this.options,accept=o.accept;this.isover=false;this.isout=true;this.accept=$.isFunction(accept)?accept:function(d){return d.is(accept);};this.proportions=function()/* valueToWrite */{if(arguments.length){// Store the droppable's proportions
	proportions=arguments[0];}else{// Retrieve or derive the droppable's proportions
	return proportions?proportions:proportions={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight};}};this._addToManager(o.scope);o.addClasses&&this._addClass("ui-droppable");},_addToManager:function _addToManager(scope){// Add the reference and positions to the manager
	$.ui.ddmanager.droppables[scope]=$.ui.ddmanager.droppables[scope]||[];$.ui.ddmanager.droppables[scope].push(this);},_splice:function _splice(drop){var i=0;for(;i<drop.length;i++){if(drop[i]===this){drop.splice(i,1);}}},_destroy:function _destroy(){var drop=$.ui.ddmanager.droppables[this.options.scope];this._splice(drop);},_setOption:function _setOption(key,value){if(key==="accept"){this.accept=$.isFunction(value)?value:function(d){return d.is(value);};}else if(key==="scope"){var drop=$.ui.ddmanager.droppables[this.options.scope];this._splice(drop);this._addToManager(value);}this._super(key,value);},_activate:function _activate(event){var draggable=$.ui.ddmanager.current;this._addActiveClass();if(draggable){this._trigger("activate",event,this.ui(draggable));}},_deactivate:function _deactivate(event){var draggable=$.ui.ddmanager.current;this._removeActiveClass();if(draggable){this._trigger("deactivate",event,this.ui(draggable));}},_over:function _over(event){var draggable=$.ui.ddmanager.current;// Bail if draggable and droppable are same element
	if(!draggable||(draggable.currentItem||draggable.element)[0]===this.element[0]){return;}if(this.accept.call(this.element[0],draggable.currentItem||draggable.element)){this._addHoverClass();this._trigger("over",event,this.ui(draggable));}},_out:function _out(event){var draggable=$.ui.ddmanager.current;// Bail if draggable and droppable are same element
	if(!draggable||(draggable.currentItem||draggable.element)[0]===this.element[0]){return;}if(this.accept.call(this.element[0],draggable.currentItem||draggable.element)){this._removeHoverClass();this._trigger("out",event,this.ui(draggable));}},_drop:function _drop(event,custom){var draggable=custom||$.ui.ddmanager.current,childrenIntersection=false;// Bail if draggable and droppable are same element
	if(!draggable||(draggable.currentItem||draggable.element)[0]===this.element[0]){return false;}this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function(){var inst=$(this).droppable("instance");if(inst.options.greedy&&!inst.options.disabled&&inst.options.scope===draggable.options.scope&&inst.accept.call(inst.element[0],draggable.currentItem||draggable.element)&&intersect(draggable,$.extend(inst,{offset:inst.element.offset()}),inst.options.tolerance,event)){childrenIntersection=true;return false;}});if(childrenIntersection){return false;}if(this.accept.call(this.element[0],draggable.currentItem||draggable.element)){this._removeActiveClass();this._removeHoverClass();this._trigger("drop",event,this.ui(draggable));return this.element;}return false;},ui:function ui(c){return{draggable:c.currentItem||c.element,helper:c.helper,position:c.position,offset:c.positionAbs};},// Extension points just to make backcompat sane and avoid duplicating logic
	// TODO: Remove in 1.13 along with call to it below
	_addHoverClass:function _addHoverClass(){this._addClass("ui-droppable-hover");},_removeHoverClass:function _removeHoverClass(){this._removeClass("ui-droppable-hover");},_addActiveClass:function _addActiveClass(){this._addClass("ui-droppable-active");},_removeActiveClass:function _removeActiveClass(){this._removeClass("ui-droppable-active");}});var intersect=$.ui.intersect=function(){function isOverAxis(x,reference,size){return x>=reference&&x<reference+size;}return function(draggable,droppable,toleranceMode,event){if(!droppable.offset){return false;}var x1=(draggable.positionAbs||draggable.position.absolute).left+draggable.margins.left,y1=(draggable.positionAbs||draggable.position.absolute).top+draggable.margins.top,x2=x1+draggable.helperProportions.width,y2=y1+draggable.helperProportions.height,l=droppable.offset.left,t=droppable.offset.top,r=l+droppable.proportions().width,b=t+droppable.proportions().height;switch(toleranceMode){case"fit":return l<=x1&&x2<=r&&t<=y1&&y2<=b;case"intersect":return l<x1+draggable.helperProportions.width/2&&// Right Half
	x2-draggable.helperProportions.width/2<r&&// Left Half
	t<y1+draggable.helperProportions.height/2&&// Bottom Half
	y2-draggable.helperProportions.height/2<b;// Top Half
	case"pointer":return isOverAxis(event.pageY,t,droppable.proportions().height)&&isOverAxis(event.pageX,l,droppable.proportions().width);case"touch":return(y1>=t&&y1<=b||// Top edge touching
	y2>=t&&y2<=b||// Bottom edge touching
	y1<t&&y2>b// Surrounded vertically
	)&&(x1>=l&&x1<=r||// Left edge touching
	x2>=l&&x2<=r||// Right edge touching
	x1<l&&x2>r// Surrounded horizontally
	);default:return false;}};}();/*
		This manager tracks offsets of draggables and droppables
	*/$.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function prepareOffsets(t,event){var i,j,m=$.ui.ddmanager.droppables[t.options.scope]||[],type=event?event.type:null,// workaround for #2317
	list=(t.currentItem||t.element).find(":data(ui-droppable)").addBack();droppablesLoop:for(i=0;i<m.length;i++){// No disabled and non-accepted
	if(m[i].options.disabled||t&&!m[i].accept.call(m[i].element[0],t.currentItem||t.element)){continue;}// Filter out elements in the current dragged item
	for(j=0;j<list.length;j++){if(list[j]===m[i].element[0]){m[i].proportions().height=0;continue droppablesLoop;}}m[i].visible=m[i].element.css("display")!=="none";if(!m[i].visible){continue;}// Activate the droppable if used directly from draggables
	if(type==="mousedown"){m[i]._activate.call(m[i],event);}m[i].offset=m[i].element.offset();m[i].proportions({width:m[i].element[0].offsetWidth,height:m[i].element[0].offsetHeight});}},drop:function drop(draggable,event){var dropped=false;// Create a copy of the droppables in case the list changes during the drop (#9116)
	$.each(($.ui.ddmanager.droppables[draggable.options.scope]||[]).slice(),function(){if(!this.options){return;}if(!this.options.disabled&&this.visible&&intersect(draggable,this,this.options.tolerance,event)){dropped=this._drop.call(this,event)||dropped;}if(!this.options.disabled&&this.visible&&this.accept.call(this.element[0],draggable.currentItem||draggable.element)){this.isout=true;this.isover=false;this._deactivate.call(this,event);}});return dropped;},dragStart:function dragStart(draggable,event){// Listen for scrolling so that if the dragging causes scrolling the position of the
	// droppables can be recalculated (see #5003)
	draggable.element.parentsUntil("body").on("scroll.droppable",function(){if(!draggable.options.refreshPositions){$.ui.ddmanager.prepareOffsets(draggable,event);}});},drag:function drag(draggable,event){// If you have a highly dynamic page, you might try this option. It renders positions
	// every time you move the mouse.
	if(draggable.options.refreshPositions){$.ui.ddmanager.prepareOffsets(draggable,event);}// Run through all droppables and check their positions based on specific tolerance options
	$.each($.ui.ddmanager.droppables[draggable.options.scope]||[],function(){if(this.options.disabled||this.greedyChild||!this.visible){return;}var parentInstance,scope,parent,intersects=intersect(draggable,this,this.options.tolerance,event),c=!intersects&&this.isover?"isout":intersects&&!this.isover?"isover":null;if(!c){return;}if(this.options.greedy){// find droppable parents with same scope
	scope=this.options.scope;parent=this.element.parents(":data(ui-droppable)").filter(function(){return $(this).droppable("instance").options.scope===scope;});if(parent.length){parentInstance=$(parent[0]).droppable("instance");parentInstance.greedyChild=c==="isover";}}// We just moved into a greedy child
	if(parentInstance&&c==="isover"){parentInstance.isover=false;parentInstance.isout=true;parentInstance._out.call(parentInstance,event);}this[c]=true;this[c==="isout"?"isover":"isout"]=false;this[c==="isover"?"_over":"_out"].call(this,event);// We just moved out of a greedy child
	if(parentInstance&&c==="isout"){parentInstance.isout=false;parentInstance.isover=true;parentInstance._over.call(parentInstance,event);}});},dragStop:function dragStop(draggable,event){draggable.element.parentsUntil("body").off("scroll.droppable");// Call prepareOffsets one final time since IE does not fire return scroll events when
	// overflow was caused by drag (see #5003)
	if(!draggable.options.refreshPositions){$.ui.ddmanager.prepareOffsets(draggable,event);}}};// DEPRECATED
	// TODO: switch return back to widget declaration at top of file when this is removed
	if($.uiBackCompat!==false){// Backcompat for activeClass and hoverClass options
	$.widget("ui.droppable",$.ui.droppable,{options:{hoverClass:false,activeClass:false},_addActiveClass:function _addActiveClass(){this._super();if(this.options.activeClass){this.element.addClass(this.options.activeClass);}},_removeActiveClass:function _removeActiveClass(){this._super();if(this.options.activeClass){this.element.removeClass(this.options.activeClass);}},_addHoverClass:function _addHoverClass(){this._super();if(this.options.hoverClass){this.element.addClass(this.options.hoverClass);}},_removeHoverClass:function _removeHoverClass(){this._super();if(this.options.hoverClass){this.element.removeClass(this.options.hoverClass);}}});}var widgetsDroppable=$.ui.droppable;/*!
	 * jQuery UI Progressbar 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Progressbar
	//>>group: Widgets
	// jscs:disable maximumLineLength
	//>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.
	// jscs:enable maximumLineLength
	//>>docs: http://api.jqueryui.com/progressbar/
	//>>demos: http://jqueryui.com/progressbar/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/progressbar.css
	//>>css.theme: ../../themes/base/theme.css
	var widgetsProgressbar=$.widget("ui.progressbar",{version:"1.12.1",options:{classes:{"ui-progressbar":"ui-corner-all","ui-progressbar-value":"ui-corner-left","ui-progressbar-complete":"ui-corner-right"},max:100,value:0,change:null,complete:null},min:0,_create:function _create(){// Constrain initial value
	this.oldValue=this.options.value=this._constrainedValue();this.element.attr({// Only set static values; aria-valuenow and aria-valuemax are
	// set inside _refreshValue()
	role:"progressbar","aria-valuemin":this.min});this._addClass("ui-progressbar","ui-widget ui-widget-content");this.valueDiv=$("<div>").appendTo(this.element);this._addClass(this.valueDiv,"ui-progressbar-value","ui-widget-header");this._refreshValue();},_destroy:function _destroy(){this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow");this.valueDiv.remove();},value:function value(newValue){if(newValue===undefined){return this.options.value;}this.options.value=this._constrainedValue(newValue);this._refreshValue();},_constrainedValue:function _constrainedValue(newValue){if(newValue===undefined){newValue=this.options.value;}this.indeterminate=newValue===false;// Sanitize value
	if(typeof newValue!=="number"){newValue=0;}return this.indeterminate?false:Math.min(this.options.max,Math.max(this.min,newValue));},_setOptions:function _setOptions(options){// Ensure "value" option is set after other values (like max)
	var value=options.value;delete options.value;this._super(options);this.options.value=this._constrainedValue(value);this._refreshValue();},_setOption:function _setOption(key,value){if(key==="max"){// Don't allow a max less than min
	value=Math.max(this.min,value);}this._super(key,value);},_setOptionDisabled:function _setOptionDisabled(value){this._super(value);this.element.attr("aria-disabled",value);this._toggleClass(null,"ui-state-disabled",!!value);},_percentage:function _percentage(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min);},_refreshValue:function _refreshValue(){var value=this.options.value,percentage=this._percentage();this.valueDiv.toggle(this.indeterminate||value>this.min).width(percentage.toFixed(0)+"%");this._toggleClass(this.valueDiv,"ui-progressbar-complete",null,value===this.options.max)._toggleClass("ui-progressbar-indeterminate",null,this.indeterminate);if(this.indeterminate){this.element.removeAttr("aria-valuenow");if(!this.overlayDiv){this.overlayDiv=$("<div>").appendTo(this.valueDiv);this._addClass(this.overlayDiv,"ui-progressbar-overlay");}}else{this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":value});if(this.overlayDiv){this.overlayDiv.remove();this.overlayDiv=null;}}if(this.oldValue!==value){this.oldValue=value;this._trigger("change");}if(value===this.options.max){this._trigger("complete");}}});/*!
	 * jQuery UI Selectable 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Selectable
	//>>group: Interactions
	//>>description: Allows groups of elements to be selected with the mouse.
	//>>docs: http://api.jqueryui.com/selectable/
	//>>demos: http://jqueryui.com/selectable/
	//>>css.structure: ../../themes/base/selectable.css
	var widgetsSelectable=$.widget("ui.selectable",$.ui.mouse,{version:"1.12.1",options:{appendTo:"body",autoRefresh:true,distance:0,filter:"*",tolerance:"touch",// Callbacks
	selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function _create(){var that=this;this._addClass("ui-selectable");this.dragged=false;// Cache selectee children based on filter
	this.refresh=function(){that.elementPos=$(that.element[0]).offset();that.selectees=$(that.options.filter,that.element[0]);that._addClass(that.selectees,"ui-selectee");that.selectees.each(function(){var $this=$(this),selecteeOffset=$this.offset(),pos={left:selecteeOffset.left-that.elementPos.left,top:selecteeOffset.top-that.elementPos.top};$.data(this,"selectable-item",{element:this,$element:$this,left:pos.left,top:pos.top,right:pos.left+$this.outerWidth(),bottom:pos.top+$this.outerHeight(),startselected:false,selected:$this.hasClass("ui-selected"),selecting:$this.hasClass("ui-selecting"),unselecting:$this.hasClass("ui-unselecting")});});};this.refresh();this._mouseInit();this.helper=$("<div>");this._addClass(this.helper,"ui-selectable-helper");},_destroy:function _destroy(){this.selectees.removeData("selectable-item");this._mouseDestroy();},_mouseStart:function _mouseStart(event){var that=this,options=this.options;this.opos=[event.pageX,event.pageY];this.elementPos=$(this.element[0]).offset();if(this.options.disabled){return;}this.selectees=$(options.filter,this.element[0]);this._trigger("start",event);$(options.appendTo).append(this.helper);// position helper (lasso)
	this.helper.css({"left":event.pageX,"top":event.pageY,"width":0,"height":0});if(options.autoRefresh){this.refresh();}this.selectees.filter(".ui-selected").each(function(){var selectee=$.data(this,"selectable-item");selectee.startselected=true;if(!event.metaKey&&!event.ctrlKey){that._removeClass(selectee.$element,"ui-selected");selectee.selected=false;that._addClass(selectee.$element,"ui-unselecting");selectee.unselecting=true;// selectable UNSELECTING callback
	that._trigger("unselecting",event,{unselecting:selectee.element});}});$(event.target).parents().addBack().each(function(){var doSelect,selectee=$.data(this,"selectable-item");if(selectee){doSelect=!event.metaKey&&!event.ctrlKey||!selectee.$element.hasClass("ui-selected");that._removeClass(selectee.$element,doSelect?"ui-unselecting":"ui-selected")._addClass(selectee.$element,doSelect?"ui-selecting":"ui-unselecting");selectee.unselecting=!doSelect;selectee.selecting=doSelect;selectee.selected=doSelect;// selectable (UN)SELECTING callback
	if(doSelect){that._trigger("selecting",event,{selecting:selectee.element});}else{that._trigger("unselecting",event,{unselecting:selectee.element});}return false;}});},_mouseDrag:function _mouseDrag(event){this.dragged=true;if(this.options.disabled){return;}var tmp,that=this,options=this.options,x1=this.opos[0],y1=this.opos[1],x2=event.pageX,y2=event.pageY;if(x1>x2){tmp=x2;x2=x1;x1=tmp;}if(y1>y2){tmp=y2;y2=y1;y1=tmp;}this.helper.css({left:x1,top:y1,width:x2-x1,height:y2-y1});this.selectees.each(function(){var selectee=$.data(this,"selectable-item"),hit=false,offset={};//prevent helper from being selected if appendTo: selectable
	if(!selectee||selectee.element===that.element[0]){return;}offset.left=selectee.left+that.elementPos.left;offset.right=selectee.right+that.elementPos.left;offset.top=selectee.top+that.elementPos.top;offset.bottom=selectee.bottom+that.elementPos.top;if(options.tolerance==="touch"){hit=!(offset.left>x2||offset.right<x1||offset.top>y2||offset.bottom<y1);}else if(options.tolerance==="fit"){hit=offset.left>x1&&offset.right<x2&&offset.top>y1&&offset.bottom<y2;}if(hit){// SELECT
	if(selectee.selected){that._removeClass(selectee.$element,"ui-selected");selectee.selected=false;}if(selectee.unselecting){that._removeClass(selectee.$element,"ui-unselecting");selectee.unselecting=false;}if(!selectee.selecting){that._addClass(selectee.$element,"ui-selecting");selectee.selecting=true;// selectable SELECTING callback
	that._trigger("selecting",event,{selecting:selectee.element});}}else{// UNSELECT
	if(selectee.selecting){if((event.metaKey||event.ctrlKey)&&selectee.startselected){that._removeClass(selectee.$element,"ui-selecting");selectee.selecting=false;that._addClass(selectee.$element,"ui-selected");selectee.selected=true;}else{that._removeClass(selectee.$element,"ui-selecting");selectee.selecting=false;if(selectee.startselected){that._addClass(selectee.$element,"ui-unselecting");selectee.unselecting=true;}// selectable UNSELECTING callback
	that._trigger("unselecting",event,{unselecting:selectee.element});}}if(selectee.selected){if(!event.metaKey&&!event.ctrlKey&&!selectee.startselected){that._removeClass(selectee.$element,"ui-selected");selectee.selected=false;that._addClass(selectee.$element,"ui-unselecting");selectee.unselecting=true;// selectable UNSELECTING callback
	that._trigger("unselecting",event,{unselecting:selectee.element});}}}});return false;},_mouseStop:function _mouseStop(event){var that=this;this.dragged=false;$(".ui-unselecting",this.element[0]).each(function(){var selectee=$.data(this,"selectable-item");that._removeClass(selectee.$element,"ui-unselecting");selectee.unselecting=false;selectee.startselected=false;that._trigger("unselected",event,{unselected:selectee.element});});$(".ui-selecting",this.element[0]).each(function(){var selectee=$.data(this,"selectable-item");that._removeClass(selectee.$element,"ui-selecting")._addClass(selectee.$element,"ui-selected");selectee.selecting=false;selectee.selected=true;selectee.startselected=true;that._trigger("selected",event,{selected:selectee.element});});this._trigger("stop",event);this.helper.remove();return false;}});/*!
	 * jQuery UI Selectmenu 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Selectmenu
	//>>group: Widgets
	// jscs:disable maximumLineLength
	//>>description: Duplicates and extends the functionality of a native HTML select element, allowing it to be customizable in behavior and appearance far beyond the limitations of a native select.
	// jscs:enable maximumLineLength
	//>>docs: http://api.jqueryui.com/selectmenu/
	//>>demos: http://jqueryui.com/selectmenu/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/selectmenu.css, ../../themes/base/button.css
	//>>css.theme: ../../themes/base/theme.css
	var widgetsSelectmenu=$.widget("ui.selectmenu",[$.ui.formResetMixin,{version:"1.12.1",defaultElement:"<select>",options:{appendTo:null,classes:{"ui-selectmenu-button-open":"ui-corner-top","ui-selectmenu-button-closed":"ui-corner-all"},disabled:null,icons:{button:"ui-icon-triangle-1-s"},position:{my:"left top",at:"left bottom",collision:"none"},width:false,// Callbacks
	change:null,close:null,focus:null,open:null,select:null},_create:function _create(){var selectmenuId=this.element.uniqueId().attr("id");this.ids={element:selectmenuId,button:selectmenuId+"-button",menu:selectmenuId+"-menu"};this._drawButton();this._drawMenu();this._bindFormResetHandler();this._rendered=false;this.menuItems=$();},_drawButton:function _drawButton(){var icon,that=this,item=this._parseOption(this.element.find("option:selected"),this.element[0].selectedIndex);// Associate existing label with the new button
	this.labels=this.element.labels().attr("for",this.ids.button);this._on(this.labels,{click:function click(event){this.button.focus();event.preventDefault();}});// Hide original select element
	this.element.hide();// Create button
	this.button=$("<span>",{tabindex:this.options.disabled?-1:0,id:this.ids.button,role:"combobox","aria-expanded":"false","aria-autocomplete":"list","aria-owns":this.ids.menu,"aria-haspopup":"true",title:this.element.attr("title")}).insertAfter(this.element);this._addClass(this.button,"ui-selectmenu-button ui-selectmenu-button-closed","ui-button ui-widget");icon=$("<span>").appendTo(this.button);this._addClass(icon,"ui-selectmenu-icon","ui-icon "+this.options.icons.button);this.buttonItem=this._renderButtonItem(item).appendTo(this.button);if(this.options.width!==false){this._resizeButton();}this._on(this.button,this._buttonEvents);this.button.one("focusin",function(){// Delay rendering the menu items until the button receives focus.
	// The menu may have already been rendered via a programmatic open.
	if(!that._rendered){that._refreshMenu();}});},_drawMenu:function _drawMenu(){var that=this;// Create menu
	this.menu=$("<ul>",{"aria-hidden":"true","aria-labelledby":this.ids.button,id:this.ids.menu});// Wrap menu
	this.menuWrap=$("<div>").append(this.menu);this._addClass(this.menuWrap,"ui-selectmenu-menu","ui-front");this.menuWrap.appendTo(this._appendTo());// Initialize menu widget
	this.menuInstance=this.menu.menu({classes:{"ui-menu":"ui-corner-bottom"},role:"listbox",select:function select(event,ui){event.preventDefault();// Support: IE8
	// If the item was selected via a click, the text selection
	// will be destroyed in IE
	that._setSelection();that._select(ui.item.data("ui-selectmenu-item"),event);},focus:function focus(event,ui){var item=ui.item.data("ui-selectmenu-item");// Prevent inital focus from firing and check if its a newly focused item
	if(that.focusIndex!=null&&item.index!==that.focusIndex){that._trigger("focus",event,{item:item});if(!that.isOpen){that._select(item,event);}}that.focusIndex=item.index;that.button.attr("aria-activedescendant",that.menuItems.eq(item.index).attr("id"));}}).menu("instance");// Don't close the menu on mouseleave
	this.menuInstance._off(this.menu,"mouseleave");// Cancel the menu's collapseAll on document click
	this.menuInstance._closeOnDocumentClick=function(){return false;};// Selects often contain empty items, but never contain dividers
	this.menuInstance._isDivider=function(){return false;};},refresh:function refresh(){this._refreshMenu();this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(// Fall back to an empty object in case there are no options
	this._getSelectedItem().data("ui-selectmenu-item")||{}));if(this.options.width===null){this._resizeButton();}},_refreshMenu:function _refreshMenu(){var item,options=this.element.find("option");this.menu.empty();this._parseOptions(options);this._renderMenu(this.menu,this.items);this.menuInstance.refresh();this.menuItems=this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper");this._rendered=true;if(!options.length){return;}item=this._getSelectedItem();// Update the menu to have the correct item focused
	this.menuInstance.focus(null,item);this._setAria(item.data("ui-selectmenu-item"));// Set disabled state
	this._setOption("disabled",this.element.prop("disabled"));},open:function open(event){if(this.options.disabled){return;}// If this is the first time the menu is being opened, render the items
	if(!this._rendered){this._refreshMenu();}else{// Menu clears focus on close, reset focus to selected item
	this._removeClass(this.menu.find(".ui-state-active"),null,"ui-state-active");this.menuInstance.focus(null,this._getSelectedItem());}// If there are no options, don't open the menu
	if(!this.menuItems.length){return;}this.isOpen=true;this._toggleAttr();this._resizeMenu();this._position();this._on(this.document,this._documentClick);this._trigger("open",event);},_position:function _position(){this.menuWrap.position($.extend({of:this.button},this.options.position));},close:function close(event){if(!this.isOpen){return;}this.isOpen=false;this._toggleAttr();this.range=null;this._off(this.document);this._trigger("close",event);},widget:function widget(){return this.button;},menuWidget:function menuWidget(){return this.menu;},_renderButtonItem:function _renderButtonItem(item){var buttonItem=$("<span>");this._setText(buttonItem,item.label);this._addClass(buttonItem,"ui-selectmenu-text");return buttonItem;},_renderMenu:function _renderMenu(ul,items){var that=this,currentOptgroup="";$.each(items,function(index,item){var li;if(item.optgroup!==currentOptgroup){li=$("<li>",{text:item.optgroup});that._addClass(li,"ui-selectmenu-optgroup","ui-menu-divider"+(item.element.parent("optgroup").prop("disabled")?" ui-state-disabled":""));li.appendTo(ul);currentOptgroup=item.optgroup;}that._renderItemData(ul,item);});},_renderItemData:function _renderItemData(ul,item){return this._renderItem(ul,item).data("ui-selectmenu-item",item);},_renderItem:function _renderItem(ul,item){var li=$("<li>"),wrapper=$("<div>",{title:item.element.attr("title")});if(item.disabled){this._addClass(li,null,"ui-state-disabled");}this._setText(wrapper,item.label);return li.append(wrapper).appendTo(ul);},_setText:function _setText(element,value){if(value){element.text(value);}else{element.html("&#160;");}},_move:function _move(direction,event){var item,next,filter=".ui-menu-item";if(this.isOpen){item=this.menuItems.eq(this.focusIndex).parent("li");}else{item=this.menuItems.eq(this.element[0].selectedIndex).parent("li");filter+=":not(.ui-state-disabled)";}if(direction==="first"||direction==="last"){next=item[direction==="first"?"prevAll":"nextAll"](filter).eq(-1);}else{next=item[direction+"All"](filter).eq(0);}if(next.length){this.menuInstance.focus(event,next);}},_getSelectedItem:function _getSelectedItem(){return this.menuItems.eq(this.element[0].selectedIndex).parent("li");},_toggle:function _toggle(event){this[this.isOpen?"close":"open"](event);},_setSelection:function _setSelection(){var selection;if(!this.range){return;}if(window.getSelection){selection=window.getSelection();selection.removeAllRanges();selection.addRange(this.range);// Support: IE8
	}else{this.range.select();}// Support: IE
	// Setting the text selection kills the button focus in IE, but
	// restoring the focus doesn't kill the selection.
	this.button.focus();},_documentClick:{mousedown:function mousedown(event){if(!this.isOpen){return;}if(!$(event.target).closest(".ui-selectmenu-menu, #"+$.ui.escapeSelector(this.ids.button)).length){this.close(event);}}},_buttonEvents:{// Prevent text selection from being reset when interacting with the selectmenu (#10144)
	mousedown:function mousedown(){var selection;if(window.getSelection){selection=window.getSelection();if(selection.rangeCount){this.range=selection.getRangeAt(0);}// Support: IE8
	}else{this.range=document.selection.createRange();}},click:function click(event){this._setSelection();this._toggle(event);},keydown:function keydown(event){var preventDefault=true;switch(event.keyCode){case $.ui.keyCode.TAB:case $.ui.keyCode.ESCAPE:this.close(event);preventDefault=false;break;case $.ui.keyCode.ENTER:if(this.isOpen){this._selectFocusedItem(event);}break;case $.ui.keyCode.UP:if(event.altKey){this._toggle(event);}else{this._move("prev",event);}break;case $.ui.keyCode.DOWN:if(event.altKey){this._toggle(event);}else{this._move("next",event);}break;case $.ui.keyCode.SPACE:if(this.isOpen){this._selectFocusedItem(event);}else{this._toggle(event);}break;case $.ui.keyCode.LEFT:this._move("prev",event);break;case $.ui.keyCode.RIGHT:this._move("next",event);break;case $.ui.keyCode.HOME:case $.ui.keyCode.PAGE_UP:this._move("first",event);break;case $.ui.keyCode.END:case $.ui.keyCode.PAGE_DOWN:this._move("last",event);break;default:this.menu.trigger(event);preventDefault=false;}if(preventDefault){event.preventDefault();}}},_selectFocusedItem:function _selectFocusedItem(event){var item=this.menuItems.eq(this.focusIndex).parent("li");if(!item.hasClass("ui-state-disabled")){this._select(item.data("ui-selectmenu-item"),event);}},_select:function _select(item,event){var oldIndex=this.element[0].selectedIndex;// Change native select element
	this.element[0].selectedIndex=item.index;this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(item));this._setAria(item);this._trigger("select",event,{item:item});if(item.index!==oldIndex){this._trigger("change",event,{item:item});}this.close(event);},_setAria:function _setAria(item){var id=this.menuItems.eq(item.index).attr("id");this.button.attr({"aria-labelledby":id,"aria-activedescendant":id});this.menu.attr("aria-activedescendant",id);},_setOption:function _setOption(key,value){if(key==="icons"){var icon=this.button.find("span.ui-icon");this._removeClass(icon,null,this.options.icons.button)._addClass(icon,null,value.button);}this._super(key,value);if(key==="appendTo"){this.menuWrap.appendTo(this._appendTo());}if(key==="width"){this._resizeButton();}},_setOptionDisabled:function _setOptionDisabled(value){this._super(value);this.menuInstance.option("disabled",value);this.button.attr("aria-disabled",value);this._toggleClass(this.button,null,"ui-state-disabled",value);this.element.prop("disabled",value);if(value){this.button.attr("tabindex",-1);this.close();}else{this.button.attr("tabindex",0);}},_appendTo:function _appendTo(){var element=this.options.appendTo;if(element){element=element.jquery||element.nodeType?$(element):this.document.find(element).eq(0);}if(!element||!element[0]){element=this.element.closest(".ui-front, dialog");}if(!element.length){element=this.document[0].body;}return element;},_toggleAttr:function _toggleAttr(){this.button.attr("aria-expanded",this.isOpen);// We can't use two _toggleClass() calls here, because we need to make sure
	// we always remove classes first and add them second, otherwise if both classes have the
	// same theme class, it will be removed after we add it.
	this._removeClass(this.button,"ui-selectmenu-button-"+(this.isOpen?"closed":"open"))._addClass(this.button,"ui-selectmenu-button-"+(this.isOpen?"open":"closed"))._toggleClass(this.menuWrap,"ui-selectmenu-open",null,this.isOpen);this.menu.attr("aria-hidden",!this.isOpen);},_resizeButton:function _resizeButton(){var width=this.options.width;// For `width: false`, just remove inline style and stop
	if(width===false){this.button.css("width","");return;}// For `width: null`, match the width of the original element
	if(width===null){width=this.element.show().outerWidth();this.element.hide();}this.button.outerWidth(width);},_resizeMenu:function _resizeMenu(){this.menu.outerWidth(Math.max(this.button.outerWidth(),// Support: IE10
	// IE10 wraps long text (possibly a rounding bug)
	// so we add 1px to avoid the wrapping
	this.menu.width("").outerWidth()+1));},_getCreateOptions:function _getCreateOptions(){var options=this._super();options.disabled=this.element.prop("disabled");return options;},_parseOptions:function _parseOptions(options){var that=this,data=[];options.each(function(index,item){data.push(that._parseOption($(item),index));});this.items=data;},_parseOption:function _parseOption(option,index){var optgroup=option.parent("optgroup");return{element:option,index:index,value:option.val(),label:option.text(),optgroup:optgroup.attr("label")||"",disabled:optgroup.prop("disabled")||option.prop("disabled")};},_destroy:function _destroy(){this._unbindFormResetHandler();this.menuWrap.remove();this.button.remove();this.element.show();this.element.removeUniqueId();this.labels.attr("for",this.ids.element);}}]);/*!
	 * jQuery UI Slider 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Slider
	//>>group: Widgets
	//>>description: Displays a flexible slider with ranges and accessibility via keyboard.
	//>>docs: http://api.jqueryui.com/slider/
	//>>demos: http://jqueryui.com/slider/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/slider.css
	//>>css.theme: ../../themes/base/theme.css
	var widgetsSlider=$.widget("ui.slider",$.ui.mouse,{version:"1.12.1",widgetEventPrefix:"slide",options:{animate:false,classes:{"ui-slider":"ui-corner-all","ui-slider-handle":"ui-corner-all",// Note: ui-widget-header isn't the most fittingly semantic framework class for this
	// element, but worked best visually with a variety of themes
	"ui-slider-range":"ui-corner-all ui-widget-header"},distance:0,max:100,min:0,orientation:"horizontal",range:false,step:1,value:0,values:null,// Callbacks
	change:null,slide:null,start:null,stop:null},// Number of pages in a slider
	// (how many times can you page up/down to go through the whole range)
	numPages:5,_create:function _create(){this._keySliding=false;this._mouseSliding=false;this._animateOff=true;this._handleIndex=null;this._detectOrientation();this._mouseInit();this._calculateNewMax();this._addClass("ui-slider ui-slider-"+this.orientation,"ui-widget ui-widget-content");this._refresh();this._animateOff=false;},_refresh:function _refresh(){this._createRange();this._createHandles();this._setupEvents();this._refreshValue();},_createHandles:function _createHandles(){var i,handleCount,options=this.options,existingHandles=this.element.find(".ui-slider-handle"),handle="<span tabindex='0'></span>",handles=[];handleCount=options.values&&options.values.length||1;if(existingHandles.length>handleCount){existingHandles.slice(handleCount).remove();existingHandles=existingHandles.slice(0,handleCount);}for(i=existingHandles.length;i<handleCount;i++){handles.push(handle);}this.handles=existingHandles.add($(handles.join("")).appendTo(this.element));this._addClass(this.handles,"ui-slider-handle","ui-state-default");this.handle=this.handles.eq(0);this.handles.each(function(i){$(this).data("ui-slider-handle-index",i).attr("tabIndex",0);});},_createRange:function _createRange(){var options=this.options;if(options.range){if(options.range===true){if(!options.values){options.values=[this._valueMin(),this._valueMin()];}else if(options.values.length&&options.values.length!==2){options.values=[options.values[0],options.values[0]];}else if($.isArray(options.values)){options.values=options.values.slice(0);}}if(!this.range||!this.range.length){this.range=$("<div>").appendTo(this.element);this._addClass(this.range,"ui-slider-range");}else{this._removeClass(this.range,"ui-slider-range-min ui-slider-range-max");// Handle range switching from true to min/max
	this.range.css({"left":"","bottom":""});}if(options.range==="min"||options.range==="max"){this._addClass(this.range,"ui-slider-range-"+options.range);}}else{if(this.range){this.range.remove();}this.range=null;}},_setupEvents:function _setupEvents(){this._off(this.handles);this._on(this.handles,this._handleEvents);this._hoverable(this.handles);this._focusable(this.handles);},_destroy:function _destroy(){this.handles.remove();if(this.range){this.range.remove();}this._mouseDestroy();},_mouseCapture:function _mouseCapture(event){var position,normValue,distance,closestHandle,index,allowed,offset,mouseOverHandle,that=this,o=this.options;if(o.disabled){return false;}this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()};this.elementOffset=this.element.offset();position={x:event.pageX,y:event.pageY};normValue=this._normValueFromMouse(position);distance=this._valueMax()-this._valueMin()+1;this.handles.each(function(i){var thisDistance=Math.abs(normValue-that.values(i));if(distance>thisDistance||distance===thisDistance&&(i===that._lastChangedValue||that.values(i)===o.min)){distance=thisDistance;closestHandle=$(this);index=i;}});allowed=this._start(event,index);if(allowed===false){return false;}this._mouseSliding=true;this._handleIndex=index;this._addClass(closestHandle,null,"ui-state-active");closestHandle.trigger("focus");offset=closestHandle.offset();mouseOverHandle=!$(event.target).parents().addBack().is(".ui-slider-handle");this._clickOffset=mouseOverHandle?{left:0,top:0}:{left:event.pageX-offset.left-closestHandle.width()/2,top:event.pageY-offset.top-closestHandle.height()/2-(parseInt(closestHandle.css("borderTopWidth"),10)||0)-(parseInt(closestHandle.css("borderBottomWidth"),10)||0)+(parseInt(closestHandle.css("marginTop"),10)||0)};if(!this.handles.hasClass("ui-state-hover")){this._slide(event,index,normValue);}this._animateOff=true;return true;},_mouseStart:function _mouseStart(){return true;},_mouseDrag:function _mouseDrag(event){var position={x:event.pageX,y:event.pageY},normValue=this._normValueFromMouse(position);this._slide(event,this._handleIndex,normValue);return false;},_mouseStop:function _mouseStop(event){this._removeClass(this.handles,null,"ui-state-active");this._mouseSliding=false;this._stop(event,this._handleIndex);this._change(event,this._handleIndex);this._handleIndex=null;this._clickOffset=null;this._animateOff=false;return false;},_detectOrientation:function _detectOrientation(){this.orientation=this.options.orientation==="vertical"?"vertical":"horizontal";},_normValueFromMouse:function _normValueFromMouse(position){var pixelTotal,pixelMouse,percentMouse,valueTotal,valueMouse;if(this.orientation==="horizontal"){pixelTotal=this.elementSize.width;pixelMouse=position.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0);}else{pixelTotal=this.elementSize.height;pixelMouse=position.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0);}percentMouse=pixelMouse/pixelTotal;if(percentMouse>1){percentMouse=1;}if(percentMouse<0){percentMouse=0;}if(this.orientation==="vertical"){percentMouse=1-percentMouse;}valueTotal=this._valueMax()-this._valueMin();valueMouse=this._valueMin()+percentMouse*valueTotal;return this._trimAlignValue(valueMouse);},_uiHash:function _uiHash(index,value,values){var uiHash={handle:this.handles[index],handleIndex:index,value:value!==undefined?value:this.value()};if(this._hasMultipleValues()){uiHash.value=value!==undefined?value:this.values(index);uiHash.values=values||this.values();}return uiHash;},_hasMultipleValues:function _hasMultipleValues(){return this.options.values&&this.options.values.length;},_start:function _start(event,index){return this._trigger("start",event,this._uiHash(index));},_slide:function _slide(event,index,newVal){var allowed,otherVal,currentValue=this.value(),newValues=this.values();if(this._hasMultipleValues()){otherVal=this.values(index?0:1);currentValue=this.values(index);if(this.options.values.length===2&&this.options.range===true){newVal=index===0?Math.min(otherVal,newVal):Math.max(otherVal,newVal);}newValues[index]=newVal;}if(newVal===currentValue){return;}allowed=this._trigger("slide",event,this._uiHash(index,newVal,newValues));// A slide can be canceled by returning false from the slide callback
	if(allowed===false){return;}if(this._hasMultipleValues()){this.values(index,newVal);}else{this.value(newVal);}},_stop:function _stop(event,index){this._trigger("stop",event,this._uiHash(index));},_change:function _change(event,index){if(!this._keySliding&&!this._mouseSliding){//store the last changed value index for reference when handles overlap
	this._lastChangedValue=index;this._trigger("change",event,this._uiHash(index));}},value:function value(newValue){if(arguments.length){this.options.value=this._trimAlignValue(newValue);this._refreshValue();this._change(null,0);return;}return this._value();},values:function values(index,newValue){var vals,newValues,i;if(arguments.length>1){this.options.values[index]=this._trimAlignValue(newValue);this._refreshValue();this._change(null,index);return;}if(arguments.length){if($.isArray(arguments[0])){vals=this.options.values;newValues=arguments[0];for(i=0;i<vals.length;i+=1){vals[i]=this._trimAlignValue(newValues[i]);this._change(null,i);}this._refreshValue();}else{if(this._hasMultipleValues()){return this._values(index);}else{return this.value();}}}else{return this._values();}},_setOption:function _setOption(key,value){var i,valsLength=0;if(key==="range"&&this.options.range===true){if(value==="min"){this.options.value=this._values(0);this.options.values=null;}else if(value==="max"){this.options.value=this._values(this.options.values.length-1);this.options.values=null;}}if($.isArray(this.options.values)){valsLength=this.options.values.length;}this._super(key,value);switch(key){case"orientation":this._detectOrientation();this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-"+this.orientation);this._refreshValue();if(this.options.range){this._refreshRange(value);}// Reset positioning from previous orientation
	this.handles.css(value==="horizontal"?"bottom":"left","");break;case"value":this._animateOff=true;this._refreshValue();this._change(null,0);this._animateOff=false;break;case"values":this._animateOff=true;this._refreshValue();// Start from the last handle to prevent unreachable handles (#9046)
	for(i=valsLength-1;i>=0;i--){this._change(null,i);}this._animateOff=false;break;case"step":case"min":case"max":this._animateOff=true;this._calculateNewMax();this._refreshValue();this._animateOff=false;break;case"range":this._animateOff=true;this._refresh();this._animateOff=false;break;}},_setOptionDisabled:function _setOptionDisabled(value){this._super(value);this._toggleClass(null,"ui-state-disabled",!!value);},//internal value getter
	// _value() returns value trimmed by min and max, aligned by step
	_value:function _value(){var val=this.options.value;val=this._trimAlignValue(val);return val;},//internal values getter
	// _values() returns array of values trimmed by min and max, aligned by step
	// _values( index ) returns single value trimmed by min and max, aligned by step
	_values:function _values(index){var val,vals,i;if(arguments.length){val=this.options.values[index];val=this._trimAlignValue(val);return val;}else if(this._hasMultipleValues()){// .slice() creates a copy of the array
	// this copy gets trimmed by min and max and then returned
	vals=this.options.values.slice();for(i=0;i<vals.length;i+=1){vals[i]=this._trimAlignValue(vals[i]);}return vals;}else{return[];}},// Returns the step-aligned value that val is closest to, between (inclusive) min and max
	_trimAlignValue:function _trimAlignValue(val){if(val<=this._valueMin()){return this._valueMin();}if(val>=this._valueMax()){return this._valueMax();}var step=this.options.step>0?this.options.step:1,valModStep=(val-this._valueMin())%step,alignValue=val-valModStep;if(Math.abs(valModStep)*2>=step){alignValue+=valModStep>0?step:-step;}// Since JavaScript has problems with large floats, round
	// the final value to 5 digits after the decimal point (see #4124)
	return parseFloat(alignValue.toFixed(5));},_calculateNewMax:function _calculateNewMax(){var max=this.options.max,min=this._valueMin(),step=this.options.step,aboveMin=Math.round((max-min)/step)*step;max=aboveMin+min;if(max>this.options.max){//If max is not divisible by step, rounding off may increase its value
	max-=step;}this.max=parseFloat(max.toFixed(this._precision()));},_precision:function _precision(){var precision=this._precisionOf(this.options.step);if(this.options.min!==null){precision=Math.max(precision,this._precisionOf(this.options.min));}return precision;},_precisionOf:function _precisionOf(num){var str=num.toString(),decimal=str.indexOf(".");return decimal===-1?0:str.length-decimal-1;},_valueMin:function _valueMin(){return this.options.min;},_valueMax:function _valueMax(){return this.max;},_refreshRange:function _refreshRange(orientation){if(orientation==="vertical"){this.range.css({"width":"","left":""});}if(orientation==="horizontal"){this.range.css({"height":"","bottom":""});}},_refreshValue:function _refreshValue(){var lastValPercent,valPercent,value,valueMin,valueMax,oRange=this.options.range,o=this.options,that=this,animate=!this._animateOff?o.animate:false,_set={};if(this._hasMultipleValues()){this.handles.each(function(i){valPercent=(that.values(i)-that._valueMin())/(that._valueMax()-that._valueMin())*100;_set[that.orientation==="horizontal"?"left":"bottom"]=valPercent+"%";$(this).stop(1,1)[animate?"animate":"css"](_set,o.animate);if(that.options.range===true){if(that.orientation==="horizontal"){if(i===0){that.range.stop(1,1)[animate?"animate":"css"]({left:valPercent+"%"},o.animate);}if(i===1){that.range[animate?"animate":"css"]({width:valPercent-lastValPercent+"%"},{queue:false,duration:o.animate});}}else{if(i===0){that.range.stop(1,1)[animate?"animate":"css"]({bottom:valPercent+"%"},o.animate);}if(i===1){that.range[animate?"animate":"css"]({height:valPercent-lastValPercent+"%"},{queue:false,duration:o.animate});}}}lastValPercent=valPercent;});}else{value=this.value();valueMin=this._valueMin();valueMax=this._valueMax();valPercent=valueMax!==valueMin?(value-valueMin)/(valueMax-valueMin)*100:0;_set[this.orientation==="horizontal"?"left":"bottom"]=valPercent+"%";this.handle.stop(1,1)[animate?"animate":"css"](_set,o.animate);if(oRange==="min"&&this.orientation==="horizontal"){this.range.stop(1,1)[animate?"animate":"css"]({width:valPercent+"%"},o.animate);}if(oRange==="max"&&this.orientation==="horizontal"){this.range.stop(1,1)[animate?"animate":"css"]({width:100-valPercent+"%"},o.animate);}if(oRange==="min"&&this.orientation==="vertical"){this.range.stop(1,1)[animate?"animate":"css"]({height:valPercent+"%"},o.animate);}if(oRange==="max"&&this.orientation==="vertical"){this.range.stop(1,1)[animate?"animate":"css"]({height:100-valPercent+"%"},o.animate);}}},_handleEvents:{keydown:function keydown(event){var allowed,curVal,newVal,step,index=$(event.target).data("ui-slider-handle-index");switch(event.keyCode){case $.ui.keyCode.HOME:case $.ui.keyCode.END:case $.ui.keyCode.PAGE_UP:case $.ui.keyCode.PAGE_DOWN:case $.ui.keyCode.UP:case $.ui.keyCode.RIGHT:case $.ui.keyCode.DOWN:case $.ui.keyCode.LEFT:event.preventDefault();if(!this._keySliding){this._keySliding=true;this._addClass($(event.target),null,"ui-state-active");allowed=this._start(event,index);if(allowed===false){return;}}break;}step=this.options.step;if(this._hasMultipleValues()){curVal=newVal=this.values(index);}else{curVal=newVal=this.value();}switch(event.keyCode){case $.ui.keyCode.HOME:newVal=this._valueMin();break;case $.ui.keyCode.END:newVal=this._valueMax();break;case $.ui.keyCode.PAGE_UP:newVal=this._trimAlignValue(curVal+(this._valueMax()-this._valueMin())/this.numPages);break;case $.ui.keyCode.PAGE_DOWN:newVal=this._trimAlignValue(curVal-(this._valueMax()-this._valueMin())/this.numPages);break;case $.ui.keyCode.UP:case $.ui.keyCode.RIGHT:if(curVal===this._valueMax()){return;}newVal=this._trimAlignValue(curVal+step);break;case $.ui.keyCode.DOWN:case $.ui.keyCode.LEFT:if(curVal===this._valueMin()){return;}newVal=this._trimAlignValue(curVal-step);break;}this._slide(event,index,newVal);},keyup:function keyup(event){var index=$(event.target).data("ui-slider-handle-index");if(this._keySliding){this._keySliding=false;this._stop(event,index);this._change(event,index);this._removeClass($(event.target),null,"ui-state-active");}}}});/*!
	 * jQuery UI Sortable 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Sortable
	//>>group: Interactions
	//>>description: Enables items in a list to be sorted using the mouse.
	//>>docs: http://api.jqueryui.com/sortable/
	//>>demos: http://jqueryui.com/sortable/
	//>>css.structure: ../../themes/base/sortable.css
	var widgetsSortable=$.widget("ui.sortable",$.ui.mouse,{version:"1.12.1",widgetEventPrefix:"sort",ready:false,options:{appendTo:"parent",axis:false,connectWith:false,containment:false,cursor:"auto",cursorAt:false,dropOnEmpty:true,forcePlaceholderSize:false,forceHelperSize:false,grid:false,handle:false,helper:"original",items:"> *",opacity:false,placeholder:false,revert:false,scroll:true,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1000,// Callbacks
	activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function _isOverAxis(x,reference,size){return x>=reference&&x<reference+size;},_isFloating:function _isFloating(item){return /left|right/.test(item.css("float"))||/inline|table-cell/.test(item.css("display"));},_create:function _create(){this.containerCache={};this._addClass("ui-sortable");//Get the items
	this.refresh();//Let's determine the parent's offset
	this.offset=this.element.offset();//Initialize mouse events for interaction
	this._mouseInit();this._setHandleClassName();//We're ready to go
	this.ready=true;},_setOption:function _setOption(key,value){this._super(key,value);if(key==="handle"){this._setHandleClassName();}},_setHandleClassName:function _setHandleClassName(){var that=this;this._removeClass(this.element.find(".ui-sortable-handle"),"ui-sortable-handle");$.each(this.items,function(){that._addClass(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item,"ui-sortable-handle");});},_destroy:function _destroy(){this._mouseDestroy();for(var i=this.items.length-1;i>=0;i--){this.items[i].item.removeData(this.widgetName+"-item");}return this;},_mouseCapture:function _mouseCapture(event,overrideHandle){var currentItem=null,validHandle=false,that=this;if(this.reverting){return false;}if(this.options.disabled||this.options.type==="static"){return false;}//We have to refresh the items data once first
	this._refreshItems(event);//Find out if the clicked node (or one of its parents) is a actual item in this.items
	$(event.target).parents().each(function(){if($.data(this,that.widgetName+"-item")===that){currentItem=$(this);return false;}});if($.data(event.target,that.widgetName+"-item")===that){currentItem=$(event.target);}if(!currentItem){return false;}if(this.options.handle&&!overrideHandle){$(this.options.handle,currentItem).find("*").addBack().each(function(){if(this===event.target){validHandle=true;}});if(!validHandle){return false;}}this.currentItem=currentItem;this._removeCurrentsFromItems();return true;},_mouseStart:function _mouseStart(event,overrideHandle,noActivation){var i,body,o=this.options;this.currentContainer=this;//We only need to call refreshPositions, because the refreshItems call has been moved to
	// mouseCapture
	this.refreshPositions();//Create and append the visible helper
	this.helper=this._createHelper(event);//Cache the helper size
	this._cacheHelperProportions();/*
			 * - Position generation -
			 * This block generates everything position related - it's the core of draggables.
			 *///Cache the margins of the original element
	this._cacheMargins();//Get the next scrolling parent
	this.scrollParent=this.helper.scrollParent();//The element's absolute position on the page minus margins
	this.offset=this.currentItem.offset();this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left};$.extend(this.offset,{click:{//Where the click happened, relative to the element
	left:event.pageX-this.offset.left,top:event.pageY-this.offset.top},parent:this._getParentOffset(),// This is a relative to absolute position minus the actual position calculation -
	// only used for relative positioned helper
	relative:this._getRelativeOffset()});// Only after we got the offset, we can change the helper's position to absolute
	// TODO: Still need to figure out a way to make relative sorting possible
	this.helper.css("position","absolute");this.cssPosition=this.helper.css("position");//Generate the original position
	this.originalPosition=this._generatePosition(event);this.originalPageX=event.pageX;this.originalPageY=event.pageY;//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
	o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt);//Cache the former DOM position
	this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]};// If the helper is not the original, hide the original so it's not playing any role during
	// the drag, won't cause anything bad this way
	if(this.helper[0]!==this.currentItem[0]){this.currentItem.hide();}//Create the placeholder
	this._createPlaceholder();//Set a containment if given in the options
	if(o.containment){this._setContainment();}if(o.cursor&&o.cursor!=="auto"){// cursor option
	body=this.document.find("body");// Support: IE
	this.storedCursor=body.css("cursor");body.css("cursor",o.cursor);this.storedStylesheet=$("<style>*{ cursor: "+o.cursor+" !important; }</style>").appendTo(body);}if(o.opacity){// opacity option
	if(this.helper.css("opacity")){this._storedOpacity=this.helper.css("opacity");}this.helper.css("opacity",o.opacity);}if(o.zIndex){// zIndex option
	if(this.helper.css("zIndex")){this._storedZIndex=this.helper.css("zIndex");}this.helper.css("zIndex",o.zIndex);}//Prepare scrolling
	if(this.scrollParent[0]!==this.document[0]&&this.scrollParent[0].tagName!=="HTML"){this.overflowOffset=this.scrollParent.offset();}//Call callbacks
	this._trigger("start",event,this._uiHash());//Recache the helper size
	if(!this._preserveHelperProportions){this._cacheHelperProportions();}//Post "activate" events to possible containers
	if(!noActivation){for(i=this.containers.length-1;i>=0;i--){this.containers[i]._trigger("activate",event,this._uiHash(this));}}//Prepare possible droppables
	if($.ui.ddmanager){$.ui.ddmanager.current=this;}if($.ui.ddmanager&&!o.dropBehaviour){$.ui.ddmanager.prepareOffsets(this,event);}this.dragging=true;this._addClass(this.helper,"ui-sortable-helper");// Execute the drag once - this causes the helper not to be visiblebefore getting its
	// correct position
	this._mouseDrag(event);return true;},_mouseDrag:function _mouseDrag(event){var i,item,itemElement,intersection,o=this.options,scrolled=false;//Compute the helpers position
	this.position=this._generatePosition(event);this.positionAbs=this._convertPositionTo("absolute");if(!this.lastPositionAbs){this.lastPositionAbs=this.positionAbs;}//Do scrolling
	if(this.options.scroll){if(this.scrollParent[0]!==this.document[0]&&this.scrollParent[0].tagName!=="HTML"){if(this.overflowOffset.top+this.scrollParent[0].offsetHeight-event.pageY<o.scrollSensitivity){this.scrollParent[0].scrollTop=scrolled=this.scrollParent[0].scrollTop+o.scrollSpeed;}else if(event.pageY-this.overflowOffset.top<o.scrollSensitivity){this.scrollParent[0].scrollTop=scrolled=this.scrollParent[0].scrollTop-o.scrollSpeed;}if(this.overflowOffset.left+this.scrollParent[0].offsetWidth-event.pageX<o.scrollSensitivity){this.scrollParent[0].scrollLeft=scrolled=this.scrollParent[0].scrollLeft+o.scrollSpeed;}else if(event.pageX-this.overflowOffset.left<o.scrollSensitivity){this.scrollParent[0].scrollLeft=scrolled=this.scrollParent[0].scrollLeft-o.scrollSpeed;}}else{if(event.pageY-this.document.scrollTop()<o.scrollSensitivity){scrolled=this.document.scrollTop(this.document.scrollTop()-o.scrollSpeed);}else if(this.window.height()-(event.pageY-this.document.scrollTop())<o.scrollSensitivity){scrolled=this.document.scrollTop(this.document.scrollTop()+o.scrollSpeed);}if(event.pageX-this.document.scrollLeft()<o.scrollSensitivity){scrolled=this.document.scrollLeft(this.document.scrollLeft()-o.scrollSpeed);}else if(this.window.width()-(event.pageX-this.document.scrollLeft())<o.scrollSensitivity){scrolled=this.document.scrollLeft(this.document.scrollLeft()+o.scrollSpeed);}}if(scrolled!==false&&$.ui.ddmanager&&!o.dropBehaviour){$.ui.ddmanager.prepareOffsets(this,event);}}//Regenerate the absolute position used for position checks
	this.positionAbs=this._convertPositionTo("absolute");//Set the helper position
	if(!this.options.axis||this.options.axis!=="y"){this.helper[0].style.left=this.position.left+"px";}if(!this.options.axis||this.options.axis!=="x"){this.helper[0].style.top=this.position.top+"px";}//Rearrange
	for(i=this.items.length-1;i>=0;i--){//Cache variables and intersection, continue if no intersection
	item=this.items[i];itemElement=item.item[0];intersection=this._intersectsWithPointer(item);if(!intersection){continue;}// Only put the placeholder inside the current Container, skip all
	// items from other containers. This works because when moving
	// an item from one container to another the
	// currentContainer is switched before the placeholder is moved.
	//
	// Without this, moving items in "sub-sortables" can cause
	// the placeholder to jitter between the outer and inner container.
	if(item.instance!==this.currentContainer){continue;}// Cannot intersect with itself
	// no useless actions that have been done before
	// no action if the item moved is the parent of the item checked
	if(itemElement!==this.currentItem[0]&&this.placeholder[intersection===1?"next":"prev"]()[0]!==itemElement&&!$.contains(this.placeholder[0],itemElement)&&(this.options.type==="semi-dynamic"?!$.contains(this.element[0],itemElement):true)){this.direction=intersection===1?"down":"up";if(this.options.tolerance==="pointer"||this._intersectsWithSides(item)){this._rearrange(event,item);}else{break;}this._trigger("change",event,this._uiHash());break;}}//Post events to containers
	this._contactContainers(event);//Interconnect with droppables
	if($.ui.ddmanager){$.ui.ddmanager.drag(this,event);}//Call callbacks
	this._trigger("sort",event,this._uiHash());this.lastPositionAbs=this.positionAbs;return false;},_mouseStop:function _mouseStop(event,noPropagation){if(!event){return;}//If we are using droppables, inform the manager about the drop
	if($.ui.ddmanager&&!this.options.dropBehaviour){$.ui.ddmanager.drop(this,event);}if(this.options.revert){var that=this,cur=this.placeholder.offset(),axis=this.options.axis,animation={};if(!axis||axis==="x"){animation.left=cur.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft);}if(!axis||axis==="y"){animation.top=cur.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop);}this.reverting=true;$(this.helper).animate(animation,parseInt(this.options.revert,10)||500,function(){that._clear(event);});}else{this._clear(event,noPropagation);}return false;},cancel:function cancel(){if(this.dragging){this._mouseUp(new $.Event("mouseup",{target:null}));if(this.options.helper==="original"){this.currentItem.css(this._storedCSS);this._removeClass(this.currentItem,"ui-sortable-helper");}else{this.currentItem.show();}//Post deactivating events to containers
	for(var i=this.containers.length-1;i>=0;i--){this.containers[i]._trigger("deactivate",null,this._uiHash(this));if(this.containers[i].containerCache.over){this.containers[i]._trigger("out",null,this._uiHash(this));this.containers[i].containerCache.over=0;}}}if(this.placeholder){//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
	// it unbinds ALL events from the original node!
	if(this.placeholder[0].parentNode){this.placeholder[0].parentNode.removeChild(this.placeholder[0]);}if(this.options.helper!=="original"&&this.helper&&this.helper[0].parentNode){this.helper.remove();}$.extend(this,{helper:null,dragging:false,reverting:false,_noFinalSort:null});if(this.domPosition.prev){$(this.domPosition.prev).after(this.currentItem);}else{$(this.domPosition.parent).prepend(this.currentItem);}}return this;},serialize:function serialize(o){var items=this._getItemsAsjQuery(o&&o.connected),str=[];o=o||{};$(items).each(function(){var res=($(o.item||this).attr(o.attribute||"id")||"").match(o.expression||/(.+)[\-=_](.+)/);if(res){str.push((o.key||res[1]+"[]")+"="+(o.key&&o.expression?res[1]:res[2]));}});if(!str.length&&o.key){str.push(o.key+"=");}return str.join("&");},toArray:function toArray(o){var items=this._getItemsAsjQuery(o&&o.connected),ret=[];o=o||{};items.each(function(){ret.push($(o.item||this).attr(o.attribute||"id")||"");});return ret;},/* Be careful with the following core functions */_intersectsWith:function _intersectsWith(item){var x1=this.positionAbs.left,x2=x1+this.helperProportions.width,y1=this.positionAbs.top,y2=y1+this.helperProportions.height,l=item.left,r=l+item.width,t=item.top,b=t+item.height,dyClick=this.offset.click.top,dxClick=this.offset.click.left,isOverElementHeight=this.options.axis==="x"||y1+dyClick>t&&y1+dyClick<b,isOverElementWidth=this.options.axis==="y"||x1+dxClick>l&&x1+dxClick<r,isOverElement=isOverElementHeight&&isOverElementWidth;if(this.options.tolerance==="pointer"||this.options.forcePointerForContainers||this.options.tolerance!=="pointer"&&this.helperProportions[this.floating?"width":"height"]>item[this.floating?"width":"height"]){return isOverElement;}else{return l<x1+this.helperProportions.width/2&&// Right Half
	x2-this.helperProportions.width/2<r&&// Left Half
	t<y1+this.helperProportions.height/2&&// Bottom Half
	y2-this.helperProportions.height/2<b;// Top Half
	}},_intersectsWithPointer:function _intersectsWithPointer(item){var verticalDirection,horizontalDirection,isOverElementHeight=this.options.axis==="x"||this._isOverAxis(this.positionAbs.top+this.offset.click.top,item.top,item.height),isOverElementWidth=this.options.axis==="y"||this._isOverAxis(this.positionAbs.left+this.offset.click.left,item.left,item.width),isOverElement=isOverElementHeight&&isOverElementWidth;if(!isOverElement){return false;}verticalDirection=this._getDragVerticalDirection();horizontalDirection=this._getDragHorizontalDirection();return this.floating?horizontalDirection==="right"||verticalDirection==="down"?2:1:verticalDirection&&(verticalDirection==="down"?2:1);},_intersectsWithSides:function _intersectsWithSides(item){var isOverBottomHalf=this._isOverAxis(this.positionAbs.top+this.offset.click.top,item.top+item.height/2,item.height),isOverRightHalf=this._isOverAxis(this.positionAbs.left+this.offset.click.left,item.left+item.width/2,item.width),verticalDirection=this._getDragVerticalDirection(),horizontalDirection=this._getDragHorizontalDirection();if(this.floating&&horizontalDirection){return horizontalDirection==="right"&&isOverRightHalf||horizontalDirection==="left"&&!isOverRightHalf;}else{return verticalDirection&&(verticalDirection==="down"&&isOverBottomHalf||verticalDirection==="up"&&!isOverBottomHalf);}},_getDragVerticalDirection:function _getDragVerticalDirection(){var delta=this.positionAbs.top-this.lastPositionAbs.top;return delta!==0&&(delta>0?"down":"up");},_getDragHorizontalDirection:function _getDragHorizontalDirection(){var delta=this.positionAbs.left-this.lastPositionAbs.left;return delta!==0&&(delta>0?"right":"left");},refresh:function refresh(event){this._refreshItems(event);this._setHandleClassName();this.refreshPositions();return this;},_connectWith:function _connectWith(){var options=this.options;return options.connectWith.constructor===String?[options.connectWith]:options.connectWith;},_getItemsAsjQuery:function _getItemsAsjQuery(connected){var i,j,cur,inst,items=[],queries=[],connectWith=this._connectWith();if(connectWith&&connected){for(i=connectWith.length-1;i>=0;i--){cur=$(connectWith[i],this.document[0]);for(j=cur.length-1;j>=0;j--){inst=$.data(cur[j],this.widgetFullName);if(inst&&inst!==this&&!inst.options.disabled){queries.push([$.isFunction(inst.options.items)?inst.options.items.call(inst.element):$(inst.options.items,inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),inst]);}}}}queries.push([$.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):$(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]);function addItems(){items.push(this);}for(i=queries.length-1;i>=0;i--){queries[i][0].each(addItems);}return $(items);},_removeCurrentsFromItems:function _removeCurrentsFromItems(){var list=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=$.grep(this.items,function(item){for(var j=0;j<list.length;j++){if(list[j]===item.item[0]){return false;}}return true;});},_refreshItems:function _refreshItems(event){this.items=[];this.containers=[this];var i,j,cur,inst,targetData,_queries,item,queriesLength,items=this.items,queries=[[$.isFunction(this.options.items)?this.options.items.call(this.element[0],event,{item:this.currentItem}):$(this.options.items,this.element),this]],connectWith=this._connectWith();//Shouldn't be run the first time through due to massive slow-down
	if(connectWith&&this.ready){for(i=connectWith.length-1;i>=0;i--){cur=$(connectWith[i],this.document[0]);for(j=cur.length-1;j>=0;j--){inst=$.data(cur[j],this.widgetFullName);if(inst&&inst!==this&&!inst.options.disabled){queries.push([$.isFunction(inst.options.items)?inst.options.items.call(inst.element[0],event,{item:this.currentItem}):$(inst.options.items,inst.element),inst]);this.containers.push(inst);}}}}for(i=queries.length-1;i>=0;i--){targetData=queries[i][1];_queries=queries[i][0];for(j=0,queriesLength=_queries.length;j<queriesLength;j++){item=$(_queries[j]);// Data for target checking (mouse manager)
	item.data(this.widgetName+"-item",targetData);items.push({item:item,instance:targetData,width:0,height:0,left:0,top:0});}}},refreshPositions:function refreshPositions(fast){// Determine whether items are being displayed horizontally
	this.floating=this.items.length?this.options.axis==="x"||this._isFloating(this.items[0].item):false;//This has to be redone because due to the item being moved out/into the offsetParent,
	// the offsetParent's position will change
	if(this.offsetParent&&this.helper){this.offset.parent=this._getParentOffset();}var i,item,t,p;for(i=this.items.length-1;i>=0;i--){item=this.items[i];//We ignore calculating positions of all connected containers when we're not over them
	if(item.instance!==this.currentContainer&&this.currentContainer&&item.item[0]!==this.currentItem[0]){continue;}t=this.options.toleranceElement?$(this.options.toleranceElement,item.item):item.item;if(!fast){item.width=t.outerWidth();item.height=t.outerHeight();}p=t.offset();item.left=p.left;item.top=p.top;}if(this.options.custom&&this.options.custom.refreshContainers){this.options.custom.refreshContainers.call(this);}else{for(i=this.containers.length-1;i>=0;i--){p=this.containers[i].element.offset();this.containers[i].containerCache.left=p.left;this.containers[i].containerCache.top=p.top;this.containers[i].containerCache.width=this.containers[i].element.outerWidth();this.containers[i].containerCache.height=this.containers[i].element.outerHeight();}}return this;},_createPlaceholder:function _createPlaceholder(that){that=that||this;var className,o=that.options;if(!o.placeholder||o.placeholder.constructor===String){className=o.placeholder;o.placeholder={element:function element(){var nodeName=that.currentItem[0].nodeName.toLowerCase(),element=$("<"+nodeName+">",that.document[0]);that._addClass(element,"ui-sortable-placeholder",className||that.currentItem[0].className)._removeClass(element,"ui-sortable-helper");if(nodeName==="tbody"){that._createTrPlaceholder(that.currentItem.find("tr").eq(0),$("<tr>",that.document[0]).appendTo(element));}else if(nodeName==="tr"){that._createTrPlaceholder(that.currentItem,element);}else if(nodeName==="img"){element.attr("src",that.currentItem.attr("src"));}if(!className){element.css("visibility","hidden");}return element;},update:function update(container,p){// 1. If a className is set as 'placeholder option, we don't force sizes -
	// the class is responsible for that
	// 2. The option 'forcePlaceholderSize can be enabled to force it even if a
	// class name is specified
	if(className&&!o.forcePlaceholderSize){return;}//If the element doesn't have a actual height by itself (without styles coming
	// from a stylesheet), it receives the inline height from the dragged item
	if(!p.height()){p.height(that.currentItem.innerHeight()-parseInt(that.currentItem.css("paddingTop")||0,10)-parseInt(that.currentItem.css("paddingBottom")||0,10));}if(!p.width()){p.width(that.currentItem.innerWidth()-parseInt(that.currentItem.css("paddingLeft")||0,10)-parseInt(that.currentItem.css("paddingRight")||0,10));}}};}//Create the placeholder
	that.placeholder=$(o.placeholder.element.call(that.element,that.currentItem));//Append it after the actual current item
	that.currentItem.after(that.placeholder);//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
	o.placeholder.update(that,that.placeholder);},_createTrPlaceholder:function _createTrPlaceholder(sourceTr,targetTr){var that=this;sourceTr.children().each(function(){$("<td>&#160;</td>",that.document[0]).attr("colspan",$(this).attr("colspan")||1).appendTo(targetTr);});},_contactContainers:function _contactContainers(event){var i,j,dist,itemWithLeastDistance,posProperty,sizeProperty,cur,nearBottom,floating,axis,innermostContainer=null,innermostIndex=null;// Get innermost container that intersects with item
	for(i=this.containers.length-1;i>=0;i--){// Never consider a container that's located within the item itself
	if($.contains(this.currentItem[0],this.containers[i].element[0])){continue;}if(this._intersectsWith(this.containers[i].containerCache)){// If we've already found a container and it's more "inner" than this, then continue
	if(innermostContainer&&$.contains(this.containers[i].element[0],innermostContainer.element[0])){continue;}innermostContainer=this.containers[i];innermostIndex=i;}else{// container doesn't intersect. trigger "out" event if necessary
	if(this.containers[i].containerCache.over){this.containers[i]._trigger("out",event,this._uiHash(this));this.containers[i].containerCache.over=0;}}}// If no intersecting containers found, return
	if(!innermostContainer){return;}// Move the item into the container if it's not there already
	if(this.containers.length===1){if(!this.containers[innermostIndex].containerCache.over){this.containers[innermostIndex]._trigger("over",event,this._uiHash(this));this.containers[innermostIndex].containerCache.over=1;}}else{// When entering a new container, we will find the item with the least distance and
	// append our item near it
	dist=10000;itemWithLeastDistance=null;floating=innermostContainer.floating||this._isFloating(this.currentItem);posProperty=floating?"left":"top";sizeProperty=floating?"width":"height";axis=floating?"pageX":"pageY";for(j=this.items.length-1;j>=0;j--){if(!$.contains(this.containers[innermostIndex].element[0],this.items[j].item[0])){continue;}if(this.items[j].item[0]===this.currentItem[0]){continue;}cur=this.items[j].item.offset()[posProperty];nearBottom=false;if(event[axis]-cur>this.items[j][sizeProperty]/2){nearBottom=true;}if(Math.abs(event[axis]-cur)<dist){dist=Math.abs(event[axis]-cur);itemWithLeastDistance=this.items[j];this.direction=nearBottom?"up":"down";}}//Check if dropOnEmpty is enabled
	if(!itemWithLeastDistance&&!this.options.dropOnEmpty){return;}if(this.currentContainer===this.containers[innermostIndex]){if(!this.currentContainer.containerCache.over){this.containers[innermostIndex]._trigger("over",event,this._uiHash());this.currentContainer.containerCache.over=1;}return;}itemWithLeastDistance?this._rearrange(event,itemWithLeastDistance,null,true):this._rearrange(event,null,this.containers[innermostIndex].element,true);this._trigger("change",event,this._uiHash());this.containers[innermostIndex]._trigger("change",event,this._uiHash(this));this.currentContainer=this.containers[innermostIndex];//Update the placeholder
	this.options.placeholder.update(this.currentContainer,this.placeholder);this.containers[innermostIndex]._trigger("over",event,this._uiHash(this));this.containers[innermostIndex].containerCache.over=1;}},_createHelper:function _createHelper(event){var o=this.options,helper=$.isFunction(o.helper)?$(o.helper.apply(this.element[0],[event,this.currentItem])):o.helper==="clone"?this.currentItem.clone():this.currentItem;//Add the helper to the DOM if that didn't happen already
	if(!helper.parents("body").length){$(o.appendTo!=="parent"?o.appendTo:this.currentItem[0].parentNode)[0].appendChild(helper[0]);}if(helper[0]===this.currentItem[0]){this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")};}if(!helper[0].style.width||o.forceHelperSize){helper.width(this.currentItem.width());}if(!helper[0].style.height||o.forceHelperSize){helper.height(this.currentItem.height());}return helper;},_adjustOffsetFromHelper:function _adjustOffsetFromHelper(obj){if(typeof obj==="string"){obj=obj.split(" ");}if($.isArray(obj)){obj={left:+obj[0],top:+obj[1]||0};}if("left"in obj){this.offset.click.left=obj.left+this.margins.left;}if("right"in obj){this.offset.click.left=this.helperProportions.width-obj.right+this.margins.left;}if("top"in obj){this.offset.click.top=obj.top+this.margins.top;}if("bottom"in obj){this.offset.click.top=this.helperProportions.height-obj.bottom+this.margins.top;}},_getParentOffset:function _getParentOffset(){//Get the offsetParent and cache its position
	this.offsetParent=this.helper.offsetParent();var po=this.offsetParent.offset();// This is a special case where we need to modify a offset calculated on start, since the
	// following happened:
	// 1. The position of the helper is absolute, so it's position is calculated based on the
	// next positioned parent
	// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
	// the document, which means that the scroll is included in the initial calculation of the
	// offset of the parent, and never recalculated upon drag
	if(this.cssPosition==="absolute"&&this.scrollParent[0]!==this.document[0]&&$.contains(this.scrollParent[0],this.offsetParent[0])){po.left+=this.scrollParent.scrollLeft();po.top+=this.scrollParent.scrollTop();}// This needs to be actually done for all browsers, since pageX/pageY includes this
	// information with an ugly IE fix
	if(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()==="html"&&$.ui.ie){po={top:0,left:0};}return{top:po.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:po.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)};},_getRelativeOffset:function _getRelativeOffset(){if(this.cssPosition==="relative"){var p=this.currentItem.position();return{top:p.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:p.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()};}else{return{top:0,left:0};}},_cacheMargins:function _cacheMargins(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0};},_cacheHelperProportions:function _cacheHelperProportions(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()};},_setContainment:function _setContainment(){var ce,co,over,o=this.options;if(o.containment==="parent"){o.containment=this.helper[0].parentNode;}if(o.containment==="document"||o.containment==="window"){this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,o.containment==="document"?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,(o.containment==="document"?this.document.height()||document.body.parentNode.scrollHeight:this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];}if(!/^(document|window|parent)$/.test(o.containment)){ce=$(o.containment)[0];co=$(o.containment).offset();over=$(ce).css("overflow")!=="hidden";this.containment=[co.left+(parseInt($(ce).css("borderLeftWidth"),10)||0)+(parseInt($(ce).css("paddingLeft"),10)||0)-this.margins.left,co.top+(parseInt($(ce).css("borderTopWidth"),10)||0)+(parseInt($(ce).css("paddingTop"),10)||0)-this.margins.top,co.left+(over?Math.max(ce.scrollWidth,ce.offsetWidth):ce.offsetWidth)-(parseInt($(ce).css("borderLeftWidth"),10)||0)-(parseInt($(ce).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,co.top+(over?Math.max(ce.scrollHeight,ce.offsetHeight):ce.offsetHeight)-(parseInt($(ce).css("borderTopWidth"),10)||0)-(parseInt($(ce).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top];}},_convertPositionTo:function _convertPositionTo(d,pos){if(!pos){pos=this.position;}var mod=d==="absolute"?1:-1,scroll=this.cssPosition==="absolute"&&!(this.scrollParent[0]!==this.document[0]&&$.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,scrollIsRootNode=/(html|body)/i.test(scroll[0].tagName);return{top:// The absolute mouse position
	pos.top+// Only for relative positioned nodes: Relative offset from element to offset parent
	this.offset.relative.top*mod+// The offsetParent's offset without borders (offset + border)
	this.offset.parent.top*mod-(this.cssPosition==="fixed"?-this.scrollParent.scrollTop():scrollIsRootNode?0:scroll.scrollTop())*mod,left:// The absolute mouse position
	pos.left+// Only for relative positioned nodes: Relative offset from element to offset parent
	this.offset.relative.left*mod+// The offsetParent's offset without borders (offset + border)
	this.offset.parent.left*mod-(this.cssPosition==="fixed"?-this.scrollParent.scrollLeft():scrollIsRootNode?0:scroll.scrollLeft())*mod};},_generatePosition:function _generatePosition(event){var top,left,o=this.options,pageX=event.pageX,pageY=event.pageY,scroll=this.cssPosition==="absolute"&&!(this.scrollParent[0]!==this.document[0]&&$.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,scrollIsRootNode=/(html|body)/i.test(scroll[0].tagName);// This is another very weird special case that only happens for relative elements:
	// 1. If the css position is relative
	// 2. and the scroll parent is the document or similar to the offset parent
	// we have to refresh the relative offset during the scroll so there are no jumps
	if(this.cssPosition==="relative"&&!(this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0])){this.offset.relative=this._getRelativeOffset();}/*
			 * - Position constraining -
			 * Constrain the position to a mix of grid, containment.
			 */if(this.originalPosition){//If we are not dragging yet, we won't check for options
	if(this.containment){if(event.pageX-this.offset.click.left<this.containment[0]){pageX=this.containment[0]+this.offset.click.left;}if(event.pageY-this.offset.click.top<this.containment[1]){pageY=this.containment[1]+this.offset.click.top;}if(event.pageX-this.offset.click.left>this.containment[2]){pageX=this.containment[2]+this.offset.click.left;}if(event.pageY-this.offset.click.top>this.containment[3]){pageY=this.containment[3]+this.offset.click.top;}}if(o.grid){top=this.originalPageY+Math.round((pageY-this.originalPageY)/o.grid[1])*o.grid[1];pageY=this.containment?top-this.offset.click.top>=this.containment[1]&&top-this.offset.click.top<=this.containment[3]?top:top-this.offset.click.top>=this.containment[1]?top-o.grid[1]:top+o.grid[1]:top;left=this.originalPageX+Math.round((pageX-this.originalPageX)/o.grid[0])*o.grid[0];pageX=this.containment?left-this.offset.click.left>=this.containment[0]&&left-this.offset.click.left<=this.containment[2]?left:left-this.offset.click.left>=this.containment[0]?left-o.grid[0]:left+o.grid[0]:left;}}return{top:// The absolute mouse position
	pageY-// Click offset (relative to the element)
	this.offset.click.top-// Only for relative positioned nodes: Relative offset from element to offset parent
	this.offset.relative.top-// The offsetParent's offset without borders (offset + border)
	this.offset.parent.top+(this.cssPosition==="fixed"?-this.scrollParent.scrollTop():scrollIsRootNode?0:scroll.scrollTop()),left:// The absolute mouse position
	pageX-// Click offset (relative to the element)
	this.offset.click.left-// Only for relative positioned nodes: Relative offset from element to offset parent
	this.offset.relative.left-// The offsetParent's offset without borders (offset + border)
	this.offset.parent.left+(this.cssPosition==="fixed"?-this.scrollParent.scrollLeft():scrollIsRootNode?0:scroll.scrollLeft())};},_rearrange:function _rearrange(event,i,a,hardRefresh){a?a[0].appendChild(this.placeholder[0]):i.item[0].parentNode.insertBefore(this.placeholder[0],this.direction==="down"?i.item[0]:i.item[0].nextSibling);//Various things done here to improve the performance:
	// 1. we create a setTimeout, that calls refreshPositions
	// 2. on the instance, we have a counter variable, that get's higher after every append
	// 3. on the local scope, we copy the counter variable, and check in the timeout,
	// if it's still the same
	// 4. this lets only the last addition to the timeout stack through
	this.counter=this.counter?++this.counter:1;var counter=this.counter;this._delay(function(){if(counter===this.counter){//Precompute after each DOM insertion, NOT on mousemove
	this.refreshPositions(!hardRefresh);}});},_clear:function _clear(event,noPropagation){this.reverting=false;// We delay all events that have to be triggered to after the point where the placeholder
	// has been removed and everything else normalized again
	var i,delayedTriggers=[];// We first have to update the dom position of the actual currentItem
	// Note: don't do it if the current item is already removed (by a user), or it gets
	// reappended (see #4088)
	if(!this._noFinalSort&&this.currentItem.parent().length){this.placeholder.before(this.currentItem);}this._noFinalSort=null;if(this.helper[0]===this.currentItem[0]){for(i in this._storedCSS){if(this._storedCSS[i]==="auto"||this._storedCSS[i]==="static"){this._storedCSS[i]="";}}this.currentItem.css(this._storedCSS);this._removeClass(this.currentItem,"ui-sortable-helper");}else{this.currentItem.show();}if(this.fromOutside&&!noPropagation){delayedTriggers.push(function(event){this._trigger("receive",event,this._uiHash(this.fromOutside));});}if((this.fromOutside||this.domPosition.prev!==this.currentItem.prev().not(".ui-sortable-helper")[0]||this.domPosition.parent!==this.currentItem.parent()[0])&&!noPropagation){// Trigger update callback if the DOM position has changed
	delayedTriggers.push(function(event){this._trigger("update",event,this._uiHash());});}// Check if the items Container has Changed and trigger appropriate
	// events.
	if(this!==this.currentContainer){if(!noPropagation){delayedTriggers.push(function(event){this._trigger("remove",event,this._uiHash());});delayedTriggers.push(function(c){return function(event){c._trigger("receive",event,this._uiHash(this));};}.call(this,this.currentContainer));delayedTriggers.push(function(c){return function(event){c._trigger("update",event,this._uiHash(this));};}.call(this,this.currentContainer));}}//Post events to containers
	function delayEvent(type,instance,container){return function(event){container._trigger(type,event,instance._uiHash(instance));};}for(i=this.containers.length-1;i>=0;i--){if(!noPropagation){delayedTriggers.push(delayEvent("deactivate",this,this.containers[i]));}if(this.containers[i].containerCache.over){delayedTriggers.push(delayEvent("out",this,this.containers[i]));this.containers[i].containerCache.over=0;}}//Do what was originally in plugins
	if(this.storedCursor){this.document.find("body").css("cursor",this.storedCursor);this.storedStylesheet.remove();}if(this._storedOpacity){this.helper.css("opacity",this._storedOpacity);}if(this._storedZIndex){this.helper.css("zIndex",this._storedZIndex==="auto"?"":this._storedZIndex);}this.dragging=false;if(!noPropagation){this._trigger("beforeStop",event,this._uiHash());}//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
	// it unbinds ALL events from the original node!
	this.placeholder[0].parentNode.removeChild(this.placeholder[0]);if(!this.cancelHelperRemoval){if(this.helper[0]!==this.currentItem[0]){this.helper.remove();}this.helper=null;}if(!noPropagation){for(i=0;i<delayedTriggers.length;i++){// Trigger all delayed events
	delayedTriggers[i].call(this,event);}this._trigger("stop",event,this._uiHash());}this.fromOutside=false;return!this.cancelHelperRemoval;},_trigger:function _trigger(){if($.Widget.prototype._trigger.apply(this,arguments)===false){this.cancel();}},_uiHash:function _uiHash(_inst){var inst=_inst||this;return{helper:inst.helper,placeholder:inst.placeholder||$([]),position:inst.position,originalPosition:inst.originalPosition,offset:inst.positionAbs,item:inst.currentItem,sender:_inst?_inst.element:null};}});/*!
	 * jQuery UI Spinner 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Spinner
	//>>group: Widgets
	//>>description: Displays buttons to easily input numbers via the keyboard or mouse.
	//>>docs: http://api.jqueryui.com/spinner/
	//>>demos: http://jqueryui.com/spinner/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/spinner.css
	//>>css.theme: ../../themes/base/theme.css
	function spinnerModifer(fn){return function(){var previous=this.element.val();fn.apply(this,arguments);this._refresh();if(previous!==this.element.val()){this._trigger("change");}};}$.widget("ui.spinner",{version:"1.12.1",defaultElement:"<input>",widgetEventPrefix:"spin",options:{classes:{"ui-spinner":"ui-corner-all","ui-spinner-down":"ui-corner-br","ui-spinner-up":"ui-corner-tr"},culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:true,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function _create(){// handle string values that need to be parsed
	this._setOption("max",this.options.max);this._setOption("min",this.options.min);this._setOption("step",this.options.step);// Only format if there is a value, prevents the field from being marked
	// as invalid in Firefox, see #9573.
	if(this.value()!==""){// Format the value, but don't constrain.
	this._value(this.element.val(),true);}this._draw();this._on(this._events);this._refresh();// Turning off autocomplete prevents the browser from remembering the
	// value when navigating through history, so we re-enable autocomplete
	// if the page is unloaded before the widget is destroyed. #7790
	this._on(this.window,{beforeunload:function beforeunload(){this.element.removeAttr("autocomplete");}});},_getCreateOptions:function _getCreateOptions(){var options=this._super();var element=this.element;$.each(["min","max","step"],function(i,option){var value=element.attr(option);if(value!=null&&value.length){options[option]=value;}});return options;},_events:{keydown:function keydown(event){if(this._start(event)&&this._keydown(event)){event.preventDefault();}},keyup:"_stop",focus:function focus(){this.previous=this.element.val();},blur:function blur(event){if(this.cancelBlur){delete this.cancelBlur;return;}this._stop();this._refresh();if(this.previous!==this.element.val()){this._trigger("change",event);}},mousewheel:function mousewheel(event,delta){if(!delta){return;}if(!this.spinning&&!this._start(event)){return false;}this._spin((delta>0?1:-1)*this.options.step,event);clearTimeout(this.mousewheelTimer);this.mousewheelTimer=this._delay(function(){if(this.spinning){this._stop(event);}},100);event.preventDefault();},"mousedown .ui-spinner-button":function mousedownUiSpinnerButton(event){var previous;// We never want the buttons to have focus; whenever the user is
	// interacting with the spinner, the focus should be on the input.
	// If the input is focused then this.previous is properly set from
	// when the input first received focus. If the input is not focused
	// then we need to set this.previous based on the value before spinning.
	previous=this.element[0]===$.ui.safeActiveElement(this.document[0])?this.previous:this.element.val();function checkFocus(){var isActive=this.element[0]===$.ui.safeActiveElement(this.document[0]);if(!isActive){this.element.trigger("focus");this.previous=previous;// support: IE
	// IE sets focus asynchronously, so we need to check if focus
	// moved off of the input because the user clicked on the button.
	this._delay(function(){this.previous=previous;});}}// Ensure focus is on (or stays on) the text field
	event.preventDefault();checkFocus.call(this);// Support: IE
	// IE doesn't prevent moving focus even with event.preventDefault()
	// so we set a flag to know when we should ignore the blur event
	// and check (again) if focus moved off of the input.
	this.cancelBlur=true;this._delay(function(){delete this.cancelBlur;checkFocus.call(this);});if(this._start(event)===false){return;}this._repeat(null,$(event.currentTarget).hasClass("ui-spinner-up")?1:-1,event);},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function mouseenterUiSpinnerButton(event){// button will add ui-state-active if mouse was down while mouseleave and kept down
	if(!$(event.currentTarget).hasClass("ui-state-active")){return;}if(this._start(event)===false){return false;}this._repeat(null,$(event.currentTarget).hasClass("ui-spinner-up")?1:-1,event);},// TODO: do we really want to consider this a stop?
	// shouldn't we just stop the repeater and wait until mouseup before
	// we trigger the stop event?
	"mouseleave .ui-spinner-button":"_stop"},// Support mobile enhanced option and make backcompat more sane
	_enhance:function _enhance(){this.uiSpinner=this.element.attr("autocomplete","off").wrap("<span>").parent()// Add buttons
	.append("<a></a><a></a>");},_draw:function _draw(){this._enhance();this._addClass(this.uiSpinner,"ui-spinner","ui-widget ui-widget-content");this._addClass("ui-spinner-input");this.element.attr("role","spinbutton");// Button bindings
	this.buttons=this.uiSpinner.children("a").attr("tabIndex",-1).attr("aria-hidden",true).button({classes:{"ui-button":""}});// TODO: Right now button does not support classes this is already updated in button PR
	this._removeClass(this.buttons,"ui-corner-all");this._addClass(this.buttons.first(),"ui-spinner-button ui-spinner-up");this._addClass(this.buttons.last(),"ui-spinner-button ui-spinner-down");this.buttons.first().button({"icon":this.options.icons.up,"showLabel":false});this.buttons.last().button({"icon":this.options.icons.down,"showLabel":false});// IE 6 doesn't understand height: 50% for the buttons
	// unless the wrapper has an explicit height
	if(this.buttons.height()>Math.ceil(this.uiSpinner.height()*0.5)&&this.uiSpinner.height()>0){this.uiSpinner.height(this.uiSpinner.height());}},_keydown:function _keydown(event){var options=this.options,keyCode=$.ui.keyCode;switch(event.keyCode){case keyCode.UP:this._repeat(null,1,event);return true;case keyCode.DOWN:this._repeat(null,-1,event);return true;case keyCode.PAGE_UP:this._repeat(null,options.page,event);return true;case keyCode.PAGE_DOWN:this._repeat(null,-options.page,event);return true;}return false;},_start:function _start(event){if(!this.spinning&&this._trigger("start",event)===false){return false;}if(!this.counter){this.counter=1;}this.spinning=true;return true;},_repeat:function _repeat(i,steps,event){i=i||500;clearTimeout(this.timer);this.timer=this._delay(function(){this._repeat(40,steps,event);},i);this._spin(steps*this.options.step,event);},_spin:function _spin(step,event){var value=this.value()||0;if(!this.counter){this.counter=1;}value=this._adjustValue(value+step*this._increment(this.counter));if(!this.spinning||this._trigger("spin",event,{value:value})!==false){this._value(value);this.counter++;}},_increment:function _increment(i){var incremental=this.options.incremental;if(incremental){return $.isFunction(incremental)?incremental(i):Math.floor(i*i*i/50000-i*i/500+17*i/200+1);}return 1;},_precision:function _precision(){var precision=this._precisionOf(this.options.step);if(this.options.min!==null){precision=Math.max(precision,this._precisionOf(this.options.min));}return precision;},_precisionOf:function _precisionOf(num){var str=num.toString(),decimal=str.indexOf(".");return decimal===-1?0:str.length-decimal-1;},_adjustValue:function _adjustValue(value){var base,aboveMin,options=this.options;// Make sure we're at a valid step
	// - find out where we are relative to the base (min or 0)
	base=options.min!==null?options.min:0;aboveMin=value-base;// - round to the nearest step
	aboveMin=Math.round(aboveMin/options.step)*options.step;// - rounding is based on 0, so adjust back to our base
	value=base+aboveMin;// Fix precision from bad JS floating point math
	value=parseFloat(value.toFixed(this._precision()));// Clamp the value
	if(options.max!==null&&value>options.max){return options.max;}if(options.min!==null&&value<options.min){return options.min;}return value;},_stop:function _stop(event){if(!this.spinning){return;}clearTimeout(this.timer);clearTimeout(this.mousewheelTimer);this.counter=0;this.spinning=false;this._trigger("stop",event);},_setOption:function _setOption(key,value){var prevValue,first,last;if(key==="culture"||key==="numberFormat"){prevValue=this._parse(this.element.val());this.options[key]=value;this.element.val(this._format(prevValue));return;}if(key==="max"||key==="min"||key==="step"){if(typeof value==="string"){value=this._parse(value);}}if(key==="icons"){first=this.buttons.first().find(".ui-icon");this._removeClass(first,null,this.options.icons.up);this._addClass(first,null,value.up);last=this.buttons.last().find(".ui-icon");this._removeClass(last,null,this.options.icons.down);this._addClass(last,null,value.down);}this._super(key,value);},_setOptionDisabled:function _setOptionDisabled(value){this._super(value);this._toggleClass(this.uiSpinner,null,"ui-state-disabled",!!value);this.element.prop("disabled",!!value);this.buttons.button(value?"disable":"enable");},_setOptions:spinnerModifer(function(options){this._super(options);}),_parse:function _parse(val){if(typeof val==="string"&&val!==""){val=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(val,10,this.options.culture):+val;}return val===""||isNaN(val)?null:val;},_format:function _format(value){if(value===""){return"";}return window.Globalize&&this.options.numberFormat?Globalize.format(value,this.options.numberFormat,this.options.culture):value;},_refresh:function _refresh(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,// TODO: what should we do with values that can't be parsed?
	"aria-valuenow":this._parse(this.element.val())});},isValid:function isValid(){var value=this.value();// Null is invalid
	if(value===null){return false;}// If value gets adjusted, it's invalid
	return value===this._adjustValue(value);},// Update the value without triggering change
	_value:function _value(value,allowAny){var parsed;if(value!==""){parsed=this._parse(value);if(parsed!==null){if(!allowAny){parsed=this._adjustValue(parsed);}value=this._format(parsed);}}this.element.val(value);this._refresh();},_destroy:function _destroy(){this.element.prop("disabled",false).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow");this.uiSpinner.replaceWith(this.element);},stepUp:spinnerModifer(function(steps){this._stepUp(steps);}),_stepUp:function _stepUp(steps){if(this._start()){this._spin((steps||1)*this.options.step);this._stop();}},stepDown:spinnerModifer(function(steps){this._stepDown(steps);}),_stepDown:function _stepDown(steps){if(this._start()){this._spin((steps||1)*-this.options.step);this._stop();}},pageUp:spinnerModifer(function(pages){this._stepUp((pages||1)*this.options.page);}),pageDown:spinnerModifer(function(pages){this._stepDown((pages||1)*this.options.page);}),value:function value(newVal){if(!arguments.length){return this._parse(this.element.val());}spinnerModifer(this._value).call(this,newVal);},widget:function widget(){return this.uiSpinner;}});// DEPRECATED
	// TODO: switch return back to widget declaration at top of file when this is removed
	if($.uiBackCompat!==false){// Backcompat for spinner html extension points
	$.widget("ui.spinner",$.ui.spinner,{_enhance:function _enhance(){this.uiSpinner=this.element.attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent()// Add buttons
	.append(this._buttonHtml());},_uiSpinnerHtml:function _uiSpinnerHtml(){return"<span>";},_buttonHtml:function _buttonHtml(){return"<a></a><a></a>";}});}var widgetsSpinner=$.ui.spinner;/*!
	 * jQuery UI Tabs 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Tabs
	//>>group: Widgets
	//>>description: Transforms a set of container elements into a tab structure.
	//>>docs: http://api.jqueryui.com/tabs/
	//>>demos: http://jqueryui.com/tabs/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/tabs.css
	//>>css.theme: ../../themes/base/theme.css
	$.widget("ui.tabs",{version:"1.12.1",delay:300,options:{active:null,classes:{"ui-tabs":"ui-corner-all","ui-tabs-nav":"ui-corner-all","ui-tabs-panel":"ui-corner-bottom","ui-tabs-tab":"ui-corner-top"},collapsible:false,event:"click",heightStyle:"content",hide:null,show:null,// Callbacks
	activate:null,beforeActivate:null,beforeLoad:null,load:null},_isLocal:function(){var rhash=/#.*$/;return function(anchor){var anchorUrl,locationUrl;anchorUrl=anchor.href.replace(rhash,"");locationUrl=location.href.replace(rhash,"");// Decoding may throw an error if the URL isn't UTF-8 (#9518)
	try{anchorUrl=decodeURIComponent(anchorUrl);}catch(error){}try{locationUrl=decodeURIComponent(locationUrl);}catch(error){}return anchor.hash.length>1&&anchorUrl===locationUrl;};}(),_create:function _create(){var that=this,options=this.options;this.running=false;this._addClass("ui-tabs","ui-widget ui-widget-content");this._toggleClass("ui-tabs-collapsible",null,options.collapsible);this._processTabs();options.active=this._initialActive();// Take disabling tabs via class attribute from HTML
	// into account and update option properly.
	if($.isArray(options.disabled)){options.disabled=$.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"),function(li){return that.tabs.index(li);}))).sort();}// Check for length avoids error when initializing empty list
	if(this.options.active!==false&&this.anchors.length){this.active=this._findActive(options.active);}else{this.active=$();}this._refresh();if(this.active.length){this.load(options.active);}},_initialActive:function _initialActive(){var active=this.options.active,collapsible=this.options.collapsible,locationHash=location.hash.substring(1);if(active===null){// check the fragment identifier in the URL
	if(locationHash){this.tabs.each(function(i,tab){if($(tab).attr("aria-controls")===locationHash){active=i;return false;}});}// Check for a tab marked active via a class
	if(active===null){active=this.tabs.index(this.tabs.filter(".ui-tabs-active"));}// No active tab, set to false
	if(active===null||active===-1){active=this.tabs.length?0:false;}}// Handle numbers: negative, out of range
	if(active!==false){active=this.tabs.index(this.tabs.eq(active));if(active===-1){active=collapsible?false:0;}}// Don't allow collapsible: false and active: false
	if(!collapsible&&active===false&&this.anchors.length){active=0;}return active;},_getCreateEventData:function _getCreateEventData(){return{tab:this.active,panel:!this.active.length?$():this._getPanelForTab(this.active)};},_tabKeydown:function _tabKeydown(event){var focusedTab=$($.ui.safeActiveElement(this.document[0])).closest("li"),selectedIndex=this.tabs.index(focusedTab),goingForward=true;if(this._handlePageNav(event)){return;}switch(event.keyCode){case $.ui.keyCode.RIGHT:case $.ui.keyCode.DOWN:selectedIndex++;break;case $.ui.keyCode.UP:case $.ui.keyCode.LEFT:goingForward=false;selectedIndex--;break;case $.ui.keyCode.END:selectedIndex=this.anchors.length-1;break;case $.ui.keyCode.HOME:selectedIndex=0;break;case $.ui.keyCode.SPACE:// Activate only, no collapsing
	event.preventDefault();clearTimeout(this.activating);this._activate(selectedIndex);return;case $.ui.keyCode.ENTER:// Toggle (cancel delayed activation, allow collapsing)
	event.preventDefault();clearTimeout(this.activating);// Determine if we should collapse or activate
	this._activate(selectedIndex===this.options.active?false:selectedIndex);return;default:return;}// Focus the appropriate tab, based on which key was pressed
	event.preventDefault();clearTimeout(this.activating);selectedIndex=this._focusNextTab(selectedIndex,goingForward);// Navigating with control/command key will prevent automatic activation
	if(!event.ctrlKey&&!event.metaKey){// Update aria-selected immediately so that AT think the tab is already selected.
	// Otherwise AT may confuse the user by stating that they need to activate the tab,
	// but the tab will already be activated by the time the announcement finishes.
	focusedTab.attr("aria-selected","false");this.tabs.eq(selectedIndex).attr("aria-selected","true");this.activating=this._delay(function(){this.option("active",selectedIndex);},this.delay);}},_panelKeydown:function _panelKeydown(event){if(this._handlePageNav(event)){return;}// Ctrl+up moves focus to the current tab
	if(event.ctrlKey&&event.keyCode===$.ui.keyCode.UP){event.preventDefault();this.active.trigger("focus");}},// Alt+page up/down moves focus to the previous/next tab (and activates)
	_handlePageNav:function _handlePageNav(event){if(event.altKey&&event.keyCode===$.ui.keyCode.PAGE_UP){this._activate(this._focusNextTab(this.options.active-1,false));return true;}if(event.altKey&&event.keyCode===$.ui.keyCode.PAGE_DOWN){this._activate(this._focusNextTab(this.options.active+1,true));return true;}},_findNextTab:function _findNextTab(index,goingForward){var lastTabIndex=this.tabs.length-1;function constrain(){if(index>lastTabIndex){index=0;}if(index<0){index=lastTabIndex;}return index;}while($.inArray(constrain(),this.options.disabled)!==-1){index=goingForward?index+1:index-1;}return index;},_focusNextTab:function _focusNextTab(index,goingForward){index=this._findNextTab(index,goingForward);this.tabs.eq(index).trigger("focus");return index;},_setOption:function _setOption(key,value){if(key==="active"){// _activate() will handle invalid values and update this.options
	this._activate(value);return;}this._super(key,value);if(key==="collapsible"){this._toggleClass("ui-tabs-collapsible",null,value);// Setting collapsible: false while collapsed; open first panel
	if(!value&&this.options.active===false){this._activate(0);}}if(key==="event"){this._setupEvents(value);}if(key==="heightStyle"){this._setupHeightStyle(value);}},_sanitizeSelector:function _sanitizeSelector(hash){return hash?hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):"";},refresh:function refresh(){var options=this.options,lis=this.tablist.children(":has(a[href])");// Get disabled tabs from class attribute from HTML
	// this will get converted to a boolean if needed in _refresh()
	options.disabled=$.map(lis.filter(".ui-state-disabled"),function(tab){return lis.index(tab);});this._processTabs();// Was collapsed or no tabs
	if(options.active===false||!this.anchors.length){options.active=false;this.active=$();// was active, but active tab is gone
	}else if(this.active.length&&!$.contains(this.tablist[0],this.active[0])){// all remaining tabs are disabled
	if(this.tabs.length===options.disabled.length){options.active=false;this.active=$();// activate previous tab
	}else{this._activate(this._findNextTab(Math.max(0,options.active-1),false));}// was active, active tab still exists
	}else{// make sure active index is correct
	options.active=this.tabs.index(this.active);}this._refresh();},_refresh:function _refresh(){this._setOptionDisabled(this.options.disabled);this._setupEvents(this.options.event);this._setupHeightStyle(this.options.heightStyle);this.tabs.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1});this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-hidden":"true"});// Make sure one tab is in the tab order
	if(!this.active.length){this.tabs.eq(0).attr("tabIndex",0);}else{this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0});this._addClass(this.active,"ui-tabs-active","ui-state-active");this._getPanelForTab(this.active).show().attr({"aria-hidden":"false"});}},_processTabs:function _processTabs(){var that=this,prevTabs=this.tabs,prevAnchors=this.anchors,prevPanels=this.panels;this.tablist=this._getList().attr("role","tablist");this._addClass(this.tablist,"ui-tabs-nav","ui-helper-reset ui-helper-clearfix ui-widget-header");// Prevent users from focusing disabled tabs via click
	this.tablist.on("mousedown"+this.eventNamespace,"> li",function(event){if($(this).is(".ui-state-disabled")){event.preventDefault();}})// Support: IE <9
	// Preventing the default action in mousedown doesn't prevent IE
	// from focusing the element, so if the anchor gets focused, blur.
	// We don't have to worry about focusing the previously focused
	// element since clicking on a non-focusable element should focus
	// the body anyway.
	.on("focus"+this.eventNamespace,".ui-tabs-anchor",function(){if($(this).closest("li").is(".ui-state-disabled")){this.blur();}});this.tabs=this.tablist.find("> li:has(a[href])").attr({role:"tab",tabIndex:-1});this._addClass(this.tabs,"ui-tabs-tab","ui-state-default");this.anchors=this.tabs.map(function(){return $("a",this)[0];}).attr({role:"presentation",tabIndex:-1});this._addClass(this.anchors,"ui-tabs-anchor");this.panels=$();this.anchors.each(function(i,anchor){var selector,panel,panelId,anchorId=$(anchor).uniqueId().attr("id"),tab=$(anchor).closest("li"),originalAriaControls=tab.attr("aria-controls");// Inline tab
	if(that._isLocal(anchor)){selector=anchor.hash;panelId=selector.substring(1);panel=that.element.find(that._sanitizeSelector(selector));// remote tab
	}else{// If the tab doesn't already have aria-controls,
	// generate an id by using a throw-away element
	panelId=tab.attr("aria-controls")||$({}).uniqueId()[0].id;selector="#"+panelId;panel=that.element.find(selector);if(!panel.length){panel=that._createPanel(panelId);panel.insertAfter(that.panels[i-1]||that.tablist);}panel.attr("aria-live","polite");}if(panel.length){that.panels=that.panels.add(panel);}if(originalAriaControls){tab.data("ui-tabs-aria-controls",originalAriaControls);}tab.attr({"aria-controls":panelId,"aria-labelledby":anchorId});panel.attr("aria-labelledby",anchorId);});this.panels.attr("role","tabpanel");this._addClass(this.panels,"ui-tabs-panel","ui-widget-content");// Avoid memory leaks (#10056)
	if(prevTabs){this._off(prevTabs.not(this.tabs));this._off(prevAnchors.not(this.anchors));this._off(prevPanels.not(this.panels));}},// Allow overriding how to find the list for rare usage scenarios (#7715)
	_getList:function _getList(){return this.tablist||this.element.find("ol, ul").eq(0);},_createPanel:function _createPanel(id){return $("<div>").attr("id",id).data("ui-tabs-destroy",true);},_setOptionDisabled:function _setOptionDisabled(disabled){var currentItem,li,i;if($.isArray(disabled)){if(!disabled.length){disabled=false;}else if(disabled.length===this.anchors.length){disabled=true;}}// Disable tabs
	for(i=0;li=this.tabs[i];i++){currentItem=$(li);if(disabled===true||$.inArray(i,disabled)!==-1){currentItem.attr("aria-disabled","true");this._addClass(currentItem,null,"ui-state-disabled");}else{currentItem.removeAttr("aria-disabled");this._removeClass(currentItem,null,"ui-state-disabled");}}this.options.disabled=disabled;this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,disabled===true);},_setupEvents:function _setupEvents(event){var events={};if(event){$.each(event.split(" "),function(index,eventName){events[eventName]="_eventHandler";});}this._off(this.anchors.add(this.tabs).add(this.panels));// Always prevent the default action, even when disabled
	this._on(true,this.anchors,{click:function click(event){event.preventDefault();}});this._on(this.anchors,events);this._on(this.tabs,{keydown:"_tabKeydown"});this._on(this.panels,{keydown:"_panelKeydown"});this._focusable(this.tabs);this._hoverable(this.tabs);},_setupHeightStyle:function _setupHeightStyle(heightStyle){var maxHeight,parent=this.element.parent();if(heightStyle==="fill"){maxHeight=parent.height();maxHeight-=this.element.outerHeight()-this.element.height();this.element.siblings(":visible").each(function(){var elem=$(this),position=elem.css("position");if(position==="absolute"||position==="fixed"){return;}maxHeight-=elem.outerHeight(true);});this.element.children().not(this.panels).each(function(){maxHeight-=$(this).outerHeight(true);});this.panels.each(function(){$(this).height(Math.max(0,maxHeight-$(this).innerHeight()+$(this).height()));}).css("overflow","auto");}else if(heightStyle==="auto"){maxHeight=0;this.panels.each(function(){maxHeight=Math.max(maxHeight,$(this).height("").height());}).height(maxHeight);}},_eventHandler:function _eventHandler(event){var options=this.options,active=this.active,anchor=$(event.currentTarget),tab=anchor.closest("li"),clickedIsActive=tab[0]===active[0],collapsing=clickedIsActive&&options.collapsible,toShow=collapsing?$():this._getPanelForTab(tab),toHide=!active.length?$():this._getPanelForTab(active),eventData={oldTab:active,oldPanel:toHide,newTab:collapsing?$():tab,newPanel:toShow};event.preventDefault();if(tab.hasClass("ui-state-disabled")||// tab is already loading
	tab.hasClass("ui-tabs-loading")||// can't switch durning an animation
	this.running||// click on active header, but not collapsible
	clickedIsActive&&!options.collapsible||// allow canceling activation
	this._trigger("beforeActivate",event,eventData)===false){return;}options.active=collapsing?false:this.tabs.index(tab);this.active=clickedIsActive?$():tab;if(this.xhr){this.xhr.abort();}if(!toHide.length&&!toShow.length){$.error("jQuery UI Tabs: Mismatching fragment identifier.");}if(toShow.length){this.load(this.tabs.index(tab),event);}this._toggle(event,eventData);},// Handles show/hide for selecting tabs
	_toggle:function _toggle(event,eventData){var that=this,toShow=eventData.newPanel,toHide=eventData.oldPanel;this.running=true;function complete(){that.running=false;that._trigger("activate",event,eventData);}function show(){that._addClass(eventData.newTab.closest("li"),"ui-tabs-active","ui-state-active");if(toShow.length&&that.options.show){that._show(toShow,that.options.show,complete);}else{toShow.show();complete();}}// Start out by hiding, then showing, then completing
	if(toHide.length&&this.options.hide){this._hide(toHide,this.options.hide,function(){that._removeClass(eventData.oldTab.closest("li"),"ui-tabs-active","ui-state-active");show();});}else{this._removeClass(eventData.oldTab.closest("li"),"ui-tabs-active","ui-state-active");toHide.hide();show();}toHide.attr("aria-hidden","true");eventData.oldTab.attr({"aria-selected":"false","aria-expanded":"false"});// If we're switching tabs, remove the old tab from the tab order.
	// If we're opening from collapsed state, remove the previous tab from the tab order.
	// If we're collapsing, then keep the collapsing tab in the tab order.
	if(toShow.length&&toHide.length){eventData.oldTab.attr("tabIndex",-1);}else if(toShow.length){this.tabs.filter(function(){return $(this).attr("tabIndex")===0;}).attr("tabIndex",-1);}toShow.attr("aria-hidden","false");eventData.newTab.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0});},_activate:function _activate(index){var anchor,active=this._findActive(index);// Trying to activate the already active panel
	if(active[0]===this.active[0]){return;}// Trying to collapse, simulate a click on the current active header
	if(!active.length){active=this.active;}anchor=active.find(".ui-tabs-anchor")[0];this._eventHandler({target:anchor,currentTarget:anchor,preventDefault:$.noop});},_findActive:function _findActive(index){return index===false?$():this.tabs.eq(index);},_getIndex:function _getIndex(index){// meta-function to give users option to provide a href string instead of a numerical index.
	if(typeof index==="string"){index=this.anchors.index(this.anchors.filter("[href$='"+$.ui.escapeSelector(index)+"']"));}return index;},_destroy:function _destroy(){if(this.xhr){this.xhr.abort();}this.tablist.removeAttr("role").off(this.eventNamespace);this.anchors.removeAttr("role tabIndex").removeUniqueId();this.tabs.add(this.panels).each(function(){if($.data(this,"ui-tabs-destroy")){$(this).remove();}else{$(this).removeAttr("role tabIndex "+"aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded");}});this.tabs.each(function(){var li=$(this),prev=li.data("ui-tabs-aria-controls");if(prev){li.attr("aria-controls",prev).removeData("ui-tabs-aria-controls");}else{li.removeAttr("aria-controls");}});this.panels.show();if(this.options.heightStyle!=="content"){this.panels.css("height","");}},enable:function enable(index){var disabled=this.options.disabled;if(disabled===false){return;}if(index===undefined){disabled=false;}else{index=this._getIndex(index);if($.isArray(disabled)){disabled=$.map(disabled,function(num){return num!==index?num:null;});}else{disabled=$.map(this.tabs,function(li,num){return num!==index?num:null;});}}this._setOptionDisabled(disabled);},disable:function disable(index){var disabled=this.options.disabled;if(disabled===true){return;}if(index===undefined){disabled=true;}else{index=this._getIndex(index);if($.inArray(index,disabled)!==-1){return;}if($.isArray(disabled)){disabled=$.merge([index],disabled).sort();}else{disabled=[index];}}this._setOptionDisabled(disabled);},load:function load(index,event){index=this._getIndex(index);var that=this,tab=this.tabs.eq(index),anchor=tab.find(".ui-tabs-anchor"),panel=this._getPanelForTab(tab),eventData={tab:tab,panel:panel},complete=function complete(jqXHR,status){if(status==="abort"){that.panels.stop(false,true);}that._removeClass(tab,"ui-tabs-loading");panel.removeAttr("aria-busy");if(jqXHR===that.xhr){delete that.xhr;}};// Not remote
	if(this._isLocal(anchor[0])){return;}this.xhr=$.ajax(this._ajaxSettings(anchor,event,eventData));// Support: jQuery <1.8
	// jQuery <1.8 returns false if the request is canceled in beforeSend,
	// but as of 1.8, $.ajax() always returns a jqXHR object.
	if(this.xhr&&this.xhr.statusText!=="canceled"){this._addClass(tab,"ui-tabs-loading");panel.attr("aria-busy","true");this.xhr.done(function(response,status,jqXHR){// support: jQuery <1.8
	// http://bugs.jquery.com/ticket/11778
	setTimeout(function(){panel.html(response);that._trigger("load",event,eventData);complete(jqXHR,status);},1);}).fail(function(jqXHR,status){// support: jQuery <1.8
	// http://bugs.jquery.com/ticket/11778
	setTimeout(function(){complete(jqXHR,status);},1);});}},_ajaxSettings:function _ajaxSettings(anchor,event,eventData){var that=this;return{// Support: IE <11 only
	// Strip any hash that exists to prevent errors with the Ajax request
	url:anchor.attr("href").replace(/#.*$/,""),beforeSend:function beforeSend(jqXHR,settings){return that._trigger("beforeLoad",event,$.extend({jqXHR:jqXHR,ajaxSettings:settings},eventData));}};},_getPanelForTab:function _getPanelForTab(tab){var id=$(tab).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+id));}});// DEPRECATED
	// TODO: Switch return back to widget declaration at top of file when this is removed
	if($.uiBackCompat!==false){// Backcompat for ui-tab class (now ui-tabs-tab)
	$.widget("ui.tabs",$.ui.tabs,{_processTabs:function _processTabs(){this._superApply(arguments);this._addClass(this.tabs,"ui-tab");}});}var widgetsTabs=$.ui.tabs;/*!
	 * jQuery UI Tooltip 1.12.1
	 * http://jqueryui.com
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *///>>label: Tooltip
	//>>group: Widgets
	//>>description: Shows additional information for any element on hover or focus.
	//>>docs: http://api.jqueryui.com/tooltip/
	//>>demos: http://jqueryui.com/tooltip/
	//>>css.structure: ../../themes/base/core.css
	//>>css.structure: ../../themes/base/tooltip.css
	//>>css.theme: ../../themes/base/theme.css
	$.widget("ui.tooltip",{version:"1.12.1",options:{classes:{"ui-tooltip":"ui-corner-all ui-widget-shadow"},content:function content(){// support: IE<9, Opera in jQuery <1.7
	// .text() can't accept undefined, so coerce to a string
	var title=$(this).attr("title")||"";// Escape title, since we're going from an attribute to raw HTML
	return $("<a>").text(title).html();},hide:true,// Disabled elements have inconsistent behavior across browsers (#8661)
	items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:true,track:false,// Callbacks
	close:null,open:null},_addDescribedBy:function _addDescribedBy(elem,id){var describedby=(elem.attr("aria-describedby")||"").split(/\s+/);describedby.push(id);elem.data("ui-tooltip-id",id).attr("aria-describedby",$.trim(describedby.join(" ")));},_removeDescribedBy:function _removeDescribedBy(elem){var id=elem.data("ui-tooltip-id"),describedby=(elem.attr("aria-describedby")||"").split(/\s+/),index=$.inArray(id,describedby);if(index!==-1){describedby.splice(index,1);}elem.removeData("ui-tooltip-id");describedby=$.trim(describedby.join(" "));if(describedby){elem.attr("aria-describedby",describedby);}else{elem.removeAttr("aria-describedby");}},_create:function _create(){this._on({mouseover:"open",focusin:"open"});// IDs of generated tooltips, needed for destroy
	this.tooltips={};// IDs of parent tooltips where we removed the title attribute
	this.parents={};// Append the aria-live region so tooltips announce correctly
	this.liveRegion=$("<div>").attr({role:"log","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body);this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible");this.disabledTitles=$([]);},_setOption:function _setOption(key,value){var that=this;this._super(key,value);if(key==="content"){$.each(this.tooltips,function(id,tooltipData){that._updateContent(tooltipData.element);});}},_setOptionDisabled:function _setOptionDisabled(value){this[value?"_disable":"_enable"]();},_disable:function _disable(){var that=this;// Close open tooltips
	$.each(this.tooltips,function(id,tooltipData){var event=$.Event("blur");event.target=event.currentTarget=tooltipData.element[0];that.close(event,true);});// Remove title attributes to prevent native tooltips
	this.disabledTitles=this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function(){var element=$(this);if(element.is("[title]")){return element.data("ui-tooltip-title",element.attr("title")).removeAttr("title");}}));},_enable:function _enable(){// restore title attributes
	this.disabledTitles.each(function(){var element=$(this);if(element.data("ui-tooltip-title")){element.attr("title",element.data("ui-tooltip-title"));}});this.disabledTitles=$([]);},open:function open(event){var that=this,target=$(event?event.target:this.element)// we need closest here due to mouseover bubbling,
	// but always pointing at the same event target
	.closest(this.options.items);// No element to show a tooltip for or the tooltip is already open
	if(!target.length||target.data("ui-tooltip-id")){return;}if(target.attr("title")){target.data("ui-tooltip-title",target.attr("title"));}target.data("ui-tooltip-open",true);// Kill parent tooltips, custom or native, for hover
	if(event&&event.type==="mouseover"){target.parents().each(function(){var parent=$(this),blurEvent;if(parent.data("ui-tooltip-open")){blurEvent=$.Event("blur");blurEvent.target=blurEvent.currentTarget=this;that.close(blurEvent,true);}if(parent.attr("title")){parent.uniqueId();that.parents[this.id]={element:this,title:parent.attr("title")};parent.attr("title","");}});}this._registerCloseHandlers(event,target);this._updateContent(target,event);},_updateContent:function _updateContent(target,event){var content,contentOption=this.options.content,that=this,eventType=event?event.type:null;if(typeof contentOption==="string"||contentOption.nodeType||contentOption.jquery){return this._open(event,target,contentOption);}content=contentOption.call(target[0],function(response){// IE may instantly serve a cached response for ajax requests
	// delay this call to _open so the other call to _open runs first
	that._delay(function(){// Ignore async response if tooltip was closed already
	if(!target.data("ui-tooltip-open")){return;}// JQuery creates a special event for focusin when it doesn't
	// exist natively. To improve performance, the native event
	// object is reused and the type is changed. Therefore, we can't
	// rely on the type being correct after the event finished
	// bubbling, so we set it back to the previous value. (#8740)
	if(event){event.type=eventType;}this._open(event,target,response);});});if(content){this._open(event,target,content);}},_open:function _open(event,target,content){var tooltipData,tooltip,delayedShow,a11yContent,positionOption=$.extend({},this.options.position);if(!content){return;}// Content can be updated multiple times. If the tooltip already
	// exists, then just update the content and bail.
	tooltipData=this._find(target);if(tooltipData){tooltipData.tooltip.find(".ui-tooltip-content").html(content);return;}// If we have a title, clear it to prevent the native tooltip
	// we have to check first to avoid defining a title if none exists
	// (we don't want to cause an element to start matching [title])
	//
	// We use removeAttr only for key events, to allow IE to export the correct
	// accessible attributes. For mouse events, set to empty string to avoid
	// native tooltip showing up (happens only when removing inside mouseover).
	if(target.is("[title]")){if(event&&event.type==="mouseover"){target.attr("title","");}else{target.removeAttr("title");}}tooltipData=this._tooltip(target);tooltip=tooltipData.tooltip;this._addDescribedBy(target,tooltip.attr("id"));tooltip.find(".ui-tooltip-content").html(content);// Support: Voiceover on OS X, JAWS on IE <= 9
	// JAWS announces deletions even when aria-relevant="additions"
	// Voiceover will sometimes re-read the entire log region's contents from the beginning
	this.liveRegion.children().hide();a11yContent=$("<div>").html(tooltip.find(".ui-tooltip-content").html());a11yContent.removeAttr("name").find("[name]").removeAttr("name");a11yContent.removeAttr("id").find("[id]").removeAttr("id");a11yContent.appendTo(this.liveRegion);function position(event){positionOption.of=event;if(tooltip.is(":hidden")){return;}tooltip.position(positionOption);}if(this.options.track&&event&&/^mouse/.test(event.type)){this._on(this.document,{mousemove:position});// trigger once to override element-relative positioning
	position(event);}else{tooltip.position($.extend({of:target},this.options.position));}tooltip.hide();this._show(tooltip,this.options.show);// Handle tracking tooltips that are shown with a delay (#8644). As soon
	// as the tooltip is visible, position the tooltip using the most recent
	// event.
	// Adds the check to add the timers only when both delay and track options are set (#14682)
	if(this.options.track&&this.options.show&&this.options.show.delay){delayedShow=this.delayedShow=setInterval(function(){if(tooltip.is(":visible")){position(positionOption.of);clearInterval(delayedShow);}},$.fx.interval);}this._trigger("open",event,{tooltip:tooltip});},_registerCloseHandlers:function _registerCloseHandlers(event,target){var events={keyup:function keyup(event){if(event.keyCode===$.ui.keyCode.ESCAPE){var fakeEvent=$.Event(event);fakeEvent.currentTarget=target[0];this.close(fakeEvent,true);}}};// Only bind remove handler for delegated targets. Non-delegated
	// tooltips will handle this in destroy.
	if(target[0]!==this.element[0]){events.remove=function(){this._removeTooltip(this._find(target).tooltip);};}if(!event||event.type==="mouseover"){events.mouseleave="close";}if(!event||event.type==="focusin"){events.focusout="close";}this._on(true,target,events);},close:function close(event){var tooltip,that=this,target=$(event?event.currentTarget:this.element),tooltipData=this._find(target);// The tooltip may already be closed
	if(!tooltipData){// We set ui-tooltip-open immediately upon open (in open()), but only set the
	// additional data once there's actually content to show (in _open()). So even if the
	// tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in
	// the period between open() and _open().
	target.removeData("ui-tooltip-open");return;}tooltip=tooltipData.tooltip;// Disabling closes the tooltip, so we need to track when we're closing
	// to avoid an infinite loop in case the tooltip becomes disabled on close
	if(tooltipData.closing){return;}// Clear the interval for delayed tracking tooltips
	clearInterval(this.delayedShow);// Only set title if we had one before (see comment in _open())
	// If the title attribute has changed since open(), don't restore
	if(target.data("ui-tooltip-title")&&!target.attr("title")){target.attr("title",target.data("ui-tooltip-title"));}this._removeDescribedBy(target);tooltipData.hiding=true;tooltip.stop(true);this._hide(tooltip,this.options.hide,function(){that._removeTooltip($(this));});target.removeData("ui-tooltip-open");this._off(target,"mouseleave focusout keyup");// Remove 'remove' binding only on delegated targets
	if(target[0]!==this.element[0]){this._off(target,"remove");}this._off(this.document,"mousemove");if(event&&event.type==="mouseleave"){$.each(this.parents,function(id,parent){$(parent.element).attr("title",parent.title);delete that.parents[id];});}tooltipData.closing=true;this._trigger("close",event,{tooltip:tooltip});if(!tooltipData.hiding){tooltipData.closing=false;}},_tooltip:function _tooltip(element){var tooltip=$("<div>").attr("role","tooltip"),content=$("<div>").appendTo(tooltip),id=tooltip.uniqueId().attr("id");this._addClass(content,"ui-tooltip-content");this._addClass(tooltip,"ui-tooltip","ui-widget ui-widget-content");tooltip.appendTo(this._appendTo(element));return this.tooltips[id]={element:element,tooltip:tooltip};},_find:function _find(target){var id=target.data("ui-tooltip-id");return id?this.tooltips[id]:null;},_removeTooltip:function _removeTooltip(tooltip){tooltip.remove();delete this.tooltips[tooltip.attr("id")];},_appendTo:function _appendTo(target){var element=target.closest(".ui-front, dialog");if(!element.length){element=this.document[0].body;}return element;},_destroy:function _destroy(){var that=this;// Close open tooltips
	$.each(this.tooltips,function(id,tooltipData){// Delegate to close method to handle common cleanup
	var event=$.Event("blur"),element=tooltipData.element;event.target=event.currentTarget=element[0];that.close(event,true);// Remove immediately; destroying an open tooltip doesn't use the
	// hide animation
	$("#"+id).remove();// Restore the title
	if(element.data("ui-tooltip-title")){// If the title attribute has changed since open(), don't restore
	if(!element.attr("title")){element.attr("title",element.data("ui-tooltip-title"));}element.removeData("ui-tooltip-title");}});this.liveRegion.remove();}});// DEPRECATED
	// TODO: Switch return back to widget declaration at top of file when this is removed
	if($.uiBackCompat!==false){// Backcompat for tooltipClass option
	$.widget("ui.tooltip",$.ui.tooltip,{options:{tooltipClass:null},_tooltip:function _tooltip(){var tooltipData=this._superApply(arguments);if(this.options.tooltipClass){tooltipData.tooltip.addClass(this.options.tooltipClass);}return tooltipData;}});}var widgetsTooltip=$.ui.tooltip;});

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive("xbitLeaderboard", ['$rootScope', '$http', '$timeout', function ($rootScope, $http, $timeout) {
			return {
				restrict: 'E',
				scope: {
					lb: '=vals'
				},
				templateUrl: 'partials/xbitleaderboard',
				link: function link(scope, element, attributes) {

					var rowHeightFactor = 20;

					var leaderboardScroll = $('#xbitleaderBoardScroll');

					leaderboardScroll.css('position', 'relative');

					self.tm = 0;

					self.scollpixelcount = 0;

					function animation() {
						self.tm = self.tm + 0.1;
						if (self.tm > 3) {

							self.scollpixelcount = self.scollpixelcount + 1;
						}
						if (self.scollpixelcount > scope.lb.length * rowHeightFactor) {
							self.tm = 0;
							self.scollpixelcount = 0;
						}

						leaderboardScroll.css('top', '-' + self.scollpixelcount + 'px');
					}

					var cancelRefresh;
					self.animateStuff = function () {
						cancelRefresh = $timeout(function myFunction() {
							animation();
							cancelRefresh = $timeout(self.animateStuff, 1000 / 30);
						}, 1000 / 30);
					};

					scope.$on('$destroy', function (e) {
						console.log("YESSS ANIMATION DESTROYED !! NO MEMORY LEAD HOPEFULLY");
						$timeout.cancel(cancelRefresh);
					});

					self.animateStuff();

					$('#xBitleaderBoardTab').click(function () {
						self.tm = 0;
						self.scollpixelcount = 0;
					});
				}
			};
		}]);
	};

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive("xnumLeaderboard", ['$rootScope', '$http', '$timeout', function ($rootScope, $http, $timeout) {
			return {
				restrict: 'E',
				scope: {
					lb: '=vals'
				},
				templateUrl: 'partials/xnumleaderboard',
				link: function link(scope, element, attributes) {

					var rowHeightFactor = 20;

					var leaderboardScroll = $('#xnumleaderBoardScroll');

					leaderboardScroll.css('position', 'relative');

					self.tm = 0;

					self.scollpixelcount = 0;

					function animation() {
						self.tm = self.tm + 0.1;
						if (self.tm > 3) {

							self.scollpixelcount = self.scollpixelcount + 1;
						}
						if (self.scollpixelcount > scope.lb.length * rowHeightFactor) {
							self.tm = 0;
							self.scollpixelcount = 0;
						}

						leaderboardScroll.css('top', '-' + self.scollpixelcount + 'px');
					}

					var cancelRefresh;
					self.animateStuff = function () {
						cancelRefresh = $timeout(function myFunction() {
							animation();
							cancelRefresh = $timeout(self.animateStuff, 1000 / 30);
						}, 1000 / 30);
					};

					scope.$on('$destroy', function (e) {
						console.log("YESSS ANIMATION DESTROYED !! NO MEMORY LEAD HOPEFULLY");
						$timeout.cancel(cancelRefresh);
					});

					self.animateStuff();

					$('#xNumleaderBoardTab').click(function () {
						self.tm = 0;
						self.scollpixelcount = 0;
					});
				}
			};
		}]);
	};

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('advRud', ['$window', '$state', '$http', 'Global', 'User', function ($window, $state, $http, Global, User) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/advrud';
			directiveObj.scope = {
				adv: '=adv',
				index: '@',
				getlistpromise: '&'
			};

			directiveObj.link = function ($scope, $element, $attrs) {

				console.log('Scope in AdvRud');
				console.log($scope.adv);

				$scope.updateaspect = function (adv, aspect) {
					console.log('AdvId: ' + adv.id, '-  Aspect ' + aspect);
					adv.aspect = aspect;
					$http.put('api/v1/adv/' + adv.id, { aspect: aspect }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update aspect in Adv');
						console.log(resp);
					}, function (err) {
						console.log('Update aspect in Adv ERR');
						console.log(err);
					});
				};

				$scope.updateHasLink = function (id, hasLink) {

					console.log('AdvId: ' + id, '-  Has Link ' + hasLink);
					$http.put('api/v1/adv/' + id, { hasLink: hasLink }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update haslink in Adv');
						console.log(resp);
					}, function (err) {
						console.log('Update haslink in Adv ERR');
						console.log(err);
					});
				};

				$scope.updateAvailability = function (id, avail) {

					console.log('AdvId: ' + id, '-  avail ' + avail);
					$http.put('api/v1/adv/' + id, { available: avail }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update available in Adv');
						console.log(resp);
					}, function (err) {
						console.log('Update availablein Adv ERR');
						console.log(err);
					});
				};

				$scope.updateInterest = function (id, interest) {

					console.log('AdvId: ' + id, '-  interest ' + interest);
					$http.put('api/v1/adv/' + id, { sponsorshipInterest: interest }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update interest in Adv');
						console.log(resp);
					}, function (err) {
						console.log('Update interest in Adv ERR');
						console.log(err);
					});
				};

				$scope.updateLink = function (id, link) {

					console.log('AdvId: ' + id, '-  Link' + link);

					$http.put('api/v1/adv/' + id, { link: link }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update link in Adv');
						console.log(resp);
					}, function (err) {
						console.log('Update link in Adv ERR');
						console.log(err);
					});
				};

				$scope.updateUserId = function (id, userId) {

					console.log('AdvId: ' + id, '-  UserId' + userId);
					$http.put('api/v1/adv/' + id, { userId: userId }, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Update User Id in Adv');
						console.log(resp);
					}, function (err) {
						console.log('Update User Id in Adv ERR');
						console.log(err);
					});
				};

				$scope.deleteAdv = function (id) {

					$http.delete('api/v1/adv/' + id, { headers: { auth: User.token } }).then(function (resp) {
						console.log('Delete');
						console.log(resp);
						$scope.getlistpromise({ page: 0 });
					}, function (err) {
						console.log('Error Deleting Adv');
						console.log(err);
					});
				};
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
	  'use strict';

	  angular.module('Directives').directive("pagControl", ['$window', '$timeout', function ($window, $timeout) {
	    return {
	      restrict: 'E',
	      templateUrl: 'partials/pagcontrol',
	      scope: {
	        getlistpromise: "&",
	        currentpage: "=",
	        numpagespromise: "&"
	      },
	      link: function link(scope, element, attributes) {

	        console.log('PAGINATION DIRECTIVE LINK FUNCTION');
	        console.log(scope);
	        console.log(scope.getlistpromise);
	        console.log(scope.currentpage);
	        console.log(scope.numpagespromise);

	        scope.getNumberOfPages = function () {
	          scope.numpagespromise().then(function (resp) {
	            scope.numpages = resp;
	          }, function (err) {});
	        };

	        scope.getNumberOfPages();

	        scope.activePag = function (current) {
	          if (current === scope.currentpage) {
	            return { 'active': 1 };
	          } else {
	            return { 'active': 0 };
	          }
	        };

	        scope.setPageAngGetListing = function (page) {
	          console.log('PagContrl Set Page');
	          console.log(page);
	          $window.scroll(0, 120);

	          scope.currentpage = page;

	          console.log('Local p');
	          console.log(scope.sp);
	          console.log('parent p');
	          console.log(scope.$parent);
	          scope.getlistpromise({ page: page });
	        };
	      }
	    };
	  }]);
	};

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('advsPurchaseAdmin', ['$window', '$state', '$http', 'Global', 'User', '$q', function ($window, $state, $http, Global, User, $q) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/advpurchaseadmin';
			directiveObj.controllerAs = 'advpurchaseAdminCtrl';

			directiveObj.controller = function () {
				var self = this;

				self.numPerPage = 10;
				self.currentpage = 0;
				self.numPages = function () {
					return $q(function (resolve, reject) {

						$http.get('api/v1/advPurchaseCount', { headers: { auth: User.token } }).then(function (resp) {
							console.log('Get advCount Resp');
							console.log(resp);

							resolve(Math.ceil(resp.data / self.numPerPage));
						}, function (err) {

							console.log('admin get advs ERR');
							console.log(err);
							reject(err);
						});
					});
				};

				self.list = [];

				self.getList = function (page) {
					self.currentpage = page;
					$http.get('api/v1/advPurchase?limit=' + self.numPerPage + '&page=' + self.currentpage, { headers: { auth: User.token } }).then(function (resp) {
						console.log('admin get advs');
						console.log(resp);
						self.list = resp.data;
					}, function (err) {

						console.log('admin get advs ERR');
						console.log(err);
					});
				};

				self.getList(self.currentpage);
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('merchSalesAdmin', ['$window', '$state', '$http', 'Global', 'User', '$q', function ($window, $state, $http, Global, User, $q) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/merchsaleadmin';
			directiveObj.controllerAs = 'merchSaleAdminCtrl';

			directiveObj.controller = function () {
				var self = this;

				self.numPerPage = 10;
				self.currentpage = 0;
				self.numPages = function () {
					return $q(function (resolve, reject) {

						$http.get('api/v1/merchSaleCount', { headers: { auth: User.token } }).then(function (resp) {
							console.log('Get advCount Resp');
							console.log(resp);

							resolve(Math.ceil(resp.data / self.numPerPage));
						}, function (err) {

							console.log('admin get advs ERR');
							console.log(err);
							reject(err);
						});
					});
				};

				self.list = [];

				self.getList = function (page) {
					self.currentpage = page;
					$http.get('api/v1/merchSale?limit=' + self.numPerPage + '&page=' + self.currentpage, { headers: { auth: User.token } }).then(function (resp) {
						console.log('admin get advs');
						console.log(resp);
						self.list = resp.data;
					}, function (err) {

						console.log('admin get advs ERR');
						console.log(err);
					});
				};

				self.getList(self.currentpage);
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('coinBaseNotificationsPanelAdmin', ['$window', '$state', '$http', 'Global', 'User', '$q', function ($window, $state, $http, Global, User, $q) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/coinbasenotificationspaneladmin';
			directiveObj.controllerAs = 'coinBaseNotificationsPanelAdminCtrl';

			directiveObj.controller = function () {
				var self = this;

				self.numPerPage = 10;
				self.currentpage = 0;
				self.numPages = function () {
					return $q(function (resolve, reject) {

						$http.get('api/v1/coinbaseNotificationCount', { headers: { auth: User.token } }).then(function (resp) {
							console.log('Get advCount Resp');
							console.log(resp);

							resolve(Math.ceil(resp.data / self.numPerPage));
						}, function (err) {

							console.log('admin get advs ERR');
							console.log(err);
							reject(err);
						});
					});
				};

				self.list = [];

				self.getList = function (page) {
					self.currentpage = page;
					$http.get('api/v1/coinbaseNotification?limit=' + self.numPerPage + '&page=' + self.currentpage, { headers: { auth: User.token } }).then(function (resp) {
						console.log('admin get advs');
						console.log(resp);
						self.list = resp.data;
					}, function (err) {

						console.log('admin get advs ERR');
						console.log(err);
					});
				};

				self.getList(self.currentpage);
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('payoutrequestPanelAdmin', ['$window', '$state', '$http', 'Global', 'User', '$q', function ($window, $state, $http, Global, User, $q) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/payoutrequestadmin';
			directiveObj.controllerAs = 'payoutrequestCtrl';

			directiveObj.controller = function () {
				var self = this;

				self.numPerPage = 10;
				self.currentpage = 0;
				self.numPages = function () {
					return $q(function (resolve, reject) {

						$http.get('api/v1/xnumRequestPayment', { headers: { auth: User.token } }).then(function (resp) {
							console.log('Get advCount Resp');
							console.log(resp);

							resolve(Math.ceil(resp.data / self.numPerPage));
						}, function (err) {

							console.log('admin get advs ERR');
							console.log(err);
							reject(err);
						});
					});
				};

				self.list = [];

				self.getList = function (page) {
					self.currentpage = page;
					$http.get('api/v1/xnumRequestPayment?limit=' + self.numPerPage + '&page=' + self.currentpage, { headers: { auth: User.token } }).then(function (resp) {
						console.log('admin get advs');
						console.log(resp);
						self.list = resp.data;
					}, function (err) {

						console.log('admin get advs ERR');
						console.log(err);
					});
				};

				self.getList(self.currentpage);
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('dashConqurings', ['$window', '$state', '$http', 'Global', 'User', function ($window, $state, $http, Global, User) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/dashconqurings';
			directiveObj.scope = {
				conqurData: '='
			};

			directiveObj.link = function ($scope, $element, $attrs) {

				console.log('Scope in DashConqurings');
				console.log($scope.conqurData);
				$scope.allMapsWithStartAndFinish = {};

				console.log('Num Concurs');
				console.log($scope.conqurData.count);

				$scope.loading = true;

				var peakConqurCount = 0;

				function mergeMappArray() {

					for (var i = 0; i < $scope.allMapsWithStartAndFinish.count; i++) {
						$scope.allMapsWithStartAndFinish.rows[i].userFinished = false;
						for (var j = 0; j < $scope.conqurData.count; j++) {

							if ($scope.conqurData.rows[j].howmanytimes > peakConqurCount) {
								peakConqurCount = $scope.conqurData.rows[j].howmanytimes;
							}

							if ($scope.conqurData.rows[j].id === $scope.allMapsWithStartAndFinish.rows[i].id) {
								$scope.allMapsWithStartAndFinish.rows[i].userFinished = true;
								$scope.allMapsWithStartAndFinish.rows[i].howmanytimes = $scope.conqurData.rows[j].howmanytimes;
							}
						}
					}
				}

				$http.get('api/v1/mapStartFinish', { headers: { auth: User.token } }).then(function (resp) {
					console.log('MapStart Finish Resp');
					console.log(resp);
					$scope.allMapsWithStartAndFinish = resp.data;

					mergeMappArray();
				}, function (err) {
					console.log('MapStart Finish ERR');
					console.log(err);
				});

				$scope.$watch('conqurData', function (newValue, oldValue) {

					console.log('Onchange watch');
					console.log('Num Concurs');
					console.log(newValue, oldValue);
					if (newValue.count > 0) {
						if ($scope.loading) {
							$scope.loading = false;
							//do something
						}
					}
				});

				$scope.dashMapBoxClass = function (id) {
					for (var j = 0; j < $scope.conqurData.count; j++) {

						if ($scope.conqurData.rows[j].id === id) {
							return { 'defeated': true };
						}
					}

					return { 'undefeated': true };
				};

				$scope.dashMapBoxConqurPercent = function (id) {
					for (var j = 0; j < $scope.conqurData.count; j++) {

						if ($scope.conqurData.rows[j].id === id) {

							return $scope.conqurData.rows[j].houmanytimes / peakConqurCount * 100 + '%';
						}
					}

					return '0%';
				};
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);

	module.exports.directive = function () {
		'use strict';

		angular.module('Directives').directive('dashAdvs', ['$window', '$state', '$http', 'Global', 'User', function ($window, $state, $http, Global, User) {
			var directiveObj = {};

			directiveObj.restrict = 'E';
			directiveObj.templateUrl = 'partials/dashadvertisements';
			directiveObj.scope = {
				advData: '='
			};

			directiveObj.link = function ($scope, $element, $attrs) {

				console.log('Scope in DashAdvs');
				console.log($scope.advData);

				$scope.loading = true;

				$scope.$watch('advData', function (newValue, oldValue) {

					console.log('Onchange watch');
					console.log('Num Concurs');
					console.log(newValue, oldValue);
					if (newValue.count > 0) {
						if ($scope.loading) {
							$scope.loading = false;
							//do something
						}
					}
				});
			};

			return directiveObj;
		}]);
	};

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);
	var $ = __webpack_require__(3);
	__webpack_require__(120);

	module.exports.filter = function () {
	    'use strict';

	    angular.module('Filters').filter('makeRange', function () {
	        return function (input) {
	            var lowBound, highBound;
	            switch (input.length) {
	                case 1:
	                    lowBound = 0;
	                    highBound = parseInt(input[0]) - 1;
	                    break;
	                case 2:
	                    lowBound = parseInt(input[0]);
	                    highBound = parseInt(input[1]);
	                    break;
	                default:
	                    return input;
	            }
	            var result = [];
	            for (var i = lowBound; i <= highBound; i++) {
	                result.push(i);
	            }return result;
	        };
	    });
	};

/***/ },
/* 132 */
/***/ function(module, exports) {

	'use strict';

	//angular app router
	module.exports.frontroutes = function (app) {

	  app.config(['$stateProvider', '$locationProvider', function ($stateProvider, $locationProvider, $q) {

	    $stateProvider.state('index', {
	      name: 'index',
	      url: '/',
	      templateUrl: 'partials/index',
	      controller: 'IndexController',
	      controllerAs: 'indexCtrl'
	    }).state('play', {
	      name: 'play',
	      url: '/play?level',
	      templateUrl: 'partials/play',
	      controller: 'XonumiaController',
	      controllerAs: 'playCtrl',
	      resolve: {
	        loggedin: function loggedin(User, $q, $state) {
	          console.log('User RESOLVE');
	          var deferred = $q.defer();
	          console.log(User);
	          User.isTokenValid().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {
	            $state.go('login');
	            deferred.reject();
	          });

	          return deferred.promise;
	        }
	      }
	    }).state('store', {
	      name: 'store',
	      url: '/store',
	      templateUrl: 'partials/store',
	      controller: 'StoreController',
	      controllerAs: 'storeCtrl',
	      resolve: {
	        loggedin: function loggedin(User, $q, $state) {
	          console.log('User RESOLVE');
	          var deferred = $q.defer();
	          console.log(User);
	          User.isTokenValid().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {
	            $state.go('login');
	            deferred.reject();
	          });

	          return deferred.promise;
	        }
	      }
	    }).state('product', {
	      name: 'product',
	      url: '/product/:id',
	      templateUrl: 'partials/product',
	      controller: 'ProductController',
	      controllerAs: 'productCtrl',
	      resolve: {
	        loggedin: function loggedin(User, $q, $state) {
	          console.log('User RESOLVE');
	          var deferred = $q.defer();
	          console.log(User);
	          User.isTokenValid().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {
	            $state.go('login');
	            deferred.reject();
	          });

	          return deferred.promise;
	        }
	      }
	    }).state('checkout', {
	      name: 'checkout',
	      url: '/checkout',
	      templateUrl: 'partials/checkout',
	      controller: 'CheckoutController',
	      controllerAs: 'checkoutCtrl',
	      resolve: {
	        loggedin: function loggedin(User, $q, $state) {
	          console.log('User RESOLVE');
	          var deferred = $q.defer();
	          console.log(User);
	          User.isTokenValid().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {
	            $state.go('login');
	            deferred.reject();
	          });

	          return deferred.promise;
	        }
	      }
	    }).state('advconfig', {
	      name: 'advconfig',
	      url: '/advconfig',
	      templateUrl: 'partials/advconfig',
	      controller: 'AdvConfigController',
	      controllerAs: 'advconfigCtrl',
	      resolve: {
	        loggedin: function loggedin(User, $q, $state) {
	          console.log('User RESOLVE');
	          var deferred = $q.defer();
	          console.log(User);
	          User.isTokenValid().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {
	            $state.go('login');
	            deferred.reject();
	          });

	          return deferred.promise;
	        }
	      }
	    }).state('cart', {
	      name: 'cart',
	      url: '/cart',
	      templateUrl: 'partials/cart',
	      controller: 'CartController',
	      controllerAs: 'cartCtrl',
	      resolve: {
	        loggedin: function loggedin(User, $q, $state) {
	          console.log('User RESOLVE');
	          var deferred = $q.defer();
	          console.log(User);
	          User.isTokenValid().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {
	            $state.go('login');
	            deferred.reject();
	          });

	          return deferred.promise;
	        }
	      }
	    }).state('paymentsuccess', {
	      name: 'paymentsuccess',
	      url: '/paymentsuccess',
	      templateUrl: 'partials/paymentsuccess',
	      controller: 'PaymentsuccessController',
	      controllerAs: 'paymentsuccessCtrl',
	      resolve: {
	        loggedin: function loggedin(User, $q, $state) {
	          console.log('User RESOLVE');
	          var deferred = $q.defer();
	          console.log(User);
	          User.isTokenValid().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {
	            $state.go('login');
	            deferred.reject();
	          });

	          return deferred.promise;
	        }
	      }
	    }).state('paymentfail', {
	      name: 'paymentfail',
	      url: '/paymentfail',
	      templateUrl: 'partials/paymentfail',
	      controller: 'PaymentfailController',
	      controllerAs: 'paymentfailCtrl',
	      resolve: {
	        loggedin: function loggedin(User, $q, $state) {
	          console.log('User RESOLVE');
	          var deferred = $q.defer();
	          console.log(User);
	          User.isTokenValid().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {
	            $state.go('login');
	            deferred.reject();
	          });

	          return deferred.promise;
	        }
	      }
	    }).state('login', {
	      name: 'login',
	      url: '/login',
	      templateUrl: 'partials/login',
	      controller: 'LoginController',
	      controllerAs: 'loginCtrl'
	    }).state('signup', {
	      name: 'signup',
	      url: '/signup',
	      templateUrl: 'partials/signup',
	      controller: 'SignupController'
	    }).state('resetpw', {
	      name: 'resetpw',
	      url: '/resetpw',
	      templateUrl: 'partials/resetpw',
	      controller: 'RecoverPWController',
	      controllerAs: 'recoverpwCtrl'
	    }).state('changepassword', {
	      name: 'changepassword',
	      url: '/changepassword/:username/code/:code',
	      templateUrl: 'partials/changepassword',
	      controller: 'ChangePWController',
	      controllerAs: 'changepwCtrl'
	    }).state('terms', {
	      name: 'terms',
	      url: '/terms',
	      templateUrl: 'partials/terms'
	    }).state('returns', {
	      name: 'returns',
	      url: '/returns',
	      templateUrl: 'partials/returns'
	    }).state('privacy', {
	      name: 'privacy',
	      url: '/privacy',
	      templateUrl: 'partials/privacy'
	    }).state('paypalpaymentsuccess', {
	      name: 'paypalpaymentsuccess',
	      url: '/paypalpaymentsuccess',
	      templateUrl: 'partials/paypalpaymentsuccess',
	      controller: 'PayPalSucessController',
	      controllerAs: 'paypaySuccessCtrl'
	    }).state('dashboard', {
	      name: 'dashboard',
	      url: '/dashboard',
	      templateUrl: 'partials/dashboard',
	      controller: 'DashController',
	      controllerAs: 'dashCtrl',
	      resolve: {
	        loggedin: function loggedin(User, $q, $state) {
	          console.log('User RESOLVE');
	          var deferred = $q.defer();
	          console.log(User);
	          User.isTokenValid().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {
	            $state.go('login');
	            deferred.reject();
	          });

	          return deferred.promise;
	        }
	      }
	    }).state('build', {
	      name: 'build',
	      url: '/build',
	      templateUrl: 'partials/build',
	      controller: 'BuilderController',
	      controllerAs: 'bldCtrl',
	      resolve: {
	        loggedin: function loggedin(User, $q, $state) {
	          console.log('User RESOLVE');
	          var deferred = $q.defer();
	          console.log(User);
	          User.isTokenValid().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {
	            $state.go('login');
	            deferred.reject();
	          });

	          return deferred.promise;
	        }
	      }
	    }).state('discover', {
	      name: 'discover',
	      url: '/discover',
	      templateUrl: 'partials/discover',
	      controller: 'DiscoverController',
	      controllerAs: 'discoverCtrl',
	      resolve: {
	        loggedin: function loggedin(User, $q, $state) {
	          console.log('User RESOLVE');
	          var deferred = $q.defer();
	          console.log(User);
	          User.isTokenValid().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {

	            deferred.resolve(err);
	          });

	          return deferred.promise;
	        }
	      }
	    }).state('contact', {
	      name: 'contact',
	      url: '/contact',
	      templateUrl: 'partials/contact',
	      controller: 'ContactController',
	      controllerAs: 'contactCtrl',
	      resolve: {
	        loggedin: function loggedin(User, $q, $state) {
	          console.log('User RESOLVE');
	          var deferred = $q.defer();
	          console.log(User);
	          User.isTokenValid().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {

	            deferred.resolve(err);
	          });

	          return deferred.promise;
	        }
	      }
	    }).state('admin', {
	      name: 'admin',
	      url: '/admin',
	      templateUrl: 'partials/admin',
	      controller: 'AdminController',
	      controllerAs: 'adminCtrl',
	      resolve: {
	        admin: function admin(Auth, $q, $state) {
	          console.log('AUTH RESOLVE');
	          var deferred = $q.defer();
	          console.log(Auth);
	          Auth.adminAuthenticate().then(function (res) {
	            console.log('Resolve Admin');
	            console.log('res', res);

	            deferred.resolve(res);
	          }, function (err) {
	            $state.go('login');
	            deferred.reject();
	          });

	          return deferred.promise;
	        }
	      }
	    });

	    $locationProvider.html5Mode(true);
	  }]);
	};

/***/ }
/******/ ]);